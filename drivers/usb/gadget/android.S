	.cpu cortex-a15
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 2
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.file	"android.c"
	.text
	.syntax divided


	.arm
	.syntax unified
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup_complete, %function
composite_setup_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	composite_setup_complete, .-composite_setup_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_disable, %function
f_midi_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	bx	r3
	.fnend
	.size	f_midi_disable, .-f_midi_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_snd_free, %function
f_midi_snd_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_snd_free, .-f_midi_snd_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_open, %function
f_midi_in_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	ldr	r2, [r2, #200]
	add	r3, r2, r3, lsl #2
	ldr	r1, [r3, #224]
	cmp	r1, #0
	beq	.L8
	str	r0, [r3, #96]
	ldr	r3, [r0, #12]
	mov	r1, #0
	mov	r0, r1
	add	r3, r3, #56
	ldr	r3, [r2, r3, lsl #2]
	strb	r1, [r3, #9]
	bx	lr
.L8:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	f_midi_in_open, .-f_midi_in_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_open, %function
f_midi_out_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	mov	r2, r0
	ldr	r1, [r0, #28]
	cmp	r3, #15
	ldr	r1, [r1, #200]
	addle	r3, r3, #40
	movle	r0, #0
	mvngt	r0, #21
	strle	r2, [r1, r3, lsl #2]
	bx	lr
	.fnend
	.size	f_midi_out_open, .-f_midi_out_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_write_complete, %function
diag_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	ldr	r2, [r5, #128]
	sub	ip, r2, #1
	str	ip, [r5, #128]
	ldr	ip, [r1, #44]
	cmp	ip, #0
	bne	.L13
	ldrh	r0, [r0, #20]
	ldr	ip, [r1, #4]
	cmp	ip, r0
	bcc	.L13
	udiv	lr, ip, r0
	mls	r0, r0, lr, ip
	cmp	r0, #0
	bne	.L13
	str	r2, [r5, #128]
	ldr	ip, [r1, #48]
	mov	r2, #32
	str	r0, [r1, #4]
	str	ip, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #80]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L13:
	add	r7, r5, #100
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #96]
	add	ip, r4, #36
	add	r3, r5, #92
	mov	r1, r0
	str	ip, [r5, #96]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	ip, [r2]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L26
.L14:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L12
	ldr	lr, [r3, #12]
	cmp	lr, #0
	beq	.L12
	mov	r2, r6
	ldr	r0, [r3, #16]
	mov	r1, #2
	ldrd	r4, [sp]
	mov	r3, lr
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L26:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L14
.L12:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_write_complete, .-diag_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_read_complete, %function
diag_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #100
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	add	r2, r5, #36
	add	ip, r4, #84
	mov	r1, r0
	mov	r0, r7
	str	r2, [r4, #88]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #116]
	ldr	r3, [r4, #124]
	cmp	r1, #0
	add	r3, r3, #1
	str	r3, [r4, #124]
	beq	.L27
	ldr	r3, [r1, #12]
	cmp	r3, #0
	beq	.L27
	mov	r2, r6
	ldr	r0, [r1, #16]
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L27:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_read_complete, .-diag_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_disable, %function
diag_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #100
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r0, r5
	mov	r6, #0
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r6, [r4, #104]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	cmp	r3, r6
	beq	.L37
	ldr	r5, [r3, #12]
	cmp	r5, r6
	beq	.L37
	mov	r2, r6
	mov	r1, #1
	ldr	r0, [r3, #16]
	blx	r5
.L37:
	ldr	r0, [r4, #80]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #80]
	str	r5, [r3]
	ldr	r0, [r4, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #76]
	str	r5, [r3]
	ldr	r3, [r4, #116]
	cmp	r3, r5
	strne	r5, [r3, #20]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	diag_function_disable, .-diag_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_reset_stats, %function
debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	lr, #:lower16:.LANCHOR0
	movt	lr, #:upper16:.LANCHOR0
	ldr	r3, [lr]
	cmp	lr, r3
	beq	.L51
	sub	r3, r3, #4
	mov	ip, #0
.L50:
	ldr	r1, [r3, #20]
	cmp	r1, #0
	beq	.L52
	str	ip, [r1, #120]
	str	ip, [r1, #124]
	str	ip, [r1, #128]
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L50
.L51:
	mov	r0, r2
	ldr	pc, [sp], #4
.L52:
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L50
	mov	r0, r2
	ldr	pc, [sp], #4
	.fnend
	.size	debug_reset_stats, .-debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_open, %function
debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_open, .-debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_write_complete, %function
qdss_ctrl_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r2, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r2, #0
	bne	.L58
	ldrh	r2, [r0, #20]
	ldr	r0, [r1, #4]
	cmp	r0, r2
	bcc	.L58
	udiv	ip, r0, r2
	mls	r2, r2, ip, r0
	cmp	r2, #0
	bne	.L58
	ldr	r0, [r1, #48]
	str	r2, [r1, #4]
	mov	r2, #32
	str	r0, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #96]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L58:
	add	r7, r5, #180
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #144]
	add	ip, r4, #36
	add	r3, r5, #140
	mov	r1, r0
	str	ip, [r5, #144]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	ip, [r2]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L65
.L59:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #116]
	cmp	lr, #0
	beq	.L57
	mov	r2, r6
	mov	ip, lr
	ldr	r0, [r5, #120]
	ldrd	r4, [sp]
	mov	r3, #0
	mov	r1, #4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L65:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L59
.L57:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_write_complete, .-qdss_ctrl_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_read_complete, %function
qdss_ctrl_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r5, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r5, #180
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #136]
	add	r2, r4, #36
	add	ip, r5, #132
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #136]
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #116]
	cmp	lr, #0
	beq	.L66
	mov	r2, r6
	mov	ip, lr
	ldr	r0, [r5, #120]
	ldrd	r4, [sp]
	mov	r3, #0
	mov	r1, #2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L66:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_read_complete, .-qdss_ctrl_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_txcommand_complete, %function
rmnet_txcommand_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #156
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #432]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #432]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
	.fnend
	.size	rmnet_txcommand_complete, .-rmnet_txcommand_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_reset_stats, %function
rmnet_smd_debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #156
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #416]
	str	r3, [r4, #420]
	str	r3, [r4, #424]
	str	r3, [r4, #428]
	str	r3, [r4, #432]
	str	r3, [r4, #436]
	str	r3, [r4, #440]
	str	r3, [r4, #444]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_debug_reset_stats, .-rmnet_smd_debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_open, %function
rmnet_smd_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #348]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	rmnet_smd_debug_open, .-rmnet_smd_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_modem_cbits_w, %function
rmnet_sdio_set_modem_cbits_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-12]
	bx	lr
	.fnend
	.size	rmnet_sdio_set_modem_cbits_w, .-rmnet_sdio_set_modem_cbits_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disconnect_work, %function
rmnet_sdio_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	rmnet_sdio_disconnect_work, .-rmnet_sdio_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_reset_stats, %function
rmnet_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #316]
	str	r1, [r3, #344]
	str	r1, [r3, #348]
	str	r1, [r3, #352]
	str	r1, [r3, #356]
	str	r1, [r3, #360]
	bx	lr
	.fnend
	.size	rmnet_sdio_reset_stats, .-rmnet_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_suspend, %function
rmnet_mux_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #360]
	cmp	r3, #0
	beq	.L77
	ldr	r3, [r0, #340]
	bic	r3, r3, #2
	str	r3, [r0, #340]
.L77:
	bx	lr
	.fnend
	.size	rmnet_mux_suspend, .-rmnet_mux_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_unbind, %function
rmnet_mux_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	str	r3, [r1, #164]
	bx	lr
	.fnend
	.size	rmnet_mux_unbind, .-rmnet_mux_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_reset_stats, %function
rmnet_mux_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #300]
	str	r1, [r3, #388]
	str	r1, [r3, #392]
	str	r1, [r3, #396]
	str	r1, [r3, #400]
	str	r1, [r3, #404]
	str	r1, [r3, #408]
	str	r1, [r3, #412]
	bx	lr
	.fnend
	.size	rmnet_mux_reset_stats, .-rmnet_mux_reset_stats
	.align	2
	.global	usb_rmnet_mux_ctrl_release
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_release, %function
usb_rmnet_mux_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	mov	r4, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r1, #124]
	add	r6, r7, #356
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r7, #344]
	mov	r0, r6
	str	r4, [r5, #124]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	usb_rmnet_mux_ctrl_release, .-usb_rmnet_mux_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_disable, %function
audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldrb	r3, [r0, #144]	@ zero_extendqisi2
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	strb	r3, [r4, #144]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_disable, .-audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_close, %function
audio_pcm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #8]
	add	r5, r6, #100
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #84]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_close, .-audio_pcm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_prepare, %function
audio_pcm_prepare:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	ip, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r1, [ip, #208]
	mov	lr, #0
	mov	r0, lr
	ldr	r4, [r1, #68]
	ldr	r2, [r1, #88]
	ldr	r3, [r1, #208]
	mul	r2, r2, r4
	str	lr, [r3, #120]
	lsr	r2, r2, #3
	str	r2, [r3, #116]
	ldr	r2, [r1, #548]
	str	r2, [r3, #104]
	ldr	ip, [ip, #208]
	ldr	lr, [ip, #76]
	ldr	r1, [ip, #88]
	str	r2, [r3, #112]
	mul	r1, r1, lr
	add	r2, r2, r1, lsr #3
	str	r2, [r3, #108]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_prepare, .-audio_pcm_prepare
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_pointer, %function
audio_pcm_pointer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #208]
	ldr	r0, [r3, #88]
	ldr	r2, [r3, #208]
	ldr	r1, [r2, #104]
	ldr	r3, [r2, #112]
	sub	r3, r3, r1
	lsl	r3, r3, #3
	udiv	r0, r3, r0
	bx	lr
	.fnend
	.size	audio_pcm_pointer, .-audio_pcm_pointer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_ioctl, %function
ffs_ep0_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #26496
	ldr	r0, [r0, #124]
	cmp	r1, ip
	beq	.L114
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L108
	ldr	r3, [r0]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L108
	bx	r3
.L114:
	mov	r3, r2
	ldr	r2, [r0, #136]
	cmp	r2, #0
	beq	.L105
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, [r2, #8]
	ldr	lr, [r2, #44]
	ldrh	r1, [r1, #182]
	cmp	r1, #0
	beq	.L106
	uxtb	r2, r3
	mov	ip, lr
.L104:
	mov	r3, ip
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L103
	cmp	r0, r2
	beq	.L115
.L103:
	subs	r1, r1, #1
	mov	ip, r3
	bne	.L104
.L106:
	mvn	r0, #32
	ldr	pc, [sp], #4
.L115:
	sub	r0, ip, lr
	asr	r0, r0, #1
	ldr	pc, [sp], #4
.L108:
	mvn	r0, #24
	bx	lr
.L105:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	ffs_ep0_ioctl, .-ffs_ep0_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_room, %function
gs_write_room:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r1, r0
	cmp	r3, #0
	moveq	r5, r3
	beq	.L117
	ldr	r2, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
.L117:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_write_room, .-gs_write_room
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_chars_in_buffer, %function
gs_chars_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #92]
	mov	r1, r0
	mov	r0, r4
	ldr	ip, [r4, #100]
	ldr	r3, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, ip
	udiv	r4, r3, r2
	mls	r4, r2, r4, r3
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gs_chars_in_buffer, .-gs_chars_in_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_break_ctl, %function
gs_break_ctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r5, [r0, #280]
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r5, #4]
	cmp	r0, #0
	moveq	r4, r0
	beq	.L123
	ldr	r4, [r0, #116]
	cmp	r4, #0
	beq	.L123
	mov	r1, r6
	blx	r4
	mov	r4, r0
.L123:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_break_ctl, .-gs_break_ctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmget, %function
gs_tiocmget:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #280]
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r5, [r6, #4]
	cmp	r5, #0
	mvneq	r4, #18
	beq	.L128
	ldr	r4, [r5, #100]
	cmp	r4, #0
	beq	.L129
	mov	r0, r5
	blx	r4
	cmp	r0, #0
	movne	r4, #2
	moveq	r4, #0
.L129:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L131
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	orrne	r4, r4, #4
.L131:
	ldrh	r3, [r5, #96]
	tst	r3, #64
	orrne	r4, r4, #64
	tst	r3, #128
	orrne	r4, r4, #128
.L128:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_tiocmget, .-gs_tiocmget
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmset, %function
gs_tiocmset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	mov	r8, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #280]
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r4, [r7, #4]
	cmp	r4, #0
	beq	.L154
	ands	r5, r8, #128
	and	r9, r6, #128
	beq	.L151
	ldr	r5, [r4, #124]
	cmp	r5, #0
	beq	.L152
	ldrh	r3, [r4, #96]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #128
	strh	r3, [r4, #96]	@ movhi
	blx	r5
	mov	r5, r0
.L151:
	cmp	r9, #0
	beq	.L152
	ldr	r2, [r4, #124]
	cmp	r2, #0
	beq	.L152
	ldrh	r3, [r4, #96]
	mov	r1, #0
	mov	r0, r4
	bic	r3, r3, #128
	strh	r3, [r4, #96]	@ movhi
	blx	r2
	mov	r5, r0
.L152:
	tst	r8, #64
	and	r6, r6, #64
	bne	.L176
.L153:
	cmp	r6, #0
	beq	.L150
	ldr	r2, [r4, #120]
	cmp	r2, #0
	beq	.L150
	ldrh	r3, [r4, #96]
	mov	r0, r4
	mov	r1, #0
	bic	r3, r3, #64
	strh	r3, [r4, #96]	@ movhi
	blx	r2
	mov	r5, r0
.L150:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L176:
	ldr	r2, [r4, #120]
	cmp	r2, #0
	beq	.L150
	ldrh	r3, [r4, #96]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #64
	strh	r3, [r4, #96]	@ movhi
	blx	r2
	mov	r5, r0
	b	.L153
.L154:
	mvn	r5, #18
	b	.L150
	.fnend
	.size	gs_tiocmset, .-gs_tiocmset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_write_reset, %function
debug_write_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r4
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	debug_write_reset, .-debug_write_reset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_reset_stats, %function
debug_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L180
	mov	r5, #0
	add	r6, r7, #4
	mov	r9, r5
.L181:
	ldr	r4, [r6, #24]
	add	r5, r5, #1
	add	r6, r6, #108
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #180]
	mov	r0, r8
	str	r9, [r4, #184]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7]
	cmp	r5, r3
	bcc	.L181
.L180:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_sdio_reset_stats, .-debug_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_reset_stats, %function
debug_smd_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #220]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L188
	mov	r5, #0
	add	r6, r7, #224
	mov	r9, r5
.L189:
	ldr	r4, [r6, #24]
	add	r5, r5, #1
	add	r6, r6, #108
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #164]
	mov	r0, r8
	str	r9, [r4, #168]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #220]
	cmp	r5, r3
	bcc	.L189
.L188:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_smd_reset_stats, .-debug_smd_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_wake_cb, %function
gbam_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #16]
	ldr	r3, [r3, #120]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L196
	bx	r3
.L196:
	mvn	r0, #94
	bx	lr
	.fnend
	.size	gbam_wake_cb, .-gbam_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_reset_stats, %function
gbam_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #440]
	cmp	r2, #0
	ble	.L198
	ldr	r4, [r3, #444]
	cmp	r4, #0
	beq	.L198
	add	r5, r4, #4
	add	r6, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #240]
	str	r3, [r4, #244]
	str	r3, [r4, #248]
	str	r3, [r4, #260]
	str	r3, [r4, #264]
	str	r3, [r4, #268]
	str	r3, [r4, #272]
	str	r3, [r4, #276]
	str	r3, [r4, #280]
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L198:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gbam_reset_stats, .-gbam_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_reset_stats, %function
gsmd_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r5, .L212
	strd	r6, [sp, #8]
	mov	r7, #0
	strd	r8, [sp, #16]
	mov	r9, r2
	str	r10, [sp, #24]
	add	r8, r5, #504
	str	lr, [sp, #28]
.L206:
	ldr	r4, [r5]
	add	r5, r5, #84
	cmp	r4, #0
	add	r6, r4, #108
	mov	r0, r6
	beq	.L205
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r7, [r4, #92]
	mov	r0, r6
	str	r7, [r4, #96]
	bl	_raw_spin_unlock_irqrestore
.L205:
	cmp	r5, r8
	bne	.L206
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L213:
	.align	2
.L212:
	.word	.LANCHOR1+528
	.fnend
	.size	gsmd_ctrl_reset_stats, .-gsmd_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_open, %function
rmnet_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #1032]
	str	lr, [sp, #12]
	add	r2, r3, #16
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r0, r5, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L215
	ldr	r0, [r4, #1032]
	str	r0, [r1, #124]
	add	r0, r0, #52
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1032]
	mov	r1, r0
	strb	r5, [r3, #4]
	add	r0, r3, #52
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L214:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L215:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L214
	.fnend
	.size	rmnet_ctrl_open, .-rmnet_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_release, %function
rmnet_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	strb	r5, [r4, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r3, r4, #16
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_ctrl_release, .-rmnet_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_receive, %function
ghsic_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	subs	r4, r0, #0
	str	lr, [sp, #4]
	moveq	r0, r4
	beq	.L220
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L223
	ldr	r0, [r4, #8]
	blx	r3
	ldr	r3, [r4, #100]
	add	r3, r3, #1
	str	r3, [r4, #100]
.L220:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L223:
	mov	r0, r3
	b	.L220
	.fnend
	.size	ghsic_ctrl_receive, .-ghsic_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_status, %function
ghsic_ctrl_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]
	str	r1, [r0, #92]
	cmp	r3, #0
	beq	.L225
	ldr	r2, [r3, #128]
	cmp	r2, #0
	beq	.L225
	mov	r0, r3
	bx	r2
.L225:
	bx	lr
	.fnend
	.size	ghsic_ctrl_status, .-ghsic_ctrl_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_reset_stats, %function
gctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	mov	r10, r2
	ldr	r3, [r9, #1036]
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L234
	mov	r5, #0
	add	r6, r9, #1040
	mov	r8, r5
.L235:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r7, r4, #4
	mov	r0, r7
	beq	.L236
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #96]
	mov	r0, r7
	str	r8, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #104
	str	r8, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #1036]
	cmp	r3, r5
	bhi	.L235
.L234:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L236:
	add	r5, r5, #1
	add	r6, r6, #104
	cmp	r5, r3
	bcc	.L235
	b	.L234
	.fnend
	.size	gctrl_reset_stats, .-gctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_reset_stats, %function
ghsic_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR1
	mov	r10, r2
	strd	r8, [sp, #16]
	movt	fp, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [fp, #1456]
	cmp	r3, #0
	beq	.L243
	ldr	r7, .L251
	mov	r6, #0
	mov	r5, r6
.L244:
	ldr	r4, [r7]
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L245
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r8
	str	r5, [r4, #204]
	add	r6, r6, #1
	add	r7, r7, #104
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r9
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #1456]
	cmp	r3, r6
	bhi	.L244
.L243:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L245:
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r6, r3
	bcc	.L244
	b	.L243
.L252:
	.align	2
.L251:
	.word	.LANCHOR1+1460
	.fnend
	.size	ghsic_data_reset_stats, .-ghsic_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_reset_stats, %function
ghsuart_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #1876]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L254
	ldr	r6, .L262
	mov	r5, #0
	mov	r9, r5
.L255:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r8, r4, #8
	mov	r0, r8
	beq	.L256
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #96]
	mov	r0, r8
	str	r9, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #84
	str	r9, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #1876]
	cmp	r3, r5
	bhi	.L255
.L254:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L256:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L255
	b	.L254
.L263:
	.align	2
.L262:
	.word	.LANCHOR1+1880
	.fnend
	.size	ghsuart_ctrl_reset_stats, .-ghsuart_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_reset_stats, %function
ghsuart_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #2048]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L265
	ldr	r6, .L273
	mov	r5, #0
	mov	r8, r5
.L266:
	ldr	r4, [r6]
	cmp	r4, #0
	add	fp, r4, #104
	add	r9, r4, #72
	mov	r0, fp
	beq	.L267
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #204]
	mov	r0, fp
	str	r8, [r4, #212]
	add	r5, r5, #1
	add	r6, r6, #84
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #208]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #2048]
	cmp	r3, r5
	bhi	.L266
.L265:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L267:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L266
	b	.L265
.L274:
	.align	2
.L273:
	.word	.LANCHOR1+2052
	.fnend
	.size	ghsuart_data_reset_stats, .-ghsuart_data_reset_stats
	.align	2
	.global	gser_get_dtr
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_get_dtr, %function
gser_get_dtr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrh	r0, [r0, #168]
	and	r0, r0, #1
	bx	lr
	.fnend
	.size	gser_get_dtr, .-gser_get_dtr
	.align	2
	.global	gser_get_rts
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_get_rts, %function
gser_get_rts:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrh	r0, [r0, #168]
	ubfx	r0, r0, #1, #1
	bx	lr
	.fnend
	.size	gser_get_rts, .-gser_get_rts
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_open, %function
ccid_bulk_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #2220]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L279
	ldr	r5, [r4, #144]
	cmp	r5, #0
	bne	.L280
	mov	r3, #1
	add	r7, r4, #84
	str	r5, [r4, #140]
	mov	r6, r1
	mov	r0, r7
	str	r3, [r4, #144]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
.L277:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L280:
	mvn	r0, #15
	b	.L277
.L279:
	mvn	r0, #18
	b	.L277
	.fnend
	.size	ccid_bulk_open, .-ccid_bulk_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_release, %function
ccid_bulk_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #144]
	bx	lr
	.fnend
	.size	ccid_bulk_release, .-ccid_bulk_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_open, %function
ccid_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #2220]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L285
	ldr	r5, [r4, #108]
	cmp	r5, #0
	bne	.L286
	mov	r3, #1
	add	r7, r4, #84
	mov	r6, r1
	mov	r0, r7
	str	r3, [r4, #108]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
.L283:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L286:
	mvn	r0, #15
	b	.L283
.L285:
	mvn	r0, #18
	b	.L283
	.fnend
	.size	ccid_ctrl_open, .-ccid_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_release, %function
ccid_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #108]
	bx	lr
	.fnend
	.size	ccid_ctrl_release, .-ccid_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_available, %function
rndis_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #168
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #164]
	ldr	ip, [r1]
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	beq	.L300
.L289:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L300:
	ldr	r2, [r0, #160]
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L289
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L289
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L289
	.fnend
	.size	rndis_response_available, .-rndis_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_complete, %function
rndis_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L301
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L301
	ldr	r3, [r1, #44]
	cmn	r3, #108
	beq	.L306
	cmn	r3, #104
	beq	.L306
	ldr	r3, [r4, #160]
	cmp	r3, r0
	beq	.L324
.L301:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L306:
	mov	r3, #0
	str	r3, [r4, #168]
	b	.L301
.L324:
	add	r5, r4, #168
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L301
	ldr	r0, [r4, #160]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L301
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L301
	.fnend
	.size	rndis_response_complete, .-rndis_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_alt, %function
ecm_qc_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #112]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L327
	ldr	r3, [r0, #80]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L327:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_qc_get_alt, .-ecm_qc_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_get_alt, %function
mbim_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #188]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L330
	ldrb	r3, [r0, #189]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L331
	ldrb	r0, [r0, #190]	@ zero_extendqisi2
	bx	lr
.L330:
	mov	r0, #0
	bx	lr
.L331:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	mbim_get_alt, .-mbim_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_get_alt, %function
ecm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L334
	ldr	r3, [r0, #80]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L334:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_get_alt, .-ecm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_change_mtu, %function
ueth_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1216
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r1, r0
	cmp	r3, #0
	bne	.L337
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L338
	str	r6, [r4, #364]
	mov	r4, r3
.L336:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L337:
	mvn	r4, #15
	b	.L336
.L338:
	mvn	r4, #33
	b	.L336
	.fnend
	.size	ueth_change_mtu, .-ueth_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	prealloc, %function
prealloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L363
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r2, r2, #1
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r0, r3
	sub	r3, r3, #36
	bne	.L342
	b	.L366
.L345:
	cmn	r5, #1
	mov	r2, r5
	beq	.L367
.L342:
	ldr	r3, [r3, #36]
	sub	r5, r2, #1
	cmp	r4, r3
	sub	r3, r3, #36
	bne	.L345
	ldr	r3, [r6, #28]
	cmp	r2, #0
	ldrb	r7, [r3, #2]	@ zero_extendqisi2
	lsr	r7, r7, #7
	beq	.L346
.L350:
	movw	r2, #:lower16:tx_complete
	movw	r3, #:lower16:rx_complete
	cmp	r7, #0
	movt	r2, #:upper16:tx_complete
	movt	r3, #:upper16:rx_complete
	movne	r7, r2
	moveq	r7, r3
	b	.L349
.L347:
	str	r7, [r0, #28]
	ldr	r2, [r4]
	cmp	r5, #0
	mov	r5, r1
	str	r3, [r2, #4]
	str	r2, [r0, #36]
	str	r4, [r0, #40]
	str	r3, [r4]
	beq	.L346
.L349:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	sub	r1, r5, #1
	add	r3, r0, #36
	bne	.L347
	ldr	r3, [r4]
	cmp	r4, r3
	beq	.L341
.L346:
	mov	r0, #0
.L340:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L367:
	mov	r8, #256
	mov	r7, #512
.L344:
	ldr	r5, [r3, #36]
	mov	r1, r3
	mov	r0, r6
	ldr	r2, [r3, #40]
	str	r2, [r5, #4]
	str	r5, [r2]
	str	r8, [r3, #36]
	str	r7, [r3, #40]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r4, r5
	sub	r3, r5, #36
	bne	.L344
	b	.L346
.L366:
	ldr	r3, [r1, #28]
	mov	r5, r2
	ldrb	r7, [r3, #2]	@ zero_extendqisi2
	lsr	r7, r7, #7
	b	.L350
.L341:
	mvn	r0, #11
	b	.L340
.L363:
	mvn	r0, #11
	bx	lr
	.fnend
	.size	prealloc, .-prealloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_qc_change_mtu, %function
ueth_qc_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1216
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r1, r0
	cmp	r3, #0
	bne	.L370
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L371
	str	r6, [r4, #364]
	mov	r4, r3
.L369:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L370:
	mvn	r4, #15
	b	.L369
.L371:
	mvn	r4, #33
	b	.L369
	.fnend
	.size	ueth_qc_change_mtu, .-ueth_qc_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_start_xmit, %function
eth_qc_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	eth_qc_start_xmit, .-eth_qc_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_get_alt, %function
f_audio_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L378
	ldrb	r3, [r3, #17]	@ zero_extendqisi2
	cmp	r3, r1
	ldrbeq	r0, [r0, #241]	@ zero_extendqisi2
	movne	r0, #0
	bx	lr
.L378:
	ldrb	r0, [r0, #240]	@ zero_extendqisi2
	bx	lr
	.fnend
	.size	f_audio_get_alt, .-f_audio_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_disable, %function
f_audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2224]
	bx	lr
	.fnend
	.size	f_audio_disable, .-f_audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_set_cmd, %function
generic_set_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	str	r2, [r0, r1, lsl #2]
	mov	r0, #0
	bx	lr
	.fnend
	.size	generic_set_cmd, .-generic_set_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_get_cmd, %function
generic_get_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	ldr	r0, [r0, r1, lsl #2]
	bx	lr
	.fnend
	.size	generic_get_cmd, .-generic_get_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ep0out_complete, %function
ncm_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	ldr	ip, [r1, #32]
	ldr	r3, [r1, #44]
	str	r2, [r1, #32]
	cmp	r3, r2
	beq	.L386
.L383:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L386:
	ldr	r3, [r1, #4]
	ldr	r2, [r1, #48]
	cmp	r2, r3
	bne	.L383
	ldr	r3, [r1]
	ldr	r3, [r3]	@ unaligned
	cmp	r3, #2048
	bcc	.L383
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #24]
	cmp	r2, r3
	bcc	.L383
	str	r3, [ip, #104]
	bx	lr
	.fnend
	.size	ncm_ep0out_complete, .-ncm_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_get_alt, %function
ncm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L389
	ldr	r3, [r0, #80]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L389:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ncm_get_alt, .-ncm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_unbind_config, %function
audio_source_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	bx	lr
	.fnend
	.size	audio_source_function_unbind_config, .-audio_source_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_bind_config, %function
uasp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	uasp_function_bind_config, .-uasp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_unbind_config, %function
android_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	ip, .L406
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldr	r3, [r3, #2228]
	ldr	r1, [r0, #24]
	cmp	r3, ip
	beq	.L393
	sub	r2, r3, #208
	ldr	r3, [r3, #-200]
	cmp	r1, r3
	bne	.L394
	b	.L393
.L395:
	ldr	r3, [r3, #-200]
	cmp	r1, r3
	beq	.L393
.L394:
	ldr	r3, [r2, #208]
	cmp	r3, ip
	sub	r2, r3, #208
	bne	.L395
.L393:
	ldr	r3, [r1]
	mov	r6, r5
	ldrb	r2, [r3, #386]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r2, #0
	strbne	r2, [r3, #386]
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L392
.L397:
	ldr	r3, [r4]
	mov	r1, r5
	mov	r0, r3
	ldr	r3, [r3, #44]
	cmp	r3, #0
	beq	.L399
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L397
.L392:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L399:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L397
	b	.L392
.L407:
	.align	2
.L406:
	.word	.LANCHOR1+2228
	.fnend
	.size	android_unbind_config, .-android_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_endpoint_complete, %function
audio_set_endpoint_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r1, #32]
	ldr	r4, [r1, #44]
	str	r3, [sp, #4]
	cmp	r4, r3
	bne	.L408
	ldr	r6, [r5, #264]
	cmp	r6, r3
	beq	.L408
	ldm	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy
	ldr	r2, [sp, #4]
	mov	r0, r6
	ldrb	r1, [r5, #260]	@ zero_extendqisi2
	ldr	r3, [r6, #36]
	blx	r3
	str	r4, [r5, #264]
.L408:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_set_endpoint_complete, .-audio_set_endpoint_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_init, %function
ncm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L421
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #6
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L421:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	ncm_function_init, .-ncm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_init, %function
rndis_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L429
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #272
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L429:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	rndis_function_init, .-rndis_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_init, %function
audio_source_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L433
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L436
.L431:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #4]
.L430:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L433:
	mov	r3, #16
	b	.L431
.L436:
	mvn	r0, #11
	b	.L430
	.fnend
	.size	audio_source_function_init, .-audio_source_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_init, %function
midi_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L443
	mov	r4, r0
	mov	r2, #8
	mov	r0, r3
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #4]
	beq	.L441
.L439:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L437:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L443:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #4]
	b	.L439
.L441:
	mvn	r0, #11
	b	.L437
	.fnend
	.size	midi_function_init, .-midi_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alloc_ep_req, %function
midi_alloc_ep_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L444
	mov	r0, r5
	mov	r1, #32
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L450
.L444:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L450:
	ldr	r2, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L444
	.fnend
	.size	midi_alloc_ep_req, .-midi_alloc_ep_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_unbind, %function
ccid_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L452
	ldr	r0, [r1, #12]
	bl	kfree
.L452:
	ldr	r0, [r4, #8]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ccid_function_unbind, .-ccid_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_free_buf, %function
rmnet_smd_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r3, [r0, #416]
	str	r3, [r0, #420]
	str	r3, [r0, #424]
	str	r3, [r0, #428]
	str	r3, [r0, #432]
	str	r3, [r0, #436]
	str	r3, [r0, #440]
	str	r3, [r0, #444]
	ldr	r3, [r7, #132]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L455
	mov	r6, r2
	mov	r9, #256
	mov	r8, #512
	b	.L456
.L463:
	mov	r6, r2
.L456:
	ldr	r1, [r3, #4]
	mov	r5, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r10, [r4, #80]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r6
	mov	r3, r6
	ldr	r2, [r6]
	bne	.L463
.L455:
	mov	r7, r4
	ldr	r3, [r7, #140]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L457
	mov	r6, r2
	mov	r9, #256
	mov	r8, #512
	b	.L458
.L464:
	mov	r6, r2
.L458:
	ldr	r1, [r3, #4]
	mov	r5, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r10, [r4, #84]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r6
	mov	r3, r6
	ldr	r2, [r6]
	bne	.L464
.L457:
	mov	r7, r4
	ldr	r3, [r7, #100]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L459
	mov	r6, r2
	mov	r9, #256
	mov	r8, #512
	b	.L460
.L465:
	mov	r6, r2
.L460:
	ldr	r1, [r3, #4]
	mov	r5, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	cmp	r7, r6
	mov	r3, r6
	ldr	r2, [r6]
	bne	.L465
.L459:
	mov	r7, r4
	ldr	r3, [r7, #108]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L461
	mov	r6, r2
	mov	r9, #256
	mov	r8, #512
	b	.L462
.L466:
	mov	r6, r2
.L462:
	ldr	r1, [r3, #4]
	mov	r5, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	cmp	r7, r6
	mov	r3, r6
	ldr	r2, [r6]
	bne	.L466
.L461:
	ldrd	r4, [r4, #88]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_smd_free_buf, .-rmnet_smd_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_receive, %function
ghsuart_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	moveq	r4, r5
	mov	r6, r1
	str	lr, [sp, #12]
	beq	.L469
	ldr	r3, [r5, #68]
	cmp	r3, #0
	beq	.L471
	ldr	r0, [r5, #12]
	blx	r3
	ldr	r3, [r5, #100]
	mov	r4, r0
	add	r3, r3, #1
	str	r3, [r5, #100]
.L469:
	mov	r0, r6
	bl	kfree
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L471:
	mov	r4, r3
	b	.L469
	.fnend
	.size	ghsuart_ctrl_receive, .-ghsuart_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_cleanup, %function
audio_source_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	audio_source_function_cleanup, .-audio_source_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_cleanup, %function
ncm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_function_cleanup, .-ncm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_function_cleanup, %function
gps_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2240]
	b	kfree
	.fnend
	.size	gps_function_cleanup, .-gps_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_unbind, %function
frmnet_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L481
.L478:
	cmp	r3, #2
	bls	.L479
	ldr	r0, [r4, #12]
	bl	kfree
.L479:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r5, [r4, #128]
	ldr	r6, [r4, #132]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [sp, #8]
	ldr	r0, [r4]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L481:
	mov	r5, r0
	ldr	r0, [r1, #16]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L478
	.fnend
	.size	frmnet_unbind, .-frmnet_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_unbind, %function
gps_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L486
.L483:
	cmp	r3, #2
	bls	.L484
	ldr	r0, [r4, #12]
	bl	kfree
.L484:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r5, [r4, #128]
	ldr	r6, [r4, #132]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [sp, #8]
	ldr	r0, [r4]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L486:
	mov	r5, r0
	ldr	r0, [r1, #16]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L483
	.fnend
	.size	gps_unbind, .-gps_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_rx, %function
gs_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #32
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r1, [r0, #4]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #32]
	ldr	r2, [r0, #40]
	ldr	r5, [r1, #84]
	cmp	r8, r9
	beq	.L488
	ldr	r1, [r0, #8]
	cmp	r1, #0
	beq	.L488
	cmp	r2, #7
	bgt	.L488
	mov	r4, r0
	mov	fp, #256
	mov	r10, #512
	b	.L489
.L490:
	cmp	r7, #0
	ldr	r1, [r4, #32]
	bne	.L500
	ldr	r2, [r4, #40]
	cmp	r8, r1
	mov	r9, r1
	add	r2, r2, #1
	str	r2, [r4, #40]
	beq	.L488
	ldr	r1, [r4, #8]
	cmp	r1, #0
	beq	.L488
	cmp	r2, #7
	bgt	.L488
.L489:
	ldm	r9, {r1, r2}
	mov	r3, #4096
	mov	r0, r4
	sub	r6, r9, #36
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r3, [r9, #-32]
	str	fp, [r9]
	str	r10, [r9, #4]
	bl	_raw_spin_unlock
	ldr	ip, [r5, #8]
	mov	r2, #32
	mov	r1, r6
	mov	r0, r5
	ldr	r7, [ip, #16]
	blx	r7
	mov	r7, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r2, [r4, #4]
	cmp	r2, #0
	bne	.L490
	ldr	r0, [r9, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r2, [r4, #40]
.L488:
	mov	r0, r2
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L500:
	str	r9, [r1, #4]
	stm	r9, {r1, r8}
	ldr	r2, [r4, #40]
	str	r9, [r4, #32]
	b	.L488
	.fnend
	.size	gs_start_rx, .-gs_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_start_rx, %function
rmnet_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #156
	add	r7, r0, #140
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	b	.L502
.L504:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #80]
	mov	r2, #32
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	fp, r0
	bne	.L508
.L502:
	ldr	r4, [r5, #140]
	mov	r1, fp
	mov	r0, r6
	cmp	r7, r4
	bne	.L504
.L503:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L508:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC0
	mov	r2, r10
	movt	r1, #:upper16:.LC0
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r5, #144]
	str	r4, [r5, #144]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L503
	.fnend
	.size	rmnet_smd_start_rx, .-rmnet_smd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_notify_complete, %function
rmnet_smd_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r5, #76]
	cmn	r2, #104
	beq	.L511
	cmp	r2, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L512
	cmn	r2, #108
	beq	.L511
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1
	movt	r1, #:upper16:.LC1
	add	r0, r0, #32
	bl	dev_err
.L512:
	ldr	r3, [r5, #88]
	cmp	r3, r6
	beq	.L533
.L509:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L533:
	add	r6, r5, #164
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L509
	ldr	r0, [r5, #88]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L509
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC2
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L511:
	mov	r3, #0
	str	r3, [r5, #164]
	b	.L509
	.fnend
	.size	rmnet_smd_notify_complete, .-rmnet_smd_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_notify_complete, %function
rmnet_sdio_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #76]
	cmn	r2, #104
	beq	.L536
	cmp	r2, #0
	mov	r5, r1
	beq	.L537
	cmn	r2, #108
	beq	.L536
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	movt	r1, #:upper16:.LC3
	add	r0, r0, #32
	bl	dev_err
.L537:
	ldr	r3, [r4, #312]
	tst	r3, #2
	beq	.L534
	add	r6, r4, #188
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L534
	ldr	r0, [r4, #88]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L558
.L534:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L536:
	mov	r3, #0
	str	r3, [r4, #188]
	b	.L534
.L558:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC4
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_notify_complete, .-rmnet_sdio_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_control_rx_work, %function
rmnet_sdio_control_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #32
	strd	r8, [sp, #16]
	sub	r8, r0, #112
	mov	r9, #512
	strd	r10, [sp, #24]
	mov	r10, #256
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r0, #-136]
	b	.L562
.L565:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	ldr	r3, [r5, #-104]
	sub	r3, r3, #1
	str	r3, [r5, #-104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-4]
	cmn	r3, #19
	bne	.L564
	ldr	r3, [r5, #148]
	add	r3, r3, #1
	str	r3, [r5, #148]
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L562:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-112]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r4, r8
	sub	r7, r4, #8
	bne	.L565
.L560:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L564:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC5
	movt	r1, #:upper16:.LC5
	add	r0, r0, #32
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	dev_err
	.fnend
	.size	rmnet_sdio_control_rx_work, .-rmnet_sdio_control_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_setup, %function
gser_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	ip, #8482
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r1]	@ unaligned
	ldr	lr, [r0, #20]
	ldrh	r2, [r1, #6]	@ unaligned
	rev16	r3, r3
	uxth	r3, r3
	ldr	r6, [lr, #24]
	cmp	r3, ip
	ldr	r4, [r6, #4]
	beq	.L568
	movw	r1, #41249
	cmp	r3, r1
	beq	.L569
	movw	r1, #8480
	cmp	r3, r1
	beq	.L577
.L573:
	mvn	r4, #94
.L566:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L577:
	cmp	r2, #7
	bne	.L573
	ldr	r1, [r6]
	mov	r7, r2
	movw	r3, #:lower16:gser_complete_set_line_coding
	movt	r3, #:upper16:gser_complete_set_line_coding
	ldr	r2, [r1, #4]
	str	r0, [r2]
	str	r3, [r4, #28]
.L571:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r7, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L566
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC6
	mov	r3, r4
	ldrb	r2, [r5, #137]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC6
	add	r0, r0, #32
	bl	dev_err
	b	.L566
.L569:
	cmp	r2, #7
	add	r1, r0, #160
	ldr	r0, [r4]
	movcc	r7, r2
	movcs	r7, #7
	mov	r2, r7
	bl	memcpy
	b	.L571
.L568:
	ldr	r8, [r0, #132]
	ldrh	r2, [r1, #2]	@ unaligned
	cmp	r8, #0
	strh	r2, [r0, #168]	@ movhi
	uxth	r2, r2
	beq	.L574
	ldrb	r1, [r0, #137]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	mov	r7, #0
	movt	r3, #:upper16:.LANCHOR1
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #2
	ldrb	r1, [r3, #2252]	@ zero_extendqisi2
	blx	r8
	b	.L571
.L574:
	mov	r7, r8
	b	.L571
	.fnend
	.size	gser_setup, .-gser_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_setup, %function
acm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	ip, #8482
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r1]	@ unaligned
	ldr	lr, [r0, #20]
	ldrh	r2, [r1, #6]	@ unaligned
	rev16	r3, r3
	uxth	r3, r3
	ldr	r6, [lr, #24]
	cmp	r3, ip
	ldr	r4, [r6, #4]
	beq	.L580
	movw	r1, #41249
	cmp	r3, r1
	beq	.L581
	movw	r1, #8480
	cmp	r3, r1
	beq	.L589
.L585:
	mvn	r4, #94
.L578:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L589:
	cmp	r2, #7
	bne	.L585
	ldr	r1, [r6]
	mov	r7, r2
	movw	r3, #:lower16:acm_complete_set_line_coding
	movt	r3, #:upper16:acm_complete_set_line_coding
	ldr	r2, [r1, #4]
	str	r0, [r2]
	str	r3, [r4, #28]
.L583:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r7, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L578
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC7
	mov	r3, r4
	ldrb	r2, [r5, #138]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC7
	add	r0, r0, #32
	bl	dev_err
	b	.L578
.L581:
	cmp	r2, #7
	add	r1, r0, #160
	ldr	r0, [r4]
	movcc	r7, r2
	movcs	r7, #7
	mov	r2, r7
	bl	memcpy
	b	.L583
.L580:
	ldr	r8, [r0, #132]
	ldrh	r2, [r1, #2]	@ unaligned
	cmp	r8, #0
	strh	r2, [r0, #168]	@ movhi
	uxth	r2, r2
	beq	.L586
	ldrb	r1, [r0, #138]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	mov	r7, #0
	movt	r3, #:upper16:.LANCHOR1
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #2
	ldrb	r1, [r3, #2288]	@ zero_extendqisi2
	blx	r8
	b	.L583
.L586:
	mov	r7, r8
	b	.L583
	.fnend
	.size	acm_setup, .-acm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_setup, %function
ecm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17185
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r1]	@ unaligned
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldr	r5, [ip, #24]
	cmp	r2, r3
	ldrh	ip, [r1, #6]	@ unaligned
	ldr	r3, [r5, #4]
	bne	.L595
	cmp	ip, #0
	bne	.L595
	ldrb	r2, [r0, #140]	@ zero_extendqisi2
	cmp	r2, lr
	bne	.L595
	strh	r6, [r0, #90]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	ip, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	blt	.L598
.L590:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L598:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC8
	str	r6, [sp]
	movt	r1, #:upper16:.LC8
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L590
.L595:
	mvn	r6, #94
	b	.L590
	.fnend
	.size	ecm_setup, .-ecm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setup, %function
ncm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	ip, #8586
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r1]	@ unaligned
	.pad #8
	sub	sp, sp, #8
	ldr	lr, [r0, #20]
	ldrh	r7, [r1, #2]	@ unaligned
	ldrh	r8, [r1, #4]	@ unaligned
	rev16	r3, r3
	ldrh	r2, [r1, #6]	@ unaligned
	uxth	r3, r3
	ldr	r6, [lr, #24]
	uxth	r1, r7
	cmp	r3, ip
	ldr	r5, [r6, #4]
	beq	.L601
	bls	.L639
	movw	ip, #41347
	cmp	r3, ip
	beq	.L606
	bls	.L640
	movw	ip, #41349
	cmp	r3, ip
	beq	.L609
	movw	ip, #41353
	cmp	r3, ip
	bne	.L637
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #1
	orrls	r1, r1, #1
	cmp	r1, #0
	bne	.L637
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L637
	ldrb	r2, [r0, #172]	@ zero_extendqisi2
	mov	r1, #2
	ldr	r3, [r5]
	strh	r2, [r3]	@ unaligned
.L611:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r1, [r5, #4]
	mov	r2, #32
	mov	r1, r5
	bfc	r3, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L599
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC9
	str	r5, [sp]
	movt	r1, #:upper16:.LC9
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L599
.L639:
	movw	ip, #8580
	cmp	r3, ip
	beq	.L603
	movw	ip, #8582
	cmp	r3, ip
	beq	.L604
	movw	r1, #8515
	cmp	r3, r1
	beq	.L641
.L637:
	mvn	r5, #94
.L599:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L604:
	cmp	r1, #0
	cmpeq	r2, #4
	bne	.L637
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L637
	movw	r3, #:lower16:ncm_ep0out_complete
	mov	r1, #4
	str	r0, [r5, #32]
	movt	r3, #:upper16:ncm_ep0out_complete
	str	r3, [r5, #28]
	b	.L611
.L609:
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #3
	orrls	r1, r1, #1
	cmp	r1, #0
	bne	.L637
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L637
	ldr	r2, [r0, #104]
	mov	r1, #4
	ldr	r3, [r5]
	str	r2, [r3]	@ unaligned
	b	.L611
.L640:
	movw	ip, #41344
	cmp	r3, ip
	bne	.L637
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #0
	moveq	r1, #1
	cmp	r1, #0
	bne	.L637
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L637
	cmp	r2, #28
	ldr	r1, .L642
	movcc	r7, r2
	movcs	r7, #28
	ldr	r0, [r5]
	mov	r2, r7
	bl	memcpy
	mov	r1, r7
	b	.L611
.L603:
	cmp	r2, #0
	bne	.L637
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L637
	cmp	r1, #0
	beq	.L612
	cmp	r1, #1
	bne	.L637
	ldr	r3, .L642+4
	mov	r1, r2
	str	r3, [r0, #168]
	b	.L611
.L641:
	cmp	r2, #0
	bne	.L637
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L637
	mov	r1, r2
	strh	r7, [r0, #90]	@ movhi
	b	.L611
.L606:
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #1
	orrls	r1, r1, #1
	cmp	r1, #0
	bne	.L637
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L637
	ldr	r3, [r0, #168]
	mov	r1, #2
	ldr	r0, .L642+8
	ldr	r2, [r5]
	subs	r3, r3, r0
	movne	r3, #1
	strh	r3, [r2]	@ unaligned
	b	.L611
.L601:
	cmp	r2, #0
	bne	.L637
	ldrb	r3, [r0, #140]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L637
	cmp	r1, #0
	beq	.L614
	cmp	r1, #1
	bne	.L637
	mov	lr, #16777216
	strb	r1, [r0, #172]
.L616:
	ldr	ip, [r0, #168]
	mov	r1, #0
	ldr	r2, [ip, #4]
	bic	r2, r2, #16777216
	str	r2, [ip, #4]
	ldr	r2, [r0, #168]
	ldr	r3, [r2, #4]
	orr	r3, r3, lr
	str	r3, [r2, #4]
	b	.L611
.L614:
	mov	lr, r1
	strb	r1, [r0, #172]
	b	.L616
.L612:
	ldr	r3, .L642+8
	str	r3, [r0, #168]
	b	.L611
.L643:
	.align	2
.L642:
	.word	.LANCHOR0+20
	.word	.LANCHOR0+92
	.word	.LANCHOR0+48
	.fnend
	.size	ncm_setup, .-ncm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_notify_complete, %function
rmnet_mux_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #76]
	cmn	r2, #104
	beq	.L646
	cmp	r2, #0
	mov	r5, r1
	beq	.L647
	cmn	r2, #108
	beq	.L646
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC10
	movt	r1, #:upper16:.LC10
	add	r0, r0, #32
	bl	dev_err
.L647:
	add	r6, r4, #364
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L644
	ldr	r0, [r4, #88]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L665
.L644:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L665:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC4
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L646:
	mov	r3, #0
	str	r3, [r4, #364]
	b	.L644
	.fnend
	.size	rmnet_mux_notify_complete, .-rmnet_mux_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_setup, %function
rmnet_mux_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r0, #20]
	ldr	r3, [r0, #360]
	ldrh	r8, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldr	r5, [r7, #4]
	beq	.L674
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L668
	movw	r2, #41217
	cmp	r3, r2
	beq	.L669
	cmp	r3, #8448
	beq	.L679
.L676:
	mvn	r4, #94
.L666:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L669:
	cmp	r8, #0
	bne	.L676
	add	r8, r0, #356
	mov	r0, r8
	bl	_raw_spin_lock
	mov	r3, r4
	ldr	r9, [r3, #328]!
	cmp	r9, r3
	beq	.L680
	ldrd	r2, [r9]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r8
	mov	r10, r9
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r9]
	str	r1, [r9, #4]
	ldr	r3, [r4, #336]
	sub	r3, r3, #1
	str	r3, [r4, #336]
	bl	_raw_spin_unlock
	ldmdb	r9, {r1, r8}
	ldr	r0, [r5]
	cmp	r6, r8
	movcc	r8, r6
	mov	r2, r8
	bl	memcpy
	movw	r3, #:lower16:rmnet_mux_response_complete
	str	r4, [r5, #32]
	movt	r3, #:upper16:rmnet_mux_response_complete
	str	r3, [r5, #28]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r3, [r4, #404]
	cmp	r8, r6
	movge	r6, #0
	movlt	r6, #1
	add	r3, r3, #1
	str	r3, [r4, #404]
.L671:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r8, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L666
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC11
	mov	r2, r4
	movt	r1, #:upper16:.LC11
	add	r0, r0, #32
	bl	dev_err
	b	.L666
.L679:
	movw	r3, #:lower16:rmnet_mux_command_complete
	mov	r8, r6
	str	r0, [r5, #32]
	movt	r3, #:upper16:rmnet_mux_command_complete
	mov	r6, #0
	str	r3, [r5, #28]
	b	.L671
.L668:
	ldr	r3, [r0, #340]
	adds	r6, r6, #0
	movne	r6, #1
	ands	r8, r8, #1
	movne	r8, #0
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r0, #340]
	b	.L671
.L674:
	mvn	r4, #106
	b	.L666
.L680:
	mov	r0, r8
	mvn	r4, #94
	bl	_raw_spin_unlock
	b	.L666
	.fnend
	.size	rmnet_mux_setup, .-rmnet_mux_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_start_rx, %function
rmnet_mux_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #356
	add	r7, r0, #104
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	b	.L682
.L684:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #80]
	mov	r2, #32
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	fp, r0
	bne	.L688
.L682:
	ldr	r4, [r5, #104]
	mov	r1, fp
	mov	r0, r6
	cmp	r7, r4
	bne	.L684
.L683:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L688:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC0
	mov	r2, r10
	movt	r1, #:upper16:.LC0
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r5, #108]
	str	r4, [r5, #108]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L683
	.fnend
	.size	rmnet_mux_smd_start_rx, .-rmnet_mux_smd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_suspend, %function
composite_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L690
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #64
	beq	.L690
.L691:
	ldr	r2, [r4, #48]
	mov	r0, r4
	cmp	r2, #0
	beq	.L692
	blx	r2
	ldr	r3, [r6, #12]
	ldr	r4, [r4, #64]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #64
	bne	.L691
.L690:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2316]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L694
	mov	r0, r6
	blx	r3
.L694:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L689
	mov	r0, r5
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L692:
	ldr	r4, [r4, #64]
	cmp	r3, r4
	sub	r4, r4, #64
	bne	.L691
	b	.L690
.L689:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	composite_suspend, .-composite_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_resume, %function
composite_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2316]
	ldr	r3, [r3, #40]
	cmp	r3, #0
	beq	.L705
	blx	r3
.L705:
	ldr	r2, [r5, #12]
	cmp	r2, #0
	beq	.L707
	mov	r1, r2
	ldr	r4, [r1, #36]!
	cmp	r1, r4
	sub	r4, r4, #64
	beq	.L709
.L708:
	ldr	r3, [r4, #52]
	mov	r0, r4
	cmp	r3, #0
	beq	.L710
	blx	r3
	ldr	r2, [r5, #12]
	ldr	r4, [r4, #64]
	add	r1, r2, #36
	cmp	r1, r4
	sub	r4, r4, #64
	bne	.L708
.L709:
	ldrb	r3, [r2, #23]	@ zero_extendqisi2
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	moveq	r1, #500
	mulne	r1, r1, r3
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L707
	mov	r0, r6
	blx	r3
.L707:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #16]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L710:
	ldr	r4, [r4, #64]
	cmp	r1, r4
	sub	r4, r4, #64
	bne	.L708
	b	.L709
	.fnend
	.size	composite_resume, .-composite_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_params, %function
audio_pcm_hw_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #284]
	movw	r2, #44100
	ldr	ip, [r1, #296]
	cmp	r3, #2
	cmpeq	ip, r2
	bne	.L730
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #172
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [ip]
	ldr	lr, [r3, #500]
	add	lr, lr, #256
	ldrd	r2, [lr]
	orrs	r3, r2, r3
	beq	.L740
.L726:
	mov	r3, #2
	mov	lr, #0
	add	r2, r0, #184
	str	r3, [r0, #172]
	ldr	r3, [ip]
	ldr	r3, [r3, #500]
	str	r3, [r0, #176]
	str	lr, [r0, #192]
	ldr	r3, [ip]
	ldr	lr, [r1, #380]
	ldr	r3, [r3, #500]
	cmp	r3, #0
	beq	.L727
	ldr	ip, [r3, #284]
	cmp	ip, #0
	beq	.L727
.L728:
	mov	r6, #0
	mov	r4, r0
	mov	r7, r1
	mov	r0, r3
	str	r6, [sp]
	mov	r1, lr
	mov	r3, #208
	ldr	r8, [ip]
	blx	r8
	cmp	r0, r6
	str	r0, [r4, #180]
	beq	.L732
	ldr	r2, [r7, #380]
	cmp	r5, r6
	ldr	r3, [r4, #208]
	str	r2, [r4, #188]
	beq	.L729
	str	r5, [r3, #560]
	ldr	r2, [r4, #180]
	mov	r0, r6
	str	r2, [r3, #548]
	ldr	r2, [r4, #184]
	str	r2, [r3, #552]
	ldr	r2, [r4, #188]
	str	r2, [r3, #556]
.L724:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L740:
	mvn	r2, #0
	mov	r3, #0
	strd	r2, [lr]
	ldr	ip, [r0]
	b	.L726
.L727:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L728
	.syntax divided
@ 170 "/home/xawlw/kernel/arg/arch/arm/include/asm/dma-mapping.h" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L729:
	mov	r0, r5
	str	r5, [r3, #548]
	str	r5, [r3, #552]
	str	r5, [r3, #556]
	str	r5, [r3, #560]
	b	.L724
.L730:
	mvn	r0, #21
	bx	lr
.L732:
	mvn	r0, #11
	b	.L724
	.fnend
	.size	audio_pcm_hw_params, .-audio_pcm_hw_params
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_free, %function
audio_pcm_hw_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	str	lr, [sp, #8]
	ldr	r2, [r0, #180]
	.pad #12
	sub	sp, sp, #12
	cmp	r2, #0
	beq	.L742
	ldr	r0, [r0]
	ldr	r3, [r4, #184]
	ldr	r1, [r4, #188]
	ldr	r0, [r0]
	ldr	r0, [r0, #500]
	cmp	r0, #0
	beq	.L743
	ldr	ip, [r0, #284]
	cmp	ip, #0
	beq	.L743
.L744:
	mov	lr, #0
	str	lr, [sp]
	ldr	r5, [ip, #4]
	blx	r5
.L742:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #180]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L743:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L744
	.syntax divided
@ 201 "/home/xawlw/kernel/arg/arch/arm/include/asm/dma-mapping.h" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	audio_pcm_hw_free, .-audio_pcm_hw_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_open, %function
ffs_ep0_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #348]
	ldr	r2, [r3, #96]
	cmp	r2, #3
	beq	.L755
	add	r2, r3, #88
	str	r3, [r1, #124]
	.syntax divided
@ 44 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r2, r3, #92
	.syntax divided
@ 44 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	bx	lr
.L755:
	mvn	r0, #15
	bx	lr
	.fnend
	.size	ffs_ep0_open, .-ffs_ep0_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_open, %function
ffs_epfile_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #348]
	ldr	r3, [r2, #40]
	ldr	r3, [r3, #96]
	cmp	r3, #2
	bne	.L760
	str	r2, [r1, #124]
	ldr	r3, [r2, #40]
	add	r1, r3, #88
	.syntax divided
@ 44 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r1, r3, #92
	.syntax divided
@ 44 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #36]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L760:
	movw	r0, #:lower16:.LC12
	mov	r1, #948
	movt	r0, #:upper16:.LC12
	bl	warn_slowpath_null
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_epfile_open, .-ffs_epfile_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_mode_sense, %function
do_mode_sense:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldrb	r7, [r0, #76]	@ zero_extendqisi2
	ldr	r8, [r0, #104]
	ldr	r6, [r1]
	tst	r3, #247
	bne	.L769
	ldrb	r5, [r0, #78]	@ zero_extendqisi2
	lsr	r9, r5, #6
	and	r5, r5, #63
	cmp	r9, #3
	moveq	r3, #14592
	mvneq	r0, #21
	movteq	r3, 5
	streq	r3, [r8, #28]
	beq	.L761
	mov	r1, #8
	mov	r0, r6
	bl	__memzero
	sub	r3, r5, #63
	cmp	r7, #26
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	clz	r3, r3
	lsr	r3, r3, #5
	beq	.L775
	lsl	r2, r2, #6
	add	r4, r6, #8
	bic	r2, r2, #127
	movw	r10, #65535
	strb	r2, [r6, #3]
.L766:
	cmp	r5, #8
	movne	r5, r3
	orreq	r5, r3, #1
	cmp	r5, #0
	bne	.L767
.L769:
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r8, #28]
.L761:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L775:
	lsl	r2, r2, #6
	add	r4, r6, #4
	mov	r10, #255
	bic	r2, r2, #127
	strb	r2, [r6, #2]
	b	.L766
.L767:
	mov	r3, #10
	mov	r2, #8
	mov	r1, r3
	add	r0, r4, #2
	strb	r2, [r4]
	strb	r3, [r4, #1]
	bl	__memzero
	cmp	r9, #1
	beq	.L768
	mvn	r3, #0
	mov	r2, #4
	strb	r2, [r4, #2]
	strb	r3, [r4, #4]
	strb	r3, [r4, #5]
	str	r3, [r4, #8]	@ unaligned
.L768:
	add	r0, r4, #12
	sub	r0, r0, r6
	cmp	r10, r0
	blt	.L769
	cmp	r7, #26
	subeq	r3, r0, #1
	strbeq	r3, [r6]
	beq	.L761
	sub	r3, r0, #2
	uxth	r3, r3
	lsr	r2, r3, #8
	strb	r2, [r6]
	strb	r3, [r6, #1]
	b	.L761
	.fnend
	.size	do_mode_sense, .-do_mode_sense
	.align	2
	.global	usb_rmnet_mux_ctrl_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_open, %function
usb_rmnet_mux_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #2320]
	add	r6, r5, #356
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #344]
	mov	r1, r0
	cmp	r4, #0
	bne	.L780
	mov	r3, #1
	mov	r0, r6
	str	r3, [r5, #344]
	str	r5, [r7, #124]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
.L776:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L780:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r1, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LC13
	movt	r1, #:upper16:.LANCHOR2
	movt	r0, #:upper16:.LC13
	bl	printk
	mvn	r0, #15
	b	.L776
	.fnend
	.size	usb_rmnet_mux_ctrl_open, .-usb_rmnet_mux_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_setup, %function
audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #20]
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldr	r0, [r3, #24]
	cmp	r2, #34
	ldr	r3, [r0, #4]
	beq	.L783
	cmp	r2, #162
	bne	.L791
	ldrh	ip, [r1, #2]	@ unaligned
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	ldr	r1, [r3]
	cmp	ip, #256
	bne	.L791
	sub	r2, r2, #129
	cmp	r2, #3
	bhi	.L791
	mov	r4, #68
	mvn	lr, #83
	mov	ip, #0
	mov	r2, #3
	strb	r4, [r1]
	strb	lr, [r1, #1]
	strb	ip, [r1, #2]
.L786:
	ldrb	lr, [r3, #26]	@ zero_extendqisi2
	movw	ip, #:lower16:audio_control_complete
	str	r2, [r3, #4]
	movt	ip, #:upper16:audio_control_complete
	mov	r1, r3
	mov	r2, #32
	str	ip, [r3, #28]
	bfc	lr, #1, #1
	strb	lr, [r3, #26]
	ldr	r3, [r0]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L781
	movw	r0, #:lower16:.LC14
	mov	r1, r4
	movt	r0, #:upper16:.LC14
	bl	printk
	b	.L781
.L783:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	ldrh	r2, [r1, #6]	@ unaligned
	sub	r1, ip, #1
	cmp	r1, #3
	bls	.L786
.L791:
	mvn	r4, #94
.L781:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_setup, .-audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_start_rx, %function
gsmd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L808
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L796
	add	r9, r5, #12
	mov	fp, #256
	ldr	r8, [r3, #84]
	b	.L797
.L810:
	ldr	r4, [r5, #12]
	cmp	r9, r4
	beq	.L796
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #2048
	str	r3, [r4, #-32]
	mov	r3, #512
	str	fp, [r4]
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r2, #208
	sub	r1, r4, #36
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r7, r0
	bne	.L809
.L797:
	ldr	r3, [r5, #72]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #8]
	tst	r3, #1
	bne	.L810
.L796:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L809:
	movw	r0, #:lower16:.LC16
	ldr	r3, [r5]
	mov	r2, r5
	movt	r0, #:upper16:.LC16
	ldr	r1, .L811
	bl	printk
	ldr	r3, [r5, #16]
	str	r4, [r5, #16]
	str	r9, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	b	.L796
.L808:
	ldr	r1, .L811
	movw	r0, #:lower16:.LC15
	movt	r0, #:upper16:.LC15
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L812:
	.align	2
.L811:
	.word	.LANCHOR2+24
	.fnend
	.size	gsmd_start_rx, .-gsmd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_stop, %function
gbam_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L827
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L828
	ldr	r0, [r3, #76]
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	bne	.L829
.L818:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L827:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L830
	ldr	r0, [r3, #80]
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	beq	.L818
	movw	r0, #:lower16:.LC18
	ldr	r1, .L831
	movt	r0, #:upper16:.LC18
	bl	printk
	b	.L818
.L829:
	movw	r0, #:lower16:.LC18
	ldr	r1, .L831+4
	movt	r0, #:upper16:.LC18
	bl	printk
	b	.L818
.L828:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L831+4
	movw	r0, #:lower16:.LC17
.L826:
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC17
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L830:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC17
	ldr	r1, .L831
	b	.L826
.L832:
	.align	2
.L831:
	.word	.LANCHOR2+40
	.word	.LANCHOR2+64
	.fnend
	.size	gbam_stop, .-gbam_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cpkt_tomodem, %function
ghsic_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, r0
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r3, #1036]
	cmp	r0, r1
	bcs	.L840
	mov	r4, r2
	mov	r2, #104
	mla	r3, r2, r0, r3
	ldr	r5, [r3, #1040]
	cmp	r5, #0
	beq	.L841
	mov	r1, #32
	mov	r0, r4
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L838
	mov	r2, r4
	mov	r1, r6
	bl	memcpy
	ldr	r0, [r5, #84]
	ands	r4, r0, #1
	beq	.L842
	ldr	r3, [r5, #96]
	mov	r4, #0
	add	r3, r3, #1
	str	r3, [r5, #96]
.L833:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L842:
	ldr	r3, [r5, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r5, #104]
	bl	kfree
	b	.L833
.L838:
	mvn	r4, #11
	b	.L833
.L841:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L843
	mvn	r4, #18
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L833
.L840:
	movw	r0, #:lower16:.LC19
	mov	r2, ip
	ldr	r1, .L843
	movt	r0, #:upper16:.LC19
	mvn	r4, #18
	bl	printk
	b	.L833
.L844:
	.align	2
.L843:
	.word	.LANCHOR2+88
	.fnend
	.size	ghsic_send_cpkt_tomodem, .-ghsic_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_setup, %function
ecm_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r3, #17185
	str	lr, [sp, #8]
	ldr	ip, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r1]	@ unaligned
	ldrh	r4, [r1, #4]	@ unaligned
	ldrh	r5, [r1, #2]	@ unaligned
	ldr	lr, [ip, #24]
	cmp	r2, r3
	ldrh	ip, [r1, #6]	@ unaligned
	ldr	r3, [lr, #4]
	bne	.L850
	cmp	ip, #0
	bne	.L850
	ldrb	r2, [r0, #112]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L850
	strh	r5, [r0, #90]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	ip, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [lr]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L853
.L845:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L850:
	mvn	r5, #94
	b	.L845
.L853:
	movw	r0, #:lower16:.LC20
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r5, [sp]
	ldr	r1, .L854
	movt	r0, #:upper16:.LC20
	ldrb	r2, [r4]	@ zero_extendqisi2
	bl	printk
	b	.L845
.L855:
	.align	2
.L854:
	.word	.LANCHOR2+112
	.fnend
	.size	ecm_qc_setup, .-ecm_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ep0out_complete, %function
mbim_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	str	r3, [r1, #32]
	cmp	r2, r3
	bne	.L857
	ldr	r0, [r1, #4]
	ldr	r3, [r1, #48]
	cmp	r3, r0
	bne	.L857
	cmp	r3, #4
	beq	.L869
	cmp	r3, #8
	bne	.L863
	ldr	r1, [r1]
	ldr	r2, [r1]	@ unaligned
	cmp	r2, #2048
	bcc	.L864
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #140]
	cmp	r3, r2
	bcc	.L864
	ldrh	r3, [r1, #4]	@ unaligned
	strh	r3, [r4, #220]	@ movhi
.L862:
	str	r2, [r4, #216]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L869:
	ldr	r3, [r1]
	ldr	r2, [r3]	@ unaligned
	cmp	r2, #2048
	bcc	.L864
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #140]
	cmp	r3, r2
	bcs	.L862
.L864:
	movw	r0, #:lower16:.LC22
	ldr	r1, .L870
	movt	r0, #:upper16:.LC22
	bl	printk
.L859:
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	movw	r0, #:lower16:.LC24
	mov	r2, r4
	ldr	r1, .L870
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC24
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L857:
	movw	r0, #:lower16:.LC21
	ldr	r1, .L870
	movt	r0, #:upper16:.LC21
	bl	printk
	b	.L859
.L863:
	movw	r0, #:lower16:.LC23
	ldr	r1, .L870
	movt	r0, #:upper16:.LC23
	bl	printk
	b	.L859
.L871:
	.align	2
.L870:
	.word	.LANCHOR2+128
	.fnend
	.size	mbim_ep0out_complete, .-mbim_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_stop, %function
bam_data_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L888
	cmp	r3, #0
	beq	.L872
	ldr	r3, [r3, #8]
	ldr	r1, [r0, #40]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	subs	r3, r0, #0
	bne	.L889
.L872:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L888:
	cmp	r3, #0
	beq	.L872
	ldr	r3, [r3, #12]
	ldr	r1, [r0, #36]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	subs	r3, r0, #0
	ldrne	r2, .L890
	beq	.L872
.L887:
	movw	r0, #:lower16:.LC25
	ldr	r4, [sp]
	mov	r1, r2
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC25
	add	sp, sp, #8
	b	printk
.L889:
	ldr	r2, .L890+4
	b	.L887
.L891:
	.align	2
.L890:
	.word	.LANCHOR2+152
	.word	.LANCHOR2+180
	.fnend
	.size	bam_data_stop, .-bam_data_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_complete, %function
rndis_qc_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r2, [r5, #20]
	cmp	r2, #0
	beq	.L893
	ldr	r2, [r2, #24]
	cmp	r2, #0
	beq	.L893
	cmn	r3, #104
	beq	.L896
	cmp	r3, #0
	mov	r6, r0
	mov	r4, r1
	bne	.L921
.L897:
	ldr	r3, [r5, #148]
	cmp	r3, r6
	beq	.L922
.L892:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L921:
	cmn	r3, #108
	beq	.L896
	ldr	r1, [r1, #4]
	movw	r0, #:lower16:.LC27
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC27
	ldr	r2, [r6, #4]
	str	ip, [sp]
	str	r1, [sp, #4]
	ldr	r1, .L923
	bl	printk
	b	.L897
.L896:
	mov	r3, #0
	str	r3, [r5, #156]
	b	.L892
.L922:
	add	r6, r5, #156
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L892
	ldr	r0, [r5, #148]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L892
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L892
.L893:
	ldr	r2, .L923
	movw	r0, #:lower16:.LC26
	movt	r0, #:upper16:.LC26
	mov	r1, r2
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L924:
	.align	2
.L923:
	.word	.LANCHOR2+208
	.fnend
	.size	rndis_qc_response_complete, .-rndis_qc_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_available, %function
rndis_qc_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #156
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #152]
	ldr	ip, [r1]
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L925
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L933
.L925:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L933:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC28
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC28
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L934
	b	printk
.L935:
	.align	2
.L934:
	.word	.LANCHOR2+236
	.fnend
	.size	rndis_qc_response_available, .-rndis_qc_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_buffer_alloc, %function
f_audio_buffer_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L939
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L941
.L937:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L942
.L936:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L939:
	mov	r4, #16
	b	.L937
.L942:
	movw	r0, #:lower16:.LC30
	ldr	r1, .L943
	movt	r0, #:upper16:.LC30
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L936
.L941:
	movw	r0, #:lower16:.LC29
	ldr	r1, .L943
	mvn	r4, #11
	movt	r0, #:upper16:.LC29
	bl	printk
	b	.L936
.L944:
	.align	2
.L943:
	.word	.LANCHOR2+264
	.fnend
	.size	f_audio_buffer_alloc, .-f_audio_buffer_alloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_setup, %function
f_audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	.pad #24
	sub	sp, sp, #24
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	lr, [r1, #2]	@ unaligned
	ldr	r6, [r3, #24]
	cmp	r2, #34
	ldrh	r5, [r1, #6]	@ unaligned
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldr	r4, [r6, #4]
	beq	.L947
	bls	.L1004
	cmp	r2, #161
	beq	.L950
	cmp	r2, #162
	bne	.L946
	ldr	r2, [r7, #252]!
	and	ip, ip, #127
	lsr	lr, lr, #8
	cmp	r7, r2
	beq	.L967
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L987
.L979:
	ldr	ip, [r2, #8]!
	cmp	r2, ip
	beq	.L967
	ldrb	r1, [ip, #12]	@ zero_extendqisi2
	cmp	r1, lr
	beq	.L982
.L986:
	ldr	ip, [ip]
	cmp	r2, ip
	beq	.L967
	ldrb	r1, [ip, #12]	@ zero_extendqisi2
	cmp	lr, r1
	bne	.L986
.L982:
	and	r3, r3, #15
	sub	r2, r3, #1
	cmp	r2, #3
	bhi	.L967
	add	r3, r3, #4
	add	r1, sp, #24
	ldr	r0, [r4]
	ldr	r3, [ip, r3, lsl #2]
	mov	r2, r5
	str	r3, [r1, #-4]!
	bl	memcpy
	b	.L959
.L950:
	ldr	r2, [r0, #244]!
	mvn	r1, #94
	lsr	ip, ip, #8
	str	r1, [sp, #20]
	cmp	r2, r0
	beq	.L960
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L962
	b	.L961
.L965:
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r1
	beq	.L961
.L962:
	ldr	r2, [r2]
	cmp	r2, r0
	bne	.L965
.L960:
	movw	r3, #:lower16:f_audio_complete
	mov	r2, r5
	ldr	r0, [r4]
	movt	r3, #:upper16:f_audio_complete
	add	r1, sp, #20
	str	r3, [r4, #28]
	str	r7, [r4, #32]
	bl	memcpy
.L959:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r5, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	orr	r3, r3, #2
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1005
.L945:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L980:
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r1
	beq	.L979
.L987:
	ldr	r2, [r2]
	cmp	r7, r2
	bne	.L980
	b	.L967
.L1004:
	cmp	r2, #33
	bne	.L946
	mov	r8, r0
	lsr	ip, ip, #8
	ldr	r2, [r8, #244]!
	and	r3, r3, #15
	cmp	r2, r8
	beq	.L952
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L954
	b	.L953
.L958:
	ldrb	r0, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r0
	beq	.L953
.L954:
	ldr	r2, [r2]
	cmp	r2, r8
	bne	.L958
.L952:
	movw	r2, #:lower16:f_audio_complete
	strb	r3, [r7, #260]
	movt	r2, #:upper16:f_audio_complete
	str	r2, [r4, #28]
	str	r7, [r4, #32]
	b	.L959
.L947:
	mov	r1, r0
	and	ip, ip, #127
	ldr	r2, [r1, #252]!
	lsr	lr, lr, #8
	cmp	r1, r2
	beq	.L967
	ldrb	r0, [r2, #16]	@ zero_extendqisi2
	cmp	r0, ip
	bne	.L976
.L968:
	ldr	r0, [r2, #8]!
	cmp	r0, r2
	beq	.L967
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	cmp	r1, lr
	beq	.L971
.L975:
	ldr	r0, [r0]
	cmp	r0, r2
	beq	.L967
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	cmp	lr, r1
	bne	.L975
.L971:
	ands	r3, r3, #15
	beq	.L973
	cmp	r3, #4
	bls	.L974
	cmp	r3, #5
	bne	.L973
.L967:
	movw	r0, #:lower16:.LC34
	ldr	r1, .L1006
	mvn	r4, #94
	movt	r0, #:upper16:.LC34
	bl	printk
	b	.L945
.L969:
	ldrb	r0, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r0
	beq	.L968
.L976:
	ldr	r2, [r2]
	cmp	r1, r2
	bne	.L969
	b	.L967
.L961:
	ldr	r0, [r2, #8]!
	cmp	r0, r2
	beq	.L960
	lsr	lr, lr, #8
	b	.L964
.L963:
	ldr	r0, [r0]
	cmp	r0, r2
	beq	.L960
.L964:
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	cmp	r1, lr
	bne	.L963
	ldr	r8, [r0, #40]
	cmp	r8, #0
	beq	.L963
	and	r1, r3, #15
	blx	r8
	str	r0, [sp, #20]
	b	.L960
.L953:
	ldr	r0, [r2, #8]!
	cmp	r0, r2
	beq	.L952
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	lsr	lr, lr, #8
	cmp	r1, lr
	bne	.L956
	b	.L955
.L957:
	ldrb	ip, [r0, #12]	@ zero_extendqisi2
	cmp	lr, ip
	beq	.L955
.L956:
	ldr	r0, [r0]
	cmp	r0, r2
	bne	.L957
	b	.L952
.L974:
	movw	r2, #:lower16:audio_set_endpoint_complete
	strb	r3, [r7, #260]
	movt	r2, #:upper16:audio_set_endpoint_complete
	str	r0, [r7, #264]
	str	r2, [r4, #28]
	str	r7, [r4, #32]
	b	.L959
.L955:
	str	r0, [r7, #264]
	b	.L952
.L946:
	movw	r0, #:lower16:.LC32
	ldr	r1, .L1006
	str	lr, [sp]
	str	ip, [sp, #4]
	movt	r0, #:upper16:.LC32
	str	r5, [sp, #8]
	bl	printk
	b	.L967
.L1005:
	movw	r0, #:lower16:.LC33
	mov	r2, r4
	ldr	r1, .L1006
	movt	r0, #:upper16:.LC33
	bl	printk
	b	.L945
.L973:
	movw	r0, #:lower16:.LC31
	ldr	r1, .L1006+4
	movt	r0, #:upper16:.LC31
	bl	printk
	b	.L967
.L1007:
	.align	2
.L1006:
	.word	.LANCHOR2+312
	.word	.LANCHOR2+288
	.fnend
	.size	f_audio_setup, .-f_audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable_function, %function
android_enable_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LC35
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #4]
	ldr	r2, [r0, #8]
	movt	r9, #:upper16:.LC35
	ldr	r3, [r0, #48]
	sub	r6, r6, #4
	str	r3, [sp]
	ldr	r3, [r2]
	str	r3, [sp, #4]
.L1009:
	ldr	r5, [r6, #4]!
	mov	r0, r10
	cmp	r5, #0
	beq	.L1020
	ldr	r4, [r5]
	mov	r1, r4
	bl	strcmp
	subs	r8, r0, #0
	bne	.L1009
	ldr	r1, [r5, #20]
	cmp	r1, fp
	cmpne	r1, #0
	bne	.L1021
	movw	r2, #:lower16:kmalloc_caches
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #24]
	cmp	r0, #0
	beq	.L1017
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L1022
.L1012:
	mov	r2, r0
	str	fp, [r5, #20]
	add	r1, r7, #112
	str	r5, [r2], #4
	ldr	r3, [r7, #116]
	str	r2, [r7, #116]
	stmib	r0, {r1, r3}
	str	r2, [r3]
	ldr	r2, [sp]
	ldr	r6, [r5]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	ble	.L1008
	add	r3, r3, r3, lsl #2
	add	r4, r2, #11
	add	r5, r4, r3, lsl #1
	b	.L1015
.L1014:
	cmp	r5, r4
	beq	.L1008
.L1015:
	mov	r1, r4
	mov	r0, r6
	bl	strcmp
	cmp	r0, #0
	add	r4, r4, #10
	bne	.L1014
	ldr	r2, [sp, #4]
	mov	r3, #1
	mov	r8, r0
	strb	r3, [r2, #386]
.L1008:
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1017:
	mov	r0, #16
	b	.L1012
.L1020:
	mvn	r8, #21
	b	.L1008
.L1021:
	mov	r2, r4
	ldr	r1, .L1023
	mov	r0, r9
	bl	printk
	b	.L1009
.L1022:
	movw	r0, #:lower16:.LC36
	ldr	r1, .L1023
	mvn	r8, #11
	movt	r0, #:upper16:.LC36
	bl	printk
	b	.L1008
.L1024:
	.align	2
.L1023:
	.word	.LANCHOR2+328
	.fnend
	.size	android_enable_function, .-android_enable_function
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_string, %function
acc_complete_set_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	ldr	r0, [r0]
	ldr	r6, [r1, #48]
	cmp	r3, #0
	movwne	r0, #:lower16:.LC37
	movne	r1, r3
	movtne	r0, #:upper16:.LC37
	bne	.L1040
	ldr	r3, [r0, #1632]
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L1027
.L1029:
	.word	.L1028
	.word	.L1030
	.word	.L1031
	.word	.L1032
	.word	.L1033
	.word	.L1034
.L1034:
	add	r7, r0, #1360
	add	r7, r7, #13
.L1035:
	cmp	r7, #0
	beq	.L1027
	add	r4, r0, #80
	mov	r5, r1
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r6, #255
	mov	r8, r0
	ldr	r1, [r5]
	movge	r6, #255
	mov	r0, r7
	mov	r2, r6
	bl	memcpy
	mov	r3, #0
	mov	r1, r8
	mov	r0, r4
	strb	r3, [r7, r6]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1028:
	add	r7, r0, #93
	b	.L1035
.L1030:
	add	r7, r0, #348
	add	r7, r7, #1
	b	.L1035
.L1031:
	add	r7, r0, #604
	add	r7, r7, #1
	b	.L1035
.L1032:
	add	r7, r0, #860
	add	r7, r7, #1
	b	.L1035
.L1033:
	add	r7, r0, #1104
	add	r7, r7, #13
	b	.L1035
.L1027:
	movw	r0, #:lower16:.LC38
	mov	r1, r3
	movt	r0, #:upper16:.LC38
.L1040:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
	.fnend
	.size	acc_complete_set_string, .-acc_complete_set_string
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_release, %function
acc_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LC39
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC39
	str	lr, [sp, #4]
	bl	printk
	ldr	r3, [r4, #2324]
	add	r3, r3, #1632
	add	r3, r3, #12
	.syntax divided
@ 37 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r2, #0
	.syntax divided
@ 52 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r1, [r3]
	strex	r0, r2, [r3]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, r2
	beq	.L1044
.L1042:
	ldr	r3, [r4, #2324]
	mov	r0, #0
	ldrb	r2, [r3, #92]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #92]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1044:
	movw	r0, #:lower16:.LC40
	movw	r1, #799
	movt	r0, #:upper16:.LC40
	bl	warn_slowpath_null
	b	.L1042
	.fnend
	.size	acc_release, .-acc_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_open, %function
acc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC41
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LC41
	str	lr, [sp, #4]
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2324]
	add	r3, r3, #1632
	add	r3, r3, #12
	.syntax divided
@ 37 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #1
	.syntax divided
@ 52 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	ip, [r3]
	strex	r1, r0, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #0
	bne	.L1047
	ldr	r3, [r2, #2324]
	mov	r0, ip
	ldrb	r2, [r3, #92]	@ zero_extendqisi2
	bfi	r2, ip, #1, #1
	strb	r2, [r3, #92]
	str	r3, [r4, #124]
.L1045:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1047:
	mvn	r0, #15
	b	.L1045
	.fnend
	.size	acc_open, .-acc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_release_dev, %function
rndis_qc_release_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC42
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r1, .L1054
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC42
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r0, .L1054+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2332]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1053
	add	r2, r3, #144
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L1054+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L1049:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1053:
	movw	r0, #:lower16:.LC43
	ldr	r1, .L1054
	movt	r0, #:upper16:.LC43
	bl	printk
	ldr	r0, .L1054+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L1049
.L1055:
	.align	2
.L1054:
	.word	.LANCHOR2+352
	.word	.LANCHOR1+2328
	.fnend
	.size	rndis_qc_release_dev, .-rndis_qc_release_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_release, %function
mtp_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC44
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC44
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2336]
	add	r2, r3, #100
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_release, .-mtp_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_open, %function
mtp_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC45
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LC45
	str	lr, [sp, #4]
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2336]
	add	r0, r3, #100
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	ip, [r0]
	add	ip, ip, #1
	strex	r1, ip, [r0]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #1
	bne	.L1059
	ldr	r3, [r2, #2336]
	mov	r0, #0
	ldr	r2, [r3, #96]
	cmp	r2, #0
	strne	ip, [r3, #96]
	str	r3, [r4, #124]
.L1058:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1059:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r0]
	sub	r2, r2, #1
	strex	r1, r2, [r0]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L1058
	.fnend
	.size	mtp_open, .-mtp_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_notify_complete, %function
ccid_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r1, #44]
	cmn	r1, #104
	beq	.L1064
	cmp	r1, #0
	beq	.L1064
	cmn	r1, #108
	beq	.L1064
	movw	r0, #:lower16:.LC46
	movt	r0, #:upper16:.LC46
	b	printk
.L1064:
	bx	lr
	.fnend
	.size	ccid_notify_complete, .-ccid_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_setup, %function
gps_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	ip, [r0, #112]
	ldr	r6, [r0, #120]
	ldrh	r2, [r1, #2]	@ unaligned
	ldrh	r5, [r1, #6]	@ unaligned
	cmp	ip, #0
	ldr	r4, [r6, #4]
	beq	.L1083
	ldrh	r3, [r1]	@ unaligned
	movw	r1, #8482
	mov	r7, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r1
	beq	.L1078
	movw	r1, #41217
	cmp	r3, r1
	beq	.L1079
	cmp	r3, #8448
	beq	.L1089
.L1085:
	mvn	r4, #94
.L1076:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1079:
	cmp	r2, #0
	bne	.L1085
	add	r9, r0, #124
	mov	r0, r9
	bl	_raw_spin_lock
	mov	r3, r7
	ldr	r8, [r3, #136]!
	cmp	r8, r3
	beq	.L1090
	ldrd	r2, [r8]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r9
	mov	r9, r8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r8]
	str	r1, [r8, #4]
	bl	_raw_spin_unlock
	ldmdb	r8, {r1, r7}
	ldr	r0, [r4]
	cmp	r5, r7
	movcc	r7, r5
	cmp	r7, r5
	mov	r2, r7
	movge	r5, #0
	movlt	r5, #1
	bl	memcpy
	ldr	r0, [r9, #-8]!
	bl	kfree
	mov	r0, r9
	bl	kfree
.L1081:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r7, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, r5, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1076
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC48
	mov	r2, r4
	movt	r1, #:upper16:.LC48
	add	r0, r0, #32
	bl	dev_err
	b	.L1076
.L1089:
	movw	r3, #:lower16:gps_cmd_complete
	mov	r7, r5
	str	r0, [r4, #32]
	movt	r3, #:upper16:gps_cmd_complete
	mov	r5, #0
	str	r3, [r4, #28]
	b	.L1081
.L1078:
	ldr	r3, [r0, #92]
	adds	r5, r5, #0
	movne	r5, #1
	cmp	r3, #0
	beq	.L1086
	ldrb	r1, [r0, #104]	@ zero_extendqisi2
	mov	r7, #0
	blx	r3
	b	.L1081
.L1083:
	mvn	r4, #106
	b	.L1076
.L1086:
	mov	r7, r3
	b	.L1081
.L1090:
	movw	r0, #:lower16:.LC47
	ldr	r1, .L1091
	mvn	r4, #94
	movt	r0, #:upper16:.LC47
	bl	printk
	mov	r0, r9
	bl	_raw_spin_unlock
	b	.L1076
.L1092:
	.align	2
.L1091:
	.word	.LANCHOR2+376
	.fnend
	.size	gps_setup, .-gps_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_notify_complete, %function
gps_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r3, [r1, #44]
	cmn	r3, #104
	beq	.L1095
	cmp	r3, #0
	mov	r4, r1
	bne	.L1118
.L1096:
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L1093
	add	r6, r5, #144
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L1093
	ldr	r0, [r5, #128]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L1119
.L1093:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1118:
	cmn	r3, #108
	bne	.L1116
.L1095:
	mov	r3, #0
	str	r3, [r5, #144]
	b	.L1093
.L1119:
	add	r4, r5, #124
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #136]
	add	r2, r5, #136
	mov	r7, r0
	cmp	r3, r2
	beq	.L1100
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r6]
	sub	r2, r2, #1
	strex	r1, r2, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldm	r3, {r1, r2}
	mov	ip, #256
	mov	r0, #512
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
.L1100:
	mov	r1, r7
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1116:
	movw	r0, #:lower16:.LC49
	mov	r1, r3
	movt	r0, #:upper16:.LC49
	bl	printk
	b	.L1096
	.fnend
	.size	gps_notify_complete, .-gps_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_setup, %function
frmnet_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #112]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r0, #120]
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	cmp	r3, #0
	ldr	r5, [r7, #4]
	beq	.L1127
	ldrh	ip, [r1]	@ unaligned
	movw	r3, #8482
	mov	r4, r0
	mov	r8, r1
	rev16	ip, ip
	uxth	ip, ip
	cmp	ip, r3
	beq	.L1122
	movw	r3, #41217
	cmp	ip, r3
	beq	.L1123
	cmp	ip, #8448
	beq	.L1133
.L1129:
	mvn	r4, #94
.L1120:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1123:
	cmp	r9, #0
	bne	.L1129
	add	r10, r0, #124
	ldrh	fp, [r1, #4]	@ unaligned
	mov	r0, r10
	bl	_raw_spin_lock
	mov	ip, r4
	ldr	r4, [ip, #136]!
	cmp	r4, ip
	beq	.L1134
	ldrd	r2, [r4]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r10
	mov	r8, r4
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4]
	str	r1, [r4, #4]
	bl	_raw_spin_unlock
	ldmdb	r4, {r1, r3}
	ldr	r0, [r5]
	cmp	r6, r3
	movcc	r4, r6
	movcs	r4, r3
	cmp	r4, r6
	mov	r2, r4
	movge	r6, #0
	movlt	r6, #1
	bl	memcpy
	ldr	r0, [r8, #-8]!
	bl	kfree
	mov	r0, r8
	bl	kfree
.L1125:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r4, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1120
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC51
	mov	r2, r4
	movt	r1, #:upper16:.LC51
	add	r0, r0, #32
	bl	dev_err
	b	.L1120
.L1133:
	movw	r3, #:lower16:frmnet_cmd_complete
	mov	r4, r6
	str	r0, [r5, #32]
	movt	r3, #:upper16:frmnet_cmd_complete
	mov	r6, #0
	str	r3, [r5, #28]
	b	.L1125
.L1122:
	ldr	r8, [r0, #92]
	adds	r6, r6, #0
	movne	r6, #1
	cmp	r8, #0
	beq	.L1130
	ldrb	r1, [r0, #108]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r9
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, #0
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #3
	ldrb	r1, [r3, #2352]	@ zero_extendqisi2
	blx	r8
	b	.L1125
.L1127:
	mvn	r4, #106
	b	.L1120
.L1130:
	mov	r4, r8
	b	.L1125
.L1134:
	movw	r0, #:lower16:.LC50
	ldrb	r2, [r8, #1]	@ zero_extendqisi2
	mov	r3, r9
	str	fp, [sp]
	movt	r0, #:upper16:.LC50
	ldrb	r1, [r8]	@ zero_extendqisi2
	str	r6, [sp, #4]
	mvn	r4, #94
	bl	printk
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L1120
	.fnend
	.size	frmnet_setup, .-frmnet_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_notify_complete, %function
frmnet_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r1, #44]
	ldr	r4, [r5, #32]
	cmn	r1, #104
	beq	.L1137
	cmp	r1, #0
	bne	.L1162
.L1138:
	ldr	r3, [r4, #116]
	cmp	r3, #0
	bne	.L1163
.L1135:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1162:
	cmn	r1, #108
	bne	.L1158
.L1137:
	add	r5, r4, #124
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #144]
.L1160:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L1163:
	add	r6, r4, #124
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #144]
	cmp	r3, #0
	beq	.L1141
	sub	r3, r3, #1
	mov	r1, r0
	cmp	r3, #0
	mov	r0, r6
	str	r3, [r4, #144]
	beq	.L1160
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #128]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1135
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r2, r4
	mov	r5, r0
	ldr	r3, [r2, #136]!
	cmp	r3, r2
	beq	.L1144
	ldr	r2, [r4, #144]
	cmp	r2, #0
	beq	.L1145
	sub	r2, r2, #1
	mov	ip, #256
	mov	r0, #512
	str	r2, [r4, #144]
	ldm	r3, {r1, r2}
	mov	r4, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
.L1144:
	mov	r1, r5
	b	.L1161
.L1141:
	mov	r1, r0
.L1161:
	mov	r0, r6
	b	.L1160
.L1158:
	movw	r0, #:lower16:.LC52
	movt	r0, #:upper16:.LC52
	bl	printk
	b	.L1138
.L1145:
	movw	r0, #:lower16:.LC53
	ldr	r1, .L1164
	movt	r0, #:upper16:.LC53
	bl	printk
	b	.L1144
.L1165:
	.align	2
.L1164:
	.word	.LANCHOR2+388
	.fnend
	.size	frmnet_notify_complete, .-frmnet_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_ctrlrequest, %function
mbim_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #12]
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r3, #0
	bne	.L1175
	movw	r0, #:lower16:.LANCHOR0
	movt	r0, #:upper16:.LANCHOR0
	ldrb	r3, [r0, #190]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1175
	ldrb	r3, [r2]	@ zero_extendqisi2
	mov	r4, r1
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #128
	beq	.L1177
	ldrh	r2, [r2, #4]	@ unaligned
	cmp	r3, #192
	cmpeq	r1, #165
	moveq	r3, #1
	movne	r3, #0
	cmp	r2, #4
	movne	r3, #0
	andeq	r3, r3, #1
	cmp	r3, #0
	beq	.L1175
	ldr	r3, [r4, #4]
	cmp	r5, #40
	add	r1, r0, #164
	movcc	r6, r5
	movcs	r6, #40
	mov	r2, r6
	ldr	r0, [r3]
	bl	memcpy
.L1169:
	ldr	r3, [r4, #4]
	cmp	r5, r6
	mov	r2, #32
	movle	r5, #0
	movgt	r5, #1
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r5, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r6, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L1178
.L1166:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1177:
	cmp	r1, #6
	beq	.L1179
.L1175:
	mvn	r6, #94
	b	.L1166
.L1179:
	ldrh	r3, [r2, #2]	@ unaligned
	lsr	r2, r3, #8
	cmp	r2, #3
	bne	.L1175
	uxtb	r3, r3
	cmp	r3, #238
	bne	.L1175
	ldr	r3, [r4, #4]
	cmp	r5, #18
	add	r1, r0, #204
	movcc	r6, r5
	movcs	r6, #18
	mov	r2, r6
	ldr	r0, [r3]
	bl	memcpy
	b	.L1169
.L1178:
	movw	r0, #:lower16:.LC54
	ldr	r1, .L1180
	movt	r0, #:upper16:.LC54
	bl	printk
	b	.L1166
.L1181:
	.align	2
.L1180:
	.word	.LANCHOR2+412
	.fnend
	.size	mbim_function_ctrlrequest, .-mbim_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_release, %function
mbim_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC55
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L1184
	movt	r0, #:upper16:.LC55
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2412]
	add	r2, r3, #84
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1185:
	.align	2
.L1184:
	.word	.LANCHOR2+432
	.fnend
	.size	mbim_release, .-mbim_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_open, %function
mbim_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC56
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	movt	r0, #:upper16:.LC56
	ldr	r1, .L1195
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #2412]
	cmp	r3, #0
	beq	.L1193
	add	r2, r3, #84
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1189
	movw	r0, #:lower16:.LC58
	ldr	r1, .L1195
	movt	r0, #:upper16:.LC58
	bl	printk
	ldr	r3, [r4, #2412]
	ldr	r2, [r3, #80]
	cmp	r2, #0
	beq	.L1194
.L1191:
	mov	r4, #0
	movw	r0, #:lower16:.LC61
	str	r3, [r5, #124]
	movt	r0, #:upper16:.LC61
	ldr	r1, .L1195
	str	r4, [r3, #224]
	bl	printk
	mov	r0, r4
.L1186:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1189:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC59
	ldr	r1, .L1195
	movt	r0, #:upper16:.LC59
	bl	printk
	mvn	r0, #15
	b	.L1186
.L1193:
	movw	r0, #:lower16:.LC57
	ldr	r1, .L1195
	movt	r0, #:upper16:.LC57
	bl	printk
	mvn	r0, #18
	b	.L1186
.L1194:
	movw	r0, #:lower16:.LC60
	ldr	r1, .L1195
	movt	r0, #:upper16:.LC60
	bl	printk
	ldr	r3, [r4, #2412]
	b	.L1191
.L1196:
	.align	2
.L1195:
	.word	.LANCHOR2+448
	.fnend
	.size	mbim_open, .-mbim_open
	.align	2
	.global	gsdio_tx_pull
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_tx_pull, %function
gsdio_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #60
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r3, #0
	beq	.L1208
	sub	r5, r0, #56
	sub	r7, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r6, [r4, #-8]
	cmp	r7, r6
	beq	.L1202
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L1209
.L1202:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L1208:
	movw	r0, #:lower16:.LC62
	ldr	r1, .L1212
	movt	r0, #:upper16:.LC62
	bl	printk
	cmp	r8, #0
	beq	.L1210
	ldr	r3, [r4, #60]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L1197
.L1201:
	b	.L1201
.L1197:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1209:
	ldrd	r2, [r6]
	mov	ip, #256
	mov	r1, #512
	ldr	lr, [r4, #36]
	mov	r0, r5
	sub	r10, r6, #36
	ldr	r9, [lr, #80]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r6]
	str	r1, [r6, #4]
	ldr	r3, [r4, #16]
	sub	r3, r3, #1
	str	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mvn	r1, #18
	movw	r0, #:lower16:.LC63
	ldr	r3, [r4, #-60]
	mov	r2, r8
	movt	r0, #:upper16:.LC63
	str	r1, [sp]
	ldr	r1, .L1212
	bl	printk
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L1211
	ldr	r3, [r4, #-8]
	str	r6, [r3, #4]
	stm	r6, {r3, r7}
	ldr	r3, [r4, #16]
	str	r6, [r4, #-8]
	add	r3, r3, #1
	str	r3, [r4, #16]
	b	.L1202
.L1210:
	ldr	r1, .L1212+4
	movw	r0, #:lower16:.LC15
	movt	r0, #:upper16:.LC15
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L1211:
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L1202
.L1213:
	.align	2
.L1212:
	.word	.LANCHOR2+460
	.word	.LANCHOR2+476
	.fnend
	.size	gsdio_tx_pull, .-gsdio_tx_pull
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_open_work, %function
gsdio_open_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, .L1216
	ldr	ip, [r2, #-4]
	.pad #12
	sub	sp, sp, #12
	movw	r0, #:lower16:.LC64
	ldr	r3, [r2, #-124]!
	movt	r0, #:upper16:.LC64
	ldr	ip, [ip]
	str	ip, [sp]
	bl	printk
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1217:
	.align	2
.L1216:
	.word	.LANCHOR2+496
	.fnend
	.size	gsdio_open_work, .-gsdio_open_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_show, %function
remote_wakeup_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #204]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L1218
	ldr	r3, [r0, #196]
	movw	r2, #:lower16:.LC65
	mov	r1, #4096
	movt	r2, #:upper16:.LC65
	mov	r0, r4
	ldrb	r3, [r3, #-98]	@ zero_extendqisi2
	ubfx	r3, r3, #5, #1
	bl	snprintf
	mov	r0, #2
.L1218:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	remote_wakeup_show, .-remote_wakeup_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	state_show, %function
state_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r4, [r0, #8]
	cmp	r4, #0
	movweq	r4, #:lower16:.LC67
	movteq	r4, #:upper16:.LC67
	beq	.L1223
	add	r7, r4, #60
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r1, r0
	cmp	r3, #0
	movwne	r4, #:lower16:.LC66
	movtne	r4, #:upper16:.LC66
	beq	.L1229
.L1224:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L1223:
	movw	r2, #:lower16:.LC69
	mov	r3, r4
	ldrd	r4, [sp]
	mov	r0, r6
	movt	r2, #:upper16:.LC69
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r1, #4096
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	snprintf
.L1229:
	ldrb	r2, [r5, #52]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC68
	movw	r4, #:lower16:.LC67
	movt	r3, #:upper16:.LC68
	movt	r4, #:upper16:.LC67
	cmp	r2, #0
	movne	r4, r3
	b	.L1224
	.fnend
	.size	state_show, .-state_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_show, %function
pm_qos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LC69
	add	r3, r0, #56
	ldr	lr, [sp, #4]
	mov	r0, r4
	movt	r2, #:upper16:.LC69
	ldr	r4, [sp]
	mov	r1, #4096
	add	sp, sp, #8
	b	snprintf
	.fnend
	.size	pm_qos_show, .-pm_qos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_show, %function
enable_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LC65
	ldrb	r3, [r0, #16]	@ zero_extendqisi2
	mov	r1, #4096
	mov	r0, r4
	movt	r2, #:upper16:.LC65
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	enable_show, .-enable_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_show, %function
iSerial_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC70
	ldr	r3, .L1235
	movt	r2, #:upper16:.LC70
	mov	r1, #4096
	b	snprintf
.L1236:
	.align	2
.L1235:
	.word	.LANCHOR1+2416
	.fnend
	.size	iSerial_show, .-iSerial_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_show, %function
iProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC70
	ldr	r3, .L1238
	movt	r2, #:upper16:.LC70
	mov	r1, #4096
	b	snprintf
.L1239:
	.align	2
.L1238:
	.word	.LANCHOR1+2672
	.fnend
	.size	iProduct_show, .-iProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_show, %function
iManufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC70
	ldr	r3, .L1241
	movt	r2, #:upper16:.LC70
	mov	r1, #4096
	b	snprintf
.L1242:
	.align	2
.L1241:
	.word	.LANCHOR1+2928
	.fnend
	.size	iManufacturer_show, .-iManufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_show, %function
bDeviceProtocol_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC65
	ldrb	r3, [r3, #230]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC65
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceProtocol_show, .-bDeviceProtocol_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_show, %function
bDeviceSubClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC65
	ldrb	r3, [r3, #229]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC65
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceSubClass_show, .-bDeviceSubClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_show, %function
bDeviceClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC65
	ldrb	r3, [r3, #228]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC65
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceClass_show, .-bDeviceClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_show, %function
bcdDevice_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC71
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC71
	mov	r1, #4096
	ldrh	r3, [r3, #236]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdDevice_show, .-bcdDevice_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_show, %function
idProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC71
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC71
	mov	r1, #4096
	ldrh	r3, [r3, #234]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idProduct_show, .-idProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_show, %function
idVendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC71
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC71
	mov	r1, #4096
	ldrh	r3, [r3, #232]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idVendor_show, .-idVendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_pcm_show, %function
audio_source_pcm_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC72
	mov	r1, #4096
	movt	r2, #:upper16:.LC72
	mov	r0, r4
	ldm	ip, {r3, ip}
	str	ip, [sp]
	bl	snprintf
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_source_pcm_show, .-audio_source_pcm_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_show, %function
mass_storage_inquiry_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC69
	mov	r0, r4
	movt	r2, #:upper16:.LC69
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #96]
	add	r3, r3, #180
	b	snprintf
	.fnend
	.size	mass_storage_inquiry_show, .-mass_storage_inquiry_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ethaddr_show, %function
ncm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC73
	mov	r1, #4096
	movt	r2, #:upper16:.LC73
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_ethaddr_show, .-ncm_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_show, %function
ecm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC73
	mov	r1, #4096
	movt	r2, #:upper16:.LC73
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_show, .-ecm_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_show, %function
ecm_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC69
	ldr	r3, .L1261
	movt	r2, #:upper16:.LC69
	mov	r1, #4096
	b	snprintf
.L1262:
	.align	2
.L1261:
	.word	.LANCHOR1+3184
	.fnend
	.size	ecm_transports_show, .-ecm_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_show, %function
rndis_max_pkt_per_xfer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC65
	mov	r0, r4
	movt	r2, #:upper16:.LC65
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #12]	@ zero_extendqisi2
	b	snprintf
	.fnend
	.size	rndis_max_pkt_per_xfer_show, .-rndis_max_pkt_per_xfer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_show, %function
rndis_vendorID_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC71
	mov	r0, r4
	movt	r2, #:upper16:.LC71
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #8]
	b	snprintf
	.fnend
	.size	rndis_vendorID_show, .-rndis_vendorID_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_show, %function
rndis_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC73
	mov	r1, #4096
	movt	r2, #:upper16:.LC73
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_ethaddr_show, .-rndis_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_show, %function
rndis_wceis_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC65
	mov	r0, r4
	movt	r2, #:upper16:.LC65
	mov	r1, #4096
	ldrb	r3, [r3, #269]	@ zero_extendqisi2
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_wceis_show, .-rndis_wceis_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_show, %function
rndis_manufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC69
	mov	r0, r4
	movt	r2, #:upper16:.LC69
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	add	r3, r3, #13
	b	snprintf
	.fnend
	.size	rndis_manufacturer_show, .-rndis_manufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_xport_names_show, %function
serial_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC69
	ldr	r3, .L1274
	movt	r2, #:upper16:.LC69
	mov	r1, #4096
	b	snprintf
.L1275:
	.align	2
.L1274:
	.word	.LANCHOR1+3236
	.fnend
	.size	serial_xport_names_show, .-serial_xport_names_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_show, %function
rmnet_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC69
	ldr	r3, .L1277
	movt	r2, #:upper16:.LC69
	mov	r1, #4096
	b	snprintf
.L1278:
	.align	2
.L1277:
	.word	.LANCHOR1+3268
	.fnend
	.size	rmnet_xport_names_show, .-rmnet_xport_names_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_show, %function
rmnet_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC69
	ldr	r3, .L1280
	movt	r2, #:upper16:.LC69
	mov	r1, #4096
	b	snprintf
.L1281:
	.align	2
.L1280:
	.word	.LANCHOR1+3320
	.fnend
	.size	rmnet_transports_show, .-rmnet_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_show, %function
mbim_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC69
	ldr	r3, .L1283
	movt	r2, #:upper16:.LC69
	mov	r1, #4096
	b	snprintf
.L1284:
	.align	2
.L1283:
	.word	.LANCHOR1+3372
	.fnend
	.size	mbim_transports_show, .-mbim_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_out_transfer, %function
start_out_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L1286
	ldr	r0, [r4, #80]
	mov	r5, r1
	ldr	r6, [r4, #96]
	ldr	r7, [r1, #24]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #28]
	ldr	r0, [r4, #80]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L1298
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #28]
	beq	.L1298
	cmn	r3, #95
	bne	.L1290
	ldr	r2, [r7, #4]
	cmp	r2, #0
	beq	.L1298
.L1290:
	ldr	r0, [r4, #76]
	movw	r1, #:lower16:.LC76
	movt	r1, #:upper16:.LC76
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
.L1298:
	mov	r0, #1
.L1288:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1286:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC74
	mov	r3, #716
	movt	r1, #:upper16:.LC74
	ldr	r2, .L1299
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #461
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L1288
.L1300:
	.align	2
.L1299:
	.word	.LANCHOR2+512
	.fnend
	.size	start_out_transfer, .-start_out_transfer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_disconnect, %function
composite_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r0, r0, #32
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	add	r5, r0, #60
	mov	r8, r0
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r8, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L1302
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #64
	beq	.L1304
	mov	r7, #0
.L1303:
	ldr	r3, [r4, #40]
	mov	r0, r4
	cmp	r3, #0
	beq	.L1305
	blx	r3
	str	r7, [r4, #72]
.L1319:
	ldr	r3, [r8, #12]
	ldr	r4, [r4, #64]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #64
	bne	.L1303
.L1304:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2316]
	str	r2, [r8, #12]
	str	r2, [r8, #56]
	ldr	r3, [r3, #32]
	cmp	r3, r2
	beq	.L1308
.L1307:
	mov	r0, r8
	blx	r3
.L1309:
	ldr	r3, [r8, #56]
	cmp	r3, #0
	beq	.L1308
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC77
	movt	r1, #:upper16:.LC77
	add	r0, r0, #32
	bl	_dev_info
	mov	r3, #0
	str	r3, [r8, #56]
.L1308:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1302:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2316]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L1307
	b	.L1309
.L1305:
	str	r3, [r4, #72]
	b	.L1319
	.fnend
	.size	composite_disconnect, .-composite_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_response_complete, %function
rmnet_sdio_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	ip, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC78
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [ip, #32]
	movt	r1, #:upper16:.LC78
	ldr	lr, [ip, #4]
	ldr	ip, [ip, #48]
	ldr	r0, [r4, #76]
	ldr	r0, [r0]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_sdio_response_complete, .-rmnet_sdio_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_response_complete, %function
rmnet_mux_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	ip, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC79
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [ip, #32]
	movt	r1, #:upper16:.LC79
	ldr	lr, [ip, #4]
	ldr	ip, [ip, #48]
	ldr	r0, [r4, #76]
	ldr	r0, [r0]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_mux_response_complete, .-rmnet_mux_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_show_suspended, %function
composite_show_suspended:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldrb	r2, [r0, #16]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC65
	mov	r0, r4
	movt	r1, #:upper16:.LC65
	and	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	composite_show_suspended, .-composite_show_suspended
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alsa_show, %function
midi_alsa_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC72
	mov	r0, r4
	movt	r1, #:upper16:.LC72
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrd	r2, [r3]
	b	sprintf
	.fnend
	.size	midi_alsa_show, .-midi_alsa_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_ro, %function
fsg_show_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	ldr	r2, [r3, #-48]
	movw	r1, #:lower16:.LC65
	movt	r1, #:upper16:.LC65
	cmp	r2, #0
	ldrb	r2, [r3, #-24]	@ zero_extendqisi2
	ubfxne	r2, r2, #1, #1
	andeq	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_ro, .-fsg_show_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_nofua, %function
fsg_show_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC80
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC80
	mov	r0, r2
	lsr	r2, r3, #7
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_nofua, .-fsg_show_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_cdrom, %function
fsg_show_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC65
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC65
	mov	r0, r2
	ubfx	r2, r3, #3, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_cdrom, .-fsg_show_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_stop, %function
eth_qc_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #576]
	ldr	r6, [r0, #1220]
	cmp	r1, #0
	beq	.L1376
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L1367:
	add	r5, r4, #1216
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1366
	ldr	r3, [r6, #108]
	cmp	r3, #0
	beq	.L1366
	mov	r0, r6
	blx	r3
.L1366:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1376:
	movw	r0, #:lower16:.LC81
	movw	r1, #1847
	movt	r0, #:upper16:.LC81
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC82
	movt	r0, #:upper16:.LC82
	bl	printk
	b	.L1367
	.fnend
	.size	eth_qc_stop, .-eth_qc_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_transmit, %function
f_midi_transmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #80]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	str	r3, [sp, #4]
	beq	.L1377
	cmp	r1, #0
	mov	r10, r0
	mov	r5, r1
	beq	.L1424
.L1379:
	mov	r1, #0
	movw	r3, #:lower16:f_midi_complete
	movt	r3, #:upper16:f_midi_complete
	mov	r2, r1
	add	r7, r10, #92
	add	r9, r10, #220
	str	r1, [r5, #4]
	add	fp, r10, #156
	str	r3, [r5, #28]
.L1411:
	ldr	r4, [r9, #4]!
	ldr	r6, [r7, #4]!
	cmp	r4, #0
	beq	.L1380
	ldr	r3, [r4, #4]
	cmp	r6, #0
	cmpne	r3, #0
	beq	.L1380
	ldr	r1, [r10, #328]
	add	r3, r2, #3
	cmp	r1, r3
	bls	.L1380
.L1410:
	mov	r2, #1
	add	r1, sp, #15
	mov	r0, r6
	bl	snd_rawmidi_transmit
	cmp	r0, #1
	bne	.L1425
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	r1, [sp, #15]	@ zero_extendqisi2
	lsl	r3, r3, #4
	cmp	r1, #247
	uxtb	r3, r3
	bhi	.L1426
	cmp	r1, #239
	bls	.L1384
	sub	r2, r1, #241
	cmp	r2, #6
	ldrls	pc, [pc, r2, asl #2]
	b	.L1385
.L1387:
	.word	.L1386
	.word	.L1388
	.word	.L1386
	.word	.L1392
	.word	.L1392
	.word	.L1390
	.word	.L1391
.L1391:
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L1393
	cmp	r2, #6
	bne	.L1427
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	orr	r3, r3, #7
	mvn	r0, #8
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
.L1422:
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	lr, [r3, #1]
	strb	ip, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
.L1392:
	mov	r3, #0
	strb	r3, [r4, #9]
	ldr	r2, [r5, #4]
.L1383:
	ldr	r3, [r10, #328]
	add	r1, r2, #3
	cmp	r1, r3
	bcc	.L1410
.L1380:
	cmp	fp, r7
	bne	.L1411
.L1429:
	cmp	r2, #0
	beq	.L1412
	ldr	r0, [sp, #4]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
.L1377:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1388:
	mov	r2, #2
	mvn	r3, #13
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L1383
.L1386:
	mov	r3, #1
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L1383
.L1385:
	mov	r2, #5
	mvn	r3, #15
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L1383
.L1390:
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #9
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	strb	r0, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L1383
.L1426:
	ldm	r5, {r0, r2}
	orr	r3, r3, #15
	mov	ip, #0
	strb	r3, [r0, r2]
	add	r0, r0, r2
	add	r2, r2, #4
	strb	r1, [r0, #1]
	strb	ip, [r0, #2]
	strb	ip, [r0, #3]
	str	r2, [r5, #4]
	b	.L1383
.L1384:
	tst	r1, #128
	bne	.L1428
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	sub	r2, r2, #1
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L1423
.L1400:
	.word	.L1399
	.word	.L1401
	.word	.L1402
	.word	.L1403
	.word	.L1404
	.word	.L1405
.L1405:
	ldr	r0, [r5]
	orr	r3, r3, #4
	ldr	r8, [r5]
	ldr	r2, [r5, #4]
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	add	r0, r0, r2
	strb	r3, [r8, r2]
	add	r2, r2, #4
	mov	r3, #4
	strb	lr, [r0, #1]
	strb	ip, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	strb	r3, [r4, #9]
.L1423:
	ldr	r2, [r5, #4]
	b	.L1383
.L1404:
	mov	r3, #6
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L1383
.L1403:
	mov	r3, #5
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L1383
.L1402:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	ldrb	lr, [r4, #11]	@ zero_extendqisi2
	cmp	ip, #239
	orrls	r2, r3, ip, lsr #4
	orrhi	r2, r3, #3
	movls	r3, #2
	movhi	r3, #0
	strb	r3, [r4, #9]
	ldr	r0, [r5]
	ldr	r8, [r5]
	ldr	r3, [r5, #4]
	strb	r2, [r8, r3]
	add	r0, r0, r3
	add	r2, r3, #4
	strb	ip, [r0, #1]
	strb	lr, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	b	.L1383
.L1401:
	mov	r3, #3
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L1383
.L1399:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	mov	lr, #0
	cmp	ip, #239
	movhi	r2, #0
	orrls	r3, r3, ip, lsr #4
	orrhi	r3, r3, #2
	strbhi	r2, [r4, #9]
	ldm	r5, {r0, r2}
	strb	r3, [r0, r2]
	add	r0, r0, r2
	add	r2, r2, #4
	strb	ip, [r0, #1]
	strb	r1, [r0, #2]
	strb	lr, [r0, #3]
	str	r2, [r5, #4]
	b	.L1383
.L1428:
	add	r3, r1, #64
	strb	r1, [r4, #10]
	uxtb	r3, r3
	cmp	r3, #31
	movhi	r3, #2
	strbls	r0, [r4, #9]
	strbhi	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L1383
.L1425:
	mov	r3, #0
	cmp	fp, r7
	str	r3, [r4, #4]
	ldr	r2, [r5, #4]
	bne	.L1411
	b	.L1429
.L1427:
	cmp	r2, #4
	bne	.L1392
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #8
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	b	.L1392
.L1393:
	orr	r3, r3, #6
	mvn	ip, #8
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
	b	.L1422
.L1424:
	mov	r0, r3
	ldr	r1, [r10, #328]
	bl	midi_alloc_ep_req
	subs	r5, r0, #0
	bne	.L1379
	ldr	r0, [r10, #76]
	movw	r1, #:lower16:.LC83
	movt	r1, #:upper16:.LC83
	add	r0, r0, #32
	bl	dev_err
	b	.L1377
.L1412:
	ldr	r0, [r5]
	bl	kfree
	ldr	r0, [sp, #4]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L1377
	.fnend
	.size	f_midi_transmit, .-f_midi_transmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_tasklet, %function
f_midi_in_tasklet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	b	f_midi_transmit
	.fnend
	.size	f_midi_in_tasklet, .-f_midi_in_tasklet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_register_card, %function
f_midi_register_card:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r0, [r0, #320]
	add	r2, sp, #8
	ldr	r1, [r4, #324]
	str	r2, [sp]
	mov	r2, r3
	bl	snd_card_create
	subs	r5, r0, #0
	blt	.L1442
	ldr	r0, [sp, #8]
	mov	r2, r4
	mov	r1, #8192
	ldr	r3, .L1445
	str	r0, [r4, #88]
	bl	snd_device_new
	subs	r5, r0, #0
	blt	.L1443
	movw	r2, #:lower16:.LC86
	movw	r3, #:lower16:.LC87
	ldr	r0, [sp, #8]
	movt	r2, #:upper16:.LC86
	movt	r3, #:upper16:.LC87
	ldm	r2, {r5, lr}
	movw	r1, #:lower16:.LC88
	ldr	ip, [r2, #8]
	movt	r1, #:upper16:.LC88
	ldrh	r7, [r3, #4]
	ldr	r8, [r3]
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	str	r5, [r0, #20]	@ unaligned
	str	lr, [r0, #24]	@ unaligned
	str	ip, [r0, #28]	@ unaligned
	str	r8, [r0, #36]	@ unaligned
	strh	r7, [r0, #40]	@ unaligned
	strb	r3, [r0, #42]
	str	r5, [r0, #68]	@ unaligned
	str	lr, [r0, #72]	@ unaligned
	str	ip, [r0, #76]	@ unaligned
	bl	snd_component_add
	ldr	r0, [sp, #8]
	add	ip, sp, #12
	mov	r2, #0
	ldr	r1, [r4, #312]
	ldr	r3, [r4, #316]
	stm	sp, {r1, ip}
	add	r1, r0, #68
	bl	snd_rawmidi_new
	subs	r5, r0, #0
	blt	.L1444
	ldr	r1, [sp, #8]
	ldr	r5, [sp, #12]
	add	r1, r1, #36
	add	r0, r5, #84
	str	r5, [r4, #92]
	bl	strcpy
	mov	r3, #7
	mov	r0, r5
	ldr	r2, .L1445+4
	mov	r1, #0
	str	r3, [r5, #16]
	str	r4, [r5, #200]
	bl	snd_rawmidi_set_ops
	ldr	r0, [sp, #12]
	mov	r1, #1
	ldr	r2, .L1445+8
	bl	snd_rawmidi_set_ops
	ldr	r3, [r4, #76]
	ldr	r2, [sp, #8]
	add	r3, r3, #32
	mov	r0, r2
	str	r3, [r2, #500]
	bl	snd_card_register
	subs	r5, r0, #0
	movge	r5, #0
	bge	.L1431
	ldr	r0, [r4, #76]
	movw	r1, #:lower16:.LC90
	movt	r1, #:upper16:.LC90
	add	r0, r0, #32
	bl	dev_err
	b	.L1433
.L1443:
	ldr	r0, [r4, #76]
	movw	r1, #:lower16:.LC85
	mov	r2, r5
	movt	r1, #:upper16:.LC85
	add	r0, r0, #32
	bl	dev_err
.L1433:
	ldr	r0, [r4, #88]
	cmp	r0, #0
	beq	.L1431
	bl	snd_card_free
	mov	r3, #0
	str	r3, [r4, #88]
.L1431:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1442:
	ldr	r0, [r4, #76]
	movw	r1, #:lower16:.LC84
	movt	r1, #:upper16:.LC84
	add	r0, r0, #32
	bl	dev_err
	b	.L1433
.L1444:
	ldr	r0, [r4, #76]
	movw	r1, #:lower16:.LC89
	mov	r2, r5
	movt	r1, #:upper16:.LC89
	add	r0, r0, #32
	bl	dev_err
	b	.L1433
.L1446:
	.align	2
.L1445:
	.word	.LANCHOR0+244
	.word	.LANCHOR0+256
	.word	.LANCHOR0+272
	.fnend
	.size	f_midi_register_card, .-f_midi_register_card
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_trigger, %function
f_midi_out_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #28]
	cmp	r1, #0
	ldr	r0, [r0, #12]
	ldr	r1, [r3, #200]
	add	r1, r1, #288
	bne	.L1449
	b	_clear_bit
.L1449:
	b	_set_bit
	.fnend
	.size	f_midi_out_trigger, .-f_midi_out_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_disconnect_w, %function
gctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #52]
	tst	r3, #1
	bne	.L1452
	bx	lr
.L1452:
	add	r1, r0, #52
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	gctrl_disconnect_w, .-gctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect_w, %function
ghsic_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #76]
	tst	r3, #1
	bne	.L1455
	bx	lr
.L1455:
	add	r1, r0, #76
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	ghsic_data_disconnect_w, .-ghsic_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_remove, %function
ghsuart_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	str	r6, [sp, #8]
	movt	r2, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1880]
	add	r6, r4, #8
	add	r5, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r4, #12]
	mov	r1, r0
	mov	r0, r6
	cmp	r4, #0
	beq	.L1464
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L1459
	mov	r0, r4
	blx	r3
.L1459:
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit
	mov	r1, r5
	mov	r0, #2
	bl	_clear_bit
.L1458:
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1464:
	bl	_raw_spin_unlock_irqrestore
	b	.L1458
	.fnend
	.size	ghsuart_ctrl_remove, .-ghsuart_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_trigger, %function
f_midi_in_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	add	r3, r3, #56
	ldr	r2, [r2, #200]
	ldr	r3, [r2, r3, lsl #2]
	cmp	r3, #0
	bxeq	lr
	cmp	r1, #0
	str	r1, [r3, #4]
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r1, r2, #296
	mov	r0, #0
	add	r4, r2, #292
	str	lr, [sp, #4]
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L1476
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1476:
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__tasklet_hi_schedule
	.fnend
	.size	f_midi_in_trigger, .-f_midi_in_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cpkt_tomodem, %function
ghsuart_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	ip, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r3, #1876]
	cmp	r0, r1
	bcs	.L1488
	mov	r1, #84
	mla	r3, r1, r0, r3
	ldr	r4, [r3, #1880]
	cmp	r4, #0
	beq	.L1489
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L1490
	mov	r1, #32
	mov	r0, r2
	mov	r6, r2
	bl	__kmalloc
	subs	r7, r0, #0
	mvneq	r0, #11
	beq	.L1477
	mov	r2, r6
	mov	r1, r5
	bl	memcpy
	ldr	r1, .L1492
	ldr	r0, .L1492+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L1491
.L1482:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree
	mvn	r0, #18
.L1477:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1490:
	ldr	r3, [r4, #104]
	add	r3, r3, #1
	str	r3, [r4, #104]
	b	.L1477
.L1489:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L1492
	movt	r0, #:upper16:.LC15
	bl	printk
	mvn	r0, #18
	b	.L1477
.L1488:
	movw	r0, #:lower16:.LC19
	mov	r2, ip
	ldr	r1, .L1492
	movt	r0, #:upper16:.LC19
	bl	printk
	mvn	r0, #18
	b	.L1477
.L1491:
	movw	r0, #:lower16:.LC91
	mvn	r2, #18
	ldr	r1, .L1492
	movt	r0, #:upper16:.LC91
	bl	printk
	b	.L1482
.L1493:
	.align	2
.L1492:
	.word	.LANCHOR2+532
	.word	.LANCHOR0+288
	.fnend
	.size	ghsuart_send_cpkt_tomodem, .-ghsuart_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disable, %function
rmnet_smd_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r3, #0
	str	lr, [sp, #4]
	ldr	r0, [r0, #88]
	str	r3, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1495
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L1495:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1496
	blx	r2
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
.L1496:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1497
	blx	r2
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
.L1497:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r1, r4, #400
	ldr	r0, [r4, #380]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	queue_work
	.fnend
	.size	rmnet_smd_disable, .-rmnet_smd_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_ch_probe, %function
rmnet_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r3, #3424]
	ldr	r0, [r3, #380]
	add	r1, r3, #384
	bl	queue_work
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_ch_probe, .-rmnet_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_setup, %function
rmnet_sdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #184]
	ldrh	r8, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldr	r5, [r7, #4]
	beq	.L1519
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r9, r1
	mov	r4, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1512
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1513
	cmp	r3, #8448
	beq	.L1524
.L1521:
	mvn	r4, #94
.L1510:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1513:
	cmp	r8, #0
	bne	.L1521
	ldrh	r3, [r1, #4]	@ unaligned
	add	r10, r0, #180
	mov	r0, r10
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r2, r4
	ldr	fp, [r2, #112]!
	cmp	fp, r2
	beq	.L1525
	ldm	fp, {r1, r2}
	mov	lr, #256
	mov	ip, #512
	mov	r0, r10
	mov	r9, fp
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [fp]
	str	ip, [fp, #4]
	ldr	r2, [r4, #120]
	sub	r2, r2, #1
	str	r2, [r4, #120]
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r8}
	ldr	r0, [r5]
	cmp	r6, r8
	movcc	r8, r6
	mov	r2, r8
	bl	memcpy
	movw	r3, #:lower16:rmnet_sdio_response_complete
	str	r4, [r5, #32]
	movt	r3, #:upper16:rmnet_sdio_response_complete
	str	r3, [r5, #28]
	ldr	r0, [r9, #-8]!
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r3, [r4, #356]
	cmp	r8, r6
	movge	r6, #0
	movlt	r6, #1
	add	r3, r3, #1
	str	r3, [r4, #356]
.L1515:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r8, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1510
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC51
	mov	r2, r4
	movt	r1, #:upper16:.LC51
	add	r0, r0, #32
	bl	dev_err
	b	.L1510
.L1524:
	movw	r3, #:lower16:rmnet_sdio_command_complete
	mov	r8, r6
	str	r0, [r5, #32]
	movt	r3, #:upper16:rmnet_sdio_command_complete
	mov	r6, #0
	str	r3, [r5, #28]
	b	.L1515
.L1512:
	ldr	r3, [r0, #320]
	tst	r8, #1
	add	r1, r0, #324
	mov	r8, #0
	ldr	r0, [r0, #192]
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r4, #320]
	bl	queue_work
	subs	r6, r6, r8
	movne	r6, #1
	b	.L1515
.L1519:
	mvn	r4, #106
	b	.L1510
.L1525:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC92
	str	r8, [sp]
	ldr	r2, [sp, #20]
	movt	r1, #:upper16:.LC92
	mvn	r4, #94
	ldrb	r3, [r9, #1]	@ zero_extendqisi2
	add	r0, r0, #32
	str	r2, [sp, #4]
	ldrb	r2, [r9]	@ zero_extendqisi2
	str	r6, [sp, #8]
	bl	_dev_info
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L1510
	.fnend
	.size	rmnet_sdio_setup, .-rmnet_sdio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_unthrottle, %function
gs_unthrottle:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	cmp	r4, #0
	beq	.L1526
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1528
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3428]
	bl	queue_work
.L1528:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L1526:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_unthrottle, .-gs_unthrottle
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_read_complete, %function
gs_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	add	r7, r4, #48
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r5, #48]
	add	lr, r5, #36
	movw	r2, #:lower16:.LANCHOR1
	ldr	r3, [r4, #128]
	movt	r2, #:upper16:.LANCHOR1
	mov	r6, r0
	ldr	ip, [r4, #52]
	str	lr, [r4, #52]
	ldr	r0, [r2, #3428]
	add	r3, r3, r1
	add	r1, r4, #60
	str	r3, [r4, #128]
	str	r7, [r5, #36]
	str	ip, [r5, #40]
	str	lr, [ip]
	bl	queue_work
	ldr	r8, [sp, #16]
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_read_complete, .-gs_read_complete
	.align	2
	.global	gsdio_write_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write_complete, %function
gsdio_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	cmp	r4, #0
	beq	.L1547
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	mov	r5, r1
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	add	r2, r5, #36
	ldr	r1, [r3, #52]!
	mov	r8, r0
	str	r2, [r1, #4]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	ldr	r3, [r4, #76]
	str	r2, [r4, #52]
	add	r3, r3, #1
	str	r3, [r4, #76]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L1538
	cmp	r3, #0
	bne	.L1548
.L1539:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3432]
	bl	queue_work
.L1538:
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1548:
	ldr	ip, [r6, #4]
	movw	r0, #:lower16:.LC93
	mov	r2, r4
	ldr	r1, .L1549
	movt	r0, #:upper16:.LC93
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
	b	.L1539
.L1547:
	ldr	r1, .L1549
	movw	r0, #:lower16:.LC15
	movt	r0, #:upper16:.LC15
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L1550:
	.align	2
.L1549:
	.word	.LANCHOR2+560
	.fnend
	.size	gsdio_write_complete, .-gsdio_write_complete
	.align	2
	.global	gsdio_ctrl_notify_modem
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_notify_modem, %function
gsdio_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	ip, [r4]
	str	lr, [sp, #12]
	cmp	r1, ip
	bcs	.L1564
	cmp	r0, #0
	beq	.L1565
	mov	ip, #108
	lsl	r2, r2, #1
	mla	r1, ip, r1, r4
	and	r2, r2, #2
	ldr	r5, [r1, #28]
	ldr	r1, [r5, #176]
	cmp	r1, r2
	beq	.L1551
	ldr	r1, [r5, #108]
	str	r2, [r5, #176]
	cmp	r1, #0
	beq	.L1566
	cmp	r2, #0
	beq	.L1556
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L1556
	ldr	r1, [r5, #172]
	blx	r3
.L1556:
	add	r1, r5, #80
	ldr	r0, [r4, #3432]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
.L1551:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1565:
	movw	r0, #:lower16:.LC95
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC95
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L1567
	b	printk
.L1564:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC94
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L1567
	b	printk
.L1566:
	movw	r0, #:lower16:.LC96
	mov	r2, r5
	ldr	r3, [r5]
	ldr	r1, .L1567
	movt	r0, #:upper16:.LC96
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1568:
	.align	2
.L1567:
	.word	.LANCHOR2+584
	.fnend
	.size	gsdio_ctrl_notify_modem, .-gsdio_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_write_complete, %function
gsmd_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r7, [r0]
	.pad #12
	sub	sp, sp, #12
	cmp	r7, #0
	beq	.L1581
	add	r6, r7, #4
	mov	r5, r0
	mov	r0, r6
	mov	r4, r1
	bl	_raw_spin_lock
	ldr	r3, [r7, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L1571
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L1571
	cmp	r3, #0
	bne	.L1582
.L1573:
	mov	r3, r7
	add	ip, r4, #36
	ldr	lr, [r3, #44]!
	movw	r2, #:lower16:.LANCHOR1
	add	r1, r7, #52
	movt	r2, #:upper16:.LANCHOR1
	ldr	r0, [r2, #3436]
	str	ip, [lr, #4]
	str	lr, [r4, #36]
	str	r3, [r4, #40]
	str	ip, [r7, #44]
	bl	queue_work
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L1571:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L1581:
	ldr	r1, .L1583
	movw	r0, #:lower16:.LC15
	movt	r0, #:upper16:.LC15
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L1582:
	ldr	ip, [r5, #4]
	movw	r0, #:lower16:.LC93
	mov	r2, r7
	ldr	r1, .L1583
	movt	r0, #:upper16:.LC93
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r7]
	bl	printk
	b	.L1573
.L1584:
	.align	2
.L1583:
	.word	.LANCHOR2+608
	.fnend
	.size	gsmd_write_complete, .-gsmd_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_probe, %function
ghsuart_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	str	r6, [sp, #8]
	movt	r2, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	mov	r0, #1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1880]
	add	r1, r4, #88
	add	r5, r4, #8
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L1586
	add	r1, r4, #36
	ldr	r0, [r4, #32]
	bl	queue_work
.L1586:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ghsuart_ctrl_probe, .-ghsuart_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_probe, %function
ghsuart_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r2, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	ldr	r1, [r2, #2048]
	cmp	r1, r3
	bls	.L1596
	mov	r1, #84
	mov	r0, #1
	mla	r2, r1, r3, r2
	ldr	r4, [r2, #2052]
	add	r1, r4, #188
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L1591
	add	r1, r4, #112
	ldr	r0, [r4, #108]
	bl	queue_work
	mov	r0, #0
.L1591:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1596:
	movw	r0, #:lower16:.LC97
	mov	r2, r3
	ldr	r1, .L1597
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
	b	.L1591
.L1598:
	.align	2
.L1597:
	.word	.LANCHOR2+628
	.fnend
	.size	ghsuart_data_probe, .-ghsuart_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_suspend, %function
ecm_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #3440]
	ldr	r0, [r3, #3444]
	add	r1, r1, #200
	b	queue_work
	.fnend
	.size	ecm_qc_suspend, .-ecm_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_suspend, %function
mbim_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC98
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L1602
	movt	r0, #:upper16:.LC98
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r1, [r3, #3440]
	ldr	r0, [r3, #3444]
	add	r1, r1, #200
	b	queue_work
.L1603:
	.align	2
.L1602:
	.word	.LANCHOR2+648
	.fnend
	.size	mbim_suspend, .-mbim_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_resume, %function
ecm_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #3440]
	ldr	r0, [r3, #3444]
	add	r1, r1, #216
	b	queue_work
	.fnend
	.size	ecm_qc_resume, .-ecm_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_resume, %function
mbim_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC99
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L1607
	movt	r0, #:upper16:.LC99
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r1, [r3, #3440]
	ldr	r0, [r3, #3444]
	add	r1, r1, #216
	b	queue_work
.L1608:
	.align	2
.L1607:
	.word	.LANCHOR2+664
	.fnend
	.size	mbim_resume, .-mbim_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_read_stats, %function
rmnet_smd_debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:kmalloc_caches
	strd	r6, [sp, #8]
	movt	r5, #:upper16:kmalloc_caches
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #260
	sub	sp, sp, #260
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	add	lr, r4, #252
	add	ip, r4, #316
	ldrd	r2, [lr, #8]
	ldrd	r0, [lr, #16]
	ldrd	r6, [lr, #24]
	strd	r2, [sp, #136]
	ldrd	r2, [lr, #32]
	strd	r0, [sp, #144]
	ldrd	r0, [lr, #40]
	strd	r6, [sp, #152]
	ldrd	r6, [lr, #48]
	strd	r2, [sp, #160]
	ldrd	r2, [lr, #56]
	strd	r0, [sp, #168]
	ldrd	r0, [ip]
	strd	r6, [sp, #176]
	ldrd	r6, [ip, #8]
	strd	r2, [sp, #184]
	ldrd	r2, [ip, #16]
	strd	r0, [sp, #192]
	ldrd	r0, [ip, #24]
	strd	r6, [sp, #200]
	ldrd	r6, [ip, #32]
	strd	r2, [sp, #208]
	ldrd	r2, [ip, #40]
	strd	r0, [sp, #216]
	strd	r6, [sp, #224]
	ldrd	r0, [ip, #48]
	ldrd	r6, [ip, #56]
	strd	r2, [sp, #232]
	ldrd	r2, [r4, #252]
	strd	r0, [sp, #240]
	ldr	r0, [r5, #36]
	strd	r2, [sp, #128]
	strd	r6, [sp, #248]
	cmp	r0, #0
	beq	.L1612
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1615
.L1610:
	add	r10, r4, #156
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #160]
	ldr	r3, [r4, #432]
	ldr	r2, [r4, #436]
	ldr	r8, [r4, #416]
	ldr	r9, [r4, #420]
	ldr	r7, [r4, #424]
	ldr	ip, [r4, #440]
	strd	r2, [sp, #72]
	ldr	r3, [sp, #172]
	ldr	r2, [sp, #236]
	sub	r1, r9, r8
	ldr	r6, [r4, #428]
	str	r0, [sp, #112]
	ldr	r0, [r4, #252]
	str	ip, [sp, #80]
	ldr	fp, [r4, #444]
	str	lr, [sp, #96]
	strd	r2, [sp, #116]
	str	r1, [sp, #124]
	bl	smd_read_avail
	str	r0, [sp, #100]
	ldr	r0, [r4, #252]
	bl	smd_write_avail
	str	r0, [sp, #104]
	ldr	r0, [r4, #316]
	bl	smd_read_avail
	str	r0, [sp, #108]
	ldr	r0, [r4, #316]
	sub	r4, r7, r6
	bl	smd_write_avail
	ldr	r3, [sp, #76]
	str	r8, [sp, #12]
	ldr	ip, [sp, #80]
	str	r6, [sp, #24]
	ldr	r2, [sp, #116]
	str	r4, [sp, #28]
	ldr	r6, [sp, #72]
	ldr	r1, [sp, #96]
	sub	ip, ip, fp
	ldr	r4, [sp, #76]
	str	r2, [sp]
	ldr	r2, [sp, #72]
	str	r0, [sp, #68]
	mov	r0, r5
	str	ip, [sp, #52]
	ldr	ip, [sp, #100]
	stmib	sp, {r1, r9}
	ldr	r1, [sp, #124]
	sub	lr, r2, r3
	movw	r2, #:lower16:.LC100
	ldr	r3, [sp, #120]
	movt	r2, #:upper16:.LC100
	str	ip, [sp, #56]
	ldr	ip, [sp, #104]
	str	lr, [sp, #40]
	ldr	lr, [sp, #80]
	str	r1, [sp, #16]
	mov	r1, #512
	str	r7, [sp, #20]
	str	r6, [sp, #32]
	str	ip, [sp, #60]
	ldr	ip, [sp, #108]
	str	r4, [sp, #36]
	str	lr, [sp, #44]
	str	fp, [sp, #48]
	str	ip, [sp, #64]
	bl	scnprintf
	mov	r4, r0
	ldr	r1, [sp, #112]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r3, r5
	ldrd	r0, [sp, #84]
	ldr	r2, [sp, #92]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1609:
	mov	r0, r4
	add	sp, sp, #260
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1612:
	mov	r5, #16
	b	.L1610
.L1615:
	mvn	r4, #11
	b	.L1609
	.fnend
	.size	rmnet_smd_debug_read_stats, .-rmnet_smd_debug_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_read_stats, %function
rmnet_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #64
	sub	sp, sp, #64
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L1619
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1622
.L1617:
	add	r6, r4, #180
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #188]
	movw	r2, #:lower16:.LC101
	mov	r10, r0
	ldr	ip, [r4, #312]
	movt	r2, #:upper16:.LC101
	mov	r0, r5
	ldr	r3, [r4, #344]
	str	ip, [sp, #56]
	ldr	ip, [r4, #308]
	str	r1, [sp, #48]
	mov	r1, #4096
	str	ip, [sp, #52]
	ldr	ip, [r4, #120]
	str	ip, [sp, #44]
	ldr	ip, [r4, #356]
	str	ip, [sp, #40]
	ldr	ip, [r4, #320]
	str	ip, [sp, #36]
	ldr	ip, [r4, #108]
	str	ip, [sp, #32]
	ldr	ip, [r4, #360]
	str	ip, [sp, #28]
	ldr	ip, [r4, #316]
	str	ip, [sp, #24]
	ldr	ip, [r4, #172]
	str	ip, [sp, #20]
	ldr	ip, [r4, #160]
	str	ip, [sp, #16]
	ldr	ip, [r4, #348]
	str	ip, [sp, #12]
	ldr	ip, [r4, #352]
	str	ip, [sp, #8]
	ldr	ip, [r4, #144]
	str	ip, [sp, #4]
	ldr	ip, [r4, #132]
	str	ip, [sp]
	bl	scnprintf
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1616:
	mov	r0, r4
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1619:
	mov	r5, #16
	b	.L1617
.L1622:
	mvn	r4, #11
	b	.L1616
	.fnend
	.size	rmnet_sdio_read_stats, .-rmnet_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_read_stats, %function
rmnet_mux_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #92
	sub	sp, sp, #92
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L1627
	mov	r2, #1024
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1631
.L1624:
	add	r6, r4, #356
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #200]
	ldr	r2, [r4, #352]
	ldr	fp, [r4, #392]
	ldr	r1, [r4, #396]
	str	r3, [sp, #60]
	ldr	r3, [r4, #224]
	str	r0, [sp, #84]
	ldr	r0, [r4, #400]
	sub	r2, r2, #1
	cmp	r2, #9
	ldr	r10, [r4, #404]
	movwhi	ip, #:lower16:.LC102
	ldr	lr, [r4, #412]
	str	r3, [sp, #64]
	ldr	r3, [r4, #300]
	movthi	ip, #:upper16:.LC102
	str	r3, [sp, #68]
	ldr	r3, [r4, #324]
	str	r0, [sp, #72]
	ldr	r0, [r4, #408]
	str	r3, [sp, #76]
	ldr	r3, [r4, #336]
	str	r3, [sp, #80]
	ldr	r3, [r4, #340]
	str	r3, [sp, #56]
	ldr	r3, [r4, #388]
	bls	.L1632
.L1626:
	ldr	r4, [r4, #344]
	movw	r2, #:lower16:.LC103
	str	fp, [sp]
	str	r10, [sp, #12]
	ldr	r10, [sp, #56]
	movt	r2, #:upper16:.LC103
	str	lr, [sp, #36]
	ldr	lr, [sp, #76]
	strd	r0, [sp, #4]
	mov	r1, #1024
	mov	r0, r5
	str	r10, [sp, #16]
	ldr	r10, [sp, #60]
	str	ip, [sp, #48]
	str	r4, [sp, #52]
	str	r10, [sp, #20]
	ldr	r10, [sp, #64]
	str	lr, [sp, #40]
	ldr	lr, [sp, #80]
	str	r10, [sp, #24]
	ldr	r10, [sp, #68]
	str	r10, [sp, #28]
	ldr	r10, [sp, #72]
	str	lr, [sp, #44]
	str	r10, [sp, #32]
	bl	scnprintf
	mov	r4, r0
	ldr	r1, [sp, #84]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1623:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1632:
	movw	ip, #:lower16:.LANCHOR2
	movt	ip, #:upper16:.LANCHOR2
	add	r2, ip, r2, lsl #2
	ldr	ip, [r2, #676]
	b	.L1626
.L1627:
	mov	r5, #16
	b	.L1624
.L1631:
	mvn	r4, #11
	b	.L1623
	.fnend
	.size	rmnet_mux_read_stats, .-rmnet_mux_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_status, %function
debug_read_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r3
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #20
	sub	sp, sp, #20
	ldr	r0, [ip, #36]
	ldmib	r5, {r7, r8}
	cmp	r0, #0
	beq	.L1639
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L1649
.L1634:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LC104
	mov	r1, #512
	ldr	r3, [r5, #128]
	movt	r2, #:upper16:.LC104
	str	r0, [sp, #8]
	mov	r0, r6
	bl	scnprintf
	movw	r2, #:lower16:.LC105
	rsb	r1, r0, #512
	ldr	r3, [r5, #132]
	mov	r4, r0
	movt	r2, #:upper16:.LC105
	add	r0, r6, r0
	bl	scnprintf
	ldr	ip, [r5, #128]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC106
	ldr	r3, [r5, #132]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC106
	sub	r3, ip, r3
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC107
	ldr	r3, [r5, #136]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC107
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC108
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC108
	bl	scnprintf
	ldr	ip, [r5, #136]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC109
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC109
	sub	r3, ip, r3
	bl	scnprintf
	cmp	r8, #0
	add	r4, r4, r0
	mov	r3, r4
	beq	.L1636
	movw	r2, #:lower16:.LC110
	rsb	r1, r4, #512
	ldr	r3, [r8, #164]
	add	r0, r6, r4
	movt	r2, #:upper16:.LC110
	bl	scnprintf
	add	r4, r4, r0
	mov	r3, r4
.L1636:
	ldr	r2, [r7, #100]
	cmp	r2, #0
	beq	.L1637
	mov	r0, r7
	blx	r2
	cmp	r0, #0
	movw	r2, #:lower16:.LC111
	movne	r3, #2
	moveq	r3, #0
	movt	r2, #:upper16:.LC111
	rsb	r1, r4, #512
	add	r0, r6, r4
	bl	scnprintf
	add	r3, r4, r0
.L1637:
	mov	r0, r5
	ldr	r1, [sp, #8]
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #12]
	mov	r2, fp
	mov	r1, r10
	mov	r0, r9
	str	r3, [sp]
	mov	r3, r6
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L1633:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1639:
	mov	r6, #16
	b	.L1634
.L1649:
	mvn	r4, #11
	b	.L1633
	.fnend
	.size	debug_read_status, .-debug_read_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_read_stats, %function
debug_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L1656
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L1660
.L1651:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r5, [r8]
	cmp	r5, #0
	beq	.L1654
	mov	r5, #0
	movw	r3, #:lower16:.LC112
	movt	r3, #:upper16:.LC112
	mov	r6, r5
	add	r7, r8, #4
	str	r3, [sp, #48]
.L1653:
	ldr	r4, [r7, #24]
	add	r7, r7, #108
	add	r9, r4, #4
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #112]
	mov	r3, r6
	rsb	r1, r5, #4096
	mov	fp, r0
	ldr	r2, [sp, #48]
	add	r0, r10, r5
	add	r6, r6, #1
	str	ip, [sp, #40]
	ldr	ip, [r4, #108]
	str	ip, [sp, #36]
	ldr	ip, [r4, #8]
	str	ip, [sp, #32]
	ldr	ip, [r4, #76]
	str	ip, [sp, #28]
	ldr	ip, [r4, #48]
	str	ip, [sp, #24]
	ldr	ip, [r4, #44]
	str	ip, [sp, #20]
	ldr	ip, [r4, #172]
	str	ip, [sp, #16]
	ldr	ip, [r4, #176]
	str	ip, [sp, #12]
	ldr	ip, [r4, #184]
	str	ip, [sp, #8]
	ldr	ip, [r4, #180]
	stm	sp, {r4, ip}
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8]
	cmp	r6, r3
	bcc	.L1653
.L1654:
	mov	r3, r10
	ldrd	r0, [sp, #52]
	str	r5, [sp]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L1650:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1656:
	mov	r10, #16
	b	.L1651
.L1660:
	mvn	r4, #11
	b	.L1650
	.fnend
	.size	debug_sdio_read_stats, .-debug_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_read_stats, %function
debug_smd_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #36]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L1668
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #64]
	beq	.L1674
.L1662:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #220]
	cmp	r3, #0
	beq	.L1666
	add	fp, r7, #224
	mov	r6, #0
	movw	r3, #:lower16:.LC113
	mov	r8, fp
	movt	r3, #:upper16:.LC113
	mov	r9, r6
	mov	fp, r7
	str	r3, [sp, #72]
.L1665:
	ldr	r3, [sp, #64]
	ldr	r7, [r8, #24]
	add	r3, r3, r9
	add	r5, r7, #4
	ldr	r10, [r7, #72]
	str	r3, [sp, #44]
	rsb	r3, r9, #512
	mov	r0, r5
	str	r3, [sp, #48]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #8]
	ldr	r4, [r10]
	str	r3, [sp, #60]
	ldr	r3, [r7, #156]
	cmp	r4, #0
	moveq	lr, r4
	str	r3, [sp, #52]
	ldr	r3, [r7, #160]
	str	r0, [sp, #68]
	mov	r0, r4
	str	r3, [sp, #56]
	ldr	r3, [r7, #164]
	ldr	r7, [r7, #168]
	str	r3, [sp, #48]
	beq	.L1664
	bl	smd_read_avail
	ldr	lr, [r10]
	mov	r4, r0
	cmp	lr, #0
	mov	r0, lr
	beq	.L1664
	bl	smd_write_avail
	mov	lr, r0
.L1664:
	ldr	ip, [r10, #8]
	rsb	r1, r9, #512
	add	r8, r8, #108
	ldr	r10, [r10, #8]
	str	r7, [sp]
	ldr	r0, [sp, #44]
	str	r4, [sp, #20]
	ldr	r7, [sp, #52]
	ldr	r3, [sp, #48]
	and	ip, ip, #1
	ubfx	r10, r10, #1, #1
	ldr	r2, [sp, #72]
	str	lr, [sp, #24]
	str	r7, [sp, #8]
	ldr	r7, [sp, #56]
	str	r3, [sp, #4]
	mov	r3, r6
	add	r6, r6, #1
	str	ip, [sp, #28]
	str	r7, [sp, #12]
	ldr	r7, [sp, #60]
	str	r10, [sp, #32]
	str	r7, [sp, #16]
	bl	scnprintf
	add	r9, r9, r0
	ldr	r1, [sp, #68]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #220]
	cmp	r6, r3
	bcc	.L1665
	mov	r3, r9
.L1666:
	ldr	r5, [sp, #64]
	str	r3, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1661:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1668:
	mov	r3, #16
	str	r3, [sp, #64]
	b	.L1662
.L1674:
	mvn	r4, #11
	b	.L1661
	.fnend
	.size	debug_smd_read_stats, .-debug_smd_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_read_stats, %function
gbam_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r3
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	cmp	r0, #0
	beq	.L1681
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1685
.L1676:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #440]
	cmp	r2, #0
	ble	.L1686
	ldr	r4, [r3, #444]
	cmp	r4, #0
	beq	.L1679
	add	r6, r4, #4
	add	r7, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r4, #20]
	add	ip, r4, #20
	movw	r2, #:lower16:.LC114
	ldr	r1, [r4, #20]
	movt	r2, #:upper16:.LC114
	mov	r3, #0
	ubfx	r0, r0, #1, #1
	ubfx	r1, r1, #2, #1
	strd	r0, [sp, #52]
	ldr	lr, [r4, #68]
	mov	r1, #1024
	mov	r0, r5
	str	lr, [sp, #48]
	ldr	lr, [r4, #44]
	str	lr, [sp, #44]
	ldr	lr, [r4, #280]
	str	lr, [sp, #40]
	ldr	lr, [r4, #276]
	str	lr, [sp, #36]
	ldr	lr, [r4, #272]
	str	lr, [sp, #32]
	ldr	lr, [r4, #268]
	str	lr, [sp, #28]
	ldr	lr, [r4, #248]
	str	lr, [sp, #24]
	ldr	lr, [r4, #244]
	str	lr, [sp, #20]
	ldr	lr, [r4, #240]
	str	lr, [sp, #16]
	ldr	lr, [r4, #260]
	str	lr, [sp, #12]
	ldr	lr, [r4, #264]
	stm	sp, {r4, ip, lr}
	bl	scnprintf
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L1679:
	str	r4, [sp]
	mov	r2, r10
	mov	r1, r9
	mov	r0, r8
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1675:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1686:
	mov	r4, #0
	b	.L1679
.L1681:
	mov	r5, #16
	b	.L1676
.L1685:
	mvn	r4, #11
	b	.L1675
	.fnend
	.size	gbam_read_stats, .-gbam_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_read_stats, %function
gsmd_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L1695
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #60]
	beq	.L1706
.L1688:
	ldr	r4, .L1707
	mov	r10, #0
	movw	r3, #:lower16:.LC116
	movw	r2, #:lower16:.LC115
	movw	r1, #:lower16:.LC117
	movt	r3, #:upper16:.LC116
	movt	r2, #:upper16:.LC115
	movt	r1, #:upper16:.LC117
	mov	fp, r10
	str	r3, [sp, #64]
	str	r2, [sp, #68]
	str	r1, [sp, #72]
.L1693:
	ldr	r9, [r4]
	ldr	r3, [sp, #60]
	cmp	r9, #0
	add	r6, r9, #108
	add	r8, r3, r10
	rsb	r3, r10, #1024
	mov	r0, r6
	str	r3, [sp, #40]
	beq	.L1690
	bl	_raw_spin_lock_irqsave
	ldr	lr, [sp, #68]
	str	r0, [sp, #52]
	ldr	r3, [r9, #92]
	ldr	ip, [r9, #88]
	ldr	r2, [r9]
	ldr	r1, [r9, #8]
	str	r3, [sp, #44]
	ldr	r3, [sp, #64]
	cmp	ip, #0
	ldr	r5, [r9, #8]
	movne	r3, lr
	cmp	r2, #0
	mov	r7, r2
	mov	ip, r2
	str	r3, [sp, #48]
	ldr	r3, [r9, #96]
	mov	r0, r2
	ubfx	r5, r5, #1, #1
	str	r3, [sp, #40]
	and	r3, r1, #1
	str	r3, [sp, #56]
	beq	.L1692
	bl	smd_read_avail
	ldr	ip, [r9]
	mov	r7, r0
	cmp	ip, #0
	mov	r0, ip
	beq	.L1692
	bl	smd_write_avail
	mov	ip, r0
.L1692:
	ldr	lr, [sp, #40]
	rsb	r1, r10, #1024
	mov	r0, r8
	mov	r3, fp
	ldr	r2, [sp, #72]
	str	r9, [sp]
	stmib	sp, {r9, lr}
	ldr	lr, [sp, #44]
	str	r5, [sp, #24]
	str	r7, [sp, #28]
	str	ip, [sp, #32]
	str	lr, [sp, #12]
	ldr	lr, [sp, #48]
	str	lr, [sp, #16]
	ldr	lr, [sp, #56]
	str	lr, [sp, #20]
	bl	scnprintf
	add	r10, r10, r0
	ldr	r1, [sp, #52]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L1690:
	add	fp, fp, #1
	add	r4, r4, #84
	cmp	fp, #6
	bne	.L1693
	ldr	r5, [sp, #60]
	str	r10, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1687:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1695:
	mov	r3, #16
	str	r3, [sp, #60]
	b	.L1688
.L1706:
	mvn	r4, #11
	b	.L1687
.L1708:
	.align	2
.L1707:
	.word	.LANCHOR1+528
	.fnend
	.size	gsmd_ctrl_read_stats, .-gsmd_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_read_stats, %function
gctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L1717
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L1725
.L1710:
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #1036]
	cmp	r3, #0
	beq	.L1726
	mov	r5, #0
	movw	r2, #:lower16:.LC116
	str	r9, [sp, #48]
	movw	r1, #:lower16:.LC115
	movw	r0, #:lower16:.LC118
	movt	r2, #:upper16:.LC116
	movt	r1, #:upper16:.LC115
	movt	r0, #:upper16:.LC118
	mov	r7, r5
	add	r6, r9, #1040
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r0, [sp, #44]
.L1714:
	ldr	r4, [r6]
	mov	r2, r5
	cmp	r4, #0
	add	r8, r4, #4
	mov	r0, r8
	beq	.L1712
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #84]
	mov	fp, r0
	add	r0, r10, r5
	ldr	ip, [r4, #84]
	ldr	r3, [r4, #88]
	ldr	r9, [r4, #104]
	ldr	r2, [r4, #96]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ldr	r1, [r4, #100]
	str	r7, [sp]
	cmp	r3, #0
	str	r4, [sp, #4]
	str	ip, [sp, #28]
	ldr	ip, [sp, #40]
	str	r9, [sp, #16]
	ldr	r9, [sp, #36]
	str	r1, [sp, #8]
	rsb	r1, r5, #1024
	str	r2, [sp, #12]
	ldr	r2, [sp, #44]
	movne	r9, ip
	str	r9, [sp, #20]
	ldr	r3, [r6, #24]
	str	lr, [sp, #24]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #48]
	mov	r2, r5
	ldr	r3, [r3, #1036]
.L1712:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L1714
.L1715:
	str	r2, [sp]
	mov	r3, r10
	ldrd	r0, [sp, #52]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L1709:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1717:
	mov	r10, #16
	b	.L1710
.L1726:
	mov	r2, r3
	b	.L1715
.L1725:
	mvn	r4, #11
	b	.L1709
	.fnend
	.size	gctrl_read_stats, .-gctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_read_stats, %function
ghsic_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #48]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L1735
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L1738
.L1728:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r3, [fp, #1456]
	cmp	r3, #0
	beq	.L1739
	ldr	r7, .L1740
	mov	r5, #0
	movw	r2, #:lower16:.LC119
	movw	r1, #:lower16:.LC120
	movt	r2, #:upper16:.LC119
	movt	r1, #:upper16:.LC120
	mov	r6, r5
	str	r2, [sp, #48]
	str	r1, [sp, #52]
	str	fp, [sp, #56]
.L1730:
	ldr	r4, [r7]
	mov	r2, r5
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L1731
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #180]
	rsb	r1, r5, #4096
	str	r0, [sp, #44]
	ldr	ip, [r4, #180]
	add	r0, r10, r5
	add	r7, r7, #104
	ldr	r3, [r4, #164]
	ldr	r2, [sp, #48]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ubfx	r3, r3, #1, #1
	str	r3, [sp, #36]
	ldr	fp, [r4, #208]
	ldr	r3, [r7, #-80]
	str	fp, [sp, #32]
	ldr	fp, [r4, #204]
	str	fp, [sp, #28]
	ldr	fp, [r4, #72]
	str	fp, [sp, #24]
	ldr	fp, [r4, #212]
	str	fp, [sp, #20]
	ldr	fp, [r4, #188]
	str	r6, [sp]
	add	r6, r6, #1
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	fp, [sp, #16]
	bl	scnprintf
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #164]
	rsb	r1, r5, #4096
	mov	r8, r0
	ldr	r3, [r4, #192]
	add	r0, r10, r5
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #16]
	ldr	ip, [r4, #216]
	str	ip, [sp, #12]
	ldr	ip, [r4, #200]
	str	ip, [sp, #8]
	ldr	ip, [r4, #196]
	str	ip, [sp, #4]
	ldr	ip, [r4, #40]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #56]
	mov	r2, r5
	ldr	r3, [r3, #1456]
	cmp	r3, r6
	bhi	.L1730
.L1733:
	str	r2, [sp]
	mov	r3, r10
	ldrd	r0, [sp, #60]
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L1727:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1731:
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r6, r3
	bcc	.L1730
	b	.L1733
.L1735:
	mov	r10, #16
	b	.L1728
.L1739:
	mov	r2, r3
	b	.L1733
.L1738:
	mvn	r4, #11
	b	.L1727
.L1741:
	.align	2
.L1740:
	.word	.LANCHOR1+1460
	.fnend
	.size	ghsic_data_read_stats, .-ghsic_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_read_stats, %function
ghsuart_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #36]
	strd	r2, [sp, #40]
	cmp	r0, #0
	beq	.L1749
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L1758
.L1743:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r2, [r6, #1876]
	cmp	r2, #0
	beq	.L1759
	mov	r4, #0
	movw	r10, #:lower16:.LC116
	str	r6, [sp, #28]
	movw	r9, #:lower16:.LC115
	movw	fp, #:lower16:.LC121
	movt	r9, #:upper16:.LC115
	mov	r5, r4
	movt	r10, #:upper16:.LC116
	movt	fp, #:upper16:.LC121
	str	r9, [sp, #32]
.L1747:
	mov	r3, #84
	ldr	r0, .L1760
	mov	r1, r4
	mul	r3, r3, r5
	ldr	r9, [r3, r0]
	cmp	r9, #0
	add	r6, r9, #8
	mov	r0, r6
	beq	.L1745
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r9, #92]
	mov	r3, r5
	mov	r7, r0
	ldr	r2, [r9, #96]
	add	r0, r8, r4
	ldr	r1, [r9, #100]
	ldr	lr, [r9, #104]
	str	r9, [sp]
	ldr	r9, [sp, #32]
	cmp	ip, #0
	moveq	r9, r10
	stmib	sp, {r1, r2, lr}
	mov	r2, fp
	rsb	r1, r4, #1024
	str	r9, [sp, #16]
	bl	scnprintf
	add	r4, r4, r0
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #28]
	mov	r1, r4
	ldr	r2, [r3, #1876]
.L1745:
	add	r5, r5, #1
	cmp	r5, r2
	bcc	.L1747
.L1748:
	str	r1, [sp]
	mov	r3, r8
	ldr	r0, [sp, #36]
	ldr	r1, [sp, #40]
	ldr	r2, [sp, #44]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r8
	bl	kfree
.L1742:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1749:
	mov	r8, #16
	b	.L1743
.L1759:
	mov	r1, r2
	b	.L1748
.L1758:
	mvn	r4, #11
	b	.L1742
.L1761:
	.align	2
.L1760:
	.word	.LANCHOR1+1880
	.fnend
	.size	ghsuart_ctrl_read_stats, .-ghsuart_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_read_stats, %function
ghsuart_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L1770
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L1773
.L1763:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r3, [fp, #2048]
	cmp	r3, #0
	beq	.L1768
	ldr	r7, .L1774
	mov	r5, #0
	movw	r1, #:lower16:.LC122
	movw	r0, #:lower16:.LC123
	movt	r1, #:upper16:.LC122
	movt	r0, #:upper16:.LC123
	mov	r2, r3
	mov	r6, r5
	str	r1, [sp, #48]
	str	r0, [sp, #52]
	str	fp, [sp, #56]
.L1765:
	ldr	r4, [r7]
	mov	r3, r5
	cmp	r4, #0
	add	r9, r4, #104
	add	r10, r4, #72
	mov	r0, r9
	beq	.L1766
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #188]
	str	r0, [sp, #44]
	add	r0, r8, r5
	ldr	ip, [r4, #188]
	add	r7, r7, #84
	ldr	r1, [r4, #188]
	ldr	r2, [r4, #184]
	and	lr, lr, #1
	ldr	r3, [r7, #-60]
	ubfx	ip, ip, #1, #1
	ubfx	r1, r1, #2, #1
	ubfx	r2, r2, #1, #1
	str	r2, [sp, #32]
	ldr	r2, [r4, #96]
	str	r2, [sp, #28]
	ldr	fp, [r4, #212]
	ldr	r2, [sp, #48]
	str	fp, [sp, #24]
	ldr	fp, [r4, #204]
	str	r6, [sp]
	add	r6, r6, #1
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	r1, [sp, #16]
	rsb	r1, r5, #1024
	str	fp, [sp, #20]
	bl	scnprintf
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #184]
	rsb	r1, r5, #1024
	mov	r9, r0
	ldr	r3, [r4, #208]
	add	r0, r8, r5
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #4]
	ldr	ip, [r4, #64]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #56]
	ldr	r2, [r3, #2048]
	mov	r3, r5
	cmp	r2, r6
	bhi	.L1765
.L1768:
	str	r3, [sp]
	ldrd	r0, [sp, #60]
	mov	r3, r8
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r8
	bl	kfree
.L1762:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1766:
	add	r6, r6, #1
	add	r7, r7, #84
	cmp	r6, r2
	bcc	.L1765
	b	.L1768
.L1770:
	mov	r8, #16
	b	.L1763
.L1773:
	mvn	r4, #11
	b	.L1762
.L1775:
	.align	2
.L1774:
	.word	.LANCHOR1+2052
	.fnend
	.size	ghsuart_data_read_stats, .-ghsuart_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_stats, %function
debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r9, r1
	ldr	r4, [r6]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	mov	fp, r3
	.pad #28
	sub	sp, sp, #28
	cmp	r6, r4
	moveq	lr, #0
	beq	.L1778
	movw	r8, #:lower16:debug_buffer
	movw	r7, #:lower16:.LC124
	sub	r4, r4, #4
	movt	r8, #:upper16:debug_buffer
	movt	r7, #:upper16:.LC124
	mov	r5, #0
.L1777:
	ldr	ip, [r4, #20]
	rsb	r1, r5, #4096
	add	r0, r8, r5
	mov	r2, r7
	mov	lr, r5
	cmp	ip, #0
	beq	.L1779
	ldr	lr, [ip, #128]
	ldr	r3, [r4]
	str	lr, [sp, #16]
	ldr	lr, [ip, #124]
	str	lr, [sp, #12]
	ldr	lr, [ip, #120]
	str	lr, [sp, #8]
	ldr	lr, [ip, #76]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #80]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	scnprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	mov	lr, r5
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1777
.L1778:
	movw	r3, #:lower16:debug_buffer
	mov	r2, fp
	str	lr, [sp]
	mov	r1, r10
	mov	r0, r9
	movt	r3, #:upper16:debug_buffer
	bl	simple_read_from_buffer
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1779:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1777
	b	.L1778
	.fnend
	.size	debug_read_stats, .-debug_read_stats
	.section	.exit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_exit, %function
gether_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3448]
	b	destroy_workqueue
	.fnend
	.size	gether_exit, .-gether_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_cleanup, %function
qdss_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	str	r10, [sp, #24]
	ldr	r4, [r8, #312]!
	str	lr, [sp, #28]
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L1784
	ldr	r6, .L1791
	mov	r10, #256
	mov	r9, #512
	b	.L1785
.L1787:
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, r8
	ldr	r3, [r5]
	beq	.L1784
.L1788:
	mov	r4, r5
	mov	r5, r3
.L1785:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r4, #80]
	bl	destroy_workqueue
	ldr	r3, [r4, #12]
	mov	r1, r7
	mov	r0, r6
	cmp	r3, #0
	bne	.L1787
	ldrd	r2, [r4]
	sub	r0, r4, #108
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	kfree
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, r8
	ldr	r3, [r5]
	bne	.L1788
.L1784:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1792:
	.align	2
.L1791:
	.word	.LANCHOR1+3452
	.fnend
	.size	qdss_function_cleanup, .-qdss_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_command_complete, %function
rmnet_smd_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r4, #76]
	cmp	r2, #0
	blt	.L1801
	add	r7, r4, #156
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r2, [r4, #300]
	ldr	r3, [r4, #440]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #440]
	beq	.L1802
.L1795:
	mov	r3, r4
	ldr	r5, [r3, #100]!
	cmp	r5, r3
	beq	.L1803
	ldrd	r2, [r5]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5]
	str	r1, [r5, #4]
	bl	_raw_spin_unlock
	ldr	r1, [r6]
	ldr	r2, [r6, #48]
	ldr	r0, [r5, #-8]
	bl	memcpy
	ldr	r3, [r6, #48]
	mov	r0, r7
	str	r3, [r5, #-4]
	bl	_raw_spin_lock
	ldr	r3, [r4, #120]
	add	r2, r4, #116
	mov	r0, r7
	str	r5, [r4, #120]
	strd	r2, [r5]
	str	r5, [r3]
.L1800:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L1802:
	ldr	r0, [r4, #252]
	bl	smd_write_avail
	ldr	r3, [r6, #48]
	cmp	r0, r3
	strcc	r3, [r4, #300]
	bcc	.L1795
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r4, #252]
	ldr	r1, [r6]
	ldr	r2, [r6, #48]
	bl	smd_write
	ldr	r3, [r6, #48]
	cmp	r3, r0
	beq	.L1797
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC126
	movt	r1, #:upper16:.LC126
	add	r0, r0, #32
	bl	dev_err
.L1797:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #444]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #444]
	b	.L1800
.L1801:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC125
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC125
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L1803:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC127
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC127
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_smd_command_complete, .-rmnet_smd_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epout, %function
rmnet_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r7, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #76]
	add	r6, r4, #156
	cmn	r3, #104
	beq	.L1820
	cmp	r3, #0
	beq	.L1807
	cmn	r3, #108
	beq	.L1820
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC128
	ldr	r0, [r8]
	movt	r1, #:upper16:.LC128
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L1820:
	mov	r0, r6
	bl	_raw_spin_lock
	add	r2, r4, #140
	mov	r0, r6
	ldr	r3, [r4, #144]
	str	r7, [r4, #144]
.L1819:
	strd	r2, [r5, #36]
	str	r7, [r3]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L1807:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #364]
	ldr	r3, [r4, #424]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #424]
	bne	.L1808
	ldr	r0, [r4, #316]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #364]
	bcc	.L1808
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #316]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L1810
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC129
	movt	r1, #:upper16:.LC129
	add	r0, r0, #32
	bl	dev_err
.L1810:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #144]
	add	r1, r4, #140
	str	r7, [r4, #144]
	ldr	r3, [r4, #428]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #428]
	str	r1, [r5, #36]
	str	r2, [r5, #40]
	str	r7, [r2]
	bl	_raw_spin_unlock
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	rmnet_smd_start_rx
.L1808:
	ldr	r3, [r4, #152]
	add	r2, r4, #148
	mov	r0, r6
	str	r7, [r4, #152]
	b	.L1819
	.fnend
	.size	rmnet_smd_complete_epout, .-rmnet_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_rx_tlet, %function
rmnet_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #156
	add	r7, r0, #148
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #148]
	mov	fp, r0
	cmp	r7, r4
	beq	.L1826
	add	r3, r5, #140
	mov	r9, #256
	mov	r8, #512
	str	r3, [sp]
	b	.L1822
.L1824:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #316]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #12]
	mov	fp, r0
	cmp	r1, r10
	bne	.L1829
	ldr	r1, [r5, #144]
	str	r4, [r5, #144]
	ldr	r3, [r5, #428]
	add	r3, r3, #1
	str	r3, [r5, #428]
	ldr	r3, [sp]
	str	r3, [r4]
	str	r1, [r4, #4]
	str	r4, [r1]
	ldr	r4, [r5, #148]
	cmp	r4, r7
	beq	.L1826
.L1822:
	ldr	r0, [r5, #316]
	bl	smd_write_avail
	ldr	r3, [r4, #12]
	mov	r1, fp
	cmp	r0, r3
	mov	r0, r6
	bcs	.L1824
	str	r3, [r5, #364]
.L1823:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_smd_start_rx
.L1826:
	mov	r3, #0
	str	r3, [r5, #364]
	b	.L1823
.L1829:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC130
	movt	r1, #:upper16:.LC130
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L1823
	.fnend
	.size	rmnet_data_rx_tlet, .-rmnet_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_rx_tlet, %function
rmnet_control_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #156
	add	r7, r0, #116
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #116]
	mov	fp, r0
	cmp	r7, r4
	beq	.L1835
	add	r3, r5, #100
	mov	r9, #256
	mov	r8, #512
	str	r3, [sp]
	b	.L1831
.L1833:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	ldr	r3, [r5, #440]
	add	r3, r3, #1
	str	r3, [r5, #440]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #252]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #-4]
	mov	fp, r0
	cmp	r1, r10
	bne	.L1838
	ldr	r1, [r5, #104]
	str	r4, [r5, #104]
	ldr	r3, [r5, #444]
	add	r3, r3, #1
	str	r3, [r5, #444]
	ldr	r3, [sp]
	str	r3, [r4]
	str	r1, [r4, #4]
	str	r4, [r1]
	ldr	r4, [r5, #116]
	cmp	r4, r7
	beq	.L1835
.L1831:
	ldr	r0, [r5, #252]
	bl	smd_write_avail
	ldr	r3, [r4, #-4]
	mov	r1, fp
	cmp	r0, r3
	mov	r0, r6
	bge	.L1833
	str	r3, [r5, #300]
.L1832:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L1835:
	mov	r3, #0
	str	r3, [r5, #300]
	b	.L1832
.L1838:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC126
	movt	r1, #:upper16:.LC126
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L1832
	.fnend
	.size	rmnet_control_rx_tlet, .-rmnet_control_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_rx_push, %function
gsmd_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #24
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	sub	r10, r0, #28
	str	lr, [sp, #32]
	ldr	r6, [r0, #44]
	.pad #20
	sub	sp, sp, #20
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L1842
	ldr	r4, [r5, #-8]
	sub	r9, r5, #8
	cmp	r9, r4
	beq	.L1842
	movw	r8, #:lower16:.LC131
	mov	fp, #0
	movt	r8, #:upper16:.LC131
.L1848:
	ldr	r3, [r4, #8]
	cmn	r3, #108
	beq	.L1842
	cmp	r3, #0
	bne	.L1875
.L1843:
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L1842
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1844
	ldr	r2, [r5, #-20]
	ldr	r1, [r4, #-36]
	ldr	r0, [r6]
	cmp	r2, #0
	subne	r3, r3, r2
	addne	r1, r1, r2
	mov	r2, r3
	str	r3, [sp, #12]
	bl	smd_write
	cmp	r0, #0
	ldr	r3, [sp, #12]
	blt	.L1876
	cmp	r0, r3
	bne	.L1877
	ldr	r2, [r5, #136]
	add	r3, r2, r3
	str	r3, [r5, #136]
.L1844:
	str	fp, [r5, #-20]
	ldm	r4, {r1, r2}
	mov	r3, r5
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-16]!
	str	r4, [r2, #4]
	strd	r2, [r4]
	str	r4, [r5, #-16]
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L1842
	ldr	r4, [r5, #-8]
	cmp	r9, r4
	bne	.L1848
.L1842:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L1877:
	ldr	r3, [r5, #-20]
	add	r2, r3, r0
	str	r2, [r5, #-20]
	b	.L1842
.L1875:
	str	r3, [sp]
	mov	r2, r10
	ldr	r1, .L1878
	mov	r0, r8
	ldr	r3, [r5, #-28]
	bl	printk
	ldr	r0, [r6]
	b	.L1843
.L1876:
	mov	r2, r0
	movw	r0, #:lower16:.LC132
	ldr	r1, .L1878
	movt	r0, #:upper16:.LC132
	bl	printk
	b	.L1842
.L1879:
	.align	2
.L1878:
	.word	.LANCHOR2+716
	.fnend
	.size	gsmd_rx_push, .-gsmd_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_write_w, %function
grmnet_ctrl_smd_write_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #16]
	.pad #4
	sub	sp, sp, #4
	add	r6, r6, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r5, #-68]
	cmp	r0, #0
	beq	.L1881
	ldr	r4, [r5, #-28]
	sub	r8, r5, #28
	cmp	r8, r4
	beq	.L1881
	mov	r10, #256
	b	.L1882
.L1890:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #512
	str	r10, [r4]
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #-68]
	bl	smd_write
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-4]
	mov	r7, r0
	cmp	r3, r9
	bne	.L1889
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, fp
	bl	kfree
	ldr	r0, [r5, #-68]
	ldr	r3, [r5, #24]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r5, #24]
	beq	.L1881
	ldr	r4, [r5, #-28]
	cmp	r8, r4
	beq	.L1881
.L1882:
	bl	smd_write_avail
	ldr	r3, [r4, #-4]
	sub	fp, r4, #8
	mov	r1, r7
	cmp	r0, r3
	mov	r0, r6
	bge	.L1890
.L1881:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L1889:
	movw	r0, #:lower16:.LC133
	mov	r2, r9
	ldr	r1, .L1891
	movt	r0, #:upper16:.LC133
	bl	printk
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, fp
	bl	kfree
	b	.L1881
.L1892:
	.align	2
.L1891:
	.word	.LANCHOR2+732
	.fnend
	.size	grmnet_ctrl_smd_write_w, .-grmnet_ctrl_smd_write_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_rx_tlet, %function
rmnet_mux_smd_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #356
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r6
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #360]
	mov	fp, r0
	cmp	r3, #0
	beq	.L1894
	ldr	r4, [r5, #112]
	add	r7, r5, #112
	cmp	r7, r4
	beq	.L1895
	add	r3, r5, #104
	mov	r9, #256
	mov	r8, #512
	str	r3, [sp]
	b	.L1896
.L1897:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #120]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #12]
	mov	fp, r0
	cmp	r1, r10
	bne	.L1905
	ldr	r1, [r5, #108]
	str	r4, [r5, #108]
	ldr	r3, [r5, #388]
	add	r3, r3, #1
	str	r3, [r5, #388]
	ldr	r3, [sp]
	str	r3, [r4]
	str	r1, [r4, #4]
	str	r4, [r1]
	ldr	r3, [r5, #360]
	cmp	r3, #0
	beq	.L1894
	ldr	r4, [r5, #112]
	cmp	r4, r7
	beq	.L1895
.L1896:
	ldr	r0, [r5, #120]
	bl	smd_write_avail
	ldr	r3, [r4, #12]
	mov	r1, fp
	cmp	r0, r3
	mov	r0, r6
	bcs	.L1897
	str	r3, [r5, #168]
.L1894:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_mux_smd_start_rx
.L1895:
	mov	r3, #0
	str	r3, [r5, #168]
	b	.L1894
.L1905:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC134
	movt	r1, #:upper16:.LC134
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L1894
	.fnend
	.size	rmnet_mux_smd_data_rx_tlet, .-rmnet_mux_smd_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epout, %function
rmnet_mux_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #24]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r5, #352]
	cmp	r3, #0
	beq	.L1924
	ldr	r3, [r1, #44]
	add	r7, r1, #36
	add	r6, r5, #356
	ldr	r9, [r5, #76]
	cmn	r3, #104
	beq	.L1923
	cmp	r3, #0
	beq	.L1910
	cmn	r3, #108
	beq	.L1923
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC135
	ldr	r0, [r9]
	movt	r1, #:upper16:.LC135
	ldr	lr, [r4, #4]
	ldr	ip, [r4, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L1923:
	mov	r0, r6
	bl	_raw_spin_lock
	add	r2, r5, #104
	mov	r0, r6
	ldr	r3, [r5, #108]
	str	r7, [r5, #108]
.L1922:
	strd	r2, [r4, #36]
	str	r7, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L1910:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #168]
	cmp	r3, #0
	bne	.L1911
	ldr	r0, [r5, #120]
	bl	smd_write_avail
	ldr	r3, [r4, #48]
	cmp	r0, r3
	strcc	r3, [r5, #168]
	bcs	.L1925
.L1911:
	ldr	r3, [r5, #116]
	add	r2, r5, #112
	mov	r0, r6
	str	r7, [r5, #116]
	b	.L1922
.L1924:
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L1925:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r1, [r4]
	ldr	r2, [r4, #48]
	ldr	r0, [r5, #120]
	bl	smd_write
	ldr	r3, [r4, #48]
	cmp	r3, r0
	beq	.L1913
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC136
	movt	r1, #:upper16:.LC136
	add	r0, r0, #32
	bl	dev_err
.L1913:
	ldr	r3, [r5, #388]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r5, #388]
	bl	_raw_spin_lock
	ldr	r3, [r5, #108]
	add	r2, r5, #104
	str	r7, [r5, #108]
	mov	r0, r6
	strd	r2, [r4, #36]
	str	r7, [r3]
	bl	_raw_spin_unlock
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	rmnet_mux_smd_start_rx
	.fnend
	.size	rmnet_mux_smd_complete_epout, .-rmnet_mux_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epin, %function
rmnet_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	add	r8, r4, #132
	add	r7, r4, #156
	cmn	r2, #104
	beq	.L1928
	cmp	r2, #0
	beq	.L1929
	cmn	r2, #108
	beq	.L1928
	ldr	r3, [r4, #76]
	movw	r1, #:lower16:.LC137
	movt	r1, #:upper16:.LC137
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L1929:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #132]
	cmp	r3, r8
	beq	.L1947
	ldr	r3, [r4, #136]
	str	r6, [r4, #136]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r6, [r3]
	ldr	r3, [r4, #416]
	add	r3, r3, #1
	str	r3, [r4, #416]
.L1933:
	mov	r0, r7
.L1946:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L1947:
	ldr	r3, [r4, #136]
	str	r6, [r4, #136]
	add	r1, r4, #324
	str	r8, [r5, #36]
	mov	r0, #0
	add	r8, r4, #320
	str	r3, [r5, #40]
	str	r6, [r3]
	ldr	r3, [r4, #416]
	add	r3, r3, #1
	str	r3, [r4, #416]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L1933
	mov	r0, r8
	bl	__tasklet_schedule
	b	.L1933
.L1928:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #136]
	mov	r0, r7
	str	r6, [r4, #136]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r6, [r3]
	b	.L1946
	.fnend
	.size	rmnet_smd_complete_epin, .-rmnet_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epin, %function
rmnet_mux_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r3, [r4, #352]
	cmp	r3, #0
	beq	.L1967
	ldr	r2, [r1, #44]
	add	r6, r1, #36
	add	r8, r4, #96
	add	r7, r4, #356
	cmn	r2, #104
	beq	.L1951
	cmp	r2, #0
	beq	.L1952
	cmn	r2, #108
	beq	.L1951
	ldr	r3, [r4, #76]
	movw	r1, #:lower16:.LC138
	movt	r1, #:upper16:.LC138
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L1952:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #96]
	cmp	r3, r8
	ldr	r3, [r4, #100]
	str	r6, [r4, #100]
	beq	.L1953
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r6, [r3]
.L1954:
	mov	r0, r7
.L1966:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L1967:
	mov	r6, r0
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L1951:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #100]
	mov	r0, r7
	str	r6, [r4, #100]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r6, [r3]
	b	.L1966
.L1953:
	add	r1, r4, #128
	str	r8, [r5, #36]
	mov	r0, #0
	str	r3, [r5, #40]
	add	r4, r4, #124
	str	r6, [r3]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L1954
	mov	r0, r4
	bl	__tasklet_schedule
	b	.L1954
	.fnend
	.size	rmnet_mux_smd_complete_epin, .-rmnet_mux_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_setup, %function
rmnet_smd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #160]
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r8, [r2, #24]
	cmp	r3, #0
	ldr	r7, [r8, #4]
	beq	.L1979
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r5, r1
	mov	r4, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1970
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1971
	cmp	r3, #8448
	beq	.L1984
.L1981:
	mvn	r6, #94
.L1968:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1971:
	cmp	r9, #0
	bne	.L1981
	ldrh	r3, [r1, #4]	@ unaligned
	add	r10, r0, #156
	mov	r0, r10
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r2, r4
	ldr	fp, [r2, #124]!
	cmp	fp, r2
	beq	.L1985
	ldm	fp, {r1, r2}
	mov	lr, #256
	mov	ip, #512
	mov	r0, r10
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [fp]
	str	ip, [fp, #4]
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r2}
	ldr	r0, [r7]
	bl	memcpy
	mov	r0, r10
	ldr	r6, [fp, #-4]
	bl	_raw_spin_lock
	ldr	r1, [r4, #108]
	add	r2, r4, #108
	cmp	r2, r1
	beq	.L1975
	ldr	r1, [r4, #112]
	str	fp, [r4, #112]
	str	r2, [fp]
	str	r1, [fp, #4]
	str	fp, [r1]
.L1976:
	mov	r0, r10
	bl	_raw_spin_unlock
	movw	r3, #:lower16:rmnet_txcommand_complete
	str	r4, [r7, #32]
	movt	r3, #:upper16:rmnet_txcommand_complete
	str	r3, [r7, #28]
	b	.L1977
.L1984:
	movw	r3, #:lower16:rmnet_smd_command_complete
	str	r0, [r7, #32]
	movt	r3, #:upper16:rmnet_smd_command_complete
	str	r3, [r7, #28]
.L1973:
	ldrb	r3, [r7, #26]	@ zero_extendqisi2
	str	r6, [r7, #4]
	mov	r1, r7
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r7, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L1968
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC51
	mov	r2, r6
	movt	r1, #:upper16:.LC51
	add	r0, r0, #32
	bl	dev_err
	b	.L1968
.L1970:
	ands	r1, r9, #1
	ldr	r0, [r0, #252]
	movne	r2, #0
	movne	r1, #2
	moveq	r2, #2
	bl	smd_tiocmset
	mov	r6, r0
.L1977:
	cmp	r6, #0
	bge	.L1973
	b	.L1968
.L1975:
	ldr	ip, [r4, #112]
	mov	r0, r9
	str	fp, [r4, #112]
	add	r1, r4, #260
	add	r5, r4, #256
	stm	fp, {r2, ip}
	str	fp, [ip]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L1976
	mov	r0, r5
	bl	__tasklet_schedule
	b	.L1976
.L1979:
	mvn	r6, #106
	b	.L1968
.L1985:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC92
	str	r9, [sp]
	ldr	r2, [sp, #20]
	movt	r1, #:upper16:.LC92
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	add	r0, r0, #32
	str	r2, [sp, #4]
	ldrb	r2, [r5]	@ zero_extendqisi2
	str	r6, [sp, #8]
	mvn	r6, #94
	bl	_dev_info
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L1968
	.fnend
	.size	rmnet_smd_setup, .-rmnet_smd_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_unbind, %function
rmnet_smd_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #276
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	tasklet_kill
	add	r0, r4, #256
	bl	tasklet_kill
	add	r0, r4, #340
	bl	tasklet_kill
	add	r0, r4, #320
	bl	tasklet_kill
	ldr	r0, [r4, #380]
	bl	flush_workqueue
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	ldr	r0, [r4, #380]
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	bl	destroy_workqueue
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3456]
	bl	debugfs_remove_recursive
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	rmnet_smd_unbind, .-rmnet_smd_unbind
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_exit, %function
ghsuart_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3460]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_ctrl_exit, .-ghsuart_ctrl_exit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_exit, %function
ghsuart_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3464]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_data_exit, .-ghsuart_data_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_cleanup, %function
diag_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	strd	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR1
	movw	r8, #:lower16:.LANCHOR0
	str	r10, [sp, #24]
	movt	r8, #:upper16:.LANCHOR0
	str	lr, [sp, #28]
	ldr	r0, [r6, #3468]
	bl	debugfs_remove_recursive
	ldr	r5, [r8]
	cmp	r5, r8
	ldr	r4, [r5]
	beq	.L1990
	add	r6, r6, #3472
	mov	r10, #256
	mov	r9, #512
	b	.L1991
.L1993:
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	beq	.L1990
.L1994:
	mov	r5, r4
	mov	r4, r3
.L1991:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r7, r0
	mov	r0, r6
	mov	r1, r7
	cmp	r3, #0
	bne	.L1993
	ldrd	r2, [r5]
	sub	r0, r5, #4
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r5]
	str	r9, [r5, #4]
	bl	kfree
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	bne	.L1994
.L1990:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	diag_function_cleanup, .-diag_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_cleanup, %function
rmnet_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #3476]
	str	lr, [sp, #12]
	cmp	r3, #0
	beq	.L1998
	ldr	r6, .L2005
	mov	r5, #0
.L1999:
	ldr	r0, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #24
	bl	kfree
	ldr	r3, [r4, #3476]
	cmp	r5, r3
	bcc	.L1999
.L1998:
	ldr	r0, [r4, #3480]
	bl	debugfs_remove_recursive
	mov	r3, #0
	ldr	r6, [sp, #8]
	str	r3, [r4, #3476]
	str	r3, [r4, #3484]
	str	r3, [r4, #3488]
	str	r3, [r4, #3492]
	str	r3, [r4, #3496]
	str	r3, [r4, #3500]
	str	r3, [r4, #3504]
	str	r3, [r4, #3508]
	str	r3, [r4, #3512]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2006:
	.align	2
.L2005:
	.word	.LANCHOR1+2340
	.fnend
	.size	rmnet_function_cleanup, .-rmnet_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_tx_tlet, %function
rmnet_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #156
	add	r7, r0, #132
	strd	r8, [sp, #16]
	mov	r8, #256
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #76]
	b	.L2011
.L2018:
	ldr	r0, [r5, #316]
	bl	smd_read_avail
	cmp	r0, r10
	mov	r0, r6
	blt	.L2007
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #132]
	mov	r3, r0
	mov	ip, #512
	mov	r0, r6
	mov	r1, r3
	cmp	r7, r4
	beq	.L2016
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	stm	r4, {r8, ip}
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r10
	ldr	r1, [r4, #-36]
	ldr	r0, [r5, #316]
	bl	smd_read
	str	r0, [r4, #-32]
	ldr	r0, [r5, #84]
	mov	r2, #32
	sub	r1, r4, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	mov	r0, r6
	bne	.L2017
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #420]
	mov	r1, r0
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r5, #420]
	bl	_raw_spin_unlock_irqrestore
.L2011:
	ldr	r0, [r5, #316]
	bl	smd_cur_packet_size
	subs	r10, r0, #0
	bne	.L2018
.L2007:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2017:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC139
	movt	r1, #:upper16:.LC139
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #136]
	mov	r1, r0
	mov	r0, r6
	str	r4, [r5, #136]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
.L2016:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_data_tx_tlet, .-rmnet_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_tx_tlet, %function
rmnet_control_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #156
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LC2
	str	lr, [sp, #32]
	ldr	r3, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	movt	r10, #:upper16:.LC2
	str	r3, [sp]
.L2024:
	add	r9, r4, #108
.L2023:
	mov	r8, #256
.L2022:
	ldr	r0, [r4, #252]
	add	r5, r4, #164
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	beq	.L2019
	ldr	r0, [r4, #252]
	bl	smd_read_avail
	cmp	r0, r7
	mov	r0, r6
	blt	.L2019
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r4, #108]
	mov	r2, r0
	mov	ip, #512
	mov	r0, r6
	mov	r1, r2
	cmp	fp, r9
	beq	.L2031
	ldr	lr, [fp]
	ldr	r2, [fp, #4]
	str	r2, [lr, #4]
	str	lr, [r2]
	stm	fp, {r8, ip}
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	ldr	r1, [fp, #-8]
	ldr	r0, [r4, #252]
	bl	smd_read
	str	r0, [fp, #-4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #128]
	add	r2, r4, #124
	str	fp, [r4, #128]
	ldr	ip, [r4, #436]
	mov	r1, r0
	mov	r0, r6
	add	ip, ip, #1
	str	ip, [r4, #436]
	stm	fp, {r2, lr}
	str	fp, [lr]
	bl	_raw_spin_unlock_irqrestore
	ldr	r7, [r4, #76]
	ldr	r3, [r4, #92]
	ldr	r3, [r3]
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r5]
	add	r2, r2, #1
	strex	r1, r2, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L2022
	mov	r1, #0
	mvn	r0, #94
	strb	r0, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r0, [r4, #96]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2023
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	mov	r1, r10
	add	r0, r0, #32
	bl	dev_err
	b	.L2024
.L2019:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2031:
	ldr	r3, [sp]
	movw	r1, #:lower16:.LC140
	str	r2, [sp, #4]
	movt	r1, #:upper16:.LC140
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r2, [sp, #4]
	mov	r0, r6
	mov	r1, r2
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_control_tx_tlet, .-rmnet_control_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_tx_pull, %function
gsmd_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #52
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #48
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #20]
	mov	r0, r6
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2063
	ldr	r0, [r7]
	sub	r10, r5, #8
	ldr	r8, [r3, #80]
	cmp	r0, #0
	beq	.L2042
	ldr	r3, [r5, #-8]
	cmp	r3, r10
	bne	.L2047
	b	.L2042
.L2065:
	ldr	r4, [r5, #-8]
	cmp	r0, #2048
	movlt	r2, r0
	movge	r2, #2048
	ldm	r4, {r1, r3}
	sub	r9, r4, #36
	str	r3, [r1, #4]
	str	r1, [r3]
	mov	r3, #256
	ldr	r1, [r4, #-36]
	str	r3, [r4]
	mov	r3, #512
	str	r3, [r4, #4]
	ldr	r0, [r7]
	bl	smd_read
	str	r0, [r4, #-32]
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	fp, #0
	bne	.L2064
	ldr	r2, [r4, #-32]
	ldr	r3, [r5, #116]
	add	r3, r3, r2
	str	r3, [r5, #116]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L2046
	ldr	r3, [r5, #-8]
	cmp	r10, r3
	beq	.L2046
.L2047:
	bl	smd_read_avail
	cmp	r0, #0
	bne	.L2065
.L2046:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	bne	.L2042
.L2048:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L2042:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2048
	ldr	r3, [r5, #-8]
	cmp	r10, r3
	beq	.L2048
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, r5
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3436]
	bl	queue_work
	b	.L2048
.L2063:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	sub	r3, r5, #52
	cmp	r3, #0
	beq	.L2032
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L2037
	b	.L2032
.L2038:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
.L2037:
	bl	smd_read_avail
	subs	r2, r0, #0
	mov	r1, #0
	bne	.L2038
.L2032:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2064:
	movw	r0, #:lower16:.LC141
	ldr	r3, [r5, #-52]
	str	fp, [sp]
	movt	r0, #:upper16:.LC141
	ldr	r1, .L2067
	ldr	r2, [sp, #12]
	bl	printk
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2066
	ldr	r3, [r5, #-8]
	str	r4, [r3, #4]
	stm	r4, {r3, r10}
	str	r4, [r5, #-8]
	b	.L2046
.L2066:
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2046
.L2068:
	.align	2
.L2067:
	.word	.LANCHOR2+756
	.fnend
	.size	gsmd_tx_pull, .-gsmd_tx_pull
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_tx_tlet, %function
rmnet_mux_smd_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #76]
	ldr	r3, [r0, #360]
	cmp	r3, #0
	beq	.L2069
	mov	r4, r0
	add	r6, r0, #356
	add	r7, r0, #96
	mov	r8, #256
	b	.L2073
.L2084:
	ldr	r0, [r4, #120]
	bl	smd_read_avail
	cmp	r0, r10
	mov	r0, r6
	blt	.L2069
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #96]
	mov	r3, r0
	mov	ip, #512
	mov	r0, r6
	mov	r1, r3
	cmp	r7, r5
	beq	.L2082
	ldrd	r2, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	stm	r5, {r8, ip}
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r10
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #120]
	bl	smd_read
	str	r0, [r5, #-32]
	ldr	r0, [r4, #84]
	mov	r2, #32
	sub	r1, r5, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2083
	ldr	r2, [r4, #360]
	ldr	r3, [r4, #396]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #396]
	beq	.L2069
.L2073:
	ldr	r0, [r4, #120]
	bl	smd_cur_packet_size
	subs	r10, r0, #0
	bne	.L2084
.L2069:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2083:
	ldr	r3, [r9]
	movw	r1, #:lower16:.LC139
	mov	r2, r0
	movt	r1, #:upper16:.LC139
	add	r0, r3, #32
	bl	dev_err
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #100]
	mov	r1, r0
	mov	r0, r6
	str	r5, [r4, #100]
	str	r7, [r5]
	str	r3, [r5, #4]
	str	r5, [r3]
.L2082:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_smd_data_tx_tlet, .-rmnet_mux_smd_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect_work, %function
gsmd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #-52]
	ldr	r0, [r3]
	bl	smd_close
	ldr	r3, [r4, #-52]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gsmd_disconnect_work, .-gsmd_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disconnect_work, %function
rmnet_smd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	sub	r0, r0, #124
	str	r6, [sp, #8]
	mov	r5, #0
	str	lr, [sp, #12]
	bl	tasklet_kill
	sub	r0, r4, #144
	bl	tasklet_kill
	sub	r0, r4, #60
	bl	tasklet_kill
	sub	r0, r4, #80
	bl	tasklet_kill
	ldr	r0, [r4, #-148]
	bl	smd_close
	ldr	r0, [r4, #-84]
	str	r5, [r4, #-104]
	bl	smd_close
	mov	ip, r4
	str	r5, [r4, #-236]
	str	r5, [r4, #-40]
	ldr	r3, [ip, #-252]!
	cmp	r3, ip
	ldr	r2, [r3]
	beq	.L2088
	sub	r6, r4, #260
	mov	r1, r2
	mov	r5, #256
	mov	lr, #512
	b	.L2089
.L2095:
	mov	r1, r2
.L2089:
	ldr	r0, [r3, #4]
	cmp	ip, r1
	str	r0, [r2, #4]
	str	r2, [r0]
	stm	r3, {r5, lr}
	ldr	r2, [r4, #-256]
	str	r3, [r4, #-256]
	str	r6, [r3]
	str	r2, [r3, #4]
	str	r3, [r2]
	mov	r3, r1
	ldr	r2, [r1]
	bne	.L2095
.L2088:
	mov	ip, r4
	ldr	r3, [ip, #-284]!
	cmp	r3, ip
	ldr	r2, [r3]
	beq	.L2090
	sub	r6, r4, #300
	mov	r1, r2
	mov	r5, #256
	mov	lr, #512
	b	.L2091
.L2096:
	mov	r1, r2
.L2091:
	ldr	r0, [r3, #4]
	cmp	ip, r1
	str	r0, [r2, #4]
	str	r2, [r0]
	stm	r3, {r5, lr}
	ldr	r2, [r4, #-296]
	str	r3, [r4, #-296]
	str	r6, [r3]
	str	r2, [r3, #4]
	str	r3, [r2]
	mov	r3, r1
	ldr	r2, [r1]
	bne	.L2096
.L2090:
	mov	ip, r4
	ldr	r3, [ip, #-276]!
	cmp	r3, ip
	ldr	r2, [r3]
	beq	.L2092
	sub	r6, r4, #292
	mov	r1, r2
	mov	r5, #256
	mov	lr, #512
	b	.L2093
.L2097:
	mov	r1, r2
.L2093:
	ldr	r0, [r3, #4]
	cmp	ip, r1
	str	r0, [r2, #4]
	str	r2, [r0]
	stm	r3, {r5, lr}
	ldr	r2, [r4, #-288]
	str	r3, [r4, #-288]
	str	r6, [r3]
	str	r2, [r3, #4]
	str	r3, [r2]
	mov	r3, r1
	ldr	r2, [r1]
	bne	.L2097
.L2092:
	ldrb	r3, [r4, #-152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L2087
	sub	r0, r4, #232
	bl	platform_driver_unregister
	mov	r3, #0
	strb	r3, [r4, #-152]
.L2087:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_disconnect_work, .-rmnet_smd_disconnect_work
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	cleanup, %function
cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L2103
	b	platform_driver_unregister
.L2104:
	.align	2
.L2103:
	.word	.LANCHOR0+320
	.fnend
	.size	cleanup, .-cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_connect_work, %function
rmnet_smd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r2, r0, #132
	movw	r3, #:lower16:rmnet_smd_event_notify
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	mov	r1, r2
	movt	r6, #:upper16:.LANCHOR0
	str	r8, [sp, #16]
	mov	r4, r0
	str	lr, [sp, #20]
	movt	r3, #:upper16:rmnet_smd_event_notify
	ldr	r8, [r0, #-308]
	.pad #24
	sub	sp, sp, #24
	ldr	r0, [r6, #400]
	bl	smd_open
	subs	r2, r0, #0
	bne	.L2117
	ldr	r3, [r4, #-88]
	ands	r3, r3, #1
	bne	.L2109
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r7, r4, #80
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2111
.L2118:
	bl	schedule
.L2111:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #-88]
	tst	r3, #1
	beq	.L2118
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait
.L2109:
	sub	r2, r4, #68
	movw	r3, #:lower16:rmnet_smd_event_notify
	ldr	r0, [r6, #404]
	mov	r1, r2
	movt	r3, #:upper16:rmnet_smd_event_notify
	bl	smd_open
	cmp	r0, #0
	bne	.L2119
	ldr	r3, [r4, #-24]
	ands	r3, r3, #1
	bne	.L2113
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r6, r4, #16
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2115
.L2120:
	bl	schedule
.L2115:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #-24]
	tst	r3, #1
	beq	.L2120
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait
.L2113:
	mov	r3, #1
	sub	r0, r4, #384
	str	r3, [r4, #-224]
	bl	rmnet_smd_start_rx
.L2105:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2117:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC142
	movt	r1, #:upper16:.LC142
	add	r0, r0, #32
	bl	dev_err
	ldrb	r3, [r4, #-136]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L2105
	sub	r0, r4, #216
	bl	platform_driver_register
	subs	r3, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #-136]
	beq	.L2105
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC143
	movt	r1, #:upper16:.LC143
	ldr	r2, [r4, #-196]
	add	r0, r0, #32
	bl	dev_err
	b	.L2105
.L2119:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC144
	movt	r1, #:upper16:.LC144
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #-132]
	bl	smd_close
	b	.L2105
	.fnend
	.size	rmnet_smd_connect_work, .-rmnet_smd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_read_w, %function
grmnet_ctrl_smd_read_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #32]
	.pad #36
	sub	sp, sp, #36
	add	r10, r3, #108
	str	r3, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2122
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L2133:
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	ble	.L2122
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L2121
	mov	r5, #0
.L2131:
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	bne	.L2124
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2125
	ldr	r0, [r9, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r3, #:upper16:autoremove_wake_function
	sub	r6, r4, #28
	str	fp, [sp, #12]
	str	r1, [sp, #24]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #28]
	b	.L2127
.L2155:
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2126
	bl	schedule
.L2127:
	mov	r2, #2
	add	r1, sp, #12
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	beq	.L2155
.L2126:
	add	r1, sp, #12
	mov	r0, r6
	bl	finish_wait
.L2124:
	cmp	fp, #0
	ldr	r3, [r4, #-52]
	blt	.L2125
	cmp	r3, #0
	beq	.L2125
	add	r1, fp, r5
	cmp	r1, r7
	bgt	.L2156
	mov	r2, fp
	mov	r0, r3
	add	r1, r8, r5
	bl	smd_read
	subs	r2, r0, #0
	ble	.L2157
	add	r5, r5, r2
	cmp	r7, r5
	bgt	.L2131
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r5, r0
	ldr	r0, [r3, #104]
	cmp	r0, #0
	beq	.L2132
	ldr	r3, [r0, #84]
	cmp	r3, #0
	beq	.L2132
	mov	r2, r7
	mov	r1, r8
	blx	r3
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
.L2132:
	mov	r0, r8
	bl	kfree
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	bne	.L2133
.L2122:
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L2121:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2125:
	movw	r0, #:lower16:.LC145
	ldr	r1, .L2158
	mov	r2, fp
	movt	r0, #:upper16:.LC145
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2121
.L2157:
	movw	r0, #:lower16:.LC147
	ldr	r1, .L2158
	movt	r0, #:upper16:.LC147
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2121
.L2156:
	movw	r0, #:lower16:.LC146
	ldr	r1, .L2158
	movt	r0, #:upper16:.LC146
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2121
.L2159:
	.align	2
.L2158:
	.word	.LANCHOR2+772
	.fnend
	.size	grmnet_ctrl_smd_read_w, .-grmnet_ctrl_smd_read_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_event_notify, %function
rmnet_smd_event_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #48]
	beq	.L2162
	cmp	r1, #3
	beq	.L2163
	cmp	r1, #1
	beq	.L2178
.L2160:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2178:
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #160]
	cmp	r3, #0
	beq	.L2160
	cmp	r5, #0
	ldr	r0, [r0]
	bne	.L2179
.L2166:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2160
	add	r4, r4, #4
	mov	r0, #0
	add	r1, r4, #4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L2160
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2163:
	add	r1, r0, #44
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2162:
	add	r1, r0, #44
	mov	r0, #0
	bl	_set_bit
	ldr	r6, [sp, #8]
	add	r0, r4, #52
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2179:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2167
.L2177:
	ldr	r0, [r4]
	b	.L2166
.L2167:
	add	r1, r4, #28
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #24
	bne	.L2177
	bl	__tasklet_schedule
	b	.L2177
	.fnend
	.size	rmnet_smd_event_notify, .-rmnet_smd_event_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_notify, %function
grmnet_ctrl_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L2182
	cmp	r1, #3
	beq	.L2183
	cmp	r1, #1
	beq	.L2214
.L2181:
	add	r0, r4, #24
	mov	r3, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L2214:
	ldr	r0, [r0]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2185
	ldr	r2, [r4, #28]
	add	r3, r4, #28
	cmp	r2, r3
	beq	.L2215
.L2185:
	ldr	r0, [r4]
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L2181
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #68
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3516]
	bl	queue_work
	b	.L2181
.L2183:
	add	r1, r0, #8
	mov	r0, #0
	bl	_clear_bit
	cmp	r4, #0
	beq	.L2188
	ldr	r0, [r4, #104]
	cmp	r0, #0
	beq	.L2188
	ldr	r3, [r0, #96]
	cmp	r3, #0
	beq	.L2188
	blx	r3
.L2188:
	add	r9, r4, #108
	add	r6, r4, #40
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #40]
	mov	r10, r0
	cmp	r3, r6
	beq	.L2189
	mov	r8, #256
	mov	r7, #512
.L2190:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r4, #40]
	cmp	r3, r6
	bne	.L2190
.L2189:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L2181
.L2182:
	add	r1, r0, #8
	mov	r0, #0
	bl	_set_bit
	cmp	r4, #0
	beq	.L2181
	ldr	r0, [r4, #104]
	cmp	r0, #0
	beq	.L2181
	ldr	r3, [r0, #100]
	cmp	r3, #0
	beq	.L2181
	blx	r3
	b	.L2181
.L2215:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3516]
	bl	queue_work
	b	.L2185
	.fnend
	.size	grmnet_ctrl_smd_notify, .-grmnet_ctrl_smd_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_disable, %function
acc_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	r3, [r0, #92]	@ zero_extendqisi2
	ldr	r2, [r0, #84]
	and	r3, r3, #254
	orr	r3, r3, #2
	mov	r0, r2
	strb	r3, [r4, #92]
	ldr	r3, [r2, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	add	r0, r4, #1648
	mov	r3, #0
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	r0, r0, #8
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
	.fnend
	.size	acc_function_disable, .-acc_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_out, %function
acc_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2324]
	str	r2, [r0, #1688]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	bne	.L2219
	ldrb	r3, [r0, #92]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r0, #92]
.L2219:
	add	r0, r0, #1648
	mov	r3, #0
	add	r0, r0, #8
	mov	r2, #1
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	acc_complete_out, .-acc_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_disable, %function
mtp_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r5, [r0, #96]
	ldr	r0, [r0, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r6, [sp, #8]
	mov	r3, r5
	add	r0, r4, #124
	mov	r2, #1
	ldrd	r4, [sp]
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	mtp_function_disable, .-mtp_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_out, %function
mtp_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2336]
	str	r2, [r0, #168]
	ldr	r3, [r1, #44]
	add	r0, r0, #124
	mov	r2, #1
	mov	r1, #3
	cmp	r3, #0
	movne	r3, #4
	strne	r3, [r0, #-28]
	mov	r3, #0
	b	__wake_up
	.fnend
	.size	mtp_complete_out, .-mtp_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_ctrlrequest, %function
mtp_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r1, [r2]	@ zero_extendqisi2
	ldrh	r6, [r2, #2]	@ unaligned
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r1, #128
	beq	.L2248
	and	r0, r1, #96
	ldrh	r3, [r2, #4]	@ unaligned
	cmp	r0, #64
	beq	.L2249
	cmp	r0, #32
	bne	.L2244
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r7, [r2, #2336]
	cmp	r1, #100
	beq	.L2250
	cmp	r1, #103
	bne	.L2244
	orrs	r3, r3, r6
	bne	.L2244
	ldr	r3, [r4, #4]
	mov	r6, #4
	add	r9, r7, #80
	mov	r0, r9
	ldr	r8, [r3]
	strh	r6, [r8]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r7, #96]
	movw	r2, #8217
	movw	r3, #8193
	mov	r1, r0
	mov	r0, r9
	cmp	ip, #3
	moveq	r3, r2
	strh	r3, [r8, #2]	@ movhi
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, r6
	mov	r3, r6
	movls	r5, #0
	movhi	r5, #1
.L2230:
	ldr	r1, [r4, #4]
	mov	r2, #32
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfi	r0, r5, #1, #1
	strb	r0, [r1, #26]
	ldr	r1, [r4, #4]
	str	r3, [r1, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2251
.L2227:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2249:
	ldrb	r2, [r2, #1]	@ zero_extendqisi2
	cmp	r2, #1
	bne	.L2244
	tst	r1, #128
	beq	.L2244
	sub	r3, r3, #4
	cmp	r3, #1
	bhi	.L2244
	ldr	r1, .L2254
	cmp	r5, #40
	ldr	r3, [r4, #4]
	movcc	r6, r5
	movcs	r6, #40
.L2247:
	ldr	r0, [r3]
	mov	r2, r6
	bl	memcpy
	cmp	r6, r5
	mov	r3, r6
	movge	r5, #0
	movlt	r5, #1
	b	.L2230
.L2250:
	orrs	r6, r3, r6
	beq	.L2252
.L2244:
	mvn	r6, #94
	b	.L2227
.L2248:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	bne	.L2244
	lsr	r3, r6, #8
	cmp	r3, #3
	bne	.L2244
	uxtb	r6, r6
	cmp	r6, #238
	bne	.L2244
	cmp	r5, #18
	ldr	r1, .L2254+4
	movcc	r6, r5
	movcs	r6, #18
	ldr	r3, [r4, #4]
	b	.L2247
.L2251:
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC148
	movt	r1, #:upper16:.LC148
	ldr	r2, .L2254+8
	add	r0, r0, #32
	bl	dev_err
	b	.L2227
.L2252:
	add	r8, r7, #80
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #96]
	mov	r9, r0
	cmp	r3, #2
	beq	.L2253
.L2233:
	mov	r1, r9
	mov	r0, r8
	mov	r6, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r3, r5
	mov	r5, #0
	b	.L2230
.L2253:
	mov	r10, #3
	mov	r3, r6
	mov	r1, r10
	add	r0, r7, #124
	mov	r2, #1
	str	r10, [r7, #96]
	bl	__wake_up
	mov	r3, r6
	mov	r1, r10
	add	r0, r7, #136
	mov	r2, #1
	bl	__wake_up
	b	.L2233
.L2255:
	.align	2
.L2254:
	.word	.LANCHOR0+428
	.word	.LANCHOR0+408
	.word	.LANCHOR2+796
	.fnend
	.size	mtp_function_ctrlrequest, .-mtp_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_setup, %function
ccid_function_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r0, #20]
	ldr	r2, [r0, #88]
	ldrh	r3, [r1, #6]	@ unaligned
	ldr	r4, [ip, #24]
	cmp	r2, #0
	ldr	lr, [r4, #4]
	beq	.L2262
	ldrh	r2, [r1]	@ unaligned
	mov	ip, r0
	movw	r0, #41218
	rev16	r2, r2
	uxth	r2, r2
	cmp	r2, r0
	beq	.L2258
	movw	r0, #41219
	cmp	r2, r0
	beq	.L2259
	movw	r0, #8449
	cmp	r2, r0
	beq	.L2269
.L2266:
	mvn	r4, #94
.L2257:
.L2256:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2259:
	ldr	r2, [lr, #4]
	cmp	r3, r2
	bhi	.L2266
	movw	r2, #:lower16:.LANCHOR0
	ldr	r1, [lr]
	cmp	r3, #4
	movt	r2, #:upper16:.LANCHOR0
	movcs	r3, #4
	ldr	r2, [r2, #487]	@ unaligned
	str	r2, [r1]
.L2261:
	str	r3, [lr, #4]
	ldr	r3, [r4]
	mov	r1, lr
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2256
	movw	r0, #:lower16:.LC149
	mov	r1, r4
	movt	r0, #:upper16:.LC149
	bl	printk
	b	.L2256
.L2269:
	cmp	r3, #0
	bne	.L2266
	ldrh	lr, [r1, #2]	@ unaligned
	mov	r1, #1
	add	r0, ip, #120
	mov	r2, r1
	mov	r4, r3
	strb	r1, [ip, #132]
	lsr	r5, lr, #8
	strb	lr, [ip, #133]
	str	r1, [ip, #136]
	mov	r1, #3
	strb	r5, [ip, #134]
	strb	r3, [ip, #135]
	bl	__wake_up
	b	.L2256
.L2258:
	ldr	r2, [lr, #4]
	cmp	r3, r2
	bhi	.L2266
	movw	r2, #:lower16:.LANCHOR0
	ldr	r1, [lr]
	cmp	r3, #4
	movt	r2, #:upper16:.LANCHOR0
	movcs	r3, #4
	ldr	r2, [r2, #478]	@ unaligned
	str	r2, [r1]
	b	.L2261
.L2262:
	mvn	r4, #106
	b	.L2256
	.fnend
	.size	ccid_function_setup, .-ccid_function_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_out, %function
ccid_bulk_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	movw	r3, #:lower16:.LANCHOR1
	mov	ip, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2220]
	cmp	r2, #0
	mov	r2, ip
	movne	r3, #1
	add	r0, r1, #152
	str	ip, [r1, #180]
	strne	r3, [r1, #140]
	mov	r3, #0
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_out, .-ccid_bulk_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_disable, %function
adb_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r6, #1
	str	lr, [sp, #12]
	str	r5, [r0, #92]
	strb	r5, [r0, #152]
	ldr	r0, [r0, #84]
	str	r6, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #12]
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #120
	mov	r1, #3
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	adb_function_disable, .-adb_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_out, %function
adb_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3520]
	str	r2, [r0, #148]
	ldr	r3, [r1, #44]
	add	r0, r0, #120
	mov	r1, #3
	cmp	r3, #0
	cmnne	r3, #104
	mov	r3, #0
	strne	r2, [r0, #-24]
	mov	r2, #1
	b	__wake_up
	.fnend
	.size	adb_complete_out, .-adb_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_command_complete, %function
rmnet_mux_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r5, #76]
	cmp	r2, #0
	blt	.L2296
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r1
	ldr	r7, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L2290
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L2285
.L2284:
	movw	r1, #32800
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	beq	.L2297
	add	r8, r5, #356
	str	r7, [r6, #4]
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r5, #344]
	cmp	r3, #0
	bne	.L2298
	mov	r0, r8
	bl	_raw_spin_unlock
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r3, [r5, #412]
	ldr	r1, .L2300
	ldr	r0, .L2300+4
	add	r3, r3, #1
	str	r3, [r5, #412]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L2299
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2290:
	mov	r6, #16
	b	.L2284
.L2296:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC150
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC150
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	r0, r0, #32
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err
.L2298:
	mov	r9, r6
	ldr	r1, [r4]
	mov	r2, r7
	ldr	r0, [r9], #8
	bl	memcpy
	ldr	r3, [r5, #308]
	add	r2, r5, #304
	mov	r0, r8
	str	r9, [r5, #308]
	strd	r2, [r6, #8]
	str	r9, [r3]
	ldr	r3, [r5, #324]
	add	r3, r3, #1
	str	r3, [r5, #324]
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	add	r0, r5, #312
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L2297:
	mov	r0, r6
	bl	kfree
.L2285:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC151
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC151
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	r0, r0, #32
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err
.L2299:
	movw	r0, #:lower16:.LC152
	ldr	r2, [r5, #412]
	ldr	r1, .L2300
	movt	r0, #:upper16:.LC152
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L2301:
	.align	2
.L2300:
	.word	.LANCHOR2+812
	.word	.LANCHOR0+524
	.fnend
	.size	rmnet_mux_command_complete, .-rmnet_mux_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_notify, %function
rmnet_mux_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #168]
	beq	.L2304
	cmp	r1, #3
	beq	.L2305
	cmp	r1, #1
	beq	.L2320
.L2302:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2320:
	ldr	r3, [r0, #360]
	cmp	r3, #0
	beq	.L2302
	cmp	r5, #0
	ldr	r0, [r0, #120]
	bne	.L2321
.L2308:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2302
	add	r1, r4, #128
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #124
	bne	.L2302
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2305:
	add	r1, r0, #164
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2304:
	add	r1, r0, #164
	mov	r0, #0
	bl	_set_bit
	ldr	r6, [sp, #8]
	add	r0, r4, #172
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2321:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2309
.L2319:
	ldr	r0, [r4, #120]
	b	.L2308
.L2309:
	add	r1, r4, #148
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #144
	bne	.L2319
	bl	__tasklet_schedule
	b	.L2319
	.fnend
	.size	rmnet_mux_smd_notify, .-rmnet_mux_smd_notify
	.section	.init.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_init, %function
gsmd_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC153
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC153
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r3
	str	r0, [r3, #3524]
	bhi	.L2324
	ldr	ip, .L2331
	mov	r2, r0
	movw	r0, #:lower16:.LC154
	movt	r0, #:upper16:.LC154
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3528]
	beq	.L2325
	cmn	r0, #4096
	bls	.L2324
.L2325:
	ldr	r0, [r4, #3524]
	bl	debugfs_remove
.L2324:
	mov	r3, #0
	mov	r0, r3
	strb	r3, [r4, #3532]
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2332:
	.align	2
.L2331:
	.word	.LANCHOR2+840
	.fnend
	.size	gsmd_ctrl_init, .-gsmd_ctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_exit, %function
gsmd_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3528]
	bl	debugfs_remove
	ldr	r0, [r4, #3524]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gsmd_ctrl_exit, .-gsmd_ctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_init, %function
gctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC155
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC155
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3536]
	bhi	.L2337
	ldr	ip, .L2344
	mov	r2, r0
	movw	r0, #:lower16:.LC154
	mov	r4, r3
	movt	r0, #:upper16:.LC154
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3540]
	beq	.L2338
	cmn	r0, #4096
	bls	.L2337
.L2338:
	ldr	r0, [r4, #3536]
	bl	debugfs_remove
.L2337:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2345:
	.align	2
.L2344:
	.word	.LANCHOR2+944
	.fnend
	.size	gctrl_init, .-gctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_exit, %function
gctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3540]
	bl	debugfs_remove
	ldr	r0, [r4, #3536]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gctrl_exit, .-gctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_init, %function
ghsic_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC156
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	mov	r1, #0
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC156
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3544]
	bhi	.L2350
	ldr	r5, .L2362
	mov	r2, r0
	movw	r0, #:lower16:.LC154
	mov	r4, r3
	movt	r0, #:upper16:.LC154
	mov	r3, #0
	mov	r1, #292
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3548]
	beq	.L2353
	cmn	r0, #4096
	ldr	r2, [r4, #3544]
	bhi	.L2353
	add	r5, r5, #104
	movw	r0, #:lower16:.LC157
	movt	r0, #:upper16:.LC157
	mov	r3, #0
	mov	r1, #420
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3552]
	beq	.L2353
	cmn	r0, #4096
	bls	.L2350
.L2353:
	ldr	r0, [r4, #3544]
	bl	debugfs_remove
.L2350:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L2363:
	.align	2
.L2362:
	.word	.LANCHOR2+1048
	.fnend
	.size	ghsic_data_init, .-ghsic_data_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_exit, %function
ghsic_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3548]
	bl	debugfs_remove
	ldr	r0, [r4, #3552]
	bl	debugfs_remove
	ldr	r0, [r4, #3544]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	ghsic_data_exit, .-ghsic_data_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_init, %function
ghsuart_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC158
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC158
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3460]
	beq	.L2370
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2370
	ldr	ip, .L2376
	movw	r0, #:lower16:.LC154
	mov	r4, r3
	movt	r0, #:upper16:.LC154
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2368
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2366
.L2368:
	ldr	r0, [r4, #3460]
	bl	debugfs_remove
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r4, #3460]
	b	.L2366
.L2370:
	mvn	r0, #18
.L2366:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2377:
	.align	2
.L2376:
	.word	.LANCHOR2+1256
	.fnend
	.size	ghsuart_ctrl_init, .-ghsuart_ctrl_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_init, %function
ghsuart_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC159
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC159
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3464]
	beq	.L2382
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2382
	ldr	ip, .L2388
	movw	r0, #:lower16:.LC154
	mov	r4, r3
	movt	r0, #:upper16:.LC154
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2380
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2378
.L2380:
	ldr	r0, [r4, #3464]
	bl	debugfs_remove
	mvn	r0, #18
	b	.L2378
.L2382:
	mvn	r0, #18
.L2378:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2389:
	.align	2
.L2388:
	.word	.LANCHOR2+1360
	.fnend
	.size	ghsuart_data_init, .-ghsuart_data_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_init, %function
diag_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2399
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC160
	str	lr, [sp, #4]
	movt	r0, #:upper16:.LC160
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	str	r3, [r4, #3556]
	str	r3, [r4, #3560]
	bl	debugfs_create_dir
	cmp	r0, #0
	str	r0, [r4, #3468]
	beq	.L2392
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2392
	ldr	ip, .L2399+4
	movw	r0, #:lower16:.LC154
	mov	r3, #0
	movt	r0, #:upper16:.LC154
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2394
	cmn	r0, #4096
	bhi	.L2394
.L2392:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2394:
	ldr	r0, [r4, #3468]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r4, #3468]
	b	.L2392
.L2400:
	.align	2
.L2399:
	.word	.LANCHOR1+3556
	.word	.LANCHOR2+1464
	.fnend
	.size	diag_function_init, .-diag_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_free_buf, %function
rmnet_sdio_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #180
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r7, #0
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r0, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave
	str	r7, [r4, #316]
	str	r7, [r4, #344]
	str	r7, [r4, #348]
	str	r7, [r4, #352]
	str	r7, [r4, #356]
	str	r7, [r4, #360]
	ldr	r3, [r8, #124]!
	str	r0, [sp, #4]
	cmp	r3, r8
	ldr	r2, [r3]
	beq	.L2402
	mov	fp, r2
	mov	r10, #256
	mov	r9, #512
	b	.L2403
.L2414:
	mov	fp, r2
.L2403:
	ldr	ip, [r3, #4]
	mov	r6, r3
	mov	r0, #0
	str	ip, [r2, #4]
	str	r2, [ip]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #132]
	sub	r3, r3, #1
	str	r3, [r4, #132]
	str	r7, [r6, #-36]!
	ldr	r5, [r4, #80]
	bl	kfree
	mov	r1, r6
	ldr	r2, [r5, #8]
	mov	r0, r5
	ldr	r3, [r2, #12]
	blx	r3
	cmp	r8, fp
	mov	r3, fp
	ldr	r2, [fp]
	bne	.L2414
.L2402:
	mov	r7, r4
	ldr	r3, [r7, #152]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L2404
	mov	fp, r2
	mov	r10, #256
	mov	r9, #512
	mov	r8, #0
	b	.L2405
.L2415:
	mov	fp, r2
.L2405:
	ldr	ip, [r3, #4]
	mov	r5, r3
	mov	r0, #0
	str	ip, [r2, #4]
	str	r2, [ip]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #160]
	sub	r3, r3, #1
	str	r3, [r4, #160]
	str	r8, [r5, #-36]!
	ldr	r6, [r4, #84]
	bl	kfree
	mov	r1, r5
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	cmp	r7, fp
	mov	r3, fp
	ldr	r2, [fp]
	bne	.L2415
.L2404:
	mov	r7, r4
	ldr	r3, [r7, #100]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L2406
	mov	fp, r2
	mov	r9, #256
	mov	r8, #512
	b	.L2407
.L2416:
	mov	fp, r2
.L2407:
	ldr	r1, [r3, #4]
	mov	r10, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r4, #108]
	sub	r3, r3, #1
	str	r3, [r4, #108]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r7, fp
	mov	r3, fp
	ldr	r2, [fp]
	bne	.L2416
.L2406:
	mov	r7, r4
	ldr	r3, [r7, #112]!
	cmp	r3, r7
	ldr	r2, [r3]
	beq	.L2408
	mov	fp, r2
	mov	r9, #256
	mov	r8, #512
	b	.L2409
.L2417:
	mov	fp, r2
.L2409:
	ldr	r1, [r3, #4]
	mov	r10, r3
	str	r1, [r2, #4]
	str	r2, [r1]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r4, #120]
	sub	r3, r3, #1
	str	r3, [r4, #120]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r7, fp
	mov	r3, fp
	ldr	r2, [fp]
	bne	.L2417
.L2408:
	ldr	r3, [r4, #136]
	add	r7, r4, #136
	cmp	r7, r3
	beq	.L2410
	mov	r8, #0
	b	.L2411
.L2427:
	ldr	r2, [r4, #144]
	sub	r2, r2, #1
	str	r2, [r4, #144]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #136]
	cmp	r3, r7
	beq	.L2410
.L2411:
	subs	r0, r3, #0
	bne	.L2427
.L2410:
	ldr	r3, [r4, #164]
	add	r7, r4, #164
	cmp	r3, r7
	beq	.L2412
	mov	r8, #0
	b	.L2413
.L2428:
	ldr	r2, [r4, #172]
	sub	r2, r2, #1
	str	r2, [r4, #172]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #164]
	cmp	r3, r7
	beq	.L2412
.L2413:
	subs	r0, r3, #0
	bne	.L2428
.L2412:
	ldr	r7, [r4, #92]
	ldr	r4, [r4, #88]
	ldr	r0, [r7]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldrd	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_sdio_free_buf, .-rmnet_sdio_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disable, %function
rmnet_sdio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #184]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r4
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	bl	rmnet_sdio_free_buf
	add	r1, r4, #196
	ldr	r0, [r4, #192]
	bl	queue_work
	str	r5, [r4, #320]
	add	r1, r4, #324
	ldr	r0, [r4, #192]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
	.fnend
	.size	rmnet_sdio_disable, .-rmnet_sdio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epin, %function
rmnet_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r2, [r1, #44]
	ldr	r6, [r1, #32]
	cmn	r2, #104
	beq	.L2436
	cmp	r2, #0
	beq	.L2436
	cmn	r2, #108
	beq	.L2436
	ldr	r3, [r4, #76]
	movw	r1, #:lower16:.LC137
	movt	r1, #:upper16:.LC137
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2436:
	add	r7, r4, #180
	add	r8, r4, #124
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #128]
	add	r2, r5, #36
	mov	r0, r7
	str	r2, [r4, #128]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #132]
	add	r3, r3, #1
	str	r3, [r4, #132]
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #184]
	cmp	r3, #0
	beq	.L2434
	ldr	r3, [r4, #308]
	tst	r3, #2
	bne	.L2469
.L2434:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2469:
	ldr	r3, [r4, #76]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	str	r0, [sp, #8]
	cmp	r8, r3
	beq	.L2439
	ldr	r5, [r4, #136]
	add	r3, r4, #136
	str	r3, [sp, #4]
	cmp	r5, r3
	beq	.L2439
	mov	r9, #0
	b	.L2441
.L2471:
	ldr	r3, [r4, #144]
	sub	r3, r3, #1
	str	r3, [r4, #144]
	ldrd	r2, [r5]
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #124]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	sub	r10, r6, #36
	ldrd	r2, [r6]
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	str	r1, [r6, #-32]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #512
	strd	r2, [r6]
	ldr	r3, [r4, #132]
	sub	r3, r3, #1
	str	r3, [r4, #132]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #84]
	mov	r1, r10
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L2470
	ldr	r2, [r4, #124]
	ldr	r3, [r4, #344]
	cmp	r8, r2
	add	r3, r3, #1
	str	r3, [r4, #344]
	beq	.L2439
	ldr	r5, [r4, #136]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L2439
.L2441:
	cmp	r5, #0
	mov	r0, r7
	bne	.L2471
.L2439:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2470:
	ldr	r0, [r4, #184]
	cmp	r0, #0
	beq	.L2444
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC139
	mov	r2, fp
	movt	r1, #:upper16:.LC139
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #128]
	str	r6, [r4, #128]
	str	r8, [r6]
	str	r3, [r6, #4]
	str	r6, [r3]
	ldr	r3, [r4, #132]
	ldr	r2, [r4, #136]
	add	r3, r3, #1
	str	r3, [r4, #132]
	ldr	r3, [sp, #4]
	str	r2, [r5]
	str	r3, [r5, #4]
	str	r5, [r4, #136]
	str	r5, [r2, #4]
	ldr	r3, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #144]
	b	.L2439
.L2444:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #84]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L2439
	.fnend
	.size	rmnet_sdio_complete_epin, .-rmnet_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_data_rx_work, %function
rmnet_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r8, [r0, #-152]
	ldr	r3, [r0, #80]
	tst	r3, #2
	beq	.L2479
	sub	r6, r0, #48
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r7, r0
	ldr	r5, [r3, #-64]!
	cmp	r5, r3
	beq	.L2474
	cmp	r5, #0
	beq	.L2474
	ldr	r3, [r4, #-56]
	mov	ip, #0
	mov	r1, r0
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #-56]
	ldrd	r2, [r5]
	str	ip, [r5]
	str	ip, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC162
	movt	r1, #:upper16:.LC162
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r5
	bl	dev_kfree_skb_any
.L2474:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L2479:
	movw	r0, #:lower16:.LC161
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC161
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L2480
	b	printk
.L2481:
	.align	2
.L2480:
	.word	.LANCHOR2+1568
	.fnend
	.size	rmnet_sdio_data_rx_work, .-rmnet_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost, %function
gbam_write_data_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	str	r0, [sp, #12]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L2499
	ldr	r2, [r6, #28]
	add	r1, r6, #28
	ldr	r9, [r3, #76]
	str	r1, [sp]
	cmp	r2, r1
	beq	.L2485
	ldr	r5, [r6, #36]
	add	r3, r6, #36
	str	r3, [sp, #8]
	cmp	r5, r3
	beq	.L2485
	movw	r3, #:lower16:.LANCHOR0
	movw	r8, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR1
	mov	r10, #0
	str	r3, [sp, #4]
	b	.L2487
.L2501:
	ldr	r2, [r6, #44]
	mov	ip, #256
	mov	r0, r7
	ldr	r3, [r8, #3564]
	sub	r2, r2, #1
	add	r3, r3, lr
	str	r2, [r6, #44]
	ldm	r5, {r1, r2}
	str	r10, [r5]
	str	r10, [r5, #4]
	str	r3, [r8, #3564]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r4, [r6, #28]
	mov	r1, #512
	str	r5, [r4, #-4]
	ldr	r2, [r5, #172]
	sub	fp, r4, #36
	str	r2, [r4, #-36]
	ldr	r2, [r5, #80]
	str	r2, [r4, #-32]
	ldr	r2, [sp, #4]
	ldr	r2, [r2, #548]
	cmp	r3, r2
	moveq	lr, #0
	streq	r10, [r8, #3564]
	ldrb	r3, [r4, #-10]	@ zero_extendqisi2
	bfi	r3, lr, #0, #1
	ldm	r4, {r2, lr}
	uxtb	r3, r3
	orr	r3, r3, #2
	strb	r3, [r4, #-10]
	str	lr, [r2, #4]
	str	r2, [lr]
	str	ip, [r4]
	str	r1, [r4, #4]
	bl	_raw_spin_unlock
	ldr	r3, [r9, #8]
	mov	r1, fp
	mov	r2, #32
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L2500
	ldr	r2, [r6, #28]
	ldr	r3, [r6, #264]
	ldr	r1, [sp]
	add	r3, r3, #1
	cmp	r2, r1
	str	r3, [r6, #264]
	beq	.L2485
	ldr	r5, [r6, #36]
	ldr	r3, [sp, #8]
	cmp	r5, r3
	beq	.L2485
.L2487:
	cmp	r5, #0
	mov	lr, #1
	bne	.L2501
.L2485:
	ldr	r1, [sp, #12]
.L2499:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2500:
	movw	r0, #:lower16:.LC163
	mov	r2, fp
	ldr	r1, .L2502
	movt	r0, #:upper16:.LC163
	bl	printk
	ldr	r3, [r6, #28]
	mov	r0, r5
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp]
	str	r3, [r4, #4]
	str	r4, [r6, #28]
	bl	dev_kfree_skb_any
	b	.L2485
.L2503:
	.align	2
.L2502:
	.word	.LANCHOR2+1592
	.fnend
	.size	gbam_write_data_tohost, .-gbam_write_data_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost_w, %function
gbam_write_data_tohost_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #-20]
	b	gbam_write_data_tohost
	.fnend
	.size	gbam_write_data_tohost_w, .-gbam_write_data_tohost_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_free_buffers, %function
gbam_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r5, r0, #4
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #8
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r4, #0
	beq	.L2506
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L2506
	ldr	r3, [r4, #28]
	add	r8, r4, #28
	ldr	fp, [r2, #76]
	cmp	r8, r3
	beq	.L2507
	mov	r10, #256
	mov	r9, #512
.L2508:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, fp
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #28]
	cmp	r8, r3
	bne	.L2508
	ldr	r2, [r4, #12]
.L2507:
	ldr	r3, [r4, #52]
	add	r8, r4, #52
	ldr	fp, [r2, #80]
	cmp	r8, r3
	beq	.L2509
	mov	r10, #256
	mov	r9, #512
.L2510:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, fp
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #52]
	cmp	r8, r3
	bne	.L2510
.L2509:
	ldr	r3, [r4, #36]
	add	r8, r4, #36
	cmp	r8, r3
	beq	.L2511
	mov	r9, #0
	b	.L2512
.L2531:
	ldr	r2, [r4, #44]
	sub	r2, r2, #1
	str	r2, [r4, #44]
	ldm	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #36]
	cmp	r3, r8
	beq	.L2511
.L2512:
	subs	r0, r3, #0
	bne	.L2531
.L2511:
	ldr	r3, [r4, #60]
	add	r8, r4, #60
	cmp	r3, r8
	beq	.L2506
	mov	r9, #0
	b	.L2513
.L2532:
	ldr	r2, [r4, #68]
	sub	r2, r2, #1
	str	r2, [r4, #68]
	ldm	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #60]
	cmp	r3, r8
	beq	.L2506
.L2513:
	subs	r0, r3, #0
	bne	.L2532
.L2506:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gbam_free_buffers, .-gbam_free_buffers
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epin_complete, %function
gbam_epin_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r2, [r1, #44]
	ldr	r7, [r1, #32]
	cmn	r2, #104
	beq	.L2535
	cmp	r2, #0
	bne	.L2549
.L2536:
	mov	r0, r7
	bl	dev_kfree_skb_any
	cmp	r6, #0
	beq	.L2533
	add	r5, r6, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r6, #32]
	add	r2, r4, #36
	add	r1, r6, #28
	mov	r0, r5
	str	r2, [r6, #32]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r6, #96
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #3568]
	b	queue_work
.L2549:
	cmn	r2, #108
	bne	.L2547
.L2535:
	mov	r0, r7
	bl	dev_kfree_skb_any
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L2533:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2547:
	movw	r0, #:lower16:.LC164
	ldr	r1, .L2550
	movt	r0, #:upper16:.LC164
	bl	printk
	b	.L2536
.L2551:
	.align	2
.L2550:
	.word	.LANCHOR2+1616
	.fnend
	.size	gbam_epin_complete, .-gbam_epin_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_receive, %function
ghsic_data_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L2553
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L2553
	add	r6, r4, #48
	add	r7, r4, #136
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #36]
	add	r1, r4, #32
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	mov	r8, r0
	stm	r5, {r1, r3}
	str	r5, [r3]
	ldr	r3, [r4, #40]
	ldr	r1, [r2, #552]
	str	r5, [r4, #36]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #40]
	beq	.L2556
	ldr	r2, [r2, #556]
	cmp	r2, r3
	bls	.L2564
.L2556:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r7
	ldr	r0, [r4, #84]
	bl	queue_work
	mov	r0, #0
.L2552:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2553:
	mov	r0, r5
	bl	dev_kfree_skb_any
	mvn	r0, #106
	b	.L2552
.L2564:
	add	r1, r4, #164
	mov	r0, #2
	bl	_set_bit
	ldr	r3, [r4, #196]
	mov	r1, r8
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r7
	ldr	r0, [r4, #84]
	bl	queue_work
	mvn	r0, #15
	b	.L2552
	.fnend
	.size	ghsic_data_receive, .-ghsic_data_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_start_xmit, %function
eth_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r6, r1, #1216
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1220]
	mov	r1, r0
	cmp	r3, #0
	beq	.L2625
	ldr	r10, [r3, #80]
	mov	r0, r6
	ldrh	fp, [r3, #90]
	ldrb	r3, [r3, #116]	@ zero_extendqisi2
	str	r3, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L2567
	add	r8, r4, #1232
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r2, r0
	cmp	r3, #0
	beq	.L2570
	ldr	r9, [r4, #1264]
	cmp	r9, #0
	beq	.L2626
.L2570:
	mov	r1, r2
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	tst	fp, #1
	bne	.L2577
	ldr	r2, [r7, #172]
	ldrb	r3, [r2]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L2577
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldrb	ip, [r2, #2]	@ zero_extendqisi2
	ldrb	r0, [r2, #3]	@ zero_extendqisi2
	and	r3, r3, r1
	ldrb	r1, [r2, #4]	@ zero_extendqisi2
	ldrb	r2, [r2, #5]	@ zero_extendqisi2
	and	r3, r3, ip
	and	r3, r3, r0
	and	r3, r3, r1
	and	r3, r3, r2
	cmp	r3, #255
	movne	r3, #2
	moveq	r3, #8
	tst	r3, fp
	beq	.L2567
.L2577:
	mov	r0, r8
	add	r5, r6, #20
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r4, #1236]
	mov	r9, r0
	cmp	r5, fp
	beq	.L2627
	ldrd	r2, [fp]
	mov	r0, #256
	mov	r1, #512
	sub	ip, fp, #36
	str	ip, [sp, #8]
	str	r3, [r2, #4]
	str	r2, [r3]
	strd	r0, [fp]
	ldr	r3, [r4, #1236]
	cmp	r5, r3
	beq	.L2628
.L2580:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1296]
	mov	r9, r0
	cmp	r3, #0
	beq	.L2582
	ldr	r0, [r4, #1220]
	cmp	r0, #0
	beq	.L2583
	mov	r1, r7
	blx	r3
	mov	r7, r0
.L2583:
	cmp	r7, #0
	beq	.L2629
.L2582:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	bne	.L2630
	mov	r0, r6
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r7, #80]
	ldr	r3, [r7, #172]
	str	r3, [fp, #-36]
	str	r7, [fp, #-4]
.L2588:
	ldr	r3, [r4, #1220]
	ldrb	r2, [r3, #96]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L2601
	ldr	r3, [r3, #104]
	cmp	r3, r6
	beq	.L2631
.L2601:
	mov	r2, #1
.L2589:
	ldrb	r3, [fp, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #1, #1
	uxtb	r2, r3
	strb	r3, [fp, #-10]
	tst	r2, #2
	beq	.L2590
	ldrb	r3, [r4, #1340]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L2590
	ldrh	r1, [r10, #20]
	sdiv	r3, r6, r1
	mls	r3, r1, r3, r6
	cmp	r3, #0
	bne	.L2590
	bfi	r2, r3, #1, #1
	add	r6, r6, #1
	strb	r2, [fp, #-10]
.L2590:
	str	r6, [fp, #-32]
	ldr	r3, [r4, #1228]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L2591
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	beq	.L2632
.L2591:
	ldrb	r3, [fp, #-10]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [fp, #-10]
.L2593:
	ldr	r3, [r10, #8]
	sub	r1, fp, #36
	mov	r0, r10
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2622
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r4, #604]
.L2565:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2630:
	ldr	r3, [r4, #1220]
	ldrd	r0, [fp, #-36]
	ldr	r2, [r4, #1284]
	add	r0, r0, r1
	ldr	r1, [r3, #136]
	bl	memcpy
	ldr	r2, [r4, #1284]
	mov	r0, r6
	mov	r1, r9
	ldr	r3, [fp, #-32]
	add	r3, r3, r2
	str	r3, [fp, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [fp, #-36]
	ldr	r3, [fp, #-32]
	ldr	r2, [r7, #80]
	ldr	r1, [r7, #172]
	add	r0, r0, r3
	bl	memcpy
	ldr	r2, [r7, #80]
	mov	r0, r7
	ldr	r3, [fp, #-32]
	add	r3, r3, r2
	mov	r6, r3
	str	r3, [fp, #-32]
	bl	dev_kfree_skb_any
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1260]
	mov	r1, r0
	ldr	r2, [r4, #1292]
	add	r3, r3, #1
	cmp	r3, r2
	str	r3, [r4, #1260]
	ldr	r3, [r4, #1256]
	bcs	.L2587
	cmp	r3, #5
	ble	.L2587
	ldr	r3, [r4, #1236]
	mov	r0, r8
	str	fp, [r3, #4]
	stm	fp, {r3, r5}
	str	fp, [r4, #1236]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L2565
.L2587:
	add	r3, r3, #1
	mov	r2, #0
	mov	r0, r8
	str	r3, [r4, #1256]
	str	r2, [r4, #1260]
	bl	_raw_spin_unlock_irqrestore
	b	.L2588
.L2625:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L2567:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, #0
	b	.L2565
.L2622:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	movne	r3, #0
	strne	r3, [fp, #-32]
	beq	.L2633
.L2584:
	ldr	r2, [r4, #1224]
	mov	r0, r8
	ldr	r3, [r2, #260]
	add	r3, r3, #1
	str	r3, [r2, #260]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1236]
	mov	r6, r0
	cmp	r5, r3
	beq	.L2634
.L2596:
	ldr	r3, [r4, #1240]
	mov	r0, r8
	str	fp, [r4, #1240]
	mov	r1, r6
	str	r5, [fp]
	str	r3, [fp, #4]
	str	fp, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L2565
.L2628:
	ldr	r1, [r4, #576]
	cmp	r1, #0
	beq	.L2635
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
	b	.L2580
.L2626:
	ldr	r0, [r4, #1224]
	add	r3, r6, #20
	ldr	r5, [r4, #1236]
	ldr	r1, [r4, #1292]
	ldr	r0, [r0, #364]
	cmp	r5, r3
	add	r0, r0, #80
	mul	r1, r1, r0
	str	r1, [r4, #1264]
	beq	.L2570
	str	r7, [sp, #8]
	mov	r7, r3
	str	r6, [sp, #12]
	mov	r6, r5
	mov	r5, r2
	b	.L2572
.L2573:
	str	r9, [r6, #-4]
	ldr	r6, [r6]
	cmp	r6, r7
	beq	.L2636
.L2572:
	ldr	r1, [r6, #-36]
	cmp	r1, #0
	bne	.L2573
	movw	r1, #32800
	ldr	r0, [r4, #1264]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6, #-36]
	bne	.L2573
.L2574:
	mov	r2, r5
	ldr	r5, [r4, #1236]
	mov	r3, r7
	str	r0, [r4, #1264]
	cmp	r5, r7
	beq	.L2575
	mov	r4, r0
	mov	r7, r2
	mov	r6, r3
.L2576:
	ldr	r0, [r5, #-36]
	bl	kfree
	str	r4, [r5, #-36]
	ldr	r5, [r5]
	cmp	r5, r6
	bne	.L2576
	mov	r2, r7
.L2575:
	mov	r0, r8
	mov	r1, r2
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
	b	.L2565
.L2632:
	movw	r1, #:lower16:.LANCHOR0
	ldr	r2, [r4, #1252]
	movt	r1, #:upper16:.LANCHOR0
	ldr	r1, [r1, #560]
	add	r2, r2, #1
	cmp	r2, r1, lsr #1
	str	r2, [r4, #1252]
	beq	.L2637
	ldrb	r3, [fp, #-10]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [fp, #-10]
	b	.L2593
.L2633:
	mov	r0, r7
	bl	dev_kfree_skb_any
	b	.L2584
.L2631:
	ldrh	r3, [r10, #20]
	sdiv	r2, r6, r3
	mls	r2, r3, r2, r6
	adds	r2, r2, #0
	movne	r2, #1
	b	.L2589
.L2629:
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L2584
.L2636:
	mov	r2, r5
	ldr	r7, [sp, #8]
	ldr	r6, [sp, #12]
	b	.L2570
.L2634:
	ldr	r1, [r4, #576]
	mov	r0, #0
	add	r1, r1, #80
	bl	_clear_bit
	b	.L2596
.L2627:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #16
	b	.L2565
.L2637:
	ldrb	r2, [fp, #-10]	@ zero_extendqisi2
	bfi	r2, r3, #0, #1
	strb	r2, [fp, #-10]
	str	r3, [r4, #1252]
	b	.L2593
.L2635:
	movw	r0, #:lower16:.LC81
	movw	r1, #1847
	movt	r0, #:upper16:.LC81
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC82
	movt	r0, #:upper16:.LC82
	bl	printk
	b	.L2580
	.fnend
	.size	eth_start_xmit, .-eth_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disconnect_work, %function
rmnet_mux_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-20]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #3
	beq	.L2674
.L2639:
	sub	r5, r4, #16
	sub	r7, r4, #188
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-188]
	str	r0, [sp, #4]
	cmp	r7, r3
	beq	.L2640
	mov	r10, #256
	mov	r9, #512
	mov	r8, #0
.L2641:
	ldm	r3, {r1, r2}
	mov	fp, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	str	r8, [fp, #-36]!
	ldr	r6, [r4, #-292]
	bl	kfree
	mov	r1, fp
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-188]
	cmp	r7, r3
	bne	.L2641
.L2640:
	ldr	r3, [r4, #-164]
	sub	r7, r4, #164
	cmp	r7, r3
	beq	.L2642
	mov	r10, #256
	mov	r9, #512
	mov	r8, #0
.L2643:
	ldm	r3, {r1, r2}
	mov	fp, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	str	r8, [fp, #-36]!
	ldr	r6, [r4, #-288]
	bl	kfree
	mov	r1, fp
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r3, [r4, #-164]
	cmp	r7, r3
	bne	.L2643
.L2642:
	ldr	r3, [r4, #-180]
	sub	r7, r4, #180
	cmp	r3, r7
	beq	.L2644
	mov	r8, #0
	b	.L2645
.L2675:
	ldr	r2, [r4, #-172]
	sub	r2, r2, #1
	str	r2, [r4, #-172]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-180]
	cmp	r3, r7
	beq	.L2644
.L2645:
	subs	r0, r3, #0
	bne	.L2675
.L2644:
	ldr	r3, [r4, #-156]
	sub	r7, r4, #156
	cmp	r7, r3
	beq	.L2646
	mov	r8, #0
	b	.L2647
.L2676:
	ldr	r2, [r4, #-148]
	sub	r2, r2, #1
	str	r2, [r4, #-148]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-156]
	cmp	r3, r7
	beq	.L2646
.L2647:
	subs	r0, r3, #0
	bne	.L2676
.L2646:
	ldr	r3, [r4, #-276]
	sub	r8, r4, #276
	cmp	r8, r3
	beq	.L2648
	mov	r10, #256
	mov	r9, #512
.L2649:
	ldm	r3, {r1, r2}
	mov	r7, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	fp, [r4, #-292]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-276]
	cmp	r8, r3
	bne	.L2649
.L2648:
	ldr	r3, [r4, #-268]
	sub	r8, r4, #268
	cmp	r8, r3
	beq	.L2650
	mov	r10, #256
	mov	r9, #512
.L2651:
	ldm	r3, {r1, r2}
	mov	r7, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	fp, [r4, #-288]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-268]
	cmp	r8, r3
	bne	.L2651
.L2650:
	ldr	r3, [r4, #-260]
	sub	r8, r4, #260
	cmp	r3, r8
	beq	.L2652
	mov	r10, #256
	mov	r9, #512
.L2653:
	ldm	r3, {r1, r2}
	mov	r7, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	fp, [r4, #-288]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-260]
	cmp	r8, r3
	bne	.L2653
.L2652:
	ldr	r3, [r4, #-68]
	sub	r7, r4, #68
	cmp	r7, r3
	beq	.L2654
	mov	r9, #256
	mov	r8, #512
.L2655:
	ldm	r3, {r1, r2}
	mov	r10, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r3, [r4, #-68]
	ldr	r2, [r4, #-48]
	cmp	r7, r3
	sub	r2, r2, #1
	str	r2, [r4, #-48]
	bne	.L2655
.L2654:
	ldr	r3, [r4, #-44]
	sub	r7, r4, #44
	cmp	r7, r3
	beq	.L2656
	mov	r9, #256
	mov	r8, #512
.L2657:
	ldm	r3, {r1, r2}
	mov	r10, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-8]!
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r3, [r4, #-44]
	ldr	r2, [r4, #-36]
	cmp	r7, r3
	sub	r2, r2, #1
	str	r2, [r4, #-36]
	bne	.L2657
.L2656:
	mov	r0, r5
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #0
	sub	r0, r4, #60
	mov	r3, r1
	mov	r2, #1
	str	r1, [r4, #-20]
	mov	r1, #3
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__wake_up
.L2674:
	sub	r0, r0, #228
	bl	tasklet_kill
	sub	r0, r4, #248
	bl	tasklet_kill
	b	.L2639
	.fnend
	.size	rmnet_mux_disconnect_work, .-rmnet_mux_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_data_rx_work, %function
rmnet_mux_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #124
	strd	r8, [sp, #16]
	sub	r8, r0, #16
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #-156]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-16]
	mov	fp, r0
	cmp	r8, r4
	beq	.L2678
	movw	r7, #:lower16:.LC165
	mov	r10, #0
	movt	r7, #:upper16:.LC165
	b	.L2679
.L2685:
	ldr	r3, [r5, #-8]
	sub	r3, r3, #1
	str	r3, [r5, #-8]
	ldrd	r2, [r4]
	str	r10, [r4]
	str	r10, [r4, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	ldr	r0, [r9]
	mov	r1, r7
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r4
	bl	dev_kfree_skb_any
	ldr	r4, [r5, #-16]
	cmp	r8, r4
	beq	.L2678
.L2679:
	cmp	r4, #0
	mov	r1, fp
	mov	r0, r6
	bne	.L2685
.L2678:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_sdio_data_rx_work, .-rmnet_mux_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epin, %function
rmnet_mux_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	r8, [r1, #32]
	ldr	r7, [r4, #352]
	cmp	r7, #0
	beq	.L2717
	ldr	r2, [r1, #44]
	cmn	r2, #104
	beq	.L2689
	cmp	r2, #0
	beq	.L2689
	cmn	r2, #108
	beq	.L2689
	ldr	r3, [r4, #76]
	movw	r1, #:lower16:.LC138
	movt	r1, #:upper16:.LC138
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2689:
	add	r7, r4, #356
	add	r10, r4, #184
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #188]
	add	r2, r5, #36
	mov	r0, r7
	str	r2, [r4, #188]
	str	r10, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #360]
	cmp	r3, #0
	bne	.L2718
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2718:
	ldr	r3, [r4, #76]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #184]
	str	r0, [sp, #8]
	cmp	r10, r3
	beq	.L2692
	ldr	r5, [r4, #192]
	add	r3, r4, #192
	str	r3, [sp, #4]
	cmp	r5, r3
	beq	.L2692
	mov	r8, #0
	b	.L2694
.L2720:
	ldr	r3, [r4, #200]
	sub	r3, r3, #1
	str	r3, [r4, #200]
	ldrd	r2, [r5]
	str	r8, [r5]
	str	r8, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #184]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	sub	fp, r6, #36
	ldrd	r2, [r6]
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	str	r1, [r6, #-32]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #512
	strd	r2, [r6]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #84]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r9, #0
	bne	.L2719
	ldr	r2, [r4, #184]
	ldr	r3, [r4, #396]
	cmp	r10, r2
	add	r3, r3, #1
	str	r3, [r4, #396]
	beq	.L2692
	ldr	r5, [r4, #192]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L2692
.L2694:
	cmp	r5, #0
	mov	r0, r7
	bne	.L2720
.L2692:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2717:
	mov	r6, r0
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, r7
	str	r7, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L2719:
	ldr	r0, [r4, #360]
	mov	r3, r9
	mov	r9, fp
	cmp	r0, #0
	beq	.L2697
	mov	r2, r3
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC139
	movt	r1, #:upper16:.LC139
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #188]
	str	r6, [r4, #188]
	ldr	r2, [sp, #4]
	str	r10, [r6]
	str	r3, [r6, #4]
	str	r6, [r3]
	ldr	r3, [r4, #192]
	str	r3, [r5]
	str	r2, [r5, #4]
	str	r5, [r4, #192]
	str	r5, [r3, #4]
	ldr	r3, [r4, #200]
	add	r3, r3, #1
	str	r3, [r4, #200]
	b	.L2692
.L2697:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #84]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L2692
	.fnend
	.size	rmnet_mux_sdio_complete_epin, .-rmnet_mux_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epout, %function
rmnet_mux_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r1, #32]
	ldr	r8, [r4, #352]
	cmp	r8, #0
	beq	.L2743
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #76]
	cmn	r3, #104
	beq	.L2724
	cmp	r3, #0
	beq	.L2725
	cmn	r3, #108
	beq	.L2724
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC135
	add	r6, r4, #356
	ldr	lr, [r5, #4]
	movt	r1, #:upper16:.LC135
	ldr	ip, [r5, #48]
	ldr	r0, [r8]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock
.L2726:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #300]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #564]
	cmp	r2, r3
	bcs	.L2744
	mov	r0, r6
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L2730
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r5
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r5, {r3, ip}
	str	r6, [r5, #32]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L2745
.L2721:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2725:
	ldr	r1, [r1, #48]
	mov	r0, r7
	add	r6, r4, #356
	bl	skb_put
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #220]
	add	r2, r4, #216
	add	r1, r4, #232
	strd	r2, [r7]
	str	r7, [r3]
	ldr	r3, [r4, #224]
	str	r7, [r4, #220]
	ldr	r0, [r4, #368]
	add	r3, r3, #1
	str	r3, [r4, #224]
	bl	queue_work
	b	.L2726
.L2743:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r8
	str	r8, [r5]
.L2742:
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L2724:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	b	.L2742
.L2744:
	ldr	r3, [r4, #212]
	add	r2, r5, #36
	add	r1, r4, #208
	mov	r0, r6
	str	r2, [r4, #212]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2745:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L2728:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC166
	mov	r2, r7
	movt	r1, #:upper16:.LC166
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #212]
	add	r2, r5, #36
	add	r1, r4, #208
	str	r2, [r4, #212]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	b	.L2721
.L2730:
	mvn	r7, #11
	b	.L2728
	.fnend
	.size	rmnet_mux_sdio_complete_epout, .-rmnet_mux_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_unbind, %function
rmnet_sdio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r0, r1, #244
	mov	r4, r1
	str	lr, [sp, #4]
	bl	cancel_delayed_work_sync
	ldr	r0, [r4, #192]
	bl	destroy_workqueue
	ldr	r2, [r4, #308]
	mov	r3, #0
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	tst	r2, #2
	str	r3, [r4, #88]
	bne	.L2756
.L2747:
	ldr	r3, [r4, #312]
	tst	r3, #2
	beq	.L2748
	add	r1, r4, #312
	mov	r0, #1
	bl	_clear_bit
.L2748:
	ldr	r0, [r4, #340]
	bl	debugfs_remove_recursive
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L2756:
	add	r1, r4, #308
	mov	r0, #1
	bl	_clear_bit
	b	.L2747
	.fnend
	.size	rmnet_sdio_unbind, .-rmnet_sdio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_connect_w, %function
grmnet_ctrl_smd_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #-104]
	tst	r3, #2
	bne	.L2758
	ldr	r3, [r0, #-104]
	tst	r3, #4
	beq	.L2767
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2767:
	sub	r1, r0, #104
	mov	r0, #2
	ldr	r4, [r4, #-12]
	bl	_set_bit
	ldr	r0, .L2768
	mov	r3, #84
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	mla	r0, r3, r4, r0
	ldrd	r4, [sp]
	add	sp, sp, #24
	add	r0, r0, #4
	b	platform_driver_register
.L2758:
	sub	r2, r0, #112
	movw	r3, #:lower16:grmnet_ctrl_smd_notify
	ldr	r0, [r0, #-108]
	movt	r3, #:upper16:grmnet_ctrl_smd_notify
	mov	r1, r2
	bl	smd_open
	subs	r3, r0, #0
	beq	.L2760
	cmn	r3, #11
	bne	.L2761
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, r4
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r2, #25
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #3516]
	b	queue_delayed_work
.L2760:
	sub	r5, r4, #4
	ldr	r6, [r4, #-24]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-8]
	mov	r7, r0
	cmp	r3, #0
	beq	.L2762
	orr	r2, r6, #4
	mov	r1, r6
	ldr	r0, [r4, #-112]
	mvn	r2, r2
	bl	smd_tiocmset
.L2762:
	mov	r1, r7
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L2761:
	movw	r0, #:lower16:.LC167
	ldr	r2, [r4, #-108]
	ldr	r1, .L2768+4
	movt	r0, #:upper16:.LC167
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L2769:
	.align	2
.L2768:
	.word	.LANCHOR1+528
	.word	.LANCHOR2+1636
	.fnend
	.size	grmnet_ctrl_smd_connect_w, .-grmnet_ctrl_smd_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_open_sdio_work, %function
rmnet_mux_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, r0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3572]
	cmp	r2, #90
	bgt	.L2772
	add	ip, r2, #1
	ldr	r0, [r0, #120]
	mov	r2, #200
	str	ip, [r3, #3572]
	b	queue_delayed_work
.L2772:
	ldr	r3, [r0, #-172]
	movw	r1, #:lower16:.LC168
	movt	r1, #:upper16:.LC168
	ldr	r0, [r3]
	add	r0, r0, #32
	b	dev_err
	.fnend
	.size	rmnet_mux_open_sdio_work, .-rmnet_mux_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_rx, %function
gbam_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #4
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	mov	r8, r0
	cmp	r3, #0
	beq	.L2777
	movw	r5, #:lower16:.LANCHOR0
	ldr	r9, [r3, #80]
	add	r3, r6, #52
	movt	r5, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
.L2775:
	ldr	r4, [r6, #52]
	mvn	r3, #0
	mov	r2, #0
	ldr	r0, [sp, #4]
	mov	r1, #32
	sub	r10, r4, #36
	cmp	r4, r0
	beq	.L2777
	ldr	r0, [r5, #568]
	cmp	r0, #0
	beq	.L2776
	ldr	r0, [r5, #572]
	ldr	ip, [r6, #68]
	cmp	ip, r0
	bcs	.L2777
.L2776:
	ldr	r0, [r5, #576]
	add	r0, r0, #8
	bl	__alloc_skb
	subs	r3, r0, #0
	mov	lr, #256
	mov	ip, #512
	mov	r1, r8
	mov	r0, r7
	beq	.L2777
	ldr	r8, [r3, #160]
	str	r3, [sp]
	ldr	r2, [r3, #172]
	add	r8, r8, #8
	add	r2, r2, #8
	str	r8, [r3, #160]
	str	r2, [r3, #172]
	ldr	r8, [r4]
	ldr	r2, [r4, #4]
	str	r2, [r8, #4]
	str	r8, [r2]
	str	lr, [r4]
	str	ip, [r4, #4]
	ldr	r2, [r3, #172]
	str	r2, [r4, #-36]
	ldr	r2, [r5, #576]
	str	r2, [r4, #-32]
	str	r3, [r4, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r9, #8]
	mov	r2, #32
	mov	r1, r10
	mov	r0, r9
	ldr	r8, [ip, #16]
	blx	r8
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r8, r0
	ldr	r3, [sp]
	bne	.L2795
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L2775
.L2777:
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2795:
	mov	r0, r3
	bl	dev_kfree_skb_any
	ldr	r0, .L2798
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L2796
.L2779:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L2797
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2777
.L2797:
	ldr	r3, [r6, #52]
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #4]
	str	r3, [r4, #4]
	str	r4, [r6, #52]
	b	.L2777
.L2796:
	movw	r0, #:lower16:.LC169
	mov	r2, fp
	ldr	r1, .L2798
	movt	r0, #:upper16:.LC169
	bl	printk
	b	.L2779
.L2799:
	.align	2
.L2798:
	.word	.LANCHOR2+1664
	.fnend
	.size	gbam_start_rx, .-gbam_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epout_complete, %function
gbam_epout_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0]
	ldr	r6, [r1, #44]
	ldr	r8, [r1, #32]
	cmn	r6, #104
	beq	.L2802
	cmp	r6, #0
	beq	.L2803
	cmn	r6, #108
	beq	.L2802
	ldr	r0, .L2831
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L2829
.L2805:
	mov	r0, r8
	add	r9, r5, #4
	bl	dev_kfree_skb_any
	mov	r0, r9
	bl	_raw_spin_lock
.L2804:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r3, [r6, #568]
	cmp	r3, #0
	beq	.L2806
	ldr	r2, [r5, #68]
	ldr	r3, [r6, #572]
	cmp	r2, r3
	bcc	.L2806
	ldr	r3, [r5, #276]
	cmp	r3, #0
	bne	.L2828
	ldr	r3, [r5, #272]
	mov	r2, #1
	str	r2, [r5, #276]
	add	r3, r3, r2
	str	r3, [r5, #272]
.L2828:
	ldr	r3, [r5, #56]
	add	r2, r4, #36
	add	r1, r5, #52
	mov	r0, r9
	str	r2, [r5, #56]
	str	r1, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L2802:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L2806:
	mov	r0, r9
	bl	_raw_spin_unlock
	ldr	r0, [r6, #576]
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	add	r0, r0, #8
	bl	__alloc_skb
	subs	r8, r0, #0
	beq	.L2810
	ldr	ip, [r8, #160]
	mov	r0, r7
	mov	r2, #32
	ldr	r3, [r8, #172]
	mov	r1, r4
	add	ip, ip, #8
	add	r3, r3, #8
	str	ip, [r8, #160]
	str	r3, [r8, #172]
	str	r3, [r4]
	ldr	r3, [r6, #576]
	str	r3, [r4, #4]
	str	r8, [r4, #32]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bne	.L2830
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2803:
	ldr	r1, [r1, #48]
	mov	r0, r8
	add	r9, r5, #4
	bl	skb_put
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r2, [r5, #64]
	add	r1, r5, #60
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3568]
	stm	r8, {r1, r2}
	add	r1, r5, #80
	str	r8, [r2]
	ldr	r3, [r5, #68]
	str	r8, [r5, #64]
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	queue_work
	b	.L2804
.L2830:
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r0, .L2831
	bl	__printk_ratelimit
	cmp	r0, #0
	beq	.L2810
	movw	r0, #:lower16:.LC171
	mov	r2, r6
	ldr	r1, .L2831
	movt	r0, #:upper16:.LC171
	bl	printk
.L2810:
	mov	r0, r9
	bl	_raw_spin_lock
	b	.L2828
.L2829:
	ldr	r1, [r4, #4]
	movw	r0, #:lower16:.LC170
	mov	r3, r6
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC170
	ldr	r2, [r7, #4]
	str	ip, [sp]
	str	r1, [sp, #4]
	ldr	r1, .L2831
	bl	printk
	b	.L2805
.L2832:
	.align	2
.L2831:
	.word	.LANCHOR2+1680
	.fnend
	.size	gbam_epout_complete, .-gbam_epout_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_ioctl, %function
usb_rmnet_mux_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #65024
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2835
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2837
	mov	r0, #4
	bx	lr
.L2837:
	ldr	r1, [r0, #124]
	mov	r0, r2
	mov	r2, #4
	add	r1, r1, #340
	b	__copy_to_user
.L2835:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_rmnet_mux_ctrl_ioctl, .-usb_rmnet_mux_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_ioctl, %function
acc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #19714
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, 16640
	str	r6, [sp, #8]
	cmp	r1, r3
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	beq	.L2840
	bls	.L2854
	movw	r3, #19716
	movt	r3, 16640
	cmp	r1, r3
	beq	.L2845
	bcc	.L2846
	movw	r3, #19717
	movt	r3, 16640
	cmp	r1, r3
	beq	.L2847
	movw	r3, #19718
	movt	r3, 16640
	cmp	r1, r3
	addeq	r4, r4, #1360
	addeq	r4, r4, #13
	bne	.L2852
.L2849:
	cmp	r4, #0
	beq	.L2852
	mov	r0, r4
	mov	r6, r2
	bl	strlen
	mov	r3, sp
	add	r5, r0, #1
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2855
.L2850:
	mvn	r0, #13
	b	.L2838
.L2854:
	movw	r3, #19720
	cmp	r1, r3
	beq	.L2842
	movw	r3, #19713
	movt	r3, 16640
	cmp	r1, r3
	beq	.L2843
	movw	r3, #19719
	cmp	r1, r3
	beq	.L2856
.L2852:
	mvn	r0, #21
.L2838:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2843:
	add	r4, r4, #93
	b	.L2849
.L2847:
	add	r4, r4, #1104
	add	r4, r4, #13
	b	.L2849
.L2855:
	mov	r1, r4
	mov	r0, r6
	mov	r2, r5
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L2850
	mov	r0, r5
	b	.L2838
.L2846:
	add	r4, r4, #604
	add	r4, r4, #1
	b	.L2849
.L2842:
	ldr	r0, [r4, #1640]
	b	.L2838
.L2856:
	ldr	r0, [r4, #1636]
	b	.L2838
.L2845:
	add	r4, r4, #860
	add	r4, r4, #1
	b	.L2849
.L2840:
	add	r4, r4, #348
	add	r4, r4, #1
	b	.L2849
	.fnend
	.size	acc_ioctl, .-acc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_ioctl, %function
ffs_epfile_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	ldr	r0, [r4, #40]
	ldr	r3, [r0, #96]
	cmp	r3, #2
	bne	.L2878
	add	r0, r0, #28
	mov	r5, r1
	mov	r6, r2
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #44]
	cmp	r3, #0
	mvneq	r5, #18
	beq	.L2860
	movw	r2, #26371
	cmp	r5, r2
	beq	.L2861
	bhi	.L2862
	movw	r2, #26369
	cmp	r5, r2
	beq	.L2863
	movw	r2, #26370
	cmp	r5, r2
	bne	.L2873
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L2875
	mov	r5, #0
	blx	r3
.L2860:
	ldr	r0, [r4, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
.L2857:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2862:
	movw	r2, #26497
	cmp	r5, r2
	beq	.L2865
	movw	r2, #26498
	movt	r2, 32777
	cmp	r5, r2
	bne	.L2873
	ldr	r0, [r4, #40]
	ldr	r2, [r0]
	ldr	r2, [r2, #16]
	cmp	r2, #3
	moveq	r2, #1
	beq	.L2869
	cmp	r2, #5
	moveq	r2, #2
	movne	r2, #0
.L2869:
	add	r2, r2, #2
	add	r0, r0, #28
	ldr	r4, [r3, r2, lsl #2]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2870
.L2871:
	mvn	r5, #13
	b	.L2857
.L2873:
	mvn	r5, #24
	b	.L2860
.L2863:
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	beq	.L2874
	blx	r3
	mov	r5, r0
	b	.L2860
.L2865:
	ldrb	r5, [r3, #20]	@ zero_extendqisi2
	b	.L2860
.L2861:
	ldr	r0, [r3]
	mov	r1, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r5, r0
	b	.L2860
.L2878:
	movw	r0, #:lower16:.LC12
	mov	r1, #980
	movt	r0, #:upper16:.LC12
	mvn	r5, #18
	bl	warn_slowpath_null
	b	.L2857
.L2870:
	mov	r1, r4
	mov	r0, r6
	mov	r2, #9
	bl	__copy_to_user
	subs	r5, r0, #0
	beq	.L2857
	b	.L2871
.L2874:
	mvn	r5, #94
	b	.L2860
.L2875:
	mov	r5, r3
	b	.L2860
	.fnend
	.size	ffs_epfile_ioctl, .-ffs_epfile_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_ioctl, %function
rmnet_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #124]
	.pad #12
	sub	sp, sp, #12
	add	r5, r4, #28
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L2880
	movw	r3, #29186
	mov	r0, r2
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2890
	ldr	r2, [r4, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2884
.L2886:
	movw	r0, #:lower16:.LC172
	movt	r0, #:upper16:.LC172
	bl	printk
	mvn	r0, #13
.L2885:
	ldr	r3, [r4, #12]
.L2887:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L2879:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L2884:
	mov	r2, #4
	add	r1, sp, r2
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L2885
	b	.L2886
.L2880:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L2879
.L2890:
	movw	r0, #:lower16:.LC173
	movt	r0, #:upper16:.LC173
	bl	printk
	mvn	r0, #21
	b	.L2887
	.fnend
	.size	rmnet_ctrl_ioctl, .-rmnet_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_ioctl, %function
rndis_qc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r0, .L2910
	movt	r4, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	mov	r7, r2
	mov	r8, r1
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	strb	r3, [sp, #3]
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2332]
	mov	r6, r0
	cmp	r3, #0
	beq	.L2907
	ldrb	r0, [r3, #124]	@ zero_extendqisi2
	add	r2, r3, #140
	ldr	r1, [r3, #128]
	strb	r0, [sp, #3]
	str	r1, [sp, #4]
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	beq	.L2908
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r5, #15
.L2893:
	mov	r1, r6
	ldr	r0, .L2910
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2907:
	movw	r0, #:lower16:.LC43
	ldr	r1, .L2910+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC43
	bl	printk
	b	.L2893
.L2908:
	mov	r1, r6
	ldr	r0, .L2910
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC174
	mov	r2, r8
	ldr	r1, .L2910+4
	movt	r0, #:upper16:.LC174
	bl	printk
	movw	r3, #26881
	movt	r3, 32769
	cmp	r8, r3
	beq	.L2896
	movw	r3, #26882
	movt	r3, 32772
	cmp	r8, r3
	bne	.L2909
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2902
.L2903:
	movw	r0, #:lower16:.LC175
	ldr	r1, .L2910+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC175
	bl	printk
.L2901:
	ldr	r0, .L2910
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2332]
	mov	r6, r0
	cmp	r3, #0
	beq	.L2907
	add	r2, r3, #140
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L2893
.L2902:
	mov	r2, #4
	mov	r0, r7
	add	r1, sp, r2
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L2903
	mov	r5, r0
	b	.L2901
.L2909:
	movw	r0, #:lower16:.LC177
	ldr	r1, .L2910+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC177
	bl	printk
	b	.L2901
.L2896:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #1; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2898
.L2900:
	movw	r0, #:lower16:.LC175
	ldr	r1, .L2910+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC175
	bl	printk
.L2899:
	movw	r0, #:lower16:.LC176
	ldrb	r2, [sp, #3]	@ zero_extendqisi2
	ldr	r1, .L2910+4
	movt	r0, #:upper16:.LC176
	bl	printk
	b	.L2901
.L2898:
	mov	r2, r5
	mov	r0, r7
	add	r1, sp, #3
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L2900
	mov	r5, r0
	b	.L2899
.L2911:
	.align	2
.L2910:
	.word	.LANCHOR1+2328
	.word	.LANCHOR2+1700
	.fnend
	.size	rndis_qc_ioctl, .-rndis_qc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ioctl, %function
mbim_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #88
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L2913
	movw	r3, #28419
	movt	r3, 32770
	cmp	r1, r3
	beq	.L2915
	movw	r3, #28418
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2927
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2918
.L2920:
	movw	r0, #:lower16:.LC175
	ldr	r1, .L2928
	mvn	r6, #13
	movt	r0, #:upper16:.LC175
	bl	printk
.L2919:
	movw	r0, #:lower16:.LC178
	ldr	r1, .L2928
	ldr	r2, [r4, #216]
	movt	r0, #:upper16:.LC178
	bl	printk
	b	.L2921
.L2927:
	movw	r0, #:lower16:.LC180
	ldr	r1, .L2928
	mvn	r6, #21
	movt	r0, #:upper16:.LC180
	bl	printk
.L2921:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L2912:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2915:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2922
.L2924:
	movw	r0, #:lower16:.LC175
	ldr	r1, .L2928
	mvn	r6, #13
	movt	r0, #:upper16:.LC175
	bl	printk
.L2923:
	movw	r0, #:lower16:.LC179
	ldrh	r2, [r4, #220]
	ldr	r1, .L2928
	movt	r0, #:upper16:.LC179
	bl	printk
	b	.L2921
.L2918:
	mov	r0, r2
	add	r1, r4, #216
	mov	r2, #4
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L2919
	b	.L2920
.L2922:
	mov	r0, r2
	add	r1, r4, #220
	mov	r2, #2
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L2923
	b	.L2924
.L2913:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L2912
.L2929:
	.align	2
.L2928:
	.word	.LANCHOR2+1716
	.fnend
	.size	mbim_ioctl, .-mbim_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_read, %function
usb_rmnet_mux_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r1
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #124]
	mov	r3, sp
	bic	r8, r3, #8128
	bic	r8, r8, #63
.L2931:
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2940
	add	r6, r4, #356
	add	r5, r4, #304
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #304]
	mov	r1, r0
	cmp	r5, r7
	bne	.L2933
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #304]
	cmp	r5, r3
	bne	.L2931
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2931
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r6, r4, #312
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2937
.L2950:
	bl	schedule
.L2937:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #304]
	cmp	r5, r3
	bne	.L2935
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2935
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2950
	mov	r5, #65024
	add	r1, sp, #4
	mov	r0, r6
	movt	r5, 65535
	bl	finish_wait
.L2930:
	mov	r0, r5
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2940:
	mvn	r5, #18
	b	.L2930
.L2935:
	add	r1, sp, #4
	mov	r0, r6
	bl	finish_wait
	b	.L2931
.L2933:
	ldr	r3, [r7, #-4]
	sub	r8, r7, #8
	cmp	r3, r10
	bhi	.L2951
	ldrd	r2, [r7]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r6
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r7]
	str	ip, [r7, #4]
	ldr	r3, [r4, #324]
	sub	r3, r3, #1
	str	r3, [r4, #324]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	ldr	r5, [r7, #-4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	mov	r0, r5
	beq	.L2952
.L2939:
	ldr	r3, [r4, #408]
	cmp	r0, #0
	movne	r5, r0
	add	r3, r3, #1
	str	r3, [r4, #408]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L2930
.L2952:
	mov	r0, r9
	mov	r2, r5
	ldr	r1, [r7, #-8]
	bl	__copy_to_user
	b	.L2939
.L2951:
	mov	r0, r6
	mvn	r5, #11
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC181
	mov	r3, r10
	ldr	r1, .L2953
	ldr	r2, [r7, #-4]
	movt	r0, #:upper16:.LC181
	bl	printk
	b	.L2930
.L2954:
	.align	2
.L2953:
	.word	.LANCHOR2+1728
	.fnend
	.size	usb_rmnet_mux_ctrl_read, .-usb_rmnet_mux_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_read, %function
rmnet_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #2048
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r2
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	str	r1, [sp, #4]
	bhi	.L2971
	add	r9, r4, #20
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r9]
	add	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L2958
	mov	r3, sp
	add	r7, r4, #44
	bic	r8, r3, #8128
	add	r6, r4, #52
	bic	r8, r8, #63
	b	.L2961
.L2973:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r10, [r4, #44]
	cmp	r10, r7
	beq	.L2972
.L2961:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #44]
	mov	r1, r0
	cmp	r5, r7
	beq	.L2973
	ldrd	r2, [r5]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r6
	sub	r6, r5, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r5, #-4]
	cmp	r1, fp
	bhi	.L2974
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #4]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L2975
.L2966:
	cmp	r2, #0
	ldreq	r4, [r5, #-4]
	bne	.L2976
.L2968:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
.L2955:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2972:
	ldr	ip, [r8, #12]
	movw	r1, #:lower16:autoremove_wake_function
	add	r0, sp, #24
	movt	r1, #:upper16:autoremove_wake_function
	mov	r2, #0
	add	r5, r4, #32
	str	r2, [sp, #12]
	str	ip, [sp, #16]
	str	r1, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
	b	.L2964
.L2977:
	bl	schedule
.L2964:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r2, [r4, #44]
	cmp	r10, r2
	bne	.L2962
	ldr	r2, [r8, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L2977
	add	r1, sp, #12
	mov	r0, r5
	bl	finish_wait
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L2955
.L2962:
	add	r1, sp, #12
	mov	r0, r5
	bl	finish_wait
	b	.L2961
.L2975:
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L2966
.L2976:
	movw	r0, #:lower16:.LC185
	mov	r1, r2
	movt	r0, #:upper16:.LC185
	mvn	r4, #13
	bl	printk
	b	.L2968
.L2974:
	movw	r0, #:lower16:.LC184
	mov	r2, fp
	movt	r0, #:upper16:.LC184
	bl	printk
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5, #-8]
	mvn	r4, #11
	bl	kfree
	mov	r0, r6
	bl	kfree
	b	.L2955
.L2958:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC183
	mvn	r4, #15
	movt	r0, #:upper16:.LC183
	bl	printk
	b	.L2955
.L2971:
	movw	r0, #:lower16:.LC182
	mov	r1, r2
	movt	r0, #:upper16:.LC182
	mov	r2, #2048
	bl	printk
	mvn	r4, #21
	b	.L2955
	.fnend
	.size	rmnet_ctrl_read, .-rmnet_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_read, %function
acc_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldrb	r3, [r4, #92]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L2993
	cmp	r2, #16384
	mov	r8, r1
	movcc	r6, r2
	movcs	r6, #16384
	ands	r3, r3, #1
	bne	.L2980
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r7, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r7, r7, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r7, #12]
	add	r9, r4, #1648
	add	r5, sp, #4
	add	r9, r9, #8
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2983
.L2999:
	bl	schedule
.L2983:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r9
	bl	prepare_to_wait
	ldrb	r3, [r4, #92]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L2981
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2999
	mov	r4, #65024
	mov	r1, r5
	mov	r0, r9
	movt	r4, 65535
	bl	finish_wait
.L2978:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2981:
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
.L2980:
	ldr	r10, [r4, #1680]
	ldr	r3, [r4, #1688]
	cmp	r3, #0
	bne	.L2984
.L2985:
	str	r6, [r10, #4]
	ldr	r0, [r4, #88]
	mov	r3, #0
	mov	r2, #208
	mov	r1, r10
	str	r3, [r4, #1688]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2990
	ldr	r3, [r4, #1688]
	cmp	r3, #0
	bne	.L2984
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r7, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r7, r7, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r7, #12]
	add	r9, r4, #1648
	add	r5, sp, #4
	add	r9, r9, #8
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2989
.L3000:
	bl	schedule
.L2989:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #1688]
	cmp	r3, #0
	bne	.L2987
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3000
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
	ldr	r0, [r4, #88]
	mov	r1, r10
	mov	r4, #65024
	movt	r4, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L2978
.L2987:
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
.L2984:
	ldrb	r3, [r4, #92]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r4, #1688]
	tst	r3, #1
	beq	.L2990
	ldr	r2, [r10, #48]
	cmp	r2, #0
	bne	.L2991
	ldr	r10, [r4, #1680]
	b	.L2985
.L2991:
	mov	r3, sp
	cmp	r2, r6
	bic	r3, r3, #8128
	movcs	r2, r6
	bic	r3, r3, #63
	mov	r4, r2
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r1, r8, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3001
.L2992:
	cmp	r2, #0
	mvnne	r4, #13
	b	.L2978
.L3001:
	mov	r0, r8
	ldr	r1, [r10]
	bl	__copy_to_user
	mov	r2, r0
	b	.L2992
.L2993:
	mvn	r4, #18
	b	.L2978
.L2990:
	mvn	r4, #4
	b	.L2978
	.fnend
	.size	acc_read, .-acc_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_read, %function
mtp_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #4]
	ldr	r2, [fp, #96]
	cmp	r2, #0
	bne	.L3003
	mov	r3, sp
	str	r2, [sp, #12]
	movw	r1, #:lower16:autoremove_wake_function
	bic	r4, r3, #8128
	add	r0, sp, #24
	bic	r4, r4, #63
	movt	r1, #:upper16:autoremove_wake_function
	ldr	ip, [r4, #12]
	add	r5, sp, #12
	add	r6, fp, #124
	str	ip, [sp, #16]
	str	r1, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
	b	.L3006
.L3047:
	bl	schedule
.L3006:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r2, [fp, #96]
	cmp	r2, #0
	bne	.L3004
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3047
	mov	r1, r5
	mov	r0, r6
	mov	r10, #65024
	add	r8, fp, #80
	bl	finish_wait
	movt	r10, 65535
	b	.L3010
.L3004:
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait
.L3003:
	ldr	r0, [fp, #88]
	movw	r2, #:lower16:.LANCHOR0
	sub	r6, r10, #1
	movt	r2, #:upper16:.LANCHOR0
	ldr	r1, [r2, #580]
	ldrh	r2, [r0, #20]
	add	r6, r6, r2
	rsb	r2, r2, #0
	and	r6, r6, r2
	cmp	r6, r1
	bhi	.L3024
	add	r8, fp, #80
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r2, [fp, #96]
	cmp	r2, #3
	beq	.L3048
	mov	r2, #2
	mov	r0, r8
	str	r2, [fp, #96]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
	b	.L3009
.L3050:
	cmp	r2, #3
	beq	.L3013
.L3012:
	cmp	r2, #2
	bne	.L3027
	ldr	r2, [r4, #48]
	cmp	r2, #0
	bne	.L3049
.L3009:
	ldr	r4, [fp, #160]
	mov	ip, #0
	mov	r2, #208
	str	r6, [r4, #4]
	mov	r1, r4
	ldr	r0, [fp, #88]
	str	ip, [fp, #168]
	ldr	ip, [r0, #8]
	ldr	r5, [ip, #16]
	blx	r5
	cmp	r0, #0
	blt	.L3027
	ldr	r2, [fp, #96]
	ldr	r1, [fp, #168]
	cmp	r1, #0
	bne	.L3050
	cmp	r2, #2
	beq	.L3014
	cmp	r2, #3
	beq	.L3018
.L3027:
	mvn	r10, #4
.L3010:
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r2, [fp, #96]
	cmp	r2, #3
	mvneq	r10, #124
	beq	.L3021
	cmp	r2, #0
	movne	r2, #1
	strne	r2, [fp, #96]
.L3021:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
.L3002:
	mov	r0, r10
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3014:
	ldr	ip, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r0, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, sp, #12
	str	r1, [sp, #12]
	add	r9, fp, #124
	str	ip, [sp, #16]
	str	r2, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
	b	.L3017
.L3051:
	bl	schedule
.L3017:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r2, [fp, #168]
	cmp	r2, #0
	bne	.L3015
	ldr	r2, [fp, #96]
	cmp	r2, #2
	bne	.L3015
	ldr	r2, [r7, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3051
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
	ldr	r2, [fp, #96]
	cmp	r2, #3
	beq	.L3022
	ldr	r0, [fp, #88]
	mov	r1, r4
	mov	r10, #65024
	movt	r10, 65535
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L3010
.L3015:
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
	ldr	r2, [fp, #96]
	cmp	r2, #3
	bne	.L3012
.L3022:
	ldr	r2, [fp, #168]
	cmp	r2, #0
	bne	.L3013
.L3018:
	ldr	r0, [fp, #88]
	mov	r1, r4
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
.L3013:
	mov	r0, r8
	mvn	r10, #124
	bl	_raw_spin_lock_irq
	mov	r2, #3
	mov	r0, r8
	str	r2, [fp, #96]
	bl	_raw_spin_unlock_irq
	b	.L3010
.L3049:
	mov	r3, sp
	cmp	r2, r10
	bic	r1, r3, #8128
	movcc	r10, r2
	ldr	r3, [sp, #4]
	bic	r1, r1, #63
	ldr	r2, [r1, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r10; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	movne	r0, r10
	beq	.L3052
.L3020:
	cmp	r0, #0
	mvnne	r10, #13
	b	.L3010
.L3052:
	mov	r0, r3
	mov	r2, r10
	ldr	r1, [r4]
	bl	__copy_to_user
	b	.L3020
.L3024:
	mvn	r10, #21
	b	.L3002
.L3048:
	mov	r2, #1
	mov	r0, r8
	mvn	r10, #124
	str	r2, [fp, #96]
	bl	_raw_spin_unlock_irq
	b	.L3002
	.fnend
	.size	mtp_read, .-mtp_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_read, %function
ccid_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r5, #88]
	cmp	r3, #0
	beq	.L3060
	ldr	r3, [r5, #136]
	cmp	r2, #4
	mov	r7, r1
	movcc	r4, r2
	movcs	r4, #4
	cmp	r3, #0
	bne	.L3056
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r8, r5, #120
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3059
.L3068:
	bl	schedule
.L3059:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r5, #136]
	cmp	r3, #0
	bne	.L3057
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3068
	mov	r0, r8
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3053
.L3057:
	add	r1, sp, #4
	mov	r0, r8
	bl	finish_wait
.L3056:
	ldr	r3, [r5, #88]
	mov	r2, #0
	str	r2, [r5, #136]
	cmp	r3, r2
	beq	.L3060
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r4
	beq	.L3069
.L3061:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
.L3053:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3069:
	add	r1, r5, #132
	mov	r0, r7
	mov	r2, r4
	bl	__copy_to_user
	b	.L3061
.L3060:
	mvn	r0, #18
	b	.L3053
	.fnend
	.size	ccid_ctrl_read, .-ccid_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_read, %function
adb_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #3520]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	cmp	r3, #0
	beq	.L3090
	cmp	r2, #4096
	bhi	.L3091
	add	r7, r4, #100
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r0, r3, [r7]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3102
	mov	r3, sp
	mov	r6, r2
	bic	r5, r3, #8128
	mov	r8, r1
	bic	r5, r5, #63
	b	.L3073
.L3105:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3078
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L3104
.L3073:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L3105
.L3078:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3087
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L3080
.L3083:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3087
	ldr	r3, [r5, #48]
	cmp	r3, #0
	bne	.L3106
.L3080:
	ldr	r5, [r4, #144]
	mov	r1, #4096
	mov	r3, #0
	mov	r2, #32
	str	r1, [r5, #4]
	ldr	r0, [r4, #88]
	mov	r1, r5
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3107
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L3083
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3083
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, sp, #4
	str	r3, [sp, #4]
	add	fp, r4, #120
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3086
.L3108:
	bl	schedule
.L3086:
	mov	r2, #1
	mov	r1, r10
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L3084
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3084
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3108
	mov	r1, r10
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #88]
	mov	r1, r5
	mov	r6, #65024
	movt	r6, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L3089
.L3109:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #132
	bl	__wake_up
	b	.L3089
.L3087:
	mvn	r6, #4
.L3081:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3109
.L3089:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3070:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3104:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3073
	ldr	r0, [r5, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, sp, #4
	str	r3, [sp, #4]
	add	r9, r4, #120
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3077
.L3110:
	bl	schedule
.L3077:
	mov	r2, #1
	mov	r1, r10
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L3075
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3075
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3110
	mov	r1, r10
	mov	r0, r9
	bl	finish_wait
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r6, #65024
	movt	r6, 65535
	b	.L3070
.L3084:
	mov	r1, r10
	mov	r0, fp
	bl	finish_wait
	b	.L3083
.L3107:
	mov	r3, #1
	mvn	r6, #4
	str	r3, [r4, #96]
	b	.L3081
.L3106:
	mov	r2, sp
	cmp	r3, r6
	bic	r1, r2, #8128
	movcc	r2, r3
	bic	r1, r1, #63
	movcs	r2, r6
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r1, r8, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3111
.L3088:
	cmp	r2, #0
	mvnne	r6, #13
	b	.L3081
.L3111:
	mov	r0, r8
	ldr	r1, [r5]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3088
.L3102:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L3070
.L3091:
	mvn	r6, #21
	b	.L3070
.L3075:
	mov	r1, r10
	mov	r0, r9
	bl	finish_wait
	b	.L3073
.L3090:
	mvn	r6, #18
	b	.L3070
	.fnend
	.size	adb_read, .-adb_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_write, %function
rmnet_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r2, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r3, #2048
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	bcs	.L3123
	mov	r7, r1
	mov	r5, r2
	add	r6, r4, #24
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3114
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L3132
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L3133
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3134
	mov	r1, r5
	bl	__memzero
	mov	r1, r5
.L3119:
	cmp	r1, #0
	bne	.L3135
	add	r9, r4, #52
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3121
	ldr	r3, [r0, #84]
	cmp	r3, #0
	beq	.L3121
	mov	r2, r5
	mov	r1, r8
	blx	r3
	subs	r7, r0, #0
	bne	.L3136
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r7, r5
.L3112:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3134:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	mov	r1, r0
	b	.L3119
.L3123:
	mvn	r7, #21
	b	.L3112
.L3132:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #31
	b	.L3112
.L3121:
	movw	r0, #:lower16:.LC190
	movt	r0, #:upper16:.LC190
	bl	printk
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #21
	b	.L3112
.L3135:
	movw	r0, #:lower16:.LC188
	movt	r0, #:upper16:.LC188
	bl	printk
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #13
	b	.L3112
.L3136:
	movw	r0, #:lower16:.LC189
	mov	r1, r7
	movt	r0, #:upper16:.LC189
	bl	printk
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L3112
.L3114:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC186
	mvn	r7, #15
	movt	r0, #:upper16:.LC186
	bl	printk
	b	.L3112
.L3133:
	movw	r0, #:lower16:.LC187
	movt	r0, #:upper16:.LC187
	bl	printk
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #11
	b	.L3112
	.fnend
	.size	rmnet_ctrl_write, .-rmnet_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_ioctl, %function
ccid_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17154
	str	r6, [sp, #8]
	movt	r3, 16388
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r1, r3
	ldr	r5, [r4, #104]
	ldr	r0, [r5]
	beq	.L3139
	movw	r3, #17155
	movt	r3, 32772
	cmp	r1, r3
	beq	.L3140
	movw	r3, #17153
	movt	r3, 16388
	cmp	r1, r3
	beq	.L3152
.L3138:
	ldr	r0, [r4, #92]
	mov	r1, r5
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L3153
.L3148:
	mov	r4, #0
.L3137:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3152:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3145
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3151
	mov	r3, #2
	str	r3, [r5, #4]
	ldr	r5, [r4, #104]
	b	.L3138
.L3140:
	mov	r3, sp
	add	r1, r4, #192
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r0, r2, #4; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3151
	mov	r0, r2
	mov	r2, #4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L3148
.L3151:
	mvn	r4, #13
	b	.L3137
.L3139:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3145
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3151
	mov	r3, #4
	str	r3, [r5, #4]
	ldr	r5, [r4, #104]
	b	.L3138
.L3145:
	mov	r1, #4
	bl	__memzero
	b	.L3151
.L3153:
	movw	r0, #:lower16:.LC191
	mov	r1, r4
	movt	r0, #:upper16:.LC191
	bl	printk
	b	.L3137
	.fnend
	.size	ccid_ctrl_ioctl, .-ccid_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_prepare_buffer, %function
ffs_prepare_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L3156
	mov	r5, r0
	mov	r1, #208
	mov	r0, r4
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L3157
	mov	r2, r4
	mov	r1, r5
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3162
.L3154:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3156:
	mov	r6, r4
	b	.L3154
.L3157:
	mvn	r6, #11
	b	.L3154
.L3162:
	mov	r0, r6
	mvn	r6, #13
	bl	kfree
	b	.L3154
	.fnend
	.size	ffs_prepare_buffer, .-ffs_prepare_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_get_drvinfo, %function
eth_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC192
	mov	r5, r0
	movt	r1, #:upper16:.LC192
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC193
	add	r0, r4, #36
	movt	r1, #:upper16:.LC193
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_get_drvinfo, .-eth_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_get_drvinfo, %function
eth_qc_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC194
	mov	r5, r0
	movt	r1, #:upper16:.LC194
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC193
	add	r0, r4, #36
	movt	r1, #:upper16:.LC193
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1228]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_qc_get_drvinfo, .-eth_qc_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_store, %function
pm_qos_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	add	r0, r0, #56
	mov	r1, r5
	mov	r2, #5
	bl	strlcpy
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	pm_qos_store, .-pm_qos_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_store, %function
ecm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3173
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3174:
	.align	2
.L3173:
	.word	.LANCHOR1+3184
	.fnend
	.size	ecm_transports_store, .-ecm_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_transports_store, %function
acm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3177
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3178:
	.align	2
.L3177:
	.word	.LANCHOR1+3576
	.fnend
	.size	acm_transports_store, .-acm_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_xport_names_store, %function
serial_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3181
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3182:
	.align	2
.L3181:
	.word	.LANCHOR1+3236
	.fnend
	.size	serial_xport_names_store, .-serial_xport_names_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_transports_store, %function
serial_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3185
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3186:
	.align	2
.L3185:
	.word	.LANCHOR1+3608
	.fnend
	.size	serial_transports_store, .-serial_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_update_pid_and_serial_num, %function
usb_diag_update_pid_and_serial_num:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movw	r5, #:lower16:.LANCHOR1
	movt	r4, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	mov	r2, #140
	ldr	r3, [r4]
	str	lr, [sp, #16]
	.pad #148
	sub	sp, sp, #148
	movt	r5, #:upper16:.LANCHOR1
	mov	r7, r0
	mov	r6, r1
	mov	r0, sp
	mov	r1, #0
	str	r3, [sp, #140]
	bl	memset
	ldr	r3, [r5, #3640]
	cmp	r3, #0
	beq	.L3193
	movw	r3, #10505
	cmp	r6, #0
	str	r7, [sp]
	movt	r3, 28995
	str	r3, [sp, #132]
	beq	.L3196
	movw	r3, #21364
	mov	r1, r6
	movt	r3, 24980
	mov	r2, #128
	add	r0, sp, #4
	str	r3, [sp, #136]
	bl	strlcpy
.L3190:
	ldr	r2, [r5, #3640]
	mov	r3, sp
	add	r0, sp, #140
	sub	r2, r2, #4
.L3191:
	ldr	r1, [r3], #4
	cmp	r3, r0
	str	r1, [r2, #4]!
	bne	.L3191
	mov	r0, #0
.L3187:
	ldr	r2, [sp, #140]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L3197
	add	sp, sp, #148
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3196:
	mov	r1, #128
	add	r0, sp, #4
	bl	__memzero
	b	.L3190
.L3193:
	mvn	r0, #18
	b	.L3187
.L3197:
	bl	__stack_chk_fail
	.fnend
	.size	usb_diag_update_pid_and_serial_num, .-usb_diag_update_pid_and_serial_num
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	clients_store, %function
clients_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3200
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3201:
	.align	2
.L3200:
	.word	.LANCHOR1+3644
	.fnend
	.size	clients_store, .-clients_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_store, %function
rmnet_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3204
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3205:
	.align	2
.L3204:
	.word	.LANCHOR1+3268
	.fnend
	.size	rmnet_xport_names_store, .-rmnet_xport_names_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_store, %function
rmnet_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3208
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3209:
	.align	2
.L3208:
	.word	.LANCHOR1+3320
	.fnend
	.size	rmnet_transports_store, .-rmnet_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_store, %function
mbim_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3212
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3213:
	.align	2
.L3212:
	.word	.LANCHOR1+3372
	.fnend
	.size	mbim_transports_store, .-mbim_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_mmap, %function
audio_pcm_mmap:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #208]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r2, #552]
	cmp	r3, #0
	beq	.L3215
	ldr	lr, [r2, #556]
	cmp	lr, #0
	beq	.L3215
	ldr	r0, [r0]
	ldr	r2, [r2, #548]
	ldr	r0, [r0]
	ldr	r0, [r0, #500]
	cmp	r0, #0
	beq	.L3216
	ldr	ip, [r0, #284]
	cmp	ip, #0
	beq	.L3216
.L3217:
	ldr	r4, [ip, #8]
	cmp	r4, #0
	beq	.L3218
	mov	ip, #0
	str	lr, [sp]
	str	ip, [sp, #4]
	blx	r4
.L3214:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3216:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L3217
	.syntax divided
@ 200 "/home/xawlw/kernel/arg/include/asm-generic/dma-mapping-common.h" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L3218:
	str	lr, [sp]
	bl	dma_common_mmap
	b	.L3214
.L3215:
	movw	r0, #:lower16:.LC195
	movt	r0, #:upper16:.LC195
	bl	printk
	mvn	r0, #21
	b	.L3214
	.fnend
	.size	audio_pcm_mmap, .-audio_pcm_mmap
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_send, %function
audio_send:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #100
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	cmp	r3, #0
	moveq	r1, r0
	moveq	r0, r8
	beq	.L3251
	ldr	r2, [r5, #112]
	mov	r1, r0
	mov	r0, r8
	cmp	r2, #0
	beq	.L3251
	ldr	r3, [r3, #208]
	movw	r4, #44100
	adr	fp, .L3257
	ldrd	r10, [fp]
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	add	r0, sp, #16
	bl	ktime_get
	ldr	r2, [sp, #16]
	mov	ip, #0
	ldr	r3, [r5, #128]
	mov	r1, ip
	mov	lr, ip
	ldr	r9, [r5, #132]
	ldr	r0, [sp, #20]
	subs	r6, r2, r3
	sbc	r7, r0, r9
	ldr	r9, [r5, #136]
	.syntax divided
@ 349 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r6
	mov	r2, #0
@ 0 "" 2
@ 349 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r6
	umlal	r3, r1, r10, r7
	mov	r3, #0
	adds	r2, r1, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r7
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r0, r2, #18
	mov	r7, r3
	adr	fp, .L3257+8
	ldrd	r10, [fp]
	lsr	r2, r7, #18
	orr	r0, r0, r7, lsl #14
	mov	r6, #440
	mov	r7, #0
	umull	r0, r1, r0, r4
	mla	r1, r4, r2, r1
	.syntax divided
@ 351 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r0
	cmn	r2, r10
	adcs	r3, r3, fp
	adc	r2, ip, #0
@ 0 "" 2
@ 351 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r0
	umlal	r3, lr, r10, r1
	mov	r3, #0
	adds	r2, lr, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r1
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r2, r2, #9
	mov	fp, r3
	lsr	r1, fp, #9
	orr	r2, r2, fp, lsl #23
	subs	r3, r2, r9
	str	r3, [sp]
	ldr	r3, [r5, #140]
	sbc	r3, r1, r3
	str	r3, [sp, #4]
	ldrd	r10, [sp]
	cmp	r6, r10
	sbcs	r3, r7, fp
	blt	.L3253
	mov	r3, fp
	cmp	r10, #1
	sbcs	r3, r3, #0
	bge	.L3236
	mov	r2, #44
	mov	r3, #0
	strd	r2, [sp]
.L3236:
	add	r3, r5, #88
	ldrd	r10, [sp]
	ldr	r9, [sp, #12]
	str	r3, [sp, #8]
	b	.L3245
.L3256:
	sub	r7, r7, r1
	mov	r2, r7
	bl	memcpy
	cmp	r4, r7
	mov	r3, r7
	ble	.L3242
	ldr	r0, [r6]
	sub	r3, r4, r7
	mov	r2, r3
	ldr	r1, [r5, #104]
	str	r3, [sp, #12]
	add	r0, r0, r7
	bl	memcpy
	ldr	r3, [sp, #12]
	ldr	r2, [r5, #104]
	add	r3, r2, r3
	str	r3, [r5, #112]
.L3243:
	mov	r0, r8
	ldr	r1, [sp]
	str	r4, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #96]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3254
	ldr	r0, [r9, #88]
	lsl	r4, r4, #3
	mov	r1, #0
	ldr	r3, [r5, #136]
	ldr	r2, [r5, #140]
	udiv	r4, r4, r0
	subs	r10, r10, r4
	sbc	fp, fp, r1
	adds	r4, r3, r4
	adc	r3, r2, r1
	cmp	r10, #1
	sbcs	r2, fp, #0
	str	r4, [r5, #136]
	str	r3, [r5, #140]
	blt	.L3255
.L3245:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	mov	r1, r0
	ldr	r3, [r5, #88]
	cmp	r2, r3
	beq	.L3247
	ldr	ip, [r3]
	mov	r0, #256
	sub	r6, r3, #36
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	mov	r2, #512
	stm	r3, {r0, r2}
.L3237:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	str	r0, [sp]
	cmp	r3, #0
	beq	.L3252
	ldr	r1, [r5, #112]
	cmp	r1, #0
	beq	.L3252
	cmp	r6, #0
	beq	.L3252
	ldr	r4, [r9, #88]
	ldr	r7, [r5, #108]
	ldr	r0, [r6]
	mul	r4, r10, r4
	lsr	r4, r4, #3
	cmp	r4, #256
	movcs	r4, #256
	add	r3, r1, r4
	cmp	r7, r3
	bcc	.L3256
	mov	r2, r4
	str	r4, [sp, #12]
	bl	memcpy
	ldr	r3, [sp, #12]
.L3242:
	ldr	r1, [r5, #108]
	ldr	r2, [r5, #112]
	add	r3, r2, r3
	cmp	r3, r1
	str	r3, [r5, #112]
	ldrcs	r3, [r5, #104]
	strcs	r3, [r5, #112]
	b	.L3243
.L3254:
	mov	r1, r0
	movw	r0, #:lower16:.LC196
	movt	r0, #:upper16:.LC196
	bl	printk
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	ip, [sp, #8]
	add	r2, r6, #36
	mov	r1, r0
	ldr	r3, [r5, #92]
	mov	r0, r8
	str	r2, [r5, #92]
	str	ip, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
.L3251:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3253:
	subs	r2, r2, #44
	mov	r3, #0
	sbc	r1, r1, #0
	str	r2, [r5, #136]
	mov	r2, #44
	str	r1, [r5, #140]
	strd	r2, [sp]
	b	.L3236
.L3252:
	mov	r1, r0
	mov	r0, r8
	b	.L3251
.L3247:
	mov	r6, #0
	b	.L3237
.L3255:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3258:
	.align	3
.L3257:
	.word	-675924773
	.word	1125899906
	.word	-1924145349
	.word	-2095944041
	.fnend
	.size	audio_send, .-audio_send
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_playback_trigger, %function
audio_pcm_playback_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #208]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r3, #208]
	cmp	r1, #6
	ldrls	pc, [pc, r1, asl #2]
	b	.L3264
.L3262:
	.word	.L3261
	.word	.L3263
	.word	.L3264
	.word	.L3264
	.word	.L3264
	.word	.L3261
	.word	.L3263
.L3263:
	mov	r0, sp
	mov	r6, #0
	bl	ktime_get
	ldrd	r2, [sp]
	mov	r7, #0
	mov	r0, r5
	strd	r2, [r5, #128]
	strd	r6, [r5, #136]
	bl	audio_send
	mov	r0, #0
.L3259:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3261:
	add	r6, r5, #100
	mov	r4, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r5, #104]
	mov	r0, r6
	str	r4, [r5, #108]
	str	r4, [r5, #112]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L3259
.L3264:
	mvn	r0, #21
	b	.L3259
	.fnend
	.size	audio_pcm_playback_trigger, .-audio_pcm_playback_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_open, %function
audio_pcm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1752
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	ldrd	r4, [r3, r2]
	add	ip, r3, r2
	strd	r10, [sp, #20]
	ldrd	r2, [ip, #16]
	str	lr, [sp, #28]
	ldr	r8, [r0, #8]
	ldr	r6, [r0, #208]
	ldrd	r0, [ip, #8]
	ldrd	r10, [ip, #56]
	add	lr, r6, #216
	str	r8, [r6, #208]
	strd	r4, [r6, #216]
	ldrd	r4, [ip, #24]
	strd	r0, [r6, #224]
	ldrd	r0, [ip, #32]
	strd	r2, [r6, #232]
	ldrd	r2, [ip, #40]
	strd	r4, [r6, #240]
	ldrd	r4, [ip, #48]
	strd	r0, [r6, #248]
	mov	r0, r6
	strd	r2, [lr, #40]
	strd	r4, [lr, #48]
	strd	r10, [lr, #56]
	bl	snd_pcm_limit_hw_rates
	mov	r3, #2
	mov	r0, #0
	str	r3, [r6, #248]
	str	r7, [r8, #84]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_open, .-audio_pcm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_show, %function
functions_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r9, r0
	mov	r0, r3
	str	r3, [sp, #4]
	bl	mutex_lock
	ldr	r7, [r9, #196]!
	cmp	r9, r7
	beq	.L3280
	movw	r8, #:lower16:.LC197
	sub	r7, r7, #120
	mov	r5, r10
	movt	r8, #:upper16:.LC197
	mov	fp, #58
.L3269:
	mov	r6, r7
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L3272
.L3273:
	ldr	r3, [r4]
	mov	r0, r5
	mov	r2, r8
	mov	r1, #4096
	ldr	r3, [r3]
	bl	snprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L3273
.L3272:
	ldr	r7, [r7, #120]
	cmp	r9, r7
	sub	r7, r7, #120
	beq	.L3281
	cmp	r10, r5
	strbne	fp, [r5, #-1]
	b	.L3269
.L3281:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	cmp	r10, r5
	sub	r0, r5, r10
	beq	.L3268
	mov	r3, #10
	strb	r3, [r5, #-1]
.L3268:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3280:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	mov	r0, #0
	b	.L3268
	.fnend
	.size	functions_show, .-functions_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_show, %function
ffs_aliases_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r5, [r3, #2228]
	sub	r4, r5, #184
	mov	r0, r4
	bl	mutex_lock
	movw	r1, #:lower16:.LC69
	add	r2, r5, #8
	mov	r0, r6
	movt	r1, #:upper16:.LC69
	bl	sprintf
	mov	r5, r0
	mov	r0, r4
	bl	mutex_unlock
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_aliases_show, .-ffs_aliases_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_rx_push, %function
gs_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #60
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #12
	mov	r0, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irq
	ldr	r7, [r5, #-52]
	ldr	r4, [r5, #-12]
	cmp	r8, r4
	beq	.L3285
	mov	r9, #0
	movw	r3, #:lower16:.LC198
	movt	r3, #:upper16:.LC198
	mov	r10, r9
	mov	fp, r9
	str	r3, [sp, #4]
.L3294:
	cmp	r7, #0
	beq	.L3286
	ldr	r3, [r7, #164]
	tst	r3, #1
	bne	.L3287
	ldr	r2, [r4, #8]
	cmn	r2, #108
	moveq	r10, #1
	beq	.L3289
	cmp	r2, #0
	bne	.L3324
.L3289:
	ldr	r6, [r4, #12]
	cmp	r6, #0
	beq	.L3286
	ldr	r3, [r5, #-4]
	mov	r2, #0
	mov	r0, r7
	ldr	r1, [r4, #-36]
	cmp	r3, #0
	subne	r6, r6, r3
	addne	r1, r1, r3
	mov	r3, r6
	bl	tty_insert_flip_string_fixed_flag
	ldr	r3, [r5, #72]
	cmp	r0, #0
	movne	r9, #1
	cmp	r0, r6
	add	r3, r3, r0
	str	r3, [r5, #72]
	bne	.L3325
	str	fp, [r5, #-4]
.L3286:
	ldm	r4, {r1, r2}
	mov	r3, r5
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-28]!
	str	r4, [r2, #4]
	strd	r2, [r4]
	ldr	r3, [r5, #-20]
	str	r4, [r5, #-28]
	ldr	r4, [r5, #-12]
	sub	r3, r3, #1
	cmp	r8, r4
	str	r3, [r5, #-20]
	bne	.L3294
	cmp	r7, #0
	moveq	r9, #0
	andne	r9, r9, #1
	cmp	r9, #0
	bne	.L3301
.L3298:
	cmp	r10, #0
	bne	.L3300
.L3285:
	ldr	r3, [r5, #-56]
	cmp	r3, #0
	beq	.L3300
	ldr	r0, [sp]
	bl	gs_start_rx
.L3300:
	ldr	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L3325:
	ldr	r3, [r5, #-4]
	add	r0, r3, r0
	str	r0, [r5, #-4]
.L3287:
	cmp	r9, #0
	bne	.L3301
	ldr	r3, [r5, #-12]
	cmp	r8, r3
	beq	.L3298
	ldr	r3, [r7, #164]
	tst	r3, #1
	bne	.L3298
	movw	r0, #:lower16:.LC199
	ldrb	r1, [r5, #-43]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC199
	bl	printk
	b	.L3298
.L3301:
	mov	r0, r7
	bl	tty_flip_buffer_push
	ldr	r3, [r5, #-12]
	cmp	r8, r3
	beq	.L3298
	ldr	r3, [r7, #164]
	tst	r3, #1
	bne	.L3298
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, r5
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3428]
	bl	queue_work
	b	.L3298
.L3324:
	ldrb	r1, [r5, #-43]	@ zero_extendqisi2
	ldr	r0, [sp, #4]
	bl	printk
	b	.L3289
	.fnend
	.size	gs_rx_push, .-gs_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_probe, %function
gsdio_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r7, [r4]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	cmp	r7, #0
	beq	.L3327
	ldr	r5, [r4, #28]
	mov	r2, #9
	mov	r1, r6
	ldr	r3, [r5, #120]
	ldr	r0, [r3]
	bl	strncmp
	cmp	r0, #0
	beq	.L3328
	cmp	r7, #1
	bls	.L3327
	ldr	r5, [r4, #136]
	mov	r2, #9
	mov	r1, r6
	ldr	r3, [r5, #120]
	ldr	r0, [r3]
	bl	strncmp
	cmp	r0, #0
	beq	.L3328
.L3327:
	movw	r0, #:lower16:.LC200
	mov	r2, r6
	ldr	r1, .L3337
	movt	r0, #:upper16:.LC200
	bl	printk
	mvn	r0, #18
.L3326:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3328:
	mov	r3, #1
	add	r1, r5, #124
	ldr	r0, [r4, #3432]
	mov	r2, #1000
	str	r3, [r5, #112]
	bl	queue_delayed_work
	mov	r0, #0
	b	.L3326
.L3338:
	.align	2
.L3337:
	.word	.LANCHOR2+1816
	.fnend
	.size	gsdio_ch_probe, .-gsdio_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_remove, %function
gsmd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r4, #220]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L3342
	ldr	r3, [r4, #248]
	mov	r2, #20
	mov	r1, r7
	ldr	r5, [r3, #72]
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3341
	cmp	r6, #1
	bls	.L3342
	ldr	r3, [r4, #356]
	mov	r1, r7
	mov	r2, #20
	ldr	r5, [r3, #72]
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3341
.L3342:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3341:
	add	r4, r5, #8
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L3342
	bl	smd_close
	mov	r3, #0
	str	r3, [r5]
	b	.L3342
	.fnend
	.size	gsmd_ch_remove, .-gsmd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_probe, %function
gsmd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r7, [r4, #220]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r8, [r0]
	cmp	r7, #0
	beq	.L3354
	ldr	r5, [r4, #248]
	mov	r2, #20
	mov	r1, r8
	ldr	r6, [r5, #72]
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3355
	cmp	r7, #1
	bls	.L3354
	ldr	r5, [r4, #356]
	mov	r1, r8
	mov	r2, #20
	ldr	r6, [r5, #72]
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3355
.L3354:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3355:
	add	r1, r6, #8
	mov	r0, #1
	add	r6, r5, #4
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L3356
	add	r1, r5, #76
	mov	r2, #0
	ldr	r0, [r4, #3436]
	bl	queue_delayed_work
.L3356:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L3354
	.fnend
	.size	gsmd_ch_probe, .-gsmd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_probe, %function
gbam_data_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r3, [r4, #440]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0]
	cmp	r3, #0
	ble	.L3368
	movw	r0, #:lower16:.LC201
	mov	r2, #20
	movt	r0, #:upper16:.LC201
	bl	strncmp
	cmp	r0, #0
	beq	.L3374
.L3368:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3374:
	ldr	r5, [r4, #444]
	mov	r0, #2
	add	r1, r5, #20
	add	r6, r5, #4
	bl	_set_bit
	mov	r0, r6
	add	r7, r5, #8
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L3369
	add	r1, r5, #284
	ldr	r0, [r4, #3568]
	bl	queue_work
.L3369:
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L3368
	.fnend
	.size	gbam_data_ch_probe, .-gbam_data_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_remove, %function
grmnet_ctrl_smd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r5, #528]
	ldr	r6, [r0]
	cmp	r4, #0
	beq	.L3376
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3377
.L3376:
	ldr	r4, [r5, #612]
	cmp	r4, #0
	beq	.L3378
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3377
.L3378:
	ldr	r4, [r5, #696]
	cmp	r4, #0
	beq	.L3379
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3377
.L3379:
	ldr	r4, [r5, #780]
	cmp	r4, #0
	beq	.L3380
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3377
.L3380:
	ldr	r4, [r5, #864]
	cmp	r4, #0
	beq	.L3381
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3377
.L3381:
	ldr	r4, [r5, #948]
	cmp	r4, #0
	beq	.L3383
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3377
.L3383:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3377:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3383
	bl	smd_close
	mov	r3, #0
	str	r3, [r4]
	b	.L3383
	.fnend
	.size	grmnet_ctrl_smd_ch_remove, .-grmnet_ctrl_smd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_probe, %function
grmnet_ctrl_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r4, [r5, #528]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	cmp	r4, #0
	beq	.L3422
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3423
.L3422:
	ldr	r4, [r5, #612]
	cmp	r4, #0
	beq	.L3424
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3423
.L3424:
	ldr	r4, [r5, #696]
	cmp	r4, #0
	beq	.L3425
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3423
.L3425:
	ldr	r4, [r5, #780]
	cmp	r4, #0
	beq	.L3426
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3423
.L3426:
	ldr	r4, [r5, #864]
	cmp	r4, #0
	beq	.L3427
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3423
.L3427:
	ldr	r4, [r5, #948]
	cmp	r4, #0
	beq	.L3428
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L3423
.L3428:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3423:
	add	r6, r4, #8
	mov	r0, #2
	mov	r1, r6
	add	r7, r4, #108
	bl	_clear_bit
	mov	r1, r6
	mov	r0, #1
	bl	_set_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #104]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3429
	add	r1, r4, #112
	mov	r2, #0
	ldr	r0, [r5, #3516]
	bl	queue_delayed_work
.L3429:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L3428
	.fnend
	.size	grmnet_ctrl_smd_ch_probe, .-grmnet_ctrl_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_remove, %function
ghsic_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r5, #1036]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L3468
	ldr	r4, [r5, #1040]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3469
	cmp	r6, #1
	bls	.L3468
	ldr	r4, [r5, #1144]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3469
	cmp	r6, #2
	beq	.L3468
	ldr	r4, [r5, #1248]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3469
	cmp	r6, #3
	beq	.L3468
	ldr	r4, [r5, #1352]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L3469
.L3468:
	movw	r0, #:lower16:.LC97
	mvn	r2, #21
	ldr	r1, .L3505
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
.L3467:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3469:
	add	r6, r4, #4
	add	r7, r4, #84
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #8]
	mov	r1, r0
	cmp	r5, #0
	beq	.L3503
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L3504
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L3476
.L3475:
	mov	r0, r5
	blx	r3
.L3476:
	mov	r1, r7
	mov	r0, #0
	bl	_clear_bit
.L3473:
	mov	r0, #1
	mov	r1, r7
	bl	_clear_bit
	mov	r0, #0
	b	.L3467
.L3504:
	str	r3, [r4, #92]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #112]
	cmp	r3, #0
	bne	.L3475
	b	.L3476
.L3503:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L3473
.L3506:
	.align	2
.L3505:
	.word	.LANCHOR2+1832
	.fnend
	.size	ghsic_ctrl_remove, .-ghsic_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify_modem, %function
gsmd_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #220]
	cmp	r1, ip
	bcs	.L3536
	cmp	r0, #0
	beq	.L3537
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ands	ip, r2, #1
	str	r6, [sp, #8]
	movne	ip, #2
	str	lr, [sp, #12]
	mov	lr, #108
	mla	r1, lr, r1, r3
	ldr	r4, [r1, #248]
	moveq	r1, #4
	movne	r1, #6
	tst	r2, #2
	moveq	r1, ip
	ldr	r3, [r4, #156]
	cmp	r3, r1
	beq	.L3507
	ldr	r3, [r4, #72]
	str	r1, [r4, #156]
	ldr	r2, [r3, #8]
	tst	r2, #1
	beq	.L3507
	tst	r1, #2
	ldr	r3, [r3]
	bne	.L3538
.L3515:
	ldrd	r4, [sp]
	mov	r0, r3
	mvn	r2, r1
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L3507:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3538:
	mov	r5, r0
	mov	r0, r3
	bl	smd_tiocmget
	ands	r1, r0, #128
	movne	r1, #8
	movne	r3, #9
	moveq	r3, #1
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	orrne	r1, r1, #2
	str	r1, [r4, #160]
	ldr	r3, [r5, #128]
	cmp	r3, #0
	beq	.L3535
	ldr	r0, [r4, #68]
	blx	r3
.L3535:
	ldr	r3, [r4, #72]
	ldr	r1, [r4, #156]
	ldr	r3, [r3]
	b	.L3515
.L3536:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldr	r1, .L3539
	movt	r0, #:upper16:.LC94
	b	printk
.L3537:
	movw	r0, #:lower16:.LC95
	ldr	r1, .L3539
	movt	r0, #:upper16:.LC95
	b	printk
.L3540:
	.align	2
.L3539:
	.word	.LANCHOR2+1852
	.fnend
	.size	gsmd_notify_modem, .-gsmd_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_remove, %function
gbam_data_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r7, [r4, #440]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r7, #0
	ble	.L3542
	mov	r5, #0
	movw	r6, #:lower16:.LC201
	mov	fp, r0
	mov	r9, r5
	mov	r8, r5
	movt	r6, #:upper16:.LC201
.L3547:
	mov	r2, #20
	mov	r0, r6
	ldr	r1, [fp]
	bl	strncmp
	cmp	r0, #0
	beq	.L3565
.L3543:
	add	r5, r5, #1
	cmp	r5, r7
	blt	.L3547
.L3542:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3565:
	mov	r3, #84
	ldr	r2, .L3566
	mul	r3, r3, r5
	ldr	r7, [r3, r2]
	add	r3, r7, #8
	add	r10, r7, #4
	mov	r0, r10
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r0, r7, #8
	bl	_raw_spin_lock
	ldr	r3, [r7, #12]
	cmp	r3, #0
	ldrdne	r8, [r3, #76]
.L3544:
	add	r0, r7, #8
	bl	_raw_spin_unlock
	ldr	r1, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L3545
	ldr	r3, [r8, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L3545
	mov	r0, r8
	blx	r3
.L3545:
	cmp	r9, #0
	beq	.L3546
	ldr	r3, [r9, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L3546
	mov	r0, r9
	blx	r3
.L3546:
	mov	r0, r7
	add	r10, r7, #20
	bl	gbam_free_buffers
	ldr	r0, [r7, #24]
	bl	msm_bam_dmux_close
	mov	r3, #0
	mov	r1, r10
	mov	r0, #2
	str	r3, [r7, #240]
	bl	_clear_bit
	mov	r1, r10
	mov	r0, #1
	bl	_clear_bit
	ldr	r7, [r4, #440]
	b	.L3543
.L3567:
	.align	2
.L3566:
	.word	.LANCHOR1+444
	.fnend
	.size	gbam_data_ch_remove, .-gbam_data_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_tobam, %function
gbam_data_write_tobam:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	add	r6, r5, #4
	str	r5, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	fp, r0
	cmp	r3, #0
	beq	.L3569
	movw	r10, #:lower16:.LANCHOR0
	sub	r7, r4, #20
	ldr	r3, [r4, #160]
	movt	r10, #:upper16:.LANCHOR0
	mov	r9, #0
	b	.L3570
.L3585:
	str	r3, [r4, #-12]
	ldrd	r2, [r5]
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r2, [r4, #160]
	ldr	r3, [r4, #180]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #160]
	str	r3, [r4, #180]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r5
	ldr	r0, [r4, #-56]
	bl	msm_bam_dmux_write
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	fp, r0
	bne	.L3584
	ldr	r3, [r4, #160]
	ldr	r2, [r4, #200]
	cmp	r3, r2
	strhi	r3, [r4, #200]
.L3570:
	ldr	ip, [r10, #584]
	mov	r1, fp
	mov	r0, r6
	ldr	r2, [r4, #-12]
	cmp	ip, r3
	sub	r3, r2, #1
	bls	.L3571
	ldr	r5, [r4, #-20]
	cmp	r5, r7
	beq	.L3571
	cmp	r5, #0
	bne	.L3585
.L3571:
	mov	r1, fp
	mov	r0, r6
	str	r2, [sp]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp]
	ldr	r3, [r10, #588]
	cmp	r3, r2
	bls	.L3568
	ldr	r3, [r4, #196]
	cmp	r3, #0
	beq	.L3576
	ldr	r3, [r4, #188]
	mov	r2, #0
	str	r2, [r4, #196]
	add	r3, r3, #1
	str	r3, [r4, #188]
.L3576:
	ldr	r0, [sp, #4]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L3568:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3584:
	ldr	r1, [r4, #160]
	mov	r0, r5
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #180]
	sub	r1, r1, #1
	add	r2, r2, #1
	sub	r3, r3, #1
	str	r1, [r4, #160]
	str	r2, [r4, #168]
	str	r3, [r4, #180]
	bl	dev_kfree_skb_any
	ldr	r2, [r4, #-12]
	b	.L3571
.L3569:
	mov	r1, r0
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gbam_data_write_tobam, .-gbam_data_write_tobam
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect_work, %function
gbam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #280
	strd	r8, [sp, #16]
	sub	r8, r0, #276
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	mov	r0, r8
	cmp	r3, #0
	beq	.L3609
	bl	_raw_spin_unlock
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-264]
	tst	r3, #4
	bne	.L3610
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3610:
	sub	r3, r4, #284
	movw	r2, #:lower16:gbam_notify
	ldr	r0, [r4, #-260]
	mov	r1, r3
	movt	r2, #:upper16:gbam_notify
	str	r3, [sp, #4]
	bl	msm_bam_dmux_open
	subs	r7, r0, #0
	bne	.L3611
	sub	r1, r4, #264
	mov	r0, #1
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	str	r0, [sp]
	cmp	r3, #0
	beq	.L3612
	movw	r2, #:lower16:.LANCHOR0
	ldr	fp, [r3, #80]
	sub	r9, r4, #232
	movt	r2, #:upper16:.LANCHOR0
	ldr	r3, [r2, #592]
	str	r2, [sp, #12]
	cmp	r3, #0
	ble	.L3591
	movw	r10, #:lower16:gbam_epout_complete
	str	r6, [sp, #8]
	mov	r5, r7
	movt	r10, #:upper16:gbam_epout_complete
	mov	r6, r4
	mov	r4, r10
	mov	r10, r3
	b	.L3593
.L3592:
	str	r4, [r0, #28]
	ldr	r1, [r6, #-232]
	cmp	r10, r5
	str	r2, [r1, #4]
	str	r1, [r0, #36]
	str	r9, [r0, #40]
	str	r2, [r6, #-232]
	beq	.L3613
.L3593:
	ldr	r2, [fp, #8]
	mov	r1, #32
	mov	r0, fp
	add	r5, r5, #1
	ldr	r2, [r2, #8]
	blx	r2
	cmp	r0, #0
	add	r2, r0, #36
	bne	.L3592
	ldr	r2, [r6, #-232]
	mov	r4, r6
	ldr	r6, [sp, #8]
	cmp	r9, r2
	beq	.L3614
.L3591:
	mov	r0, r6
	ldr	r1, [sp]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #-272]
	str	r0, [sp]
	cmp	r2, #0
	beq	.L3615
	ldr	r3, [sp, #12]
	sub	fp, r4, #256
	ldr	r6, [r2, #76]
	ldr	r10, [r3, #596]
	cmp	r10, #0
	ble	.L3597
	movw	r5, #:lower16:gbam_epin_complete
	movt	r5, #:upper16:gbam_epin_complete
	b	.L3600
.L3598:
	str	r5, [r0, #28]
	ldr	r2, [r4, #-256]
	cmp	r10, r7
	str	r3, [r2, #4]
	str	r2, [r0, #36]
	str	fp, [r0, #40]
	str	r3, [r4, #-256]
	beq	.L3597
.L3600:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	add	r7, r7, #1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L3598
	ldr	r2, [r4, #-256]
	cmp	fp, r2
	beq	.L3616
.L3597:
	mov	r0, r8
	ldr	r1, [sp]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [sp, #4]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L3609:
	bl	_raw_spin_unlock
	mov	r1, r5
.L3606:
	mov	r0, r6
.L3607:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3615:
	ldr	r2, [r4, #-232]
	cmp	r9, r2
	beq	.L3608
	mov	r7, #256
	mov	r5, #512
.L3596:
	ldr	ip, [r2]
	sub	r1, r2, #36
	mov	r0, fp
	ldr	r3, [r2, #4]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r7, [r2]
	str	r5, [r2, #4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r2, [r4, #-232]
	cmp	r9, r2
	bne	.L3596
.L3608:
	mov	r0, r8
	ldr	r1, [sp]
	b	.L3607
.L3613:
	mov	r4, r6
	ldr	r6, [sp, #8]
	b	.L3591
.L3612:
	mov	r1, r0
	b	.L3606
.L3611:
	ldr	r1, .L3617
	movw	r0, #:lower16:.LC202
	mov	r3, r7
	ldr	r2, [r4, #-260]
	movt	r0, #:upper16:.LC202
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L3616:
	movw	r0, #:lower16:.LC204
	ldr	r1, .L3617+4
	mov	r5, #256
	movt	r0, #:upper16:.LC204
	mov	r7, #512
	bl	printk
	b	.L3599
.L3601:
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r5, r7}
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L3599:
	ldr	r3, [r4, #-232]
	mov	r0, r6
	cmp	r9, r3
	sub	r1, r3, #36
	bne	.L3601
	b	.L3608
.L3614:
	movw	r0, #:lower16:.LC203
	ldr	r1, .L3617+4
	movt	r0, #:upper16:.LC203
	bl	printk
	ldr	r1, [sp]
	b	.L3606
.L3618:
	.align	2
.L3617:
	.word	.LANCHOR2+1872
	.word	.LANCHOR2+1892
	.fnend
	.size	gbam_connect_work, .-gbam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_resume_work, %function
gbam2bam_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r1, r2
	ldrb	r0, [r0, #-203]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-200]
	cmp	r3, #7
	beq	.L3622
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3622:
	sub	r0, r4, #196
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
	.fnend
	.size	gbam2bam_resume_work, .-gbam2bam_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_resume_work, %function
bam2bam_data_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r1, r2
	ldrb	r0, [r0, #-163]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-156]
	cmp	r3, #7
	beq	.L3626
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3626:
	sub	r0, r4, #152
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
	.fnend
	.size	bam2bam_data_resume_work, .-bam2bam_data_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_suspend_work, %function
gbam2bam_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r1, #:lower16:gbam_wake_cb
	sub	r5, r0, #316
	mov	r4, r0
	str	r6, [sp, #8]
	movt	r1, #:upper16:gbam_wake_cb
	str	lr, [sp, #12]
	mov	r2, r5
	ldrb	r0, [r0, #-187]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-184]
	cmp	r3, #7
	beq	.L3630
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3630:
	movw	r1, #:lower16:gbam_stop
	movw	r0, #:lower16:gbam_start
	mov	r2, r5
	movt	r1, #:upper16:gbam_stop
	movt	r0, #:upper16:gbam_start
	bl	usb_bam_register_start_stop_cbs
	ldr	r6, [sp, #8]
	sub	r0, r4, #180
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
	.fnend
	.size	gbam2bam_suspend_work, .-gbam2bam_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_suspend_work, %function
bam2bam_data_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r1, #:lower16:bam_data_wake_cb
	sub	r5, r0, #200
	mov	r4, r0
	str	r6, [sp, #8]
	movt	r1, #:upper16:bam_data_wake_cb
	str	lr, [sp, #12]
	mov	r2, r5
	ldrb	r0, [r0, #-147]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-140]
	cmp	r3, #7
	beq	.L3634
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3634:
	movw	r1, #:lower16:bam_data_stop
	movw	r0, #:lower16:bam_data_start
	mov	r2, r5
	movt	r1, #:upper16:bam_data_stop
	movt	r0, #:upper16:bam_data_start
	bl	usb_bam_register_start_stop_cbs
	ldr	r6, [sp, #8]
	sub	r0, r4, #136
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
	.fnend
	.size	bam2bam_data_suspend_work, .-bam2bam_data_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_connect_work, %function
gbam2bam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #284
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-152]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #6
	beq	.L3667
	cmp	r3, #7
	beq	.L3668
.L3638:
	sub	r6, r4, #280
	sub	r5, r4, #276
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L3669
	ldr	r0, [r3, #80]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-172]
	beq	.L3670
	str	r7, [r0, #32]
	ldr	r2, [r4, #-172]
	movw	r3, #:lower16:gbam_endless_rx_complete
	movt	r3, #:upper16:gbam_endless_rx_complete
	mov	fp, #0
	movw	r10, #65439
	mov	r8, #32
	movt	r10, 65534
	movt	r8, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-172]
	mov	r1, #32
	str	fp, [r3, #4]
	ldr	r2, [r4, #-172]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-172]
	ldr	r2, [r4, #-164]
	and	r2, r2, r10
	orr	r2, r2, r8
	str	r2, [r3, #52]
	ldr	r3, [r4, #-272]
	ldr	r0, [r3, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	str	r0, [r4, #-168]
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-168]
	cmp	r3, fp
	beq	.L3666
	str	r7, [r3, #32]
	ldr	r2, [r4, #-168]
	movw	r3, #:lower16:gbam_endless_tx_complete
	movt	r3, #:upper16:gbam_endless_tx_complete
	mov	r0, r6
	str	r3, [r2, #28]
	ldr	r3, [r4, #-168]
	str	fp, [r3, #4]
	ldr	r2, [r4, #-168]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-168]
	ldr	r3, [r4, #-160]
	and	r3, r3, r10
	orr	r3, r3, r8
	str	r3, [r2, #52]
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L3671
	ldr	r0, [r3, #80]
	mov	r2, #32
	ldr	r1, [r4, #-172]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3672
.L3644:
	mov	r0, r6
	bl	_raw_spin_unlock
.L3643:
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L3673
	ldr	r0, [r3, #76]
	mov	r2, #32
	ldr	r1, [r4, #-168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3674
.L3647:
	mov	r0, r5
	bl	_raw_spin_unlock
.L3646:
	ldr	r3, [r4, #-152]
	cmp	r3, #6
	beq	.L3675
.L3635:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3675:
	ldr	r3, [r4, #-284]
	cmp	r3, #0
	bne	.L3635
	movw	r0, #:lower16:gbam_peer_reset_cb
	mov	r1, r7
	movt	r0, #:upper16:gbam_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r2, r0, #0
	beq	.L3635
	ldr	r1, .L3677
	movw	r0, #:lower16:.LC210
	movt	r0, #:upper16:.LC210
.L3664:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L3667:
	bl	usb_bam_reset_complete
	sub	r1, r4, #164
	ldrb	r0, [r4, #-156]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L3676
	sub	r1, r4, #160
	ldrb	r0, [r4, #-155]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L3638
	movw	r0, #:lower16:.LC206
	ldr	r1, .L3677
	movt	r0, #:upper16:.LC206
	b	.L3664
.L3669:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3670:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L3666:
	ldr	r1, .L3677
	movw	r0, #:lower16:.LC208
	movt	r0, #:upper16:.LC208
.L3665:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L3672:
	movw	r0, #:lower16:.LC209
	ldr	r1, .L3677+4
	movt	r0, #:upper16:.LC209
	bl	printk
	b	.L3644
.L3674:
	movw	r0, #:lower16:.LC209
	ldr	r1, .L3677+8
	movt	r0, #:upper16:.LC209
	bl	printk
	b	.L3647
.L3671:
	mov	r0, r6
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC17
	ldr	r1, .L3677+4
	movt	r0, #:upper16:.LC17
	bl	printk
	b	.L3643
.L3673:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC17
	ldr	r1, .L3677+8
	movt	r0, #:upper16:.LC17
	bl	printk
	b	.L3646
.L3668:
	movw	r0, #:lower16:.LC207
	ldr	r1, .L3677
	movt	r0, #:upper16:.LC207
	b	.L3665
.L3676:
	movw	r0, #:lower16:.LC205
	ldr	r1, .L3677
	movt	r0, #:upper16:.LC205
	b	.L3664
.L3678:
	.align	2
.L3677:
	.word	.LANCHOR2+1908
	.word	.LANCHOR2+1932
	.word	.LANCHOR2+1956
	.fnend
	.size	gbam2bam_connect_work, .-gbam2bam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_connect_work, %function
bam2bam_data_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	sub	r5, r0, #168
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #-108]
	cmp	r3, #7
	bne	.L3680
	ldr	r3, [r0, #-112]
	cmp	r3, #1
	beq	.L3724
	cmp	r3, #0
	mov	r2, #5
	mov	r3, #0
	str	r3, [r0, #-92]
	str	r2, [r0, #-80]
	beq	.L3725
.L3682:
	sub	r6, r4, #104
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L3723
	ldr	r3, [r4, #-112]
	mov	r2, #17
	mov	r1, #1
	str	r1, [r4, #-92]
	str	r2, [r4, #-80]
	cmp	r3, #0
	beq	.L3726
.L3684:
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L3723
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L3727
.L3686:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L3728
	ldr	r0, [r3, #12]
	cmp	r0, #0
	beq	.L3729
	ldr	r3, [r0, #8]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-132]
	beq	.L3679
	str	r5, [r0, #32]
	ldr	r2, [r4, #-132]
	movw	r3, #:lower16:bam_data_endless_rx_complete
	movt	r3, #:upper16:bam_data_endless_rx_complete
	mov	r8, #0
	movw	r7, #65439
	mov	r6, #32
	movt	r7, 65534
	movt	r6, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-132]
	mov	r1, #208
	str	r8, [r3, #4]
	ldr	r2, [r4, #-132]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-132]
	ldr	r3, [r4, #-124]
	and	r3, r3, r7
	orr	r3, r3, r6
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, r8
	str	r0, [r4, #-128]
	beq	.L3679
	str	r5, [r0, #32]
	ldr	r2, [r4, #-128]
	movw	r3, #:lower16:bam_data_endless_tx_complete
	movt	r3, #:upper16:bam_data_endless_tx_complete
	str	r3, [r2, #28]
	ldr	r3, [r4, #-128]
	str	r8, [r3, #4]
	ldr	r2, [r4, #-128]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-128]
	ldr	r3, [r4, #-120]
	and	r7, r7, r3
	orr	r6, r7, r6
	str	r6, [r2, #52]
	ldr	r3, [r4, #-164]
	cmp	r3, r8
	beq	.L3694
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #-132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3730
.L3695:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L3694
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #-128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L3731
.L3694:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	beq	.L3679
	movw	r0, #:lower16:bam_data_peer_reset_cb
	mov	r1, r5
	movt	r0, #:upper16:bam_data_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r3, r0, #0
	bne	.L3732
.L3679:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3725:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3676]
	str	r2, [r0, #-12]
	ldr	r3, [r3, #3696]
	str	r3, [r0, #-16]
	b	.L3682
.L3726:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3680]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3696]
	str	r3, [r4, #-16]
	b	.L3684
.L3680:
	bl	usb_bam_reset_complete
	sub	r1, r4, #124
	ldrb	r0, [r4, #-116]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L3733
	sub	r1, r4, #120
	ldrb	r0, [r4, #-115]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L3686
	ldr	r1, .L3734
	movw	r0, #:lower16:.LC206
	movt	r0, #:upper16:.LC206
.L3722:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L3732:
	ldr	r2, .L3734
	movw	r0, #:lower16:.LC216
	movt	r0, #:upper16:.LC216
.L3720:
	ldrd	r4, [sp]
	mov	r1, r2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L3728:
	ldr	r1, .L3734
	movw	r0, #:lower16:.LC214
	movt	r0, #:upper16:.LC214
.L3721:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L3723:
	movw	r0, #:lower16:.LC212
	ldr	r2, .L3734
	movt	r0, #:upper16:.LC212
	b	.L3720
.L3729:
	movw	r0, #:lower16:.LC215
	ldr	r1, .L3734
	movt	r0, #:upper16:.LC215
	b	.L3721
.L3727:
	ldr	r2, .L3734
	movw	r0, #:lower16:.LC213
	movt	r0, #:upper16:.LC213
.L3719:
	mov	r1, r2
	b	.L3722
.L3730:
	movw	r0, #:lower16:.LC209
	ldr	r1, .L3734+4
	movt	r0, #:upper16:.LC209
	bl	printk
	b	.L3695
.L3731:
	movw	r0, #:lower16:.LC209
	ldr	r1, .L3734+8
	movt	r0, #:upper16:.LC209
	bl	printk
	b	.L3694
.L3733:
	movw	r0, #:lower16:.LC205
	ldr	r1, .L3734
	movt	r0, #:upper16:.LC205
	b	.L3722
.L3724:
	movw	r0, #:lower16:.LC211
	ldr	r2, .L3734
	movt	r0, #:upper16:.LC211
	b	.L3719
.L3735:
	.align	2
.L3734:
	.word	.LANCHOR2+1980
	.word	.LANCHOR2+2008
	.word	.LANCHOR2+2036
	.fnend
	.size	bam2bam_data_connect_work, .-bam2bam_data_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_peer_reset_cb, %function
bam_data_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #1
	str	lr, [sp, #4]
	bl	msm_hw_bam_disable
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r4, r0, #0
	bne	.L3740
	bl	msm_hw_bam_disable
	mov	r1, r4
	mov	r0, r4
	bl	usb_bam_register_peer_reset_cb
.L3736:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3740:
	ldr	r2, .L3741
	movw	r0, #:lower16:.LC217
	mov	r3, r4
	movt	r0, #:upper16:.LC217
	mov	r1, r2
	bl	printk
	b	.L3736
.L3742:
	.align	2
.L3741:
	.word	.LANCHOR2+2064
	.fnend
	.size	bam_data_peer_reset_cb, .-bam_data_peer_reset_cb
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_init, %function
gqti_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3746
	mov	r2, #56
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L3744
	movw	r0, #:lower16:.LC218
	mvn	r7, #11
	movt	r0, #:upper16:.LC218
	bl	printk
	b	.L3743
.L3746:
	mov	r4, #16
.L3744:
	mov	r5, #0
	add	r3, r4, #44
	ldr	r2, .L3751
	movw	r1, #:lower16:.LC219
	movw	r6, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LC219
	add	r0, r4, #32
	str	r5, [r4, #8]
	movt	r6, #:upper16:.LANCHOR1
	str	r5, [r4, #12]
	str	r5, [r4, #16]
	str	r5, [r4, #20]
	str	r5, [r4, #24]
	str	r5, [r4, #28]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r5, [r4, #52]
	bl	__init_waitqueue_head
	ldr	r0, .L3751+4
	str	r4, [r6, #1032]
	bl	misc_register
	subs	r7, r0, #0
	beq	.L3743
	movw	r0, #:lower16:.LC220
	movt	r0, #:upper16:.LC220
	bl	printk
	mov	r0, r4
	bl	kfree
	str	r5, [r6, #1032]
.L3743:
	mov	r0, r7
	pop	{r4, r5, r6, r7, r8, pc}
.L3752:
	.align	2
.L3751:
	.word	.LANCHOR1+3704
	.word	.LANCHOR0+600
	.fnend
	.size	gqti_ctrl_init, .-gqti_ctrl_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_init, %function
accessory_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L3757
	movw	r2, #1780
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L3763
.L3754:
	mov	r5, #0
	movw	r1, #:lower16:.LC221
	ldr	r2, .L3765
	add	r0, r4, #1648
	movt	r1, #:upper16:.LC221
	add	r0, r0, #8
	str	r5, [r4, #80]
	mov	r6, #2560
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC222
	add	r0, r4, #1664
	ldr	r2, .L3765
	movt	r1, #:upper16:.LC222
	add	r0, r0, #4
	bl	__init_waitqueue_head
	add	r1, r4, #1744
	add	r2, r4, #1760
	str	r5, [r4, #1644]
	add	r1, r1, #12
	mov	r3, r2
	str	r6, [r4, #1692]
	add	r2, r2, #4
	movw	ip, #:lower16:acc_start_work
	add	r3, r3, #12
	movt	ip, #:upper16:acc_start_work
	add	r0, r4, #1648
	str	r1, [r4, #1756]
	str	r1, [r4, #1760]
	add	r1, r4, #1696
	str	r0, [r4, #1648]
	str	r2, [r4, #1764]
	str	r2, [r4, #1768]
	mov	r2, r5
	movw	r5, #:lower16:.LANCHOR1
	str	r0, [r4, #1652]
	add	r0, r1, #12
	movt	r5, #:upper16:.LANCHOR1
	str	r1, [r4, #1696]
	str	r1, [r4, #1700]
	mov	r1, r2
	str	ip, [r4, #1704]
	str	r3, [r4, #1772]
	str	r3, [r4, #1776]
	bl	init_timer_key
	movw	r1, #:lower16:delayed_work_timer_fn
	add	r2, r4, #1680
	ldr	r0, .L3765+4
	movt	r1, #:upper16:delayed_work_timer_fn
	movw	r3, #:lower16:acc_hid_work
	str	r4, [r5, #2324]
	add	r2, r2, #12
	movt	r3, #:upper16:acc_hid_work
	str	r1, [r4, #1724]
	add	r1, r4, #1744
	str	r2, [r4, #1728]
	str	r6, [r4, #1740]
	str	r1, [r4, #1744]
	str	r1, [r4, #1748]
	str	r3, [r4, #1752]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L3764
.L3753:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3757:
	mov	r4, #16
	b	.L3754
.L3763:
	mvn	r5, #11
	b	.L3753
.L3764:
.L3756:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC223
	movt	r0, #:upper16:.LC223
	bl	printk
	b	.L3753
.L3766:
	.align	2
.L3765:
	.word	.LANCHOR1+3704
	.word	.LANCHOR0+636
	.fnend
	.size	accessory_function_init, .-accessory_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_init, %function
rndis_qc_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L3769
	mov	r2, #272
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	beq	.L3767
.L3769:
	movw	r0, #:lower16:.LC224
	ldr	r1, .L3777
	movt	r0, #:upper16:.LC224
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, .L3777+4
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2328]
	bl	misc_register
	subs	r4, r0, #0
	bne	.L3776
.L3767:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3776:
	movw	r0, #:lower16:.LC225
	ldr	r1, .L3777
	movt	r0, #:upper16:.LC225
	bl	printk
	b	.L3767
.L3778:
	.align	2
.L3777:
	.word	.LANCHOR2+2088
	.word	.LANCHOR0+672
	.fnend
	.size	rndis_qc_function_init, .-rndis_qc_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_init, %function
mtp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L3784
	mov	r2, #248
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L3791
.L3780:
	mov	r5, #0
	movw	r1, #:lower16:.LC221
	ldr	r2, .L3793
	movt	r1, #:upper16:.LC221
	add	r0, r4, #124
	str	r5, [r4, #80]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC222
	ldr	r2, .L3793
	add	r0, r4, #136
	movt	r1, #:upper16:.LC222
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC226
	ldr	r2, .L3793
	add	r0, r4, #148
	movt	r1, #:upper16:.LC226
	bl	__init_waitqueue_head
	add	r2, r4, #108
	add	r1, r4, #116
	str	r5, [r4, #100]
	movw	r0, #:lower16:.LC227
	str	r5, [r4, #104]
	mov	r3, r5
	str	r2, [r4, #108]
	movt	r0, #:upper16:.LC227
	str	r2, [r4, #112]
	mov	r2, #1
	str	r1, [r4, #116]
	str	r1, [r4, #120]
	mov	r1, #10
	str	r5, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #172]
	beq	.L3786
	movw	r2, #:lower16:send_file_work
	movw	r3, #:lower16:receive_file_work
	ldr	r0, .L3793+4
	movt	r2, #:upper16:send_file_work
	mov	r1, #2560
	str	r4, [r6, #2336]
	add	ip, r4, #180
	movt	r3, #:upper16:receive_file_work
	str	r1, [r4, #176]
	str	r2, [r4, #188]
	add	r2, r4, #196
	str	ip, [r4, #180]
	str	ip, [r4, #184]
	str	r1, [r4, #192]
	str	r2, [r4, #196]
	str	r2, [r4, #200]
	str	r3, [r4, #204]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L3792
.L3779:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3784:
	mov	r4, #16
	b	.L3780
.L3791:
	mvn	r5, #11
	b	.L3779
.L3792:
.L3783:
	ldr	r0, [r4, #172]
	bl	destroy_workqueue
.L3782:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #2336]
	bl	kfree
	movw	r0, #:lower16:.LC228
	movt	r0, #:upper16:.LC228
	bl	printk
	b	.L3779
.L3786:
	mvn	r5, #11
	b	.L3782
.L3794:
	.align	2
.L3793:
	.word	.LANCHOR1+3704
	.word	.LANCHOR0+708
	.fnend
	.size	mtp_function_init, .-mtp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_init, %function
adb_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r4, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r4, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4]
	beq	.L3797
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4]
	beq	.L3800
.L3797:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L3802
	mov	r2, #156
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L3800
.L3799:
	mov	r5, #0
	movw	r1, #:lower16:.LC221
	ldr	r2, .L3811
	movt	r1, #:upper16:.LC221
	add	r0, r4, #120
	str	r5, [r4, #80]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC222
	ldr	r2, .L3811
	add	r0, r4, #132
	movt	r1, #:upper16:.LC222
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	add	r3, r4, #112
	mov	r2, #1
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	ldr	r0, .L3811+4
	str	r5, [r4, #108]
	str	r3, [r4, #112]
	str	r3, [r4, #116]
	strb	r2, [r4, #153]
	str	r4, [r6, #3520]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L3810
.L3795:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3802:
	mov	r4, #16
	b	.L3799
.L3800:
	mvn	r5, #11
	b	.L3795
.L3810:
.L3801:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC229
	movt	r0, #:upper16:.LC229
	bl	printk
	b	.L3795
.L3812:
	.align	2
.L3811:
	.word	.LANCHOR1+3704
	.word	.LANCHOR0+744
	.fnend
	.size	adb_function_init, .-adb_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_init, %function
rmnet_smd_sdio_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L3820
	mov	r2, #416
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L3824
.L3814:
	mov	r5, #0
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC230
	mov	r3, r5
	movt	r0, #:upper16:.LC230
	str	r5, [sp]
	mov	r2, #1
	mov	r1, #10
	str	r4, [r6, #2320]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #368]
	beq	.L3822
	movw	r3, #:lower16:rmnet_mux_disconnect_work
	mov	r8, #2560
	str	r5, [r4, #168]
	movt	r3, #:upper16:rmnet_mux_disconnect_work
	add	r0, r4, #376
	str	r5, [r4, #356]
	movw	r1, #:lower16:rmnet_mux_smd_data_rx_tlet
	mov	r2, r4
	str	r5, [r4, #360]
	movt	r1, #:upper16:rmnet_mux_smd_data_rx_tlet
	str	r5, [r4, #364]
	add	r7, r4, #96
	str	r8, [r4, #372]
	str	r0, [r4, #376]
	str	r0, [r4, #380]
	add	r0, r4, #144
	str	r3, [r4, #384]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_mux_smd_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #124
	movt	r1, #:upper16:rmnet_mux_smd_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC231
	ldr	r2, .L3826
	add	r0, r4, #172
	movt	r1, #:upper16:.LC231
	bl	__init_waitqueue_head
	mov	r3, r7
	movw	r2, #:lower16:rmnet_mux_sdio_data_rx_work
	movw	ip, #:lower16:rmnet_mux_open_sdio_work
	add	lr, r4, #104
	movt	ip, #:upper16:rmnet_mux_open_sdio_work
	add	r0, r4, #112
	str	r3, [r4, #96]
	add	r1, r4, #236
	movt	r2, #:upper16:rmnet_mux_sdio_data_rx_work
	str	r3, [r4, #100]
	add	r3, r4, #252
	add	r7, r4, #184
	str	lr, [r4, #104]
	str	lr, [r4, #108]
	str	r0, [r4, #112]
	str	r0, [r4, #116]
	add	r0, r4, #264
	str	r8, [r4, #232]
	str	r1, [r4, #236]
	str	r1, [r4, #240]
	mov	r1, r5
	str	r2, [r4, #244]
	mov	r2, r5
	str	r8, [r4, #248]
	str	r3, [r4, #252]
	str	r3, [r4, #256]
	str	ip, [r4, #260]
	bl	init_timer_key
	mov	r3, r7
	add	r1, r4, #208
	movw	r0, #:lower16:delayed_work_timer_fn
	add	ip, r4, #304
	add	lr, r4, #248
	add	r2, r4, #216
	str	r3, [r4, #184]
	movt	r0, #:upper16:delayed_work_timer_fn
	add	r7, r4, #192
	str	r3, [r4, #188]
	add	r3, r4, #328
	str	r7, [r4, #192]
	str	r1, [r4, #208]
	str	r1, [r4, #212]
	movw	r1, #:lower16:.LC232
	str	r7, [r4, #196]
	movt	r1, #:upper16:.LC232
	str	r5, [r4, #200]
	str	r5, [r4, #204]
	str	r2, [r4, #216]
	str	r2, [r4, #220]
	ldr	r2, .L3826
	str	r5, [r4, #224]
	str	r5, [r4, #228]
	str	r0, [r4, #280]
	add	r0, r4, #312
	str	lr, [r4, #284]
	str	ip, [r4, #304]
	str	ip, [r4, #308]
	str	r3, [r4, #328]
	str	r3, [r4, #332]
	bl	__init_waitqueue_head
	ldr	r0, .L3826+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L3817
	movw	r0, #:lower16:.LC233
	mov	r1, r5
	movt	r0, #:upper16:.LC233
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3704]
	beq	.L3813
	cmn	r0, #4096
	bhi	.L3813
	ldr	ip, .L3826+8
	movw	r0, #:lower16:.LC154
	mov	r3, r4
	movt	r0, #:upper16:.LC154
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L3825
.L3813:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3817:
	movw	r0, #:lower16:.LC234
	ldr	r1, .L3826+12
	movt	r0, #:upper16:.LC234
	bl	printk
	ldr	r0, [r4, #368]
	bl	destroy_workqueue
.L3816:
	mov	r0, r4
	bl	kfree
	b	.L3813
.L3820:
	mov	r4, #16
	b	.L3814
.L3822:
	mvn	r5, #11
	b	.L3816
.L3825:
	ldr	r0, [r6, #3704]
	bl	debugfs_remove
	str	r5, [r6, #3704]
	b	.L3813
.L3824:
	mvn	r5, #11
	b	.L3813
.L3827:
	.align	2
.L3826:
	.word	.LANCHOR1+3704
	.word	.LANCHOR0+780
	.word	.LANCHOR2+2132
	.word	.LANCHOR2+2104
	.fnend
	.size	rmnet_smd_sdio_function_init, .-rmnet_smd_sdio_function_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_cleanup, %function
gqti_ctrl_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L3830
	bl	misc_deregister
	ldr	r0, [r4, #1032]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #1032]
	pop	{r4, pc}
.L3831:
	.align	2
.L3830:
	.word	.LANCHOR0+600
	.fnend
	.size	gqti_ctrl_cleanup, .-gqti_ctrl_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_cleanup, %function
accessory_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	ldr	r0, .L3834
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	bl	misc_deregister
	ldr	r0, [r4, #2324]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2324]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3835:
	.align	2
.L3834:
	.word	.LANCHOR0+636
	.fnend
	.size	accessory_function_cleanup, .-accessory_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_cleanup, %function
rndis_qc_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC235
	ldr	r1, .L3838
	movt	r0, #:upper16:.LC235
	str	lr, [sp, #4]
	bl	printk
	ldr	r0, .L3838+4
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, [r4, #4]
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2332]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L3839:
	.align	2
.L3838:
	.word	.LANCHOR2+2236
	.word	.LANCHOR0+672
	.fnend
	.size	rndis_qc_function_cleanup, .-rndis_qc_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_cleanup, %function
mtp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #2336]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L3840
	ldr	r0, .L3843
	bl	misc_deregister
	ldr	r0, [r5, #172]
	bl	destroy_workqueue
	mov	r3, #0
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #2336]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L3840:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3844:
	.align	2
.L3843:
	.word	.LANCHOR0+708
	.fnend
	.size	mtp_function_cleanup, .-mtp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_cleanup, %function
ccid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	add	r0, r4, #816
	bl	misc_deregister
	add	r0, r4, #852
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r0, [r3, #2220]
	b	kfree
	.fnend
	.size	ccid_function_cleanup, .-ccid_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_cleanup, %function
adb_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L3849
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3520]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r5, #4]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #3520]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L3850:
	.align	2
.L3849:
	.word	.LANCHOR0+744
	.fnend
	.size	adb_function_cleanup, .-adb_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_cleanup, %function
rmnet_smd_sdio_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r4, [r3, #2320]
	ldr	r0, [r3, #3704]
	bl	debugfs_remove_recursive
	ldr	r0, .L3853
	bl	misc_deregister
	ldr	r0, [r4, #120]
	bl	smd_close
	ldr	r0, [r4, #368]
	bl	destroy_workqueue
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L3854:
	.align	2
.L3853:
	.word	.LANCHOR0+780
	.fnend
	.size	rmnet_smd_sdio_function_cleanup, .-rmnet_smd_sdio_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_cleanup, %function
mbim_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC236
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L3861
	movt	r0, #:upper16:.LC236
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #3708]
	cmp	r3, #0
	beq	.L3856
	ldr	r0, [r4, #3712]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #3712]
.L3856:
	mov	r5, #0
	ldr	r0, .L3861+4
	str	r5, [r4, #3708]
	bl	misc_deregister
	ldr	r6, [sp, #8]
	str	r5, [r4, #2412]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3862:
	.align	2
.L3861:
	.word	.LANCHOR2+2256
	.word	.LANCHOR0+888
	.fnend
	.size	mbim_function_cleanup, .-mbim_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io_complete, %function
ffs_epfile_io_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L3863
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L3863
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L3863
	ldr	r2, [r1, #44]
	cmp	r2, #0
	ldreq	r2, [r1, #48]
	str	r2, [r3, #24]
	ldr	r0, [r1, #32]
	b	complete
.L3863:
	bx	lr
	.fnend
	.size	ffs_epfile_io_complete, .-ffs_epfile_io_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	tx_complete, %function
tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L3876
.L3914:
	ldr	r3, [r3, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L3876:
	ldr	ip, [r4, #4]
	cmp	ip, #0
	beq	.L3914
	ldr	r3, [r1, #44]
	mov	r5, r1
	ldr	r7, [r4, #8]
	cmn	r3, #104
	beq	.L3897
	cmp	r3, #0
	beq	.L3880
	cmn	r3, #108
	beq	.L3897
	ldr	r3, [r7, #252]
	add	r3, r3, #1
	str	r3, [r7, #252]
	ldr	r1, [r4, #8]
.L3879:
	ldr	r3, [r1, #236]
	add	r6, r4, #16
	add	r8, r4, #20
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r1, #236]
	bl	_raw_spin_lock
	ldr	r3, [r4, #24]
	add	r2, r5, #36
	str	r2, [r4, #24]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #4]
	ldr	r9, [r5, #32]
	ldrb	r3, [r3, #116]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L3895
	cmp	r9, #0
	beq	.L3915
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L3895
	movw	r1, #32800
	bl	__kmalloc
	mov	r3, #0
	str	r0, [r5]
	str	r3, [r5, #32]
.L3891:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r9
	bl	dev_kfree_skb_any
.L3890:
	ldr	r3, [r4, #8]
	ldr	r0, [r3, #160]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L3916
.L3875:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3880:
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	ldr	r3, [r1, #4]
	ldr	r1, [r7, #244]
	tst	r0, #2
	subeq	r3, r3, #1
	add	r3, r1, r3
	str	r3, [r7, #244]
	ldr	r1, [r4, #8]
	b	.L3879
.L3895:
	mov	r3, #0
	str	r3, [r5]
	b	.L3891
.L3916:
	ldr	r4, [r3, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L3875
	ldr	r0, [r4, #4]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__netif_schedule
.L3897:
	mov	r1, r7
	b	.L3879
.L3915:
	ldr	r3, [r4, #40]
	sub	r3, r3, #1
	str	r3, [r4, #40]
	str	r9, [r5, #4]
	ldr	r5, [r4, #20]
	cmp	r8, r5
	beq	.L3884
	ldr	lr, [r4, #4]
	mov	ip, #256
	mov	r1, #512
	ldrd	r2, [r5]
	mov	r0, r6
	ldr	r9, [lr, #80]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5]
	str	r1, [r5, #4]
	bl	_raw_spin_unlock
	ldr	r3, [r5, #-32]
	cmp	r3, #0
	beq	.L3885
	ldr	r2, [r4, #4]
	mov	r0, r3
	ldrb	r1, [r2, #96]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L3899
	ldr	r2, [r2, #104]
	cmp	r3, r2
	beq	.L3917
.L3899:
	mov	r1, #1
.L3886:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	uxtb	r1, r2
	strb	r2, [r5, #-10]
	tst	r1, #2
	beq	.L3887
	ldrb	r2, [r4, #124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L3887
	ldrh	ip, [r9, #20]
	sdiv	r2, r3, ip
	mls	r2, ip, r2, r3
	cmp	r2, #0
	bne	.L3887
	bfi	r1, r2, #1, #1
	add	r0, r3, #1
	strb	r1, [r5, #-10]
.L3887:
	str	r0, [r5, #-32]
	ldr	r3, [r9, #8]
	mov	r2, #32
	sub	r1, r5, #36
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L3889
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #-32]
.L3913:
	bl	_raw_spin_lock
	ldr	r3, [r4, #24]
	mov	r0, r6
	str	r5, [r4, #24]
	str	r8, [r5]
	str	r3, [r5, #4]
	str	r5, [r3]
	bl	_raw_spin_unlock
	b	.L3890
.L3884:
	mov	r0, r6
	bl	_raw_spin_unlock
	b	.L3890
.L3885:
	mov	r0, r6
	b	.L3913
.L3889:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #40]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #40]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r7, #604]
	b	.L3890
.L3917:
	ldrh	r2, [r9, #20]
	sdiv	r1, r3, r2
	mls	r1, r2, r1, r3
	adds	r1, r1, #0
	movne	r1, #1
	b	.L3886
	.fnend
	.size	tx_complete, .-tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_open, %function
eth_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #1224]
	ldr	r5, [r0, #160]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L3933
.L3920:
	add	r5, r4, #1216
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1220]
	cmp	r0, #0
	beq	.L3922
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L3922
	blx	r3
.L3922:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3933:
	bl	netif_carrier_off
	ldr	r0, [r4, #1224]
	bl	netif_carrier_on
	ldr	r3, [r4, #1224]
	mov	r0, r5
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L3920
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L3920
	.fnend
	.size	eth_qc_open, .-eth_qc_open
	.align	2
	.global	rndis_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_rm_hdr, %function
rndis_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	mov	r8, r2
	movt	r9, #:upper16:.LANCHOR1
	str	lr, [sp, #24]
	ldr	ip, [r1, #80]
	ldr	r3, [r9, #3720]
	.pad #12
	sub	sp, sp, #12
	cmp	ip, r3
	strhi	ip, [r9, #3720]
	bhi	.L3936
	cmp	ip, #0
	beq	.L3950
.L3936:
	cmp	ip, #43
	bls	.L3938
	ldr	r3, [r4, #172]
	ldr	r6, [r3, #4]	@ unaligned
	ldr	r1, [r3, #8]	@ unaligned
	ldr	r5, [r3, #12]	@ unaligned
	ldr	lr, [r3]	@ unaligned
	cmp	ip, r6
	bcc	.L3939
	add	r3, r5, r1
	add	r3, r3, #8
	cmp	r3, r6
	bhi	.L3939
	cmp	lr, #1
	bne	.L3940
	mov	r7, #0
	b	.L3941
.L3955:
	cmp	r2, r5
	beq	.L3945
	bl	skb_clone
	sub	r1, r6, #44
	subs	r6, r0, #0
	mov	r0, r4
	beq	.L3954
	bl	skb_pull
	mov	r1, r5
	mov	r0, r6
	bl	skb_trim
	mov	r1, r6
	mov	r0, r8
	bl	skb_queue_tail
	ldr	ip, [r4, #80]
	cmp	ip, #0
	beq	.L3937
	cmp	ip, #43
	bls	.L3938
	ldr	r0, [r4, #172]
	ldr	r6, [r0, #4]	@ unaligned
	ldr	r1, [r0, #8]	@ unaligned
	ldr	r5, [r0, #12]	@ unaligned
	ldr	lr, [r0]	@ unaligned
	cmp	ip, r6
	add	r2, r1, r5
	bcc	.L3939
	add	r2, r2, #8
	cmp	r2, r6
	bhi	.L3939
	cmp	lr, #1
	bne	.L3940
.L3941:
	add	r1, r1, #8
	mov	r0, r4
	bl	skb_pull
	ldr	r3, [r4, #80]
	mov	r1, #32
	mov	r0, r4
	add	r7, r7, #1
	cmp	r3, r5
	sub	r2, r3, #1
	bne	.L3955
.L3945:
	mov	r1, r5
	mov	r0, r4
	bl	skb_trim
.L3937:
	ldr	r3, [r9, #3724]
	mov	r0, r8
	mov	r1, r4
	cmp	r3, r7
	strlt	r7, [r9, #3724]
	bl	skb_queue_tail
	mov	r0, #0
.L3934:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L3950:
	mov	r7, ip
	b	.L3937
.L3939:
	movw	r0, #:lower16:.LC238
	mov	r3, r1
	stm	sp, {r5, ip}
	mov	r2, r6
	mov	r1, lr
	movt	r0, #:upper16:.LC238
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L3934
.L3938:
	movw	r0, #:lower16:.LC237
	mov	r1, ip
	mov	r2, #44
	movt	r0, #:upper16:.LC237
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L3934
.L3954:
	movw	r0, #:lower16:.LC239
	ldr	r1, .L3956
	movt	r0, #:upper16:.LC239
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #11
	b	.L3934
.L3940:
	movw	r0, #:lower16:.LC238
	mov	r3, r1
	stm	sp, {r5, ip}
	mov	r2, r6
	mov	r1, lr
	movt	r0, #:upper16:.LC238
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L3934
.L3957:
	.align	2
.L3956:
	.word	.LANCHOR2+2272
	.fnend
	.size	rndis_rm_hdr, .-rndis_rm_hdr
	.align	2
	.global	rndis_qc_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_rm_hdr, %function
rndis_qc_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #172]
	ldr	r3, [r5]	@ unaligned
	cmp	r3, #1
	bne	.L3963
	ldr	r1, [r5, #8]	@ unaligned
	mov	r0, r4
	mov	r6, r2
	add	r1, r1, #8
	bl	skb_pull
	cmp	r0, #0
	beq	.L3964
	ldr	r1, [r5, #12]	@ unaligned
	mov	r0, r4
	bl	skb_trim
	mov	r0, r6
	mov	r1, r4
	bl	skb_queue_tail
	mov	r0, #0
.L3958:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3963:
	mov	r0, r1
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L3958
.L3964:
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L3958
	.fnend
	.size	rndis_qc_rm_hdr, .-rndis_qc_rm_hdr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_open, %function
rndis_proc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-20]
	mov	r0, r1
	movw	r1, #:lower16:rndis_proc_show
	movt	r1, #:upper16:rndis_proc_show
	ldr	r2, [r3, #44]
	b	single_open
	.fnend
	.size	rndis_proc_open, .-rndis_proc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_show, %function
rndis_proc_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r1, #:lower16:.LC241
	movw	r3, #:lower16:.LC240
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC241
	movt	r3, #:upper16:.LC240
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	ip, [r0, #80]
	.pad #44
	sub	sp, sp, #44
	ldrb	r4, [ip, #1]	@ zero_extendqisi2
	ldr	lr, [ip, #4]
	ldrb	r2, [ip]	@ zero_extendqisi2
	cmp	r4, #0
	moveq	r3, r1
	cmp	lr, #2
	movwhi	r7, #:lower16:.LC242
	movthi	r7, #:upper16:.LC242
	bhi	.L3968
	movw	r1, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR2
	add	r1, r1, lr, lsl #2
	ldr	r7, [r1, #2288]
.L3968:
	ldr	r8, [ip, #8]
	ldr	r1, [ip, #16]
	cmp	r1, #0
	bne	.L3972
	ldr	r1, [ip, #12]
	mov	r6, #100
	movw	r5, #:lower16:.LC244
	movt	r5, #:upper16:.LC244
	mul	r6, r6, r1
.L3969:
	movw	lr, #:lower16:.LANCHOR1
	ldrb	r4, [ip, #36]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC245
	movt	lr, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC245
	ldr	r9, [lr, #3720]
	ldr	lr, [lr, #3724]
	str	r9, [sp, #28]
	str	r4, [sp, #32]
	str	lr, [sp, #36]
	ldr	lr, [ip, #28]
	ldr	lr, [lr, #364]
	add	lr, lr, #80
	mul	lr, r4, lr
	str	lr, [sp, #24]
	ldr	lr, [ip, #40]
	str	lr, [sp, #20]
	ldr	ip, [ip, #32]
	stm	sp, {r7, r8}
	str	r6, [sp, #8]
	str	r5, [sp, #12]
	str	ip, [sp, #16]
	bl	seq_printf
	mov	r0, #0
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L3972:
	movw	r5, #:lower16:.LC243
	mov	r6, #0
	movt	r5, #:upper16:.LC243
	b	.L3969
	.fnend
	.size	rndis_proc_show, .-rndis_proc_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_hid_report_desc, %function
acc_complete_set_hid_report_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	r5, [r1, #48]
	ldr	r6, [r4, #12]
	cmp	r3, #0
	bne	.L3978
	ldr	r0, [r4, #20]
	mov	r2, r5
	ldr	r3, [r4, #28]
	ldr	r1, [r1]
	add	r0, r0, r3
	bl	memcpy
	ldr	r3, [r4, #24]
	ldr	r2, [r4, #28]
	add	r5, r5, r2
	cmp	r5, r3
	str	r5, [r4, #28]
	beq	.L3979
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3979:
	add	r0, r6, #1728
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	r0, r0, #12
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	schedule_work
.L3978:
	movw	r0, #:lower16:.LC246
	ldrd	r4, [sp]
	mov	r1, r3
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC246
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
	.fnend
	.size	acc_complete_set_hid_report_desc, .-acc_complete_set_hid_report_desc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_resume, %function
android_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, .L3990
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2228]
	cmp	r3, r2
	sub	r4, r3, #208
	bne	.L3983
	b	.L3981
.L3989:
	ldr	r3, [r4, #208]
	cmp	r3, r2
	sub	r4, r3, #208
	beq	.L3981
.L3983:
	ldr	r3, [r3, #-200]
	cmp	r0, r3
	bne	.L3989
.L3981:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #54]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L3984
	mov	r3, #0
	add	r0, r4, #180
	strb	r3, [r4, #54]
	bl	schedule_work
.L3984:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_resume
.L3991:
	.align	2
.L3990:
	.word	.LANCHOR1+2228
	.fnend
	.size	android_resume, .-android_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disconnect, %function
android_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	mov	r7, r0
	add	r0, r0, #32
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	dev_get_drvdata
	ldr	r3, [r4, #2228]
	mov	r6, r0
	ldr	r2, .L4004
	sub	r5, r3, #208
	cmp	r3, r2
	bne	.L3995
	b	.L3993
.L4003:
	ldr	r3, [r5, #208]
	cmp	r3, r2
	sub	r5, r3, #208
	beq	.L3993
.L3995:
	ldr	r3, [r3, #-200]
	cmp	r6, r3
	bne	.L4003
.L3993:
	mov	r0, r7
	bl	composite_disconnect
	ldr	r4, [r4, #2324]
	add	r7, r4, #80
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1756]
	add	lr, r4, #1744
	mov	r1, r0
	add	lr, lr, #12
	cmp	r3, lr
	ldr	r2, [r3]
	beq	.L3996
	add	r8, r4, #1760
	mov	ip, r2
	add	r8, r8, #12
	mov	r10, #256
	mov	r9, #512
	b	.L3997
.L4000:
	mov	ip, r2
.L3997:
	ldr	r0, [r3, #4]
	cmp	lr, ip
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r2, [r4, #1772]
	str	r3, [r2, #4]
	stm	r3, {r2, r8}
	str	r3, [r4, #1772]
	mov	r3, ip
	ldr	r2, [ip]
	bne	.L4000
.L3996:
	ldr	r3, [r4, #1764]
	add	r0, r4, #1760
	add	r0, r0, #4
	cmp	r0, r3
	ldr	r2, [r3]
	beq	.L3998
	add	r8, r4, #1760
	mov	ip, r2
	add	r8, r8, #12
	mov	r10, #256
	mov	r9, #512
	b	.L3999
.L4001:
	mov	ip, r2
.L3999:
	ldr	lr, [r3, #4]
	cmp	r0, ip
	str	lr, [r2, #4]
	str	r2, [lr]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r2, [r4, #1772]
	str	r3, [r2, #4]
	stm	r3, {r2, r8}
	str	r3, [r4, #1772]
	mov	r3, ip
	ldr	r2, [ip]
	bne	.L4001
.L3998:
	mov	r0, r7
	add	r6, r6, #60
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1728
	add	r0, r0, #12
	bl	schedule_work
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r4, r0
	add	r0, r5, #180
	strb	r3, [r5, #52]
	bl	schedule_work
	ldrd	r8, [sp, #16]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L4005:
	.align	2
.L4004:
	.word	.LANCHOR1+2228
	.fnend
	.size	android_disconnect, .-android_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	get_ether_addr, %function
get_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	subne	r5, r1, #1
	mov	r7, r1
	strd	r8, [sp, #16]
	addne	r8, r1, #5
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bne	.L4009
	b	.L4013
.L4018:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r9, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r9, lsl #4
	strb	r0, [r5, #1]!
	cmp	r8, r5
	beq	.L4012
.L4011:
	mov	r4, r6
.L4009:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r6, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L4018
	bl	hex_to_bin
	mov	r6, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r6, lsl #4
	add	r6, r4, #2
	strb	r0, [r5, #1]!
	cmp	r8, r5
	bne	.L4011
.L4012:
	ldrb	r3, [r7]	@ zero_extendqisi2
	ands	r0, r3, #1
	beq	.L4019
.L4013:
	mov	r0, r7
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r7]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r7]
.L4006:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4019:
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldrb	lr, [r7, #2]	@ zero_extendqisi2
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	ldrb	r1, [r7, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r7, #5]	@ zero_extendqisi2
	orr	r3, r3, lr
	orr	r3, r3, ip
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L4013
	b	.L4006
	.fnend
	.size	get_ether_addr, .-get_ether_addr
	.set	get_qc_ether_addr,get_ether_addr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_open, %function
fsg_lun_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r4, [r0, #24]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ands	r4, r4, #1
	beq	.L4021
.L4023:
	mov	r2, #0
	mov	r1, #131072
	mov	r0, r7
	mov	r4, #1
	bl	filp_open
	mov	r5, r0
	cmn	r5, #4096
	bhi	.L4067
.L4024:
	ldr	r3, [r5, #12]
	ldr	r2, [r5, #36]
	tst	r2, #2
	moveq	r4, #1
	cmp	r3, #0
	beq	.L4027
	ldr	r2, [r3, #40]
	cmp	r2, #0
	beq	.L4027
	ldrh	r3, [r2]
	and	r3, r3, #61440
	sub	r3, r3, #24576
	tst	r3, #53248
	beq	.L4028
.L4027:
	movw	r1, #:lower16:.LC248
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC248
	mvn	r7, #21
	bl	_dev_info
.L4029:
	mov	r3, sp
	mov	r0, r5
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #844]
	bl	filp_close
.L4020:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4028:
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L4030
	ldr	r1, [r3, #8]
	cmp	r1, #0
	beq	.L4068
.L4031:
	ldr	r1, [r3, #12]
	cmp	r1, #0
	beq	.L4069
.L4032:
	ldr	r3, [r2, #32]
	ldr	r3, [r3]
.L4066:
	ldr	r1, [r3, #104]
	tst	r1, #1
	bne	.L4034
	.syntax divided
@ 164 "/home/xawlw/kernel/arg/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r8, [r3, #96]
	.syntax divided
@ 220 "/home/xawlw/kernel/arg/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r3, #104]
	cmp	r0, r1
	bne	.L4066
	cmp	r8, #0
	sbcs	r3, r9, #0
	blt	.L4070
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L4037
	adr	fp, .L4072
	ldrd	r10, [fp]
	lsr	r2, r8, #11
	mov	r1, #11
	asr	r3, r9, r1
	orr	r2, r2, r9, lsl #21
	str	r1, [r6, #40]
	mov	r0, #2048
	cmp	r10, r2
	sbcs	r1, fp, r3
	str	r0, [r6, #44]
	blt	.L4038
	mov	r0, #300
	mov	r1, #0
.L4039:
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L4071
.L4044:
	add	r1, r5, #28
	.syntax divided
@ 44 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r1, [r6, #24]	@ zero_extendqisi2
	mov	r7, #0
	str	r5, [r6]
	strd	r8, [r6, #8]
	strd	r2, [r6, #16]
	bfi	r1, r4, #1, #1
	strb	r1, [r6, #24]
	b	.L4029
.L4021:
	mov	r1, #2
	mov	r2, r4
	movt	r1, 2
	mov	r0, r7
	bl	filp_open
	cmn	r0, #30
	cmnne	r0, #13
	mov	r5, r0
	beq	.L4023
	cmn	r5, #4096
	bls	.L4024
.L4067:
	movw	r1, #:lower16:.LC247
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC247
	mov	r7, r5
	bl	_dev_info
	b	.L4020
.L4068:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L4031
.L4030:
	movw	r1, #:lower16:.LC249
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC249
	bl	_dev_info
	mvn	r7, #21
	b	.L4029
.L4037:
	ldr	r3, [r2, #332]
	cmp	r3, #0
	beq	.L4040
	ldr	r3, [r3, #92]
	ldr	r3, [r3, #500]
	cmp	r3, #0
	moveq	r3, #512
	beq	.L4041
	add	r3, r3, #776
	ldrh	r3, [r3]
	cmp	r3, #0
	moveq	r3, #512
.L4041:
	mov	r1, #8
	str	r3, [r6, #44]
.L4042:
	lsr	r3, r3, #1
	add	r1, r1, #1
	cmp	r3, #256
	bhi	.L4042
	str	r1, [r6, #40]
.L4043:
	rsb	r0, r1, #32
	lsr	r2, r8, r1
	subs	ip, r1, #32
	orr	r2, r2, r9, lsl r0
	mov	r0, #1
	asr	r3, r9, r1
	orrpl	r2, r2, r9, asr ip
	mov	r1, #0
	b	.L4039
.L4069:
	ldr	r3, [r3, #20]
	cmp	r3, #0
	moveq	r4, #1
	b	.L4032
.L4071:
	movw	r1, #:lower16:.LC253
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC253
	bl	_dev_info
	mvn	r7, #524
	b	.L4029
.L4070:
	movw	r1, #:lower16:.LC250
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC250
	mov	r7, r8
	bl	_dev_info
	b	.L4029
.L4038:
	add	r3, r6, #48
	movw	r1, #:lower16:.LC251
	mov	r2, r7
	mov	r0, r3
	movt	r1, #:upper16:.LC251
	mov	r7, r3
	bl	_dev_info
	movw	r2, #37887
	movw	r1, #:lower16:.LC252
	movt	r2, 17
	mov	r0, r7
	movt	r1, #:upper16:.LC252
	bl	_dev_info
	mov	r2, r10
	mov	r3, fp
	b	.L4044
.L4034:
	b	.L4066
.L4040:
	mov	r3, #512
	mov	r1, #9
	str	r1, [r6, #40]
	str	r3, [r6, #44]
	b	.L4043
.L4073:
	.align	3
.L4072:
	.word	1151999
	.word	0
	.fnend
	.size	fsg_lun_open, .-fsg_lun_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unwrap_ntb, %function
ncm_unwrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #168]
	.pad #44
	sub	sp, sp, #44
	ldr	r1, [r1, #172]
	ldrb	r3, [r0, #172]	@ zero_extendqisi2
	ldr	r0, [r6]
	ldr	r2, [r1]	@ unaligned
	cmp	r3, #0
	moveq	r10, #14
	movne	r10, #18
	moveq	r8, #0
	movne	r8, #4
	cmp	r0, r2
	bne	.L4126
	ldrh	r0, [r1, #4]	@ unaligned
	ldr	r2, [r6, #8]
	cmp	r0, r2
	bne	.L4127
	ldr	ip, [r6, #24]
	cmp	ip, #1
	beq	.L4080
	cmp	ip, #2
	ldreq	lr, [r1, #8]	@ unaligned
	bne	.L4121
.L4082:
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #36]
	cmp	r2, lr
	bcc	.L4128
	ldr	lr, [r6, #28]
	add	r2, r1, #8
	add	ip, r2, ip, lsl #1
	cmp	lr, #1
	beq	.L4085
	cmp	lr, #2
	ldreq	r2, [ip]	@ unaligned
	bne	.L4121
.L4087:
	cmp	r0, r2
	movls	r0, #0
	movhi	r0, #1
	ands	ip, r2, #3
	movne	ip, r0
	cmp	ip, #0
	bne	.L4129
	add	r1, r1, r2
	ldr	r0, [r6, #4]
	ldr	r2, [r1]	@ unaligned
	cmp	r0, r2
	beq	.L4089
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC260
	mvn	r5, #21
	movt	r1, #:upper16:.LC260
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4077
.L4127:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC257
	mvn	r5, #21
	movt	r1, #:upper16:.LC257
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
.L4077:
	mov	r0, r7
	bl	skb_queue_purge
	mov	r0, r4
	bl	dev_kfree_skb_any
.L4074:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4126:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC254
	mvn	r5, #21
	ldr	r2, [r4, #80]
	movt	r1, #:upper16:.LC254
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r4, #172]
	mov	ip, #0
	mov	r3, #32
	mov	r2, #1
	movw	r1, #:lower16:.LC255
	movt	r1, #:upper16:.LC255
	str	r2, [sp]
	stmib	sp, {r0, r3, ip}
	movw	r0, #:lower16:.LC256
	movt	r0, #:upper16:.LC256
	bl	print_hex_dump
	b	.L4077
.L4080:
	ldrh	lr, [r1, #8]	@ unaligned
	b	.L4082
.L4085:
	ldrh	r2, [ip]	@ unaligned
	b	.L4087
.L4128:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC258
	mvn	r5, #21
	movt	r1, #:upper16:.LC258
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4077
.L4089:
	ldr	lr, [r6, #12]
	ldr	r0, [r6, #20]
	ldrh	r2, [r1, #4]	@ unaligned
	add	ip, lr, r0, lsl #3
	cmp	ip, r2
	bhi	.L4090
	ldr	r9, [r6, #16]
	udiv	ip, r2, r9
	mls	ip, r9, ip, r2
	cmp	ip, #0
	bne	.L4090
	ldr	ip, [r6, #32]
	sub	r3, r2, lr
	cmp	r0, #1
	ldr	lr, [r6, #36]
	add	r1, r1, #6
	ldr	r9, [r6, #40]
	str	r3, [sp, #20]
	add	r2, ip, r9
	add	r2, r2, lr
	add	r2, r1, r2, lsl #1
	beq	.L4093
	cmp	r0, #2
	bne	.L4121
	ldr	fp, [r2, #4]	@ unaligned
	mov	r1, #4
	ldr	r3, [r2], #4	@ unaligned
.L4095:
	add	r2, r2, r1
	ldr	r9, [sp, #20]
	str	r2, [sp, #16]
	str	r7, [sp, #20]
	mov	r7, r3
	str	r4, [sp, #24]
	str	r6, [sp, #28]
	str	r5, [sp, #32]
	str	r10, [sp, #36]
	b	.L4105
.L4134:
	mov	r1, #32
	ldr	r0, [sp, #24]
	bl	skb_clone
	subs	r10, r0, #0
	beq	.L4130
	mov	r1, r7
	bl	skb_pull
	cmp	r0, #0
	beq	.L4131
	sub	r1, fp, r8
	mov	r0, r10
	bl	skb_trim
	ldr	r0, [sp, #20]
	mov	r1, r10
	mov	r7, r6
	bl	skb_queue_tail
	ldr	r3, [sp, #28]
	mov	fp, r5
	ldr	r0, [r3, #20]
	lsl	r2, r0, #2
	sub	r9, r9, r2
	cmp	r2, r9
	bcs	.L4125
.L4105:
	ldr	r3, [sp, #36]
	cmp	fp, r3
	bcc	.L4132
	ldr	r3, [sp, #32]
	ldrb	r2, [r3, #172]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L4133
.L4097:
	cmp	r0, #1
	beq	.L4100
	cmp	r0, #2
	bne	.L4121
	ldr	r2, [sp, #16]
	mov	r0, #4
	ldr	r5, [r2, #4]	@ unaligned
	ldr	r6, [r2], #4	@ unaligned
.L4102:
	clz	r1, r5
	cmp	r6, #0
	lsr	r1, r1, #5
	moveq	r4, #1
	add	r3, r2, r0
	movne	r4, r1
	cmp	r4, #0
	str	r3, [sp, #16]
	beq	.L4134
	ldr	r4, [sp, #24]
	mov	r1, r7
	ldr	r7, [sp, #20]
	mov	r0, r4
	bl	skb_pull
	cmp	r0, #0
	bne	.L4135
.L4108:
	mvn	r5, #74
	b	.L4077
.L4090:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC261
	movt	r1, #:upper16:.LC261
.L4124:
	ldr	r3, [r3, #24]
	mvn	r5, #21
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4077
.L4100:
	ldr	r2, [sp, #16]
	mov	r0, #2
	ldrh	r5, [r2, #2]	@ unaligned
	ldrh	r6, [r2], #2	@ unaligned
	b	.L4102
.L4133:
	ldr	r3, [sp, #24]
	add	ip, r7, fp
	sub	r2, fp, r8
	sub	ip, ip, r8
	mvn	r0, #0
	ldr	r1, [r3, #172]
	ldr	r5, [r1, ip]	@ unaligned
	add	r1, r1, r7
	bl	crc32_le
	mvn	r0, r0
	cmp	r0, r5
	bne	.L4098
	ldr	r3, [sp, #28]
	ldr	r0, [r3, #20]
	b	.L4097
.L4129:
	movw	r1, #:lower16:.LC259
	ldr	r3, [r5, #20]
	movt	r1, #:upper16:.LC259
	b	.L4124
.L4093:
	ldrh	fp, [r2, #2]	@ unaligned
	mov	r1, #2
	ldrh	r3, [r2], #2	@ unaligned
	b	.L4095
.L4135:
	sub	r1, fp, r8
	mov	r0, r4
	bl	skb_trim
	mov	r1, r4
	mov	r0, r7
	bl	skb_queue_tail
.L4125:
	mov	r5, #0
	b	.L4074
.L4132:
	movw	r1, #:lower16:.LC262
	mov	r2, fp
	ldr	r7, [sp, #20]
	ldr	r5, [sp, #32]
	movt	r1, #:upper16:.LC262
	ldr	r4, [sp, #24]
	ldr	r3, [r5, #20]
	b	.L4124
.L4130:
	mvn	r5, #21
	ldr	r7, [sp, #20]
	ldr	r4, [sp, #24]
	b	.L4077
.L4098:
	movw	r1, #:lower16:.LC263
	ldr	r7, [sp, #20]
	ldr	r5, [sp, #32]
	movt	r1, #:upper16:.LC263
	ldr	r4, [sp, #24]
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4077
.L4121:
	.syntax divided
@ 440 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_ncm.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L4131:
	ldr	r7, [sp, #20]
	ldr	r4, [sp, #24]
	b	.L4108
	.fnend
	.size	ncm_unwrap_ntb, .-ncm_unwrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_wrap_ntb, %function
ncm_wrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r2, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	ldrh	ip, [r2, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #168]
	ldrh	r1, [r2, #30]
	ldr	r9, [r0, #104]
	rsb	r6, ip, #0
	sub	r3, ip, #1
	ldrb	ip, [r0, #172]	@ zero_extendqisi2
	ldr	r7, [r5, #8]
	ldrh	r0, [r2, #28]
	ldr	r2, [r5, #12]
	ldr	lr, [r5, #20]
	cmp	ip, #0
	add	r3, r3, r7
	and	r3, r3, r6
	sub	r4, r0, #1
	rsb	r0, r0, #0
	sub	r7, r3, r7
	add	r6, r2, lr, lsl #3
	ldr	r2, [r10, #80]
	add	r6, r6, r3
	add	r4, r4, r6
	and	r4, r4, r0
	moveq	r0, #0
	add	r4, r4, r1
	movne	r0, #4
	add	r3, r2, r4
	sub	r6, r4, r6
	add	r3, r3, r0
	str	r0, [sp]
	cmp	r3, r9
	bhi	.L4176
	sub	r2, r9, r2
	mov	r3, #32
	sub	r2, r2, r4
	mov	r1, r4
	sub	r2, r2, r0
	mov	r0, r10
	bl	skb_copy_expand
	mov	fp, r0
	mov	r0, r10
	bl	dev_kfree_skb_any
	cmp	fp, #0
	beq	.L4136
	mov	r1, r4
	mov	r0, fp
	bl	skb_push
	cmp	r4, #0
	mov	r10, r0
	bne	.L4177
.L4140:
	ldr	r2, [r5]
	add	lr, r10, #8
	str	r2, [r10]	@ unaligned
	ldrh	r2, [r5, #8]
	strh	r2, [r10, #4]	@ unaligned
	ldr	r2, [r5, #24]
	ldr	r1, [fp, #80]
	cmp	r2, #1
	beq	.L4142
	cmp	r2, #2
	streq	r1, [r10, #8]	@ unaligned
	bne	.L4174
.L4144:
	ldr	r1, [r5, #8]
	lsl	r10, r2, #1
	ldr	ip, [r5, #28]
	add	r0, lr, r10
	add	r1, r7, r1
	cmp	ip, #1
	beq	.L4146
	cmp	ip, #2
	streq	r1, [lr, r2, lsl #1]	@ unaligned
	bne	.L4174
.L4148:
	ldr	r2, [r5, #4]
	add	r7, r7, ip, lsl #1
	uxth	r10, r4
	add	r1, r0, r7
	str	r2, [r0, r7]	@ unaligned
	ldr	r2, [r5, #8]
	add	r7, r1, #6
	sub	r2, r10, r2
	sub	r6, r2, r6
	strh	r6, [r1, #4]	@ unaligned
	ldr	r6, [r5, #32]
	ldr	r1, [r5, #36]
	ldr	r0, [r5, #40]
	ldrb	r2, [r8, #172]	@ zero_extendqisi2
	add	r6, r6, r0
	add	r6, r6, r1
	cmp	r2, #0
	lsl	r8, r6, #1
	add	r3, r7, r8
	bne	.L4178
.L4149:
	ldr	r2, [r5, #20]
	cmp	r2, #1
	beq	.L4151
	cmp	r2, #2
	streq	r4, [r7, r6, lsl #1]	@ unaligned
	bne	.L4174
.L4153:
	ldr	r0, [r5, #20]
	lsl	ip, r2, #1
	ldr	r1, [fp, #80]
	cmp	r0, #1
	sub	r4, r1, r4
	beq	.L4155
	cmp	r0, #2
	streq	r4, [r3, r2, lsl #1]	@ unaligned
	bne	.L4174
.L4157:
	ldr	r1, [fp, #80]
	cmp	r1, #1536
	bls	.L4136
	sub	r1, r9, r1
	mov	r0, fp
	bl	skb_put
	ldr	r1, [fp, #80]
	subs	r1, r9, r1
	bne	.L4179
.L4136:
	mov	r0, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4142:
	strh	r1, [r10, #8]	@ unaligned
	b	.L4144
.L4155:
	strh	r4, [r3, ip]	@ unaligned
	b	.L4157
.L4151:
	strh	r10, [r7, r8]	@ unaligned
	b	.L4153
.L4146:
	strh	r1, [lr, r10]	@ unaligned
	b	.L4148
.L4178:
	ldr	r2, [fp, #80]
	mvn	r0, #0
	str	r3, [sp, #4]
	ldr	r1, [fp, #172]
	sub	r2, r2, r4
	add	r1, r1, r4
	bl	crc32_le
	ldr	r2, [fp, #80]
	mvn	lr, r0
	mov	r0, fp
	ldr	ip, [fp, #172]
	ldr	r1, [sp]
	str	lr, [ip, r2]	@ unaligned
	bl	skb_put
	ldr	r3, [sp, #4]
	b	.L4149
.L4177:
	mov	r1, r4
	bl	__memzero
	b	.L4140
.L4179:
	bl	__memzero
	b	.L4136
.L4176:
	mov	r0, r10
	mov	fp, #0
	bl	dev_kfree_skb_any
	b	.L4136
.L4174:
	.syntax divided
@ 422 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_ncm.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	ncm_wrap_ntb, .-ncm_wrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_store, %function
remote_wakeup_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	add	r2, sp, #8
	mov	r3, #0
	movw	r1, #:lower16:.LC264
	mov	r4, r0
	str	r3, [r2, #-4]!
	mov	r0, r6
	movt	r1, #:upper16:.LC264
	bl	sscanf
	mov	r0, r4
	ldr	r3, [sp, #4]
	ldr	r2, [r0, #196]!
	cmp	r0, r2
	beq	.L4181
	cmp	r3, #0
	sub	r2, r2, #120
	bne	.L4182
.L4183:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	r3, [r2, #120]
	bic	r1, r1, #32
	cmp	r0, r3
	strb	r1, [r2, #22]
	sub	r2, r3, #120
	bne	.L4183
.L4181:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4182:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	r3, [r2, #120]
	orr	r1, r1, #32
	cmp	r0, r3
	strb	r1, [r2, #22]
	sub	r2, r3, #120
	bne	.L4182
	b	.L4181
	.fnend
	.size	remote_wakeup_store, .-remote_wakeup_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_store, %function
bDeviceProtocol_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC65
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC65
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4191
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #230]
.L4189:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4191:
	mvn	r0, #0
	b	.L4189
	.fnend
	.size	bDeviceProtocol_store, .-bDeviceProtocol_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_store, %function
bDeviceSubClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC65
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC65
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4195
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #229]
.L4193:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4195:
	mvn	r0, #0
	b	.L4193
	.fnend
	.size	bDeviceSubClass_store, .-bDeviceSubClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_store, %function
bDeviceClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC65
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC65
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4199
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #228]
.L4197:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4199:
	mvn	r0, #0
	b	.L4197
	.fnend
	.size	bDeviceClass_store, .-bDeviceClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_store, %function
bcdDevice_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC71
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC71
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4203
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #236]	@ movhi
.L4201:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4203:
	mvn	r0, #0
	b	.L4201
	.fnend
	.size	bcdDevice_store, .-bcdDevice_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_store, %function
idProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC71
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC71
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4207
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #234]	@ movhi
.L4205:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4207:
	mvn	r0, #0
	b	.L4205
	.fnend
	.size	idProduct_store, .-idProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_store, %function
idVendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC71
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC71
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4211
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #232]	@ movhi
.L4209:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4211:
	mvn	r0, #0
	b	.L4209
	.fnend
	.size	idVendor_store, .-idVendor_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_store, %function
mass_storage_inquiry_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #28
	ldr	r3, [r0, #4]
	bhi	.L4216
	ldr	r2, [r3, #96]
	movw	r1, #:lower16:.LC265
	mov	r0, r5
	movt	r1, #:upper16:.LC265
	add	r2, r2, #180
	bl	sscanf
	cmp	r0, #1
	bne	.L4216
	mov	r0, r4
.L4213:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4216:
	mvn	r0, #21
	b	.L4213
	.fnend
	.size	mass_storage_inquiry_store, .-mass_storage_inquiry_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ethaddr_store, %function
ncm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC73
	movt	r1, #:upper16:.LC73
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_ethaddr_store, .-ncm_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_store, %function
ecm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC73
	movt	r1, #:upper16:.LC73
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_store, .-ecm_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_store, %function
rndis_max_pkt_per_xfer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC264
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC264
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	strbeq	r3, [r6, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_max_pkt_per_xfer_store, .-rndis_max_pkt_per_xfer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_store, %function
rndis_vendorID_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC266
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC266
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streq	r3, [r6, #8]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_vendorID_store, .-rndis_vendorID_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_store, %function
rndis_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC73
	movt	r1, #:upper16:.LC73
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_ethaddr_store, .-rndis_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_store, %function
rndis_wceis_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC264
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC264
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	bne	.L4240
	ldr	r3, [sp, #4]
	mov	r0, r4
	adds	r3, r3, #0
	movne	r3, #1
	strb	r3, [r6, #269]
.L4238:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4240:
	mvn	r0, #21
	b	.L4238
	.fnend
	.size	rndis_wceis_store, .-rndis_wceis_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_store, %function
rndis_manufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #255
	ldr	r2, [r0, #4]
	bhi	.L4244
	movw	r1, #:lower16:.LC267
	add	r2, r2, #13
	mov	r0, r5
	movt	r1, #:upper16:.LC267
	bl	sscanf
	cmp	r0, #1
	moveq	r0, r4
	mvnne	r0, #0
.L4242:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4244:
	mvn	r0, #21
	b	.L4242
	.fnend
	.size	rndis_manufacturer_store, .-rndis_manufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_store, %function
iSerial_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4249
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L4254
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L4254
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4249:
	mvn	r0, #21
	bx	lr
.L4255:
	.align	2
.L4254:
	.word	.LANCHOR1+2416
	.fnend
	.size	iSerial_store, .-iSerial_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_store, %function
iProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4258
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L4263
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L4263
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4258:
	mvn	r0, #21
	bx	lr
.L4264:
	.align	2
.L4263:
	.word	.LANCHOR1+2672
	.fnend
	.size	iProduct_store, .-iProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_store, %function
iManufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4267
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L4272
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L4272
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4267:
	mvn	r0, #21
	bx	lr
.L4273:
	.align	2
.L4272:
	.word	.LANCHOR1+2928
	.fnend
	.size	iManufacturer_store, .-iManufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_store, %function
ffs_aliases_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movt	r1, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	str	r8, [sp, #16]
	mov	r5, r3
	ldr	r3, [r4]
	str	lr, [sp, #20]
	ldr	r6, [r1, #2228]
	.pad #264
	sub	sp, sp, #264
	mov	r8, r2
	str	r3, [sp, #260]
	sub	r7, r6, #184
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r6, #-192]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L4279
	mov	r1, r8
	mov	r2, #256
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	mov	r1, r0
	mov	r2, #256
	add	r0, r6, #8
	bl	strlcpy
	mov	r0, r7
	bl	mutex_unlock
	mov	r0, r5
.L4274:
	ldr	r2, [sp, #260]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L4280
	add	sp, sp, #264
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4279:
	mov	r0, r7
	bl	mutex_unlock
	mvn	r0, #15
	b	.L4274
.L4280:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_aliases_store, .-ffs_aliases_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_store, %function
functions_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 560
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r1, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r1, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #564
	sub	sp, sp, #564
	str	r3, [sp, #24]
	ldr	r3, [r1]
	str	r1, [sp, #28]
	str	r3, [sp, #556]
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r8, r0
	add	fp, r0, #196
	mov	r0, r3
	str	r3, [sp, #20]
	bl	mutex_lock
	ldrb	r5, [r8, #16]	@ zero_extendqisi2
	cmp	r5, #0
	bne	.L4324
	ldr	r4, [r8, #196]
	cmp	fp, r4
	sub	r4, r4, #120
	beq	.L4285
	mov	r7, #256
	mov	r6, #512
.L4284:
	mov	r10, r4
	ldr	r3, [r10, #112]!
	cmp	r10, r3
	beq	.L4287
.L4286:
	ldr	r2, [r3, #-4]
	sub	r0, r3, #4
	str	r5, [r2, #20]
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r7, [r3]
	str	r6, [r3, #4]
	bl	kfree
	ldr	r3, [r4, #112]
	cmp	r3, r10
	bne	.L4286
.L4287:
	ldr	r3, [r4, #120]
	str	r10, [r4, #112]
	str	r10, [r4, #116]
	cmp	fp, r3
	sub	r4, r3, #120
	bne	.L4284
.L4285:
	mov	r2, #256
	mov	r1, r9
	add	r0, sp, #44
	mov	r10, #0
	bl	strlcpy
	add	r0, sp, #44
	bl	strim
	movw	r2, #:lower16:.LC268
	add	r3, sp, #560
	str	fp, [sp, #4]
	movt	r2, #:upper16:.LC268
	cmp	r0, #0
	str	r0, [r3, #-524]!
	str	r3, [sp, #8]
	str	r2, [sp, #12]
	beq	.L4325
.L4302:
	ldrd	r0, [sp, #8]
	bl	strsep
	cmp	r0, #0
	str	r0, [sp, #32]
	beq	.L4323
	ldr	r3, [sp, #4]
	ldr	r3, [r3]
	cmp	r3, fp
	beq	.L4291
	sub	r9, r3, #120
	str	r3, [sp, #4]
.L4292:
	movw	r3, #:lower16:.LC273
	cmp	r0, #0
	movt	r3, #:upper16:.LC273
	movw	r5, #:lower16:.LC270
	movt	r5, #:upper16:.LC270
	str	r3, [sp, #16]
	beq	.L4326
.L4301:
	mov	r1, r5
	add	r0, sp, #32
	add	r7, sp, #300
	bl	strsep
	mov	r6, r0
	mov	r2, #256
	mov	r0, r7
	add	r1, r8, #216
	bl	strlcpy
	add	r4, sp, #560
	str	r7, [r4, #-520]!
.L4297:
	mov	r1, r5
	mov	r0, r4
	bl	strsep
	subs	r1, r0, #0
	beq	.L4295
	mov	r0, r6
	bl	strcmp
	cmp	r0, #0
	beq	.L4296
.L4295:
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L4297
	mov	r2, r6
	mov	r1, r9
	mov	r0, r8
	bl	android_enable_function
	cmp	r0, #0
	bne	.L4327
.L4300:
	ldr	r0, [sp, #32]
	cmp	r0, #0
	bne	.L4301
.L4326:
	movw	r2, #:lower16:.LC274
	mov	r1, r9
	movt	r2, #:upper16:.LC274
	mov	r0, r8
	bl	android_enable_function
.L4323:
	ldr	r0, [sp, #36]
	cmp	r0, #0
	bne	.L4302
.L4325:
	ldr	r6, [sp, #4]
	ldr	r3, [r6]
	cmp	fp, r3
	beq	.L4303
	mov	r5, #256
	mov	r4, #512
.L4304:
	ldm	r3, {r1, r2}
	sub	r0, r3, #120
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r5, [r3]
	str	r4, [r3, #4]
	ldr	r3, [r8, #204]
	sub	r3, r3, #1
	str	r3, [r8, #204]
	bl	kfree
	ldr	r3, [r6]
	cmp	r3, fp
	bne	.L4304
.L4303:
	ldr	r0, [sp, #20]
	bl	mutex_unlock
	ldr	r0, [sp, #24]
.L4281:
	ldr	r3, [sp, #28]
	ldr	r2, [sp, #556]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L4328
	add	sp, sp, #564
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4296:
	cmp	r10, #0
	beq	.L4329
.L4306:
	mov	r10, #1
	b	.L4300
.L4329:
	movw	r2, #:lower16:.LC271
	mov	r1, r9
	movt	r2, #:upper16:.LC271
	mov	r0, r8
	bl	android_enable_function
	subs	r2, r0, #0
	beq	.L4306
	movw	r0, #:lower16:.LC272
	ldr	r1, .L4331
	movt	r0, #:upper16:.LC272
	bl	printk
	b	.L4300
.L4291:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L4309
	mov	r2, #128
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r9, r0, #0
	beq	.L4330
.L4293:
	ldr	ip, [r8]
	movw	r1, #:lower16:android_unbind_config
	add	r2, r9, #112
	ldr	r0, [r8, #204]
	movt	r1, #:upper16:android_unbind_config
	add	r3, r9, #120
	add	r0, r0, #1
	str	r0, [r8, #204]
	str	ip, [r9]
	str	r1, [r9, #12]
	ldr	r1, [r8, #204]
	strb	r1, [r9, #20]
	str	r2, [r9, #112]
	str	r2, [r9, #116]
	ldr	r2, [r8, #200]
	str	r3, [r8, #200]
	str	fp, [r9, #120]
	str	r2, [r9, #124]
	str	r3, [r2]
	ldr	r3, [sp, #4]
	ldr	r0, [sp, #32]
	ldr	r3, [r3]
	str	r3, [sp, #4]
	b	.L4292
.L4309:
	mov	r9, #16
	b	.L4293
.L4324:
	ldr	r0, [sp, #20]
	bl	mutex_unlock
	mvn	r0, #15
	b	.L4281
.L4327:
	mov	r3, r0
	mov	r2, r6
	ldr	r1, .L4331
	ldr	r0, [sp, #16]
	bl	printk
	b	.L4300
.L4328:
	bl	__stack_chk_fail
.L4330:
	ldr	r2, .L4331+4
	movw	r0, #:lower16:.LC269
	mvn	r9, #11
	movt	r0, #:upper16:.LC269
	mov	r1, r2
	bl	printk
	ldr	r3, [sp, #4]
	ldr	r0, [sp, #32]
	ldr	r3, [r3]
	str	r3, [sp, #4]
	b	.L4292
.L4332:
	.align	2
.L4331:
	.word	.LANCHOR2+2324
	.word	.LANCHOR2+2300
	.fnend
	.size	functions_store, .-functions_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind, %function
android_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r4, [r8, #2232]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	fp, [r0]
	str	r0, [r4, #-200]
	ldr	r3, [fp]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L4334
	mov	r1, #0
	mov	r0, fp
	blx	r3
.L4334:
	ldr	r3, [r8, #3728]
	cmp	r3, #1
	beq	.L4335
.L4341:
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L4337
	add	r2, r3, #1
	movw	r4, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r4, #:upper16:.LANCHOR0
	cmp	r2, #254
	strb	r2, [r4, #238]
	strb	r2, [r4, #924]
	strb	r2, [r7, #48]
	beq	.L4337
	add	r3, r3, #2
	movw	r1, #:lower16:.LC279
	ldr	r0, .L4442
	uxtb	r3, r3
	movt	r1, #:upper16:.LC279
	mov	r2, #255
	strb	r3, [r7, #48]
	strb	r3, [r4, #932]
	strb	r3, [r4, #239]
	bl	strlcpy
	movw	r1, #:lower16:.LC279
	mov	r2, #255
	ldr	r0, .L4442+4
	movt	r1, #:upper16:.LC279
	bl	strlcpy
	movw	r1, #:lower16:.LC280
	mov	r2, #255
	ldr	r0, .L4442+8
	movt	r1, #:upper16:.LC280
	bl	strlcpy
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L4337
	add	r3, r3, #1
	movw	r0, #:lower16:.LC281
	uxtb	r3, r3
	movt	r0, #:upper16:.LC281
	strb	r3, [r7, #48]
	ldr	r5, [fp, #28]
	strb	r3, [r4, #240]
	strb	r3, [r4, #940]
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	bne	.L4437
	movw	r3, #513
.L4363:
	mov	r6, #0
	strh	r3, [r4, #236]	@ movhi
.L4333:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4437:
	movw	r0, #:lower16:.LC282
	mov	r1, r5
	movt	r0, #:upper16:.LC282
	bl	strcmp
	cmp	r0, #0
	beq	.L4367
	movw	r0, #:lower16:.LC283
	mov	r1, r5
	movt	r0, #:upper16:.LC283
	bl	strcmp
	cmp	r0, #0
	beq	.L4368
	movw	r0, #:lower16:.LC284
	mov	r1, r5
	movt	r0, #:upper16:.LC284
	bl	strcmp
	cmp	r0, #0
	beq	.L4369
	movw	r0, #:lower16:.LC285
	mov	r1, r5
	movt	r0, #:upper16:.LC285
	bl	strcmp
	cmp	r0, #0
	beq	.L4370
	movw	r0, #:lower16:.LC286
	mov	r1, r5
	movt	r0, #:upper16:.LC286
	bl	strcmp
	cmp	r0, #0
	beq	.L4371
	movw	r0, #:lower16:.LC287
	mov	r1, r5
	movt	r0, #:upper16:.LC287
	bl	strcmp
	cmp	r0, #0
	beq	.L4372
	movw	r0, #:lower16:.LC288
	mov	r1, r5
	movt	r0, #:upper16:.LC288
	bl	strcmp
	cmp	r0, #0
	beq	.L4373
	movw	r0, #:lower16:.LC289
	mov	r1, r5
	movt	r0, #:upper16:.LC289
	bl	strcmp
	cmp	r0, #0
	beq	.L4374
	movw	r0, #:lower16:.LC290
	mov	r1, r5
	movt	r0, #:upper16:.LC290
	bl	strcmp
	cmp	r0, #0
	beq	.L4375
	movw	r0, #:lower16:.LC291
	mov	r1, r5
	movt	r0, #:upper16:.LC291
	bl	strcmp
	cmp	r0, #0
	beq	.L4376
	movw	r0, #:lower16:.LC292
	mov	r1, r5
	movt	r0, #:upper16:.LC292
	bl	strcmp
	cmp	r0, #0
	beq	.L4377
	movw	r0, #:lower16:.LC293
	mov	r1, r5
	movt	r0, #:upper16:.LC293
	bl	strcmp
	cmp	r0, #0
	beq	.L4378
	movw	r0, #:lower16:.LC294
	mov	r1, r5
	movt	r0, #:upper16:.LC294
	bl	strcmp
	cmp	r0, #0
	beq	.L4379
	movw	r0, #:lower16:.LC295
	mov	r1, r5
	movt	r0, #:upper16:.LC295
	bl	strcmp
	cmp	r0, #0
	beq	.L4380
	movw	r0, #:lower16:.LC296
	mov	r1, r5
	movt	r0, #:upper16:.LC296
	bl	strcmp
	cmp	r0, #0
	beq	.L4381
	movw	r0, #:lower16:.LC297
	mov	r1, r5
	movt	r0, #:upper16:.LC297
	bl	strcmp
	cmp	r0, #0
	beq	.L4382
	movw	r0, #:lower16:.LC298
	mov	r1, r5
	movt	r0, #:upper16:.LC298
	bl	strcmp
	cmp	r0, #0
	beq	.L4383
	movw	r0, #:lower16:.LC299
	mov	r1, r5
	movt	r0, #:upper16:.LC299
	bl	strcmp
	cmp	r0, #0
	beq	.L4384
	movw	r0, #:lower16:.LC300
	mov	r1, r5
	movt	r0, #:upper16:.LC300
	bl	strcmp
	cmp	r0, #0
	beq	.L4385
	movw	r0, #:lower16:.LC301
	mov	r1, r5
	movt	r0, #:upper16:.LC301
	bl	strcmp
	cmp	r0, #0
	beq	.L4386
	movw	r0, #:lower16:.LC302
	mov	r1, r5
	movt	r0, #:upper16:.LC302
	bl	strcmp
	cmp	r0, #0
	beq	.L4387
	movw	r0, #:lower16:.LC303
	mov	r1, r5
	movt	r0, #:upper16:.LC303
	bl	strcmp
	cmp	r0, #0
	beq	.L4388
	movw	r0, #:lower16:.LC304
	mov	r1, r5
	movt	r0, #:upper16:.LC304
	bl	strcmp
	cmp	r0, #0
	beq	.L4389
	movw	r0, #:lower16:.LC305
	mov	r1, r5
	movt	r0, #:upper16:.LC305
	bl	strcmp
	cmp	r0, #0
	beq	.L4390
	movw	r0, #:lower16:.LC306
	mov	r1, r5
	movt	r0, #:upper16:.LC306
	bl	strcmp
	cmp	r0, #0
	beq	.L4391
	movw	r0, #:lower16:.LC307
	mov	r1, r5
	movt	r0, #:upper16:.LC307
	bl	strcmp
	cmp	r0, #0
	moveq	r3, #564
	beq	.L4363
	ldr	r2, .L4442+12
	movw	r0, #:lower16:.LC308
	mov	r3, r5
	movt	r0, #:upper16:.LC308
	mov	r6, #0
	add	r1, r2, #16
	bl	printk
	movw	r3, #39321
	movt	r3, 65535
	strh	r3, [r4, #236]	@ movhi
	b	.L4333
.L4367:
	movw	r3, #514
	b	.L4363
.L4335:
	ldr	r1, [r4, #-204]
	ldr	r3, [r8, #2228]
	ldr	r2, .L4442+16
	mov	r0, r1
	sub	r1, r3, #208
	cmp	r3, r2
	str	r1, [sp, #8]
	beq	.L4338
	ldr	r3, [r3, #-200]
	cmp	r7, r3
	bne	.L4339
	b	.L4338
.L4342:
	ldr	r3, [r3, #-200]
	cmp	r7, r3
	beq	.L4435
.L4339:
	ldr	r3, [r1, #208]
	cmp	r3, r2
	sub	r1, r3, #208
	bne	.L4342
.L4435:
	str	r1, [sp, #8]
.L4338:
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L4341
	movw	r5, #:lower16:.LC275
	mov	r9, #1
	str	fp, [sp, #12]
	movt	r5, #:upper16:.LC275
	mov	r10, r0
.L4340:
	mov	r1, r5
	mov	r0, #208
	ldr	r2, [r4]
	bl	kasprintf
	cmp	r0, #0
	mov	r3, #0
	str	r0, [r4, #12]
	str	r3, [r4, #20]
	beq	.L4365
	ldr	r3, [sp, #8]
	mov	r2, r9
	ldr	r1, [r3, #12]
	str	r0, [sp]
	mov	r3, r4
	ldr	r0, [r8, #3732]
	bl	device_create
	cmn	r0, #4096
	str	r0, [r4, #8]
	bhi	.L4438
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L4346
	mov	r1, r7
	mov	r0, r4
	blx	r3
	cmp	r0, #0
	bne	.L4439
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L4350
	ldr	r1, [r2]
	add	r6, r2, #4
	cmp	r1, #0
	bne	.L4436
	b	.L4350
.L4440:
	cmp	r0, #0
	bne	.L4432
	mov	r6, fp
.L4436:
	ldr	r0, [r4, #8]
.L4354:
	mov	fp, r6
	bl	device_create_file
	ldr	r1, [fp], #4
	cmp	r1, #0
	bne	.L4440
	cmp	r0, #0
	bne	.L4432
.L4350:
	add	r9, r9, #1
	add	r3, r10, r9, lsl #2
	ldr	r4, [r3, #-4]
	cmp	r4, #0
	bne	.L4340
	ldr	fp, [sp, #12]
	b	.L4341
.L4368:
	movw	r3, #515
	b	.L4363
.L4432:
	ldr	r2, .L4442+20
	mov	r10, r6
	mov	r6, r0
	movw	r0, #:lower16:.LC278
	ldr	r3, [r4]
	mov	r5, fp
	movt	r0, #:upper16:.LC278
	ldr	fp, [sp, #12]
	sub	r9, r10, #4
	mov	r1, r2
	bl	printk
	ldr	r3, [r4, #16]
	ldr	r1, [r5, #-8]
	cmp	r9, r3
	beq	.L4356
.L4355:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r9], #-4
	ldr	r3, [r4, #16]
	cmp	r9, r3
	bne	.L4355
.L4356:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L4348
	mov	r0, r4
	blx	r3
.L4348:
	ldr	r3, [r4, #8]
	ldr	r0, [r8, #3732]
	ldr	r1, [r3, #296]
	bl	device_destroy
	b	.L4345
.L4438:
	ldr	r2, .L4442+20
	movw	r0, #:lower16:.LC276
	movt	r0, #:upper16:.LC276
	ldr	r3, [r4, #12]
	ldr	fp, [sp, #12]
	mov	r1, r2
	bl	printk
	ldr	r6, [r4, #8]
.L4345:
	mov	r3, #0
	ldr	r0, [r4, #12]
	str	r3, [r4, #8]
	bl	kfree
.L4343:
	ldr	r3, [sp, #8]
	ldr	r9, [r3, #4]
	sub	r9, r9, #4
.L4357:
	ldr	r4, [r9, #4]!
	cmp	r4, #0
	beq	.L4441
.L4361:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L4357
	ldr	r1, [r3, #296]
	ldr	r0, [r8, #3732]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L4359
	mov	r0, r4
	blx	r3
.L4359:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L4357
	ldr	r1, [r5]
	add	r5, r5, #4
	cmp	r1, #0
	beq	.L4357
.L4360:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r5], #4
	cmp	r1, #0
	bne	.L4360
	ldr	r4, [r9, #4]!
	cmp	r4, #0
	bne	.L4361
.L4441:
	cmp	r6, #0
	bne	.L4333
	b	.L4341
.L4346:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L4350
	ldr	r1, [r2]
	add	r6, r2, #4
	cmp	r1, #0
	bne	.L4354
	b	.L4350
.L4337:
	mvn	r6, #18
	b	.L4333
.L4369:
	movw	r3, #518
	b	.L4363
.L4370:
	mov	r3, #520
	b	.L4363
.L4365:
	mvn	r6, #11
	ldr	fp, [sp, #12]
	b	.L4343
.L4371:
	movw	r3, #529
	b	.L4363
.L4372:
	movw	r3, #530
	b	.L4363
.L4373:
	movw	r3, #531
	b	.L4363
.L4374:
	mov	r3, #532
	b	.L4363
.L4375:
	movw	r3, #534
	b	.L4363
.L4376:
	mov	r3, #536
	b	.L4363
.L4439:
	ldr	r2, .L4442+20
	mov	r6, r0
	movw	r0, #:lower16:.LC277
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC277
	ldr	fp, [sp, #12]
	mov	r1, r2
	bl	printk
	b	.L4348
.L4377:
	movw	r3, #537
	b	.L4363
.L4390:
	movw	r3, #562
	b	.L4363
.L4389:
	movw	r3, #561
	b	.L4363
.L4388:
	mov	r3, #560
	b	.L4363
.L4387:
	movw	r3, #553
	b	.L4363
.L4386:
	mov	r3, #552
	b	.L4363
.L4385:
	movw	r3, #551
	b	.L4363
.L4391:
	movw	r3, #563
	b	.L4363
.L4378:
	mov	r3, #544
	b	.L4363
.L4380:
	movw	r3, #546
	b	.L4363
.L4379:
	movw	r3, #545
	b	.L4363
.L4384:
	movw	r3, #550
	b	.L4363
.L4383:
	movw	r3, #549
	b	.L4363
.L4382:
	mov	r3, #548
	b	.L4363
.L4381:
	movw	r3, #547
	b	.L4363
.L4443:
	.align	2
.L4442:
	.word	.LANCHOR1+2928
	.word	.LANCHOR1+2672
	.word	.LANCHOR1+2416
	.word	.LANCHOR2+2364
	.word	.LANCHOR1+2228
	.word	.LANCHOR2+2340
	.fnend
	.size	android_bind, .-android_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_start_work, %function
acc_start_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	r3, #:lower16:.LC309
	movt	r2, #:upper16:.LANCHOR0
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r2, #660]
	movt	r3, #:upper16:.LC309
	mov	ip, #0
	mov	r1, #2
	mov	r2, sp
	stm	sp, {r3, ip}
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	acc_start_work, .-acc_start_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_work, %function
android_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r2, #:lower16:.LC310
	movw	r3, #:lower16:.LC312
	strd	r6, [sp, #8]
	movt	r2, #:upper16:.LC310
	mov	r4, r0
	strd	r8, [sp, #16]
	movt	r3, #:upper16:.LC312
	movw	r1, #:lower16:.LC313
	strd	r10, [sp, #24]
	movt	r1, #:upper16:.LC313
	str	lr, [sp, #32]
	ldr	r5, [r0, #-172]
	.pad #52
	sub	sp, sp, #52
	movw	r0, #:lower16:.LC311
	movt	r0, #:upper16:.LC311
	str	r2, [sp, #8]
	movw	r2, #:lower16:.LC314
	movt	r2, #:upper16:.LC314
	str	r3, [sp, #24]
	add	r7, r5, #60
	mov	r3, #0
	str	r0, [sp, #16]
	mov	r0, r7
	str	r3, [sp, #12]
	str	r3, [sp, #20]
	str	r3, [sp, #28]
	str	r1, [sp, #32]
	str	r3, [sp, #36]
	strd	r2, [sp, #40]
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #-125]	@ zero_extendqisi2
	mov	r9, r0
	ldrb	r6, [r4, #-126]	@ zero_extendqisi2
	cmp	r3, r6
	ldr	r3, [r5, #12]
	beq	.L4447
	cmp	r3, #0
	beq	.L4498
	movw	r1, #:lower16:.LC315
	mov	r2, #3
	movt	r1, #:upper16:.LC315
	sub	r0, r4, #124
	bl	strncmp
	cmp	r0, #0
	beq	.L4449
	cmp	r6, #0
	eor	r10, r6, #1
	moveq	r2, #4
	addeq	r8, sp, #40
	beq	.L4451
	mov	r2, #3
	add	r8, sp, #32
.L4451:
	ldrb	r3, [r4, #-128]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR1
	mov	r1, r9
	movt	r5, #:upper16:.LANCHOR1
	mov	r0, r7
	str	r2, [r5, #3736]
	strb	r3, [r4, #-127]
	strb	r6, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-132]
	cmp	r3, #0
	addne	fp, sp, #16
	beq	.L4464
.L4457:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r2, [r6, #956]
	cmp	r2, r10
	beq	.L4456
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L4456
.L4470:
	cmp	r10, #0
	sub	r0, r4, #116
	addne	r1, r1, #1
	mvneq	r1, #0
	bl	pm_qos_update_request
	str	r10, [r6, #956]
.L4456:
	cmp	r8, fp
	bne	.L4464
.L4458:
	ldr	r3, [r5, #3740]
	cmp	r3, #0
	bne	.L4463
	mov	r8, fp
.L4464:
	ldr	r3, [r5, #3736]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L4465
	ldr	r0, [r4, #-168]
	mov	r2, r8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r3, [r5, #3736]
	str	r3, [r5, #3740]
.L4465:
	ldr	r2, .L4501
	movw	r0, #:lower16:.LC317
	movt	r0, #:upper16:.LC317
	ldr	r3, [r8]
	mov	r1, r2
	bl	printk
.L4446:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4447:
	cmp	r3, #0
	ldrb	r10, [r4, #-128]	@ zero_extendqisi2
	beq	.L4448
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #2
	strb	r10, [r4, #-127]
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r0
	mov	r0, r7
	str	r3, [r5, #3736]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r5, #3740]
	cmp	r6, #2
	beq	.L4499
.L4453:
	mov	r0, #50
	add	r8, sp, #24
	bl	msleep
	b	.L4464
.L4449:
	cmp	r6, #0
	bne	.L4500
	ldrb	r3, [r4, #-128]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR1
	mov	r2, #4
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r9
	mov	r0, r7
	add	r8, sp, #40
	str	r2, [r5, #3736]
	strb	r3, [r4, #-127]
	strb	r6, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	b	.L4464
.L4498:
	ldrb	r10, [r4, #-128]	@ zero_extendqisi2
.L4448:
	ldrb	r3, [r4, #-127]	@ zero_extendqisi2
	cmp	r3, r10
	beq	.L4454
	cmp	r10, #0
	movw	r5, #:lower16:.LANCHOR1
	bne	.L4455
	movt	r5, #:upper16:.LANCHOR1
	add	r8, sp, #8
	add	fp, sp, #16
	str	r10, [r5, #3736]
.L4467:
	strb	r10, [r4, #-127]
	mov	r1, r9
	mov	r0, r7
	strb	r6, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-132]
	cmp	r3, #0
	movne	r10, #0
	bne	.L4457
	b	.L4456
.L4454:
	mov	r1, r9
	mov	r0, r7
	strb	r6, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldrb	r1, [r4, #-127]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC316
	ldr	r2, .L4501
	movt	r0, #:upper16:.LC316
	ldr	ip, [r5, #12]
	ldrb	r3, [r4, #-128]	@ zero_extendqisi2
	stm	sp, {r1, ip}
	mov	r1, r2
	bl	printk
	b	.L4446
.L4455:
	mov	r8, #1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC315
	mov	r2, #3
	movt	r1, #:upper16:.LC315
	sub	r0, r4, #124
	str	r8, [r5, #3736]
	bl	strncmp
	cmp	r0, #0
	addeq	fp, sp, #16
	moveq	r8, fp
	beq	.L4467
	mov	r1, r9
	mov	r0, r7
	strb	r8, [r4, #-127]
	strb	r6, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-132]
	cmp	r3, #0
	beq	.L4497
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r2, [r6, #956]
	cmp	r2, #1
	beq	.L4497
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L4497
	add	fp, sp, #16
	mov	r10, r8
	mov	r8, fp
	b	.L4470
.L4500:
	ldrb	r2, [r4, #-128]	@ zero_extendqisi2
	mov	ip, #1
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #3
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r9
	mov	r0, r7
	add	r8, sp, #32
	str	r3, [r5, #3736]
	strb	r2, [r4, #-127]
	strb	ip, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	b	.L4464
.L4497:
	add	fp, sp, #16
	b	.L4458
.L4499:
	ldr	r2, .L4501
	movw	r0, #:lower16:.LC318
	movt	r0, #:upper16:.LC318
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-168]
	mov	r1, r6
	add	r2, sp, #8
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r0, #20
	bl	msleep
	b	.L4453
.L4463:
	ldr	r2, .L4501
	movw	r0, #:lower16:.LC318
	mov	r8, fp
	movt	r0, #:upper16:.LC318
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-168]
	add	r2, sp, #8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r0, #20
	bl	msleep
	b	.L4464
.L4502:
	.align	2
.L4501:
	.word	.LANCHOR2+2396
	.fnend
	.size	android_work, .-android_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	hid_function_cleanup, %function
hid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	ghid_cleanup
	.fnend
	.size	hid_function_cleanup, .-hid_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	hid_function_init, %function
hid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1]
	mov	r1, #2
	b	ghid_setup
	.fnend
	.size	hid_function_init, .-hid_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_send_hid_event, %function
acc_complete_send_hid_event:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #32]
	ldr	ip, [r1, #44]
	ldr	r3, [r1, #48]
	cmp	ip, #0
	bne	.L4509
	mov	r2, r1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r2]
	mov	r1, ip
	ldr	r0, [r0, #8]
	str	lr, [sp]
	bl	hid_report_raw_event
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L4509:
	movw	r0, #:lower16:.LC319
	mov	r1, ip
	movt	r0, #:upper16:.LC319
	b	printk
	.fnend
	.size	acc_complete_send_hid_event, .-acc_complete_send_hid_event
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_work, %function
acc_hid_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r3, #2324]
	.pad #28
	sub	sp, sp, #28
	add	r7, sp, #8
	str	r7, [sp, #8]
	add	r6, r4, #80
	str	r7, [sp, #12]
	add	r8, r4, #1760
	mov	r0, r6
	add	r8, r8, #4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1764]
	mov	r1, r0
	ldr	r2, [r3]
	cmp	r3, r8
	movne	ip, r2
	bne	.L4511
	b	.L4512
.L4513:
	cmp	ip, r8
	ldr	r2, [r2]
	beq	.L4512
.L4514:
	mov	r3, ip
	mov	ip, r2
.L4511:
	ldr	lr, [r3, #24]
	ldr	r5, [r3, #28]
	cmp	r5, lr
	bne	.L4513
	ldr	lr, [r3, #4]
	cmp	ip, r8
	str	lr, [r2, #4]
	str	r2, [lr]
	ldr	lr, [sp, #8]
	str	r3, [lr, #4]
	str	lr, [r3]
	str	r7, [r3, #4]
	str	r3, [sp, #8]
	ldr	r2, [r2]
	bne	.L4514
.L4512:
	ldr	r2, [r4, #1772]
	add	r3, r4, #1760
	add	r3, r3, #12
	cmp	r3, r2
	addeq	r8, sp, #16
	streq	r8, [sp, #16]
	streq	r8, [sp, #20]
	beq	.L4516
	ldr	r0, [r4, #1776]
	add	r8, sp, #24
	str	r2, [r8, #-8]!
	str	r0, [sp, #20]
	str	r8, [r2, #4]
	ldr	r2, [sp, #20]
	str	r8, [r2]
	str	r3, [r4, #1772]
	str	r3, [r4, #1776]
.L4516:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	fp, [sp, #8]
	cmp	fp, r7
	ldr	r5, [fp]
	beq	.L4517
	movw	r3, #:lower16:.LC321
	movw	r9, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LC321
	movt	r9, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
	b	.L4523
.L4529:
	mov	r5, r2
.L4523:
	bl	hid_allocate_device
	cmn	r0, #4096
	mov	r10, r0
	mvn	r1, #0
	mov	ip, #3
	bhi	.L4532
	ldr	r3, .L4534
	strh	ip, [r0, #32]	@ movhi
	ldr	lr, [r9, #660]
	str	r1, [r0, #36]
	str	r1, [r0, #40]
	str	fp, [r0, #3852]
	str	lr, [r0, #3200]
	str	r3, [r0, #3556]
	bl	hid_add_device
	subs	r1, r0, #0
	streq	r10, [fp, #8]
	bne	.L4533
.L4520:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	lr, [fp]
	add	r2, r4, #1744
	mov	r1, r0
	ldr	ip, [fp, #4]
	add	r2, r2, #12
	mov	r0, r6
	str	ip, [lr, #4]
	str	lr, [ip]
	ldr	ip, [r4, #1756]
	str	fp, [ip, #4]
	str	ip, [fp]
	str	r2, [fp, #4]
	str	fp, [r4, #1756]
	bl	_raw_spin_unlock_irqrestore
.L4522:
	cmp	r5, r7
	mov	fp, r5
	ldr	r2, [r5]
	bne	.L4529
.L4517:
	ldr	r4, [sp, #16]
	ldr	r5, [r4]
	cmp	r4, r8
	movne	r9, #256
	movne	r7, #512
	movne	r6, r5
	bne	.L4524
	b	.L4510
.L4527:
	mov	r4, r6
	mov	r6, r5
.L4524:
	ldr	r3, [r4, #4]
	str	r3, [r5, #4]
	str	r5, [r3]
	ldr	r3, [r4, #8]
	str	r9, [r4]
	str	r7, [r4, #4]
	subs	r0, r3, #0
	beq	.L4526
	bl	hid_destroy_device
.L4526:
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	bl	kfree
	cmp	r6, r8
	ldr	r5, [r5]
	bne	.L4527
.L4510:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4532:
	cmp	r0, #0
	beq	.L4520
	b	.L4519
.L4533:
	movw	r0, #:lower16:.LC320
	movt	r0, #:upper16:.LC320
	bl	printk
	mov	r0, r10
	bl	hid_destroy_device
.L4519:
	mov	r1, fp
	ldr	r0, [sp, #4]
	bl	printk
	ldr	r0, [fp, #20]
	bl	kfree
	mov	r0, fp
	bl	kfree
	b	.L4522
.L4535:
	.align	2
.L4534:
	.word	.LANCHOR0+960
	.fnend
	.size	acc_hid_work, .-acc_hid_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_parse, %function
acc_hid_parse:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #3852]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #24]
	bl	hid_parse_report
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	acc_hid_parse, .-acc_hid_parse
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_file, %function
fsg_show_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r6, r0
	bl	down_read
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	moveq	r4, r0
	strbeq	r0, [r5]
	beq	.L4541
	add	r0, r0, #8
	movw	r2, #4095
	mov	r1, r5
	bl	d_path
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L4541
	bl	strlen
	mov	r7, r0
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	bl	memmove
	add	r4, r7, #1
	mov	r2, #10
	mov	r3, #0
	strb	r2, [r5, r7]
	strb	r3, [r5, r4]
.L4541:
	mov	r0, r6
	bl	up_read
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_file, .-fsg_show_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_ro, %function
fsg_store_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L4548
.L4543:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4548:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4549
.L4545:
	mov	r0, r5
	bl	up_read
	b	.L4543
.L4549:
	ldr	r2, [sp, #4]
	mov	r4, r7
	ldrb	r3, [r6, #-24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	strb	r3, [r6, #-24]
	b	.L4545
	.fnend
	.size	fsg_store_ro, .-fsg_store_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_cdrom, %function
fsg_store_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L4555
.L4550:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4555:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4556
.L4552:
	mov	r0, r5
	bl	up_read
	b	.L4550
.L4556:
	ldrb	r3, [r6, #-24]	@ zero_extendqisi2
	mov	r4, r7
	ldr	r2, [sp, #4]
	bfi	r3, r2, #3, #1
	strb	r3, [r6, #-24]
	b	.L4552
	.fnend
	.size	fsg_store_cdrom, .-fsg_store_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_nofua, %function
fsg_store_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r1, #2
	mov	r4, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	add	r2, sp, #4
	mov	r5, r3
	bl	kstrtouint
	cmp	r0, #0
	bne	.L4557
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L4561
.L4559:
	ldrb	r2, [r4, #-24]	@ zero_extendqisi2
	mov	r0, r5
	bfi	r2, r3, #7, #1
	strb	r2, [r4, #-24]
.L4557:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L4561:
	ldrb	r2, [r4, #-24]	@ zero_extendqisi2
	tst	r2, #128
	beq	.L4559
	ldr	r0, [r4, #-48]
	ubfx	r2, r2, #1, #1
	cmp	r0, #0
	moveq	r2, #1
	cmp	r2, #0
	bne	.L4559
	mov	r1, #1
	bl	vfs_fsync
	ldr	r3, [sp, #4]
	b	.L4559
	.fnend
	.size	fsg_store_nofua, .-fsg_store_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_file, %function
fsg_store_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r3
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	cmp	r4, #0
	mov	r7, r0
	beq	.L4563
	sub	r3, r4, #1
	ldrb	r2, [r6, r3]	@ zero_extendqisi2
	cmp	r2, #10
	beq	.L4577
	bl	down_write
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	beq	.L4566
.L4565:
	bl	fput
	mov	r3, #14848
	mov	r2, #0
	movt	r3, 2
	str	r2, [r5, #-48]
	str	r3, [r5, #-12]
.L4566:
	ldrb	r3, [r6]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L4578
.L4568:
	mov	r0, r7
	bl	up_write
.L4567:
	mov	r6, r4
.L4562:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4563:
	bl	down_write
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	beq	.L4568
	bl	fput
	mov	r3, #14848
	str	r4, [r5, #-48]
	movt	r3, 2
	str	r3, [r5, #-12]
	b	.L4568
.L4577:
	mov	r2, #0
	strb	r2, [r6, r3]
	bl	down_write
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	bne	.L4565
	ldrb	r3, [r6]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L4568
.L4578:
	mov	r1, r6
	sub	r0, r5, #48
	bl	fsg_lun_open
	subs	r6, r0, #0
	bne	.L4569
	mov	r3, #10240
	mov	r0, r7
	movt	r3, 6
	str	r3, [r5, #-12]
	bl	up_write
	b	.L4567
.L4569:
	mov	r0, r7
	bl	up_write
	cmp	r6, #0
	blt	.L4562
	b	.L4567
	.fnend
	.size	fsg_store_file, .-fsg_store_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_out_complete, %function
bulk_out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4589
.L4580:
	.syntax divided
@ 600 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, #0
	mov	r3, #1
	str	r3, [r6, #4]
	str	r2, [r6, #28]
	.syntax divided
@ 518 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r4, #168]
	str	r3, [r4, #148]
	cmp	r0, r2
	beq	.L4581
	bl	wake_up_process
.L4581:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L4589:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4580
	blx	r3
	b	.L4580
	.fnend
	.size	bulk_out_complete, .-bulk_out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_in_complete, %function
bulk_in_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4600
.L4591:
	.syntax divided
@ 579 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #0
	str	r3, [r6, #4]
	str	r3, [r6, #20]
	.syntax divided
@ 518 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r4, #168]
	mov	r3, #1
	str	r3, [r4, #148]
	cmp	r0, #0
	beq	.L4592
	bl	wake_up_process
.L4592:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L4600:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4591
	blx	r3
	b	.L4591
	.fnend
	.size	bulk_in_complete, .-bulk_in_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sleep_thread, %function
sleep_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, #57344
	strd	r6, [sp, #8]
	movw	r7, #:lower16:system_freezing_cnt
	movt	r5, 65535
	strd	r8, [sp, #16]
	add	r6, r0, #44
	mov	r8, r0
	str	r10, [sp, #24]
	movt	r7, #:upper16:system_freezing_cnt
	mov	r9, #1
	str	lr, [sp, #28]
	b	.L4606
.L4602:
	str	r9, [r0]
	.syntax divided
@ 730 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	mov	r0, r6
	and	r3, r3, r5
	ldr	r2, [r3, #12]
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	ands	r4, r3, #1
	bne	.L4607
	bl	_raw_spin_lock_irq
	ldr	r3, [r8, #148]
	mov	r0, r6
	cmp	r3, #0
	bne	.L4613
	bl	_raw_spin_unlock_irq
	bl	schedule
.L4606:
	ldr	r3, [r7]
	mov	r2, sp
	and	r2, r2, r5
	ldr	r0, [r2, #12]
	cmp	r3, #0
	beq	.L4602
	bl	freezing_slow_path
	cmp	r0, #0
	mov	r3, sp
	and	r3, r3, r5
	bne	.L4603
	ldr	r0, [r3, #12]
	b	.L4602
.L4603:
	mov	r0, #0
	bl	__refrigerator
	mov	r3, sp
	and	r3, r3, r5
	ldr	r0, [r3, #12]
	b	.L4602
.L4607:
	mvn	r4, #3
.L4604:
	mov	r5, #0
	mov	r0, r6
	str	r5, [r2]
	bl	_raw_spin_lock_irq
	mov	r0, r6
	str	r5, [r8, #148]
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 747 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4613:
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	and	r5, r5, r3
	ldr	r2, [r5, #12]
	b	.L4604
	.fnend
	.size	sleep_thread, .-sleep_thread
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	receive_file_work, %function
receive_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	.syntax divided
@ 853 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, sp
	mov	r8, #0
	ldr	r10, [r0, #16]
	ldrd	r2, [r0, #24]
	bic	r9, r1, #8128
	mov	fp, r8
	bic	r9, r9, #63
	ldrd	r6, [r0, #32]
	strd	r2, [sp]
	b	.L4615
.L4649:
	cmp	r6, r3
	mov	r0, r3
	sbcs	r3, r7, ip
	movlt	r0, r6
	mov	r3, r0
	str	r0, [r4, #48]
.L4630:
	subs	r6, r6, r3
	sbc	r7, r7, #0
.L4631:
	cmp	r2, r3
	movhi	r6, #0
	movhi	r7, #0
.L4622:
	mov	fp, r4
.L4615:
	cmp	r6, #1
	sbcs	r3, r7, #0
	movge	r3, #1
	movlt	r3, #0
	cmp	fp, #0
	movne	r3, #1
	cmp	r3, #0
	beq	.L4646
	cmp	r6, #1
	sbcs	r3, r7, #0
	blt	.L4616
	add	r3, r8, #40
	movw	r2, #:lower16:.LANCHOR0
	add	r3, r5, r3, lsl #2
	movt	r2, #:upper16:.LANCHOR0
	ldr	r1, [r2, #580]
	mov	ip, #0
	ldr	r4, [r3, #-192]
	mov	r2, #208
	eor	r8, r8, #1
	str	r1, [r4, #4]
	ldr	r0, [r5, #-104]
	mov	r1, r4
	str	ip, [r5, #-24]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L4645
	cmp	fp, #0
	beq	.L4620
	mov	r3, sp
	mov	r0, r10
	ldr	r1, [fp]
	ldr	r2, [fp, #48]
	bl	vfs_write
	ldr	r3, [fp, #48]
	cmp	r3, r0
	bne	.L4645
.L4620:
	cmp	r4, #0
	beq	.L4622
	ldr	r3, [r5, #-96]
	ldr	r2, [r5, #-24]
	cmp	r2, #0
	bne	.L4623
	cmp	r3, #2
	beq	.L4647
.L4623:
	cmp	r3, #0
	cmpne	r3, #3
	moveq	ip, #1
	movne	ip, #0
	beq	.L4648
	ldr	r2, [r4, #4]
	mov	r1, #0
	ldr	r3, [r4, #48]
	cmp	r6, r2
	sbcs	r1, r7, r1
	blt	.L4649
	mov	r1, #0
	mvn	r0, #0
	cmp	r7, r1
	cmpeq	r6, r0
	beq	.L4631
	b	.L4630
.L4616:
	mov	r3, sp
	mov	r0, r10
	ldr	r1, [fp]
	ldr	r2, [fp, #48]
	bl	vfs_write
	ldr	r3, [fp, #48]
	cmp	r0, r3
	bne	.L4645
	mov	r4, #0
	b	.L4622
.L4647:
	ldr	r0, [r9, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r3, #:upper16:autoremove_wake_function
	sub	fp, r5, #68
	str	r2, [sp, #12]
	str	r1, [sp, #24]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #28]
	b	.L4625
.L4650:
	bl	schedule
.L4625:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r5, #-24]
	cmp	r3, #0
	bne	.L4624
	ldr	r3, [r5, #-96]
	cmp	r3, #2
	bne	.L4624
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L4650
.L4624:
	add	r1, sp, #12
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r5, #-96]
	b	.L4623
.L4645:
	ldr	r3, [r5, #-96]
	cmp	r3, #0
	movne	r3, #4
	mvneq	r6, #4
	mvnne	r6, #4
	strne	r3, [r5, #-96]
.L4619:
	str	r6, [r5, #52]
	.syntax divided
@ 936 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4646:
	mov	r6, r3
	b	.L4619
.L4648:
	ldr	r2, [r5, #-24]
	cmp	r3, #0
	mvnne	r6, #124
	mvneq	r6, #4
	cmp	r2, #0
	bne	.L4619
	ldr	r0, [r5, #-104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L4619
	.fnend
	.size	receive_file_work, .-receive_file_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_setup, %function
ffs_func_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #-44]
	ldr	r3, [r5, #96]
	cmp	r3, #2
	bne	.L4662
	ldrb	r3, [r1]	@ zero_extendqisi2
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L4653
	cmp	r3, #2
	beq	.L4654
	mvn	r4, #94
.L4651:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4654:
	ldrh	r3, [r1, #4]	@ unaligned
	and	r3, r3, #15
	add	r0, r0, r3
	ldrb	r4, [r0, #-36]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L4665
.L4656:
	add	r6, r5, #120
	mov	r8, r1
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r5, #100]
	mov	r7, r0
	ldr	r2, [r8]	@ unaligned
	ldr	r3, [r8, #4]	@ unaligned
	ldrh	r0, [r5, #108]
	cmp	r1, #1
	strd	r2, [r5, #112]
	moveq	r3, #2
	add	r2, r5, #104
	strh	r4, [r5, #116]	@ movhi
	mov	ip, r2
	streq	r3, [r5, #100]
	cmp	r0, #0
	beq	.L4666
	add	r0, r0, r2
	mov	r3, r2
.L4661:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	cmp	r1, #4
	strbne	r1, [r2]
	addne	r2, r2, #1
	cmp	r0, r3
	bne	.L4661
	sub	r2, r2, ip
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L4659:
	add	r0, r5, r0
	strh	r3, [r5, #108]	@ movhi
	mov	ip, #4
	mov	r2, #1
	mov	r1, #3
	mov	r4, #0
	strb	ip, [r0, #104]
	mov	r0, r6
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4651
.L4653:
	ldrh	ip, [r5, #182]
	ldrh	lr, [r1, #4]	@ unaligned
	ldr	r4, [r0, #-8]
	cmp	ip, #0
	uxtb	lr, lr
	beq	.L4665
	mov	r2, r4
.L4657:
	mov	r3, r2
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L4655
	cmp	r0, lr
	beq	.L4674
.L4655:
	subs	ip, ip, #1
	mov	r2, r3
	bne	.L4657
.L4665:
	mvn	r4, #32
	b	.L4651
.L4674:
	sub	r2, r2, r4
	cmp	r2, #0
	asr	r4, r2, #1
	bge	.L4656
	b	.L4651
.L4666:
	mov	r3, #1
	b	.L4659
.L4662:
	mvn	r4, #18
	b	.L4651
	.fnend
	.size	ffs_func_setup, .-ffs_func_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_cleanup, %function
ffs_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC322
	movt	r0, #:upper16:.LC322
	str	lr, [sp, #4]
	bl	printk
	ldr	r0, .L4677
	bl	unregister_filesystem
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L4678:
	.align	2
.L4677:
	.word	.LANCHOR0+988
	.fnend
	.size	ffs_function_cleanup, .-ffs_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_complete, %function
ffs_ep0_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	add	r0, r0, #36
	b	complete_all
	.fnend
	.size	ffs_ep0_complete, .-ffs_ep0_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_init, %function
ffs_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L4682
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	beq	.L4680
.L4682:
	ldr	r0, .L4687
	bl	register_filesystem
	subs	r4, r0, #0
	bne	.L4684
	movw	r0, #:lower16:.LC323
	movt	r0, #:upper16:.LC323
	bl	printk
.L4680:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4684:
	movw	r0, #:lower16:.LC324
	mov	r1, r4
	movt	r0, #:upper16:.LC324
	bl	printk
	b	.L4680
.L4688:
	.align	2
.L4687:
	.word	.LANCHOR0+988
	.fnend
	.size	ffs_function_init, .-ffs_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_complete_set_line_coding, %function
acm_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bne	.L4689
	ldr	r3, [r1, #48]
	cmp	r3, #7
	beq	.L4691
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L4691:
	ldr	r3, [r1]
	ldr	r1, [r0]
	ldr	r0, [r3]	@ unaligned
	add	r2, r1, #160
	str	r0, [r1, #160]
	ldrh	r1, [r3, #4]	@ unaligned
	strh	r1, [r2, #4]	@ movhi
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	strb	r3, [r2, #6]
.L4689:
	bx	lr
	.fnend
	.size	acm_complete_set_line_coding, .-acm_complete_set_line_coding
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_probe, %function
acc_hid_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	hid_open_report
	subs	r5, r0, #0
	bne	.L4692
	ldr	r3, [r4, #3556]
	mov	r0, r4
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	beq	.L4698
.L4692:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4698:
	mov	r1, #45
	mov	r0, r4
	bl	hid_connect
	subs	r5, r0, #0
	beq	.L4692
	ldr	r3, [r4, #3556]
	mov	r0, r4
	ldr	r3, [r3, #4]
	blx	r3
	b	.L4692
	.fnend
	.size	acc_hid_probe, .-acc_hid_probe
	.section	.text.unlikely,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_free_ctrl_pkt.part.6, %function
mbim_free_ctrl_pkt.part.6:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	ldr	r0, [r0]
	bl	kfree
	mov	r0, r4
	pop	{r4, lr}
	b	kfree
	.fnend
	.size	mbim_free_ctrl_pkt.part.6, .-mbim_free_ctrl_pkt.part.6
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_set_alt, %function
f_audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	cmp	r3, r1
	beq	.L4738
	ldrb	r3, [r6, #17]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L4713
	cmp	r2, #1
	bne	.L4714
	ldr	r5, [r0, #164]
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L4739
	str	r8, [r5]
	ldr	r0, [r6, #1028]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	str	r0, [r8, #176]
	bhi	.L4716
	ldr	r3, [r6, #1032]
	cmp	r3, #0
	ble	.L4736
	movw	r9, #:lower16:f_audio_complete
	movt	r9, #:upper16:f_audio_complete
.L4717:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	add	r7, r7, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	movw	r1, #32800
	beq	.L4719
	ldr	r0, [r6, #1036]
	bl	__kmalloc
	mov	r3, r0
	mov	r2, #32
	cmp	r3, #0
	mov	r0, r5
	mov	r1, r4
	str	r3, [r4]
	beq	.L4720
	ldr	r3, [r6, #1036]
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r8, [r4, #32]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L4740
	ldr	r3, [r6, #1032]
	cmp	r3, r7
	bgt	.L4717
.L4718:
	strb	r10, [r8, #241]
.L4701:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4738:
	cmp	r2, #1
	bne	.L4703
	ldr	r5, [r0, #168]
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L4741
	str	r8, [r5]
	mov	r1, #32
	mov	r0, r5
	str	r4, [r8, #208]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L4719
	movw	r1, #32800
	ldr	r0, [r6, #1024]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L4720
	ldr	ip, [r6, #1024]
	movw	r3, #:lower16:f_audio_complete
	mov	r1, r4
	movt	r3, #:upper16:f_audio_complete
	mov	r2, #32
	mov	r0, r5
	str	ip, [r4, #4]
	str	r3, [r4, #28]
	str	r8, [r4, #32]
	str	r4, [r8, #236]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L4742
.L4708:
	add	r0, r8, #212
	bl	schedule_work
.L4709:
	strb	r10, [r8, #240]
	b	.L4701
.L4716:
	movw	r0, #:lower16:.LC29
	ldr	r1, .L4744
	mvn	r4, #11
	movt	r0, #:upper16:.LC29
	bl	printk
	b	.L4701
.L4714:
	ldr	r4, [r0, #176]
	cmp	r4, #0
	beq	.L4722
	movw	r0, #:lower16:.LC331
	ldr	r1, .L4744
	movt	r0, #:upper16:.LC331
	bl	printk
	ldr	r2, [r8, #200]
	add	r1, r4, #8
	add	r3, r8, #196
	add	r0, r8, #180
	str	r1, [r8, #200]
	str	r3, [r4, #8]
	str	r2, [r4, #12]
	str	r1, [r2]
	bl	schedule_work
	mov	r3, #0
	mov	r4, r3
	str	r3, [r8, #176]
	b	.L4718
.L4722:
	movw	r0, #:lower16:.LC332
	ldr	r1, .L4744
	movt	r0, #:upper16:.LC332
	bl	printk
	b	.L4718
.L4703:
	add	r7, r0, #204
	add	r5, r0, #228
	mov	r0, r7
	mov	r9, #256
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r6, #512
	b	.L4711
.L4712:
	ldrd	r2, [r4]
	subs	fp, r4, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r6, [r4, #4]
	bne	.L4743
.L4711:
	ldr	r4, [r8, #228]
	cmp	r4, r5
	bne	.L4712
	mov	r0, r7
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore
	b	.L4709
.L4743:
	ldr	r0, [r4, #-8]
	str	r1, [sp, #4]
	bl	kfree
	mov	r3, #0
	mov	r0, fp
	str	r3, [r4, #-8]
	bl	kfree
	ldr	r1, [sp, #4]
	b	.L4711
.L4736:
	mov	r4, r7
	b	.L4718
.L4740:
	movw	r0, #:lower16:.LC330
	mov	r3, r4
	ldr	r1, .L4744
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC330
	bl	printk
	b	.L4718
.L4719:
	movw	r0, #:lower16:.LC326
	ldr	r1, .L4744
	mvn	r4, #11
	movt	r0, #:upper16:.LC326
	bl	printk
	b	.L4701
.L4720:
	movw	r0, #:lower16:.LC327
	ldr	r1, .L4744
	mvn	r4, #11
	movt	r0, #:upper16:.LC327
	bl	printk
	b	.L4701
.L4741:
	movw	r0, #:lower16:.LC325
	ldr	r1, .L4744
	movt	r0, #:upper16:.LC325
	bl	printk
	b	.L4701
.L4739:
	movw	r0, #:lower16:.LC329
	ldr	r1, .L4744
	mov	r4, r7
	movt	r0, #:upper16:.LC329
	bl	printk
	b	.L4701
.L4742:
	movw	r0, #:lower16:.LC328
	mov	r3, r4
	ldr	r1, .L4744
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC328
	bl	printk
	b	.L4708
.L4713:
	movw	r0, #:lower16:.LC333
	mov	r2, r1
	ldr	r1, .L4744
	mov	r3, #0
	movt	r0, #:upper16:.LC333
	mov	r4, r3
	bl	printk
	b	.L4701
.L4745:
	.align	2
.L4744:
	.word	.LANCHOR2+2412
	.fnend
	.size	f_audio_set_alt, .-f_audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ep_matches.part.12, %function
ep_matches.part.12:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r2, #3]	@ zero_extendqisi2
	ands	r4, ip, #3
	beq	.L4749
	ldr	r9, [r1, #4]
	ldrb	ip, [r9]	@ zero_extendqisi2
	cmp	ip, #101
	beq	.L4802
.L4749:
	mov	r0, #0
.L4746:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4802:
	mov	r7, r3
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	mov	r6, r1
	mov	r8, r0
	mov	r5, r2
	cmp	r3, #45
	beq	.L4750
	mov	r1, #45
	mov	r0, r9
	bl	strrchr
	subs	r10, r0, #0
	beq	.L4751
	cmp	r4, #2
	beq	.L4753
	cmp	r4, #3
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	bne	.L4797
	cmp	r3, #115
	beq	.L4749
	movw	r0, #:lower16:.LC283
	ldr	r1, [r8, #28]
	movt	r0, #:upper16:.LC283
	bl	strcmp
	cmp	r0, #0
	bne	.L4755
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #105
	beq	.L4749
.L4755:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L4767
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	ubfxne	r2, r3, #0, #11
	movne	r9, #0
	bne	.L4762
	mov	r9, r3
	b	.L4769
.L4797:
	cmp	r3, #115
	bne	.L4749
.L4756:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L4750
.L4767:
	ldrsb	r3, [r5, #2]
	cmp	r3, #0
	blt	.L4803
	cmp	r2, #116
	bne	.L4749
.L4750:
	sub	r9, r4, #2
	cmp	r7, #0
	clz	r9, r9
	moveq	r3, #0
	lsr	r9, r9, #5
	movne	r3, r9
	cmp	r3, #0
	bne	.L4804
.L4758:
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	bne	.L4759
.L4769:
	ldrh	r3, [r6, #20]
	strh	r3, [r5, #4]	@ unaligned
.L4759:
	cmp	r4, #1
	ubfx	r2, r3, #0, #11
	beq	.L4761
	cmp	r4, #3
	beq	.L4762
.L4760:
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	movw	r2, #:lower16:_ctype
	movt	r2, #:upper16:_ctype
	and	r3, r3, #128
	strb	r3, [r5, #2]
	ldr	r0, [r6, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r2, [r2, r1]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L4805
	movw	r1, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LANCHOR1
	ldr	r2, [r1, #3744]
	add	r2, r2, #1
	cmp	r2, #15
	str	r2, [r1, #3744]
	bhi	.L4749
	orr	r3, r3, r2
	uxtb	r3, r3
	strb	r3, [r5, #2]
.L4765:
	cmp	r7, #0
	moveq	r7, r9
	movne	r7, #0
	cmp	r7, #0
	beq	.L4766
	ldrh	r2, [r6, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r5, #4]	@ unaligned
.L4766:
	mov	r0, #1
	strb	r3, [r6, #25]
	b	.L4746
.L4762:
	ldr	r0, [r8, #20]
	cmp	r0, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L4749
.L4761:
	ldrh	r1, [r6, #20]
	cmp	r1, r2
	bcc	.L4749
	ldr	r1, [r8, #20]
	cmp	r1, #2
	bhi	.L4760
	cmp	r2, #1024
	bcs	.L4749
	tst	r3, #6144
	bne	.L4749
	b	.L4760
.L4805:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r5, #2]
	b	.L4765
.L4751:
	mov	r0, r9
	bl	strlen
	add	r10, r9, r0
	b	.L4756
.L4804:
	ldr	r2, [r8, #20]
	cmp	r2, #4
	bls	.L4771
	ldrb	r2, [r7, #3]	@ zero_extendqisi2
	ldrh	r1, [r6, #22]
	and	r2, r2, #31
	cmp	r1, r2
	bcc	.L4749
.L4771:
	mov	r9, r3
	b	.L4758
.L4753:
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L4749
	b	.L4756
.L4803:
	cmp	r2, #110
	bne	.L4749
	b	.L4750
	.fnend
	.size	ep_matches.part.12, .-ep_matches.part.12
	.align	2
	.global	gsdio_ctrl_wq
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_wq, %function
gsdio_ctrl_wq:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #80
	beq	.L4808
	bx	lr
.L4808:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L4809
	movt	r0, #:upper16:.LC15
	b	printk
.L4810:
	.align	2
.L4809:
	.word	.LANCHOR2+2428
	.fnend
	.size	gsdio_ctrl_wq, .-gsdio_ctrl_wq
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_poll, %function
rmnet_ctrl_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L4824
	cmp	r1, #0
	beq	.L4814
	ldr	r3, [r1]
	cmp	r3, #0
	beq	.L4814
	mov	r2, r1
	add	r1, r4, #32
	blx	r3
.L4814:
	add	r5, r4, #52
	add	r4, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r5
	cmp	r3, r4
	movne	r4, #65
	moveq	r4, #0
	bl	_raw_spin_unlock_irqrestore
.L4811:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4824:
	movw	r0, #:lower16:.LC334
	ldr	r1, .L4825
	mov	r4, #8
	movt	r0, #:upper16:.LC334
	bl	printk
	b	.L4811
.L4826:
	.align	2
.L4825:
	.word	.LANCHOR2+2444
	.fnend
	.size	rmnet_ctrl_poll, .-rmnet_ctrl_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cbits_tomodem, %function
ghsic_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #1036]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L4831
	mov	r0, #104
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #1040]
	cmp	r3, #0
	beq	.L4832
	ldr	r1, [r3, #88]
	cmp	r1, r2
	ldrne	r1, [r3, #84]
	strne	r2, [r3, #88]
	bx	lr
.L4831:
	movw	r0, #:lower16:.LC19
	mov	r2, r1
	ldr	r1, .L4833
	movt	r0, #:upper16:.LC19
	b	printk
.L4832:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L4833
	movt	r0, #:upper16:.LC15
	b	printk
.L4834:
	.align	2
.L4833:
	.word	.LANCHOR2+2460
	.fnend
	.size	ghsic_send_cbits_tomodem, .-ghsic_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cbits_tomodem, %function
ghsuart_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #1876]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L4839
	mov	r0, #84
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #1880]
	cmp	r3, #0
	beq	.L4840
	ldr	r1, [r3, #92]
	cmp	r1, r2
	ldrne	r1, [r3, #88]
	strne	r2, [r3, #92]
	bx	lr
.L4839:
	movw	r0, #:lower16:.LC19
	mov	r2, r1
	ldr	r1, .L4841
	movt	r0, #:upper16:.LC19
	b	printk
.L4840:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L4841
	movt	r0, #:upper16:.LC15
	b	printk
.L4842:
	.align	2
.L4841:
	.word	.LANCHOR2+2488
	.fnend
	.size	ghsuart_send_cbits_tomodem, .-ghsuart_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_wake_cb, %function
bam_data_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L4850
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L4851
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L4852
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L4848
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L4848:
	mvn	r0, #94
.L4843:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4852:
	movw	r0, #:lower16:.LC337
	ldr	r1, .L4853
	movt	r0, #:upper16:.LC337
	bl	printk
	mvn	r0, #18
	b	.L4843
.L4851:
	movw	r0, #:lower16:.LC336
	ldr	r1, .L4853
	movt	r0, #:upper16:.LC336
	bl	printk
	mvn	r0, #18
	b	.L4843
.L4850:
	movw	r0, #:lower16:.LC335
	ldr	r1, .L4853
	movt	r0, #:upper16:.LC335
	bl	printk
	mvn	r0, #18
	b	.L4843
.L4854:
	.align	2
.L4853:
	.word	.LANCHOR2+2516
	.fnend
	.size	bam_data_wake_cb, .-bam_data_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open_dev, %function
rndis_qc_open_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC338
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LC338
	ldr	r1, .L4861
	str	lr, [sp, #4]
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2332]
	cmp	r3, #0
	beq	.L4860
	add	r1, r3, #144
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, #1
	bne	.L4858
	ldr	r3, [r2, #2332]
	movw	r0, #:lower16:.LC340
	movt	r0, #:upper16:.LC340
	ldr	r1, .L4861
	str	r3, [r4, #124]
	bl	printk
	mov	r0, #0
.L4855:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4858:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r1]
	sub	r2, r2, #1
	strex	r0, r2, [r1]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC59
	ldr	r1, .L4861
	movt	r0, #:upper16:.LC59
	bl	printk
	mvn	r0, #15
	b	.L4855
.L4860:
	movw	r0, #:lower16:.LC339
	ldr	r1, .L4861
	movt	r0, #:upper16:.LC339
	bl	printk
	mvn	r0, #18
	b	.L4855
.L4862:
	.align	2
.L4861:
	.word	.LANCHOR2+2536
	.fnend
	.size	rndis_qc_open_dev, .-rndis_qc_open_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_connect, %function
gps_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	subs	r2, r0, #0
	beq	.L4865
	mov	r3, #1
	str	r3, [r2, #116]
	bx	lr
.L4865:
	movw	r0, #:lower16:.LC341
	ldr	r1, .L4866
	movt	r0, #:upper16:.LC341
	b	printk
.L4867:
	.align	2
.L4866:
	.word	.LANCHOR2+2556
	.fnend
	.size	gps_connect, .-gps_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_disconnect, %function
gps_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L4885
	ldr	r3, [r4, #112]
	mov	r2, #0
	str	r2, [r4, #116]
	cmp	r3, r2
	beq	.L4868
	ldr	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, r2
	beq	.L4872
	blx	r3
.L4872:
	ldr	r3, [r4, #132]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r4, #108]
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L4873
	ldr	r3, [r4, #112]
	cmp	r3, #0
	bne	.L4886
.L4868:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4886:
	movw	r0, #:lower16:.LC342
	ldr	r1, .L4887
	movt	r0, #:upper16:.LC342
	bl	printk
.L4873:
	add	r9, r4, #124
	add	r6, r4, #136
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	r10, r0
	cmp	r3, r6
	beq	.L4875
	mov	r8, #256
	mov	r7, #512
.L4876:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r4, #136]
	cmp	r3, r6
	bne	.L4876
.L4875:
	mov	r3, #0
	mov	r1, r10
	mov	r0, r9
	str	r3, [r4, #144]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L4885:
	movw	r0, #:lower16:.LC341
	mov	r2, r4
	ldr	r1, .L4887
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC341
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L4888:
	.align	2
.L4887:
	.word	.LANCHOR2+2568
	.fnend
	.size	gps_disconnect, .-gps_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_cmd_complete, %function
gps_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #32]
	cmp	r3, #0
	beq	.L4894
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, [r3, #88]
	cmp	lr, #0
	beq	.L4889
	mov	r2, r1
	ldrb	r0, [r3, #104]	@ zero_extendqisi2
	mov	r3, lr
	ldr	r1, [r1]
	ldr	lr, [sp], #4
	ldr	r2, [r2, #48]
	bx	r3
.L4889:
	ldr	pc, [sp], #4
.L4894:
	movw	r0, #:lower16:.LC343
	ldr	r1, .L4895
	movt	r0, #:upper16:.LC343
	b	printk
.L4896:
	.align	2
.L4895:
	.word	.LANCHOR2+2584
	.fnend
	.size	gps_cmd_complete, .-gps_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_connect, %function
frmnet_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	subs	r2, r0, #0
	beq	.L4899
	mov	r3, #1
	str	r3, [r2, #116]
	bx	lr
.L4899:
	movw	r0, #:lower16:.LC341
	ldr	r1, .L4900
	movt	r0, #:upper16:.LC341
	b	printk
.L4901:
	.align	2
.L4900:
	.word	.LANCHOR2+2604
	.fnend
	.size	frmnet_connect, .-frmnet_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disconnect, %function
frmnet_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L4919
	ldr	r3, [r4, #112]
	mov	r2, #0
	str	r2, [r4, #116]
	cmp	r3, r2
	beq	.L4902
	ldr	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, r2
	beq	.L4906
	blx	r3
.L4906:
	ldr	r3, [r4, #132]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r4, #104]
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L4907
	ldr	r3, [r4, #112]
	cmp	r3, #0
	bne	.L4920
.L4902:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4920:
	movw	r0, #:lower16:.LC344
	ldr	r1, .L4921
	movt	r0, #:upper16:.LC344
	bl	printk
.L4907:
	add	r9, r4, #124
	add	r6, r4, #136
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	r10, r0
	cmp	r3, r6
	beq	.L4909
	mov	r8, #256
	mov	r7, #512
.L4910:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r3, [r4, #136]
	cmp	r3, r6
	bne	.L4910
.L4909:
	mov	r3, #0
	mov	r1, r10
	mov	r0, r9
	str	r3, [r4, #144]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L4919:
	movw	r0, #:lower16:.LC341
	mov	r2, r4
	ldr	r1, .L4921
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC341
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L4922:
	.align	2
.L4921:
	.word	.LANCHOR2+2620
	.fnend
	.size	frmnet_disconnect, .-frmnet_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_cmd_complete, %function
frmnet_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #32]
	cmp	r3, #0
	beq	.L4928
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, [r3, #88]
	ldrb	r3, [r3, #108]	@ zero_extendqisi2
	cmp	lr, #0
	beq	.L4923
	add	r0, r3, r3, lsl #1
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #3
	mov	r2, r1
	ldr	r1, [r1]
	ldr	r2, [r2, #48]
	ldrb	r0, [r3, #2352]	@ zero_extendqisi2
	mov	r3, lr
	ldr	lr, [sp], #4
	bx	r3
.L4923:
	ldr	pc, [sp], #4
.L4928:
	movw	r0, #:lower16:.LC345
	ldr	r1, .L4929
	movt	r0, #:upper16:.LC345
	b	printk
.L4930:
	.align	2
.L4929:
	.word	.LANCHOR2+2640
	.fnend
	.size	frmnet_cmd_complete, .-frmnet_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect_w, %function
ghsic_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #16
	beq	.L4931
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L4939
.L4931:
	bx	lr
.L4939:
	movw	r0, #:lower16:.LC346
	mvn	r2, #18
	ldr	r1, .L4940
	movt	r0, #:upper16:.LC346
	b	printk
.L4941:
	.align	2
.L4940:
	.word	.LANCHOR2+2660
	.fnend
	.size	ghsic_ctrl_connect_w, .-ghsic_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect_w, %function
ghsuart_ctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #36]
	mov	r3, r0
	tst	r2, #1
	bne	.L4944
	bx	lr
.L4944:
	mov	r2, #0
	add	r1, r0, #36
	mov	r0, #2
	str	r2, [r3, #-36]
	b	_clear_bit
	.fnend
	.size	ghsuart_ctrl_disconnect_w, .-ghsuart_ctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect_w, %function
ghsuart_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #60]
	mov	r3, r0
	tst	r2, #1
	bne	.L4947
	bx	lr
.L4947:
	mov	r2, #0
	add	r1, r0, #60
	mov	r0, #2
	str	r2, [r3, #-100]
	b	_clear_bit
	.fnend
	.size	ghsuart_data_disconnect_w, .-ghsuart_data_disconnect_w
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_init, %function
gether_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, #0
	.pad #8
	sub	sp, sp, #8
	movw	r0, #:lower16:.LC347
	mov	r3, r4
	movt	r0, #:upper16:.LC347
	mov	r2, #1
	mov	r1, #10
	str	r4, [sp]
	bl	__alloc_workqueue_key
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3448]
	movne	r0, r4
	bne	.L4948
	ldr	r2, .L4952
	movw	r0, #:lower16:.LC348
	movt	r0, #:upper16:.LC348
	mov	r1, r2
	bl	printk
	mvn	r0, #11
.L4948:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L4953:
	.align	2
.L4952:
	.word	.LANCHOR2+2684
	.fnend
	.size	gether_init, .-gether_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_suspend, %function
rmnet_sdio_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #184]
	mov	r3, r0
	cmp	r2, #0
	bne	.L4956
	bx	lr
.L4956:
	ldr	r2, [r3, #320]
	add	r1, r0, #324
	ldr	r0, [r0, #192]
	bic	r2, r2, #2
	str	r2, [r3, #320]
	b	queue_work
	.fnend
	.size	rmnet_sdio_suspend, .-rmnet_sdio_suspend
	.align	2
	.global	gsdio_read_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_complete, %function
gsdio_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L4960
	add	r6, r4, #4
	mov	r5, r1
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #24]
	add	ip, r5, #36
	add	r1, r4, #20
	movw	r3, #:lower16:.LANCHOR1
	mov	r7, r0
	movt	r3, #:upper16:.LANCHOR1
	str	ip, [r4, #24]
	ldr	r0, [r3, #3432]
	str	r1, [r5, #36]
	add	r1, r4, #28
	str	r2, [r5, #40]
	str	ip, [r2]
	ldr	r3, [r4, #48]
	add	r3, r3, #1
	str	r3, [r4, #48]
	bl	queue_work
	ldrd	r4, [sp]
	mov	r1, r7
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L4960:
	movw	r0, #:lower16:.LC15
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC15
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L4961
	b	printk
.L4962:
	.align	2
.L4961:
	.word	.LANCHOR2+2696
	.fnend
	.size	gsdio_read_complete, .-gsdio_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_read_complete, %function
gsmd_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	cmp	r5, #0
	beq	.L4971
	add	r7, r5, #4
	mov	r6, r0
	mov	r0, r7
	mov	r4, r1
	bl	_raw_spin_lock
	ldr	r3, [r5, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L4965
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L4965
	ldr	r2, [r5, #24]
	add	ip, r4, #36
	add	r0, r5, #20
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r5, #28
	movt	r3, #:upper16:.LANCHOR1
	str	ip, [r5, #24]
	str	r0, [r4, #36]
	ldr	r0, [r3, #3436]
	str	r2, [r4, #40]
	str	ip, [r2]
	bl	queue_work
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L4965:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r4]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L4971:
	movw	r0, #:lower16:.LC15
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC15
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L4972
	b	printk
.L4973:
	.align	2
.L4972:
	.word	.LANCHOR2+2716
	.fnend
	.size	gsmd_read_complete, .-gsmd_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_unthrottle_tx, %function
ghsic_data_unthrottle_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L4974
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L4983
.L4974:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4983:
	add	r5, r4, #80
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r1, r4, #120
	ldr	r0, [r4, #84]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
	.fnend
	.size	ghsic_data_unthrottle_tx, .-ghsic_data_unthrottle_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disable, %function
rmnet_mux_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #360]
	cmp	r3, #0
	bxeq	lr
	mov	r3, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r3, [r0, #360]
	ldr	r0, [r0, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L4986
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L4986:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r5, [r4, #88]
	ldr	r6, [r4, #92]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L4987
	blx	r2
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
.L4987:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L4988
	blx	r2
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
.L4988:
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	add	r1, r4, #372
	ldr	r0, [r4, #368]
	str	r3, [r4, #340]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
	.fnend
	.size	rmnet_mux_disable, .-rmnet_mux_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_send_cbits_tomodem, %function
gsmd_ctrl_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #5
	bhi	.L5002
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	ip, #:upper16:.LANCHOR1
	mla	r3, r3, r1, ip
	ldr	ip, [r3, #528]
	cmp	ip, #0
	beq	.L5002
	cmp	r0, #0
	beq	.L5017
	ands	r3, r2, #1
	moveq	r2, #2
	moveq	r1, r3
	bne	.L5018
.L5005:
	ldr	r0, [ip, #88]
	cmp	r0, r3
	beq	.L5001
	ldr	r0, [ip, #8]
	str	r3, [ip, #88]
	tst	r0, #1
	bne	.L5019
.L5001:
	bx	lr
.L5018:
	mov	r1, #2
	mov	r2, #0
	mov	r3, r1
	b	.L5005
.L5019:
	ldr	r0, [ip]
	b	smd_tiocmset
.L5002:
	movw	r0, #:lower16:.LC19
	mov	r2, r1
	ldr	r1, .L5020
	movt	r0, #:upper16:.LC19
	b	printk
.L5017:
	movw	r0, #:lower16:.LC349
	ldr	r1, .L5020
	movt	r0, #:upper16:.LC349
	b	printk
.L5021:
	.align	2
.L5020:
	.word	.LANCHOR2+2736
	.fnend
	.size	gsmd_ctrl_send_cbits_tomodem, .-gsmd_ctrl_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_disconnect_w, %function
grmnet_ctrl_smd_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-160]
	cmp	r0, #0
	beq	.L5023
	bl	smd_close
	mov	r3, #0
	str	r3, [r4, #-160]
.L5023:
	ldr	r3, [r4, #-152]
	tst	r3, #2
	bne	.L5024
	ldr	r3, [r4, #-152]
	tst	r3, #4
	beq	.L5022
.L5024:
	sub	r1, r4, #152
	mov	r0, #2
	bl	_clear_bit
	ldr	r0, [r4, #-60]
	mov	r2, #84
	ldr	r3, .L5030
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	mla	r0, r2, r0, r3
	add	r0, r0, #4
	b	platform_driver_unregister
.L5022:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5031:
	.align	2
.L5030:
	.word	.LANCHOR1+528
	.fnend
	.size	grmnet_ctrl_smd_disconnect_w, .-grmnet_ctrl_smd_disconnect_w
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	init, %function
init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r3, #:lower16:.LANCHOR0
	movw	lr, #:lower16:android_setup
	movt	r3, #:upper16:.LANCHOR0
	ldr	r4, .L5038
	movt	lr, #:upper16:android_setup
	movw	r0, #:lower16:android_disconnect
	movt	r0, #:upper16:android_disconnect
	movw	ip, #:lower16:android_suspend
	movw	r1, #:lower16:android_resume
	movw	r2, #:lower16:.LANCHOR1
	str	lr, [r3, #1052]
	movt	r2, #:upper16:.LANCHOR1
	movt	ip, #:upper16:android_suspend
	str	r0, [r3, #1056]
	movt	r1, #:upper16:android_resume
	mov	lr, #0
	add	r0, r3, #320
	str	r4, [r2, #2228]
	str	r4, [r2, #2232]
	str	ip, [r3, #1060]
	str	r1, [r3, #1064]
	str	lr, [r2, #3728]
	bl	platform_driver_register
	subs	r4, r0, #0
	beq	.L5032
	ldr	r2, .L5038+4
	movw	r0, #:lower16:.LC350
	movt	r0, #:upper16:.LC350
	mov	r1, r2
	bl	printk
.L5032:
	mov	r0, r4
	pop	{r4, pc}
.L5039:
	.align	2
.L5038:
	.word	.LANCHOR1+2228
	.word	.LANCHOR2+2768
	.fnend
	.size	init, .-init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_free_buffers.part.40, %function
ghsic_data_free_buffers.part.40:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r5, r0, #48
	mov	r4, r0
	mov	r0, r5
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #8]
	mov	r6, r0
	cmp	r10, #0
	beq	.L5049
	ldr	r3, [r4, #24]
	add	r7, r4, #24
	cmp	r7, r3
	beq	.L5042
	mov	r9, #256
	mov	r8, #512
.L5043:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #24]
	cmp	r7, r3
	bne	.L5043
.L5042:
	ldr	r3, [r4, #32]
	add	r7, r4, #32
	cmp	r7, r3
	beq	.L5044
	mov	r8, #0
	b	.L5045
.L5062:
	ldr	r2, [r4, #40]
	sub	r2, r2, #1
	str	r2, [r4, #40]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #32]
	cmp	r3, r7
	beq	.L5044
.L5045:
	subs	r0, r3, #0
	bne	.L5062
.L5044:
	mov	r1, r6
	mov	r0, r5
	add	r5, r4, #80
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #12]
	mov	r6, r0
	cmp	r7, #0
	beq	.L5049
	ldr	r3, [r4, #56]
	add	r8, r4, #56
	cmp	r8, r3
	beq	.L5047
	mov	r10, #256
	mov	r9, #512
.L5048:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r7
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #56]
	cmp	r8, r3
	bne	.L5048
.L5047:
	ldr	r3, [r4, #64]
	add	r7, r4, #64
	cmp	r3, r7
	beq	.L5049
	mov	r8, #0
	b	.L5050
.L5063:
	ldr	r2, [r4, #72]
	sub	r2, r2, #1
	str	r2, [r4, #72]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #64]
	cmp	r3, r7
	beq	.L5049
.L5050:
	subs	r0, r3, #0
	bne	.L5063
.L5049:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsic_data_free_buffers.part.40, .-ghsic_data_free_buffers.part.40
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_remove, %function
ghsic_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r6, [r5, #1456]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L5065
	ldr	r4, [r5, #1460]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L5066
	cmp	r6, #1
	bls	.L5065
	ldr	r4, [r5, #1564]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L5066
	cmp	r6, #2
	beq	.L5065
	ldr	r4, [r5, #1668]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L5066
	cmp	r6, #3
	beq	.L5065
	ldr	r4, [r5, #1772]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L5066
.L5065:
	movw	r0, #:lower16:.LC97
	mvn	r2, #21
	ldr	r1, .L5109
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
.L5064:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5066:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5069
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5069
	blx	r3
.L5069:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5070
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5070
	blx	r3
.L5070:
	add	r0, r4, #120
	bl	cancel_work_sync
	cmp	r4, #0
	beq	.L5071
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.40
.L5071:
	add	r0, r4, #88
	add	r4, r4, #180
	bl	cancel_work_sync
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_clear_bit
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
	b	.L5064
.L5110:
	.align	2
.L5109:
	.word	.LANCHOR2+2776
	.fnend
	.size	ghsic_data_remove, .-ghsic_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_free_buffers.part.41, %function
ghsuart_data_free_buffers.part.41:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r5, r0, #72
	mov	r4, r0
	mov	r0, r5
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #8]
	mov	r6, r0
	cmp	r10, #0
	beq	.L5120
	ldr	r3, [r4, #48]
	add	r7, r4, #48
	cmp	r7, r3
	beq	.L5113
	mov	r9, #256
	mov	r8, #512
.L5114:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r10
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r10, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #48]
	cmp	r7, r3
	bne	.L5114
.L5113:
	ldr	r3, [r4, #56]
	add	r7, r4, #56
	cmp	r7, r3
	beq	.L5115
	mov	r8, #0
	b	.L5116
.L5133:
	ldr	r2, [r4, #64]
	sub	r2, r2, #1
	str	r2, [r4, #64]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #56]
	cmp	r3, r7
	beq	.L5115
.L5116:
	subs	r0, r3, #0
	bne	.L5133
.L5115:
	mov	r1, r6
	mov	r0, r5
	add	r5, r4, #104
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #12]
	mov	r6, r0
	cmp	r7, #0
	beq	.L5120
	ldr	r3, [r4, #80]
	add	r8, r4, #80
	cmp	r8, r3
	beq	.L5118
	mov	r10, #256
	mov	r9, #512
.L5119:
	ldr	ip, [r3]
	sub	r1, r3, #36
	mov	r0, r7
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #80]
	cmp	r8, r3
	bne	.L5119
.L5118:
	ldr	r3, [r4, #88]
	add	r7, r4, #88
	cmp	r3, r7
	beq	.L5120
	mov	r8, #0
	b	.L5121
.L5134:
	ldr	r2, [r4, #96]
	sub	r2, r2, #1
	str	r2, [r4, #96]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #88]
	cmp	r3, r7
	beq	.L5120
.L5121:
	subs	r0, r3, #0
	bne	.L5134
.L5120:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsuart_data_free_buffers.part.41, .-ghsuart_data_free_buffers.part.41
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_remove, %function
ghsuart_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #4]
	ldr	r1, [r3, #2048]
	cmp	r2, r1
	bcs	.L5166
	mov	r1, #84
	mla	r2, r1, r2, r3
	ldr	r4, [r2, #2052]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5138
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5138
	blx	r3
.L5138:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5139
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5139
	blx	r3
.L5139:
	cmp	r4, #0
	beq	.L5140
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.41
.L5140:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L5167
.L5142:
	movw	r0, #:lower16:.LC351
	ldr	r2, [r4, #180]
	add	r4, r4, #188
	ldr	r1, .L5168
	movt	r0, #:upper16:.LC351
	bl	printk
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r4
	mov	r0, #0
	bl	_clear_bit
	mov	r0, #2
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
.L5135:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5167:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #24]
	mov	r1, r0
	str	r5, [r4, #200]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L5142
	ldr	r3, [r6, #112]
	cmp	r3, #0
	beq	.L5142
	mov	r0, r6
	blx	r3
	b	.L5142
.L5166:
	movw	r0, #:lower16:.LC97
	ldr	r1, .L5168
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
	b	.L5135
.L5169:
	.align	2
.L5168:
	.word	.LANCHOR2+2796
	.fnend
	.size	ghsuart_data_remove, .-ghsuart_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tomdm, %function
ghsuart_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #144
	bxeq	lr
	ldr	r3, [r0, #-140]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #40
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #40]
	mov	r7, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	movne	r1, r0
	bne	.L5207
	mov	r2, r5
	ldr	r4, [r2, #-56]!
	cmp	r4, r2
	beq	.L5173
	cmp	r4, #0
	beq	.L5173
	ldr	r2, [r5, #-48]
	ldr	r1, .L5213
	ldr	r0, .L5213+4
	sub	r2, r2, #1
	str	r2, [r5, #-48]
	ldr	ip, [r4]
	ldr	r2, [r4, #4]
	str	r3, [r4]
	str	r3, [r4, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L5208
.L5175:
	ldr	r3, [r5, #68]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	dev_kfree_skb_any
.L5173:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r5, #-132]
	mov	r8, r0
	cmp	r7, #0
	beq	.L5178
	ldr	r3, [r5, #40]
	tst	r3, #2
	bne	.L5178
	sub	r3, r5, #64
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
	b	.L5177
.L5210:
	ldr	r4, [r5, #-64]
	ldr	r0, [sp, #4]
	sub	r10, r4, #36
	cmp	r4, r0
	beq	.L5178
	ldr	r0, [r9, #1152]
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	lr, #256
	mov	ip, #512
	mov	r1, r8
	mov	r0, r6
	beq	.L5178
	ldr	r8, [r4]
	ldr	r2, [r4, #4]
	str	r2, [r8, #4]
	str	r8, [r2]
	str	lr, [r4]
	str	ip, [r4, #4]
	ldr	r2, [fp, #172]
	str	r2, [r4, #-36]
	ldr	r2, [r9, #1152]
	str	r2, [r4, #-32]
	str	fp, [r4, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r7, #8]
	mov	r2, #208
	mov	r1, r10
	mov	r0, r7
	ldr	r8, [ip, #16]
	blx	r8
	mov	r2, r0
	mov	r0, r6
	str	r2, [sp]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp]
	mov	r8, r0
	cmp	r2, #0
	bne	.L5209
.L5177:
	ldr	r0, [r5, #-140]
	mov	r2, #0
	mvn	r3, #0
	mov	r1, #32
	cmp	r0, r2
	bne	.L5210
.L5178:
	mov	r1, r8
.L5207:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L5209:
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r1, .L5213+8
	ldr	r0, .L5213+12
	bl	___ratelimit
	cmp	r0, #0
	bne	.L5211
.L5179:
	ldr	r3, [r5, #-140]
	cmp	r3, #0
	bne	.L5212
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L5178
.L5212:
	ldr	r3, [r5, #-64]
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #4]
	str	r3, [r4, #4]
	str	r4, [r5, #-64]
	b	.L5178
.L5211:
	movw	r0, #:lower16:.LC352
	ldr	r1, .L5213+8
	movt	r0, #:upper16:.LC352
	bl	printk
	b	.L5179
.L5208:
	movw	r0, #:lower16:.LC91
	mvn	r2, #18
	ldr	r1, .L5213
	movt	r0, #:upper16:.LC91
	bl	printk
	b	.L5175
.L5214:
	.align	2
.L5213:
	.word	.LANCHOR2+2816
	.word	.LANCHOR0+1128
	.word	.LANCHOR2+2844
	.word	.LANCHOR0+1156
	.fnend
	.size	ghsuart_data_write_tomdm, .-ghsuart_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tohost, %function
ghsuart_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #160
	bxeq	lr
	ldr	r3, [r0, #-156]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #88
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-152]
	mov	r3, r0
	cmp	r9, #0
	beq	.L5218
	ldr	r2, [r4, #-112]
	sub	r1, r4, #112
	str	r1, [sp]
	cmp	r2, r1
	beq	.L5218
	ldr	r6, [r4, #-104]
	sub	r2, r4, #104
	str	r2, [sp, #4]
	cmp	r2, r6
	beq	.L5218
	movw	fp, #:lower16:.LANCHOR0
	mov	r7, #0
	movt	fp, #:upper16:.LANCHOR0
	mov	r1, r0
	b	.L5219
.L5239:
	ldr	r3, [r4, #-96]
	mov	lr, #512
	mov	r0, r8
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldrd	r2, [r6]
	str	r7, [r6]
	str	r7, [r6, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r5, [r4, #-112]
	str	r6, [r5, #-4]
	ldr	r3, [r6, #172]
	sub	r10, r5, #36
	str	r3, [r5, #-36]
	ldr	r3, [r6, #80]
	str	r3, [r5, #-32]
	ldr	ip, [r4, #32]
	ldr	r3, [fp, #1180]
	add	ip, ip, #1
	cmp	ip, r3
	str	ip, [r4, #32]
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfieq	r3, r7, #0, #1
	orrne	r3, r3, #1
	strbeq	r3, [r5, #-10]
	strbne	r3, [r5, #-10]
	streq	r7, [r4, #32]
	ldr	ip, [r5]
	ldr	r3, [r5, #4]
	str	r3, [ip, #4]
	str	ip, [r3]
	mov	r3, #256
	str	r3, [r5]
	str	lr, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r2, #208
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r1, r0
	bne	.L5238
	ldr	r2, [r4, #-112]
	ldr	r3, [r4, #48]
	ldr	r0, [sp]
	add	r3, r3, #1
	cmp	r0, r2
	str	r3, [r4, #48]
	beq	.L5234
	ldr	r6, [r4, #-104]
	ldr	r3, [sp, #4]
	cmp	r6, r3
	beq	.L5234
.L5219:
	cmp	r6, #0
	bne	.L5239
.L5234:
	mov	r3, r1
.L5218:
	mov	r1, r3
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L5238:
	mov	r3, r0
	movw	r0, #:lower16:.LC353
	ldr	r1, .L5240
	movt	r0, #:upper16:.LC353
	str	r3, [sp, #4]
	bl	printk
	ldr	r3, [sp]
	mov	r0, r6
	ldr	r2, [r4, #-112]
	str	r5, [r2, #4]
	strd	r2, [r5]
	str	r5, [r4, #-112]
	bl	dev_kfree_skb_any
	ldr	r3, [sp, #4]
	b	.L5218
.L5241:
	.align	2
.L5240:
	.word	.LANCHOR2+2868
	.fnend
	.size	ghsuart_data_write_tohost, .-ghsuart_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_close_sdio_work, %function
rmnet_close_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-108]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #-204]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5245
	blx	r3
.L5245:
	sub	r5, r4, #112
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-200]
	mov	r2, #0
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	ldr	r3, [r3]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	ip, [r4, #-196]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #-204]
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L5288
.L5246:
	ldr	r0, [r4, #-212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5248
	blx	r3
.L5248:
	ldr	r0, [r4, #-208]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5249
	blx	r3
.L5249:
	sub	r0, r4, #64
	bl	cancel_work_sync
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-108]
	mov	r6, r0
	cmp	r3, #0
	subne	fp, r4, #168
	movne	r10, #256
	movne	r9, #512
	movne	r8, #0
	bne	.L5250
.L5260:
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L5288:
	ldr	r3, [r4, #-108]
	cmp	r3, #0
	bne	.L5289
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5251:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #-160]
	sub	r3, r3, #1
	str	r3, [r4, #-160]
	str	r8, [r7, #-36]!
	ldr	r3, [r4, #-212]
	str	r3, [sp, #4]
	bl	kfree
	ldr	r3, [sp, #4]
	mov	r1, r7
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #12]
	blx	r3
.L5250:
	ldr	r3, [r4, #-168]
	mov	r0, #0
	cmp	r3, fp
	mov	r7, r3
	bne	.L5251
	sub	fp, r4, #140
	mov	r10, #256
	mov	r9, #512
	mov	r8, r0
	b	.L5252
.L5253:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r3, [r4, #-132]
	sub	r3, r3, #1
	str	r3, [r4, #-132]
	str	r8, [r7, #-36]!
	ldr	r3, [r4, #-208]
	str	r3, [sp, #4]
	bl	kfree
	ldr	r3, [sp, #4]
	mov	r1, r7
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #12]
	blx	r3
.L5252:
	ldr	r3, [r4, #-140]
	mov	r0, #0
	cmp	r3, fp
	mov	r7, r3
	bne	.L5253
	sub	r10, r4, #192
	mov	r9, #256
	mov	r8, #512
	b	.L5254
.L5255:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r4, #-184]
	sub	r3, r3, #1
	str	r3, [r4, #-184]
	ldr	r0, [r7, #-8]!
	bl	kfree
	mov	r0, r7
	bl	kfree
.L5254:
	ldr	r3, [r4, #-192]
	cmp	r3, r10
	mov	r7, r3
	bne	.L5255
	sub	r10, r4, #180
	mov	r9, #256
	mov	r8, #512
	b	.L5256
.L5257:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r3, [r4, #-172]
	sub	r3, r3, #1
	str	r3, [r4, #-172]
	ldr	r0, [r7, #-8]!
	bl	kfree
	mov	r0, r7
	bl	kfree
.L5256:
	ldr	r3, [r4, #-180]
	cmp	r3, r10
	mov	r7, r3
	bne	.L5257
	mov	r7, #0
	movw	r0, #:lower16:.LC354
	ldr	r1, .L5291
	movt	r0, #:upper16:.LC354
	sub	r8, r4, #156
	str	r7, [r4, #-104]
	bl	printk
	ldr	r3, [r4, #-156]
	cmp	r8, r3
	bne	.L5259
	b	.L5258
.L5290:
	ldr	r2, [r4, #-148]
	sub	r2, r2, #1
	str	r2, [r4, #-148]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-156]
	cmp	r3, r8
	beq	.L5258
.L5259:
	subs	r0, r3, #0
	bne	.L5290
.L5258:
	ldr	r3, [r4, #-128]
	sub	r8, r4, #128
	cmp	r3, r8
	beq	.L5260
	mov	r7, #0
.L5261:
	subs	r0, r3, #0
	beq	.L5260
	ldr	r2, [r4, #-120]
	sub	r2, r2, #1
	str	r2, [r4, #-120]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-128]
	cmp	r3, r8
	bne	.L5261
	b	.L5260
.L5289:
	movw	r0, #:lower16:.LC344
	ldr	r1, .L5291
	movt	r0, #:upper16:.LC344
	bl	printk
	b	.L5246
.L5292:
	.align	2
.L5291:
	.word	.LANCHOR2+2896
	.fnend
	.size	rmnet_close_sdio_work, .-rmnet_close_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect_work, %function
gsmd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r5, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r5, #8]
	tst	r3, #2
	bne	.L5302
.L5293:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5302:
	movw	ip, #:lower16:gsmd_notify
	sub	r3, r0, #76
	movt	ip, #:upper16:gsmd_notify
	mov	r4, r0
	ldr	r0, [r5, #4]
	mov	r2, r5
	mov	r1, #0
	str	ip, [sp]
	bl	smd_named_open_on_edge
	subs	r3, r0, #0
	beq	.L5293
	cmn	r3, #11
	bne	.L5297
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, r4
	movt	r3, #:upper16:.LANCHOR1
	mov	r2, #25
	ldr	r0, [r3, #3436]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_delayed_work
.L5297:
	ldr	r1, .L5303
	movw	r0, #:lower16:.LC167
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC167
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L5304:
	.align	2
.L5303:
	.word	.LANCHOR2+2920
	.fnend
	.size	gsmd_connect_work, .-gsmd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect_work, %function
gbam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-280]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-276]
	bl	msm_bam_dmux_close
	ldr	lr, [sp, #4]
	sub	r1, r4, #280
	mov	r0, #1
	ldr	r4, [sp]
	add	sp, sp, #8
	b	_clear_bit
	.fnend
	.size	gbam_disconnect_work, .-gbam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_disconnect_work, %function
gbam2bam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-168]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #164
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L5321
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5321:
	movw	r0, #:lower16:.LC355
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC355
	add	sp, sp, #8
	ldr	r1, .L5322
	b	printk
.L5323:
	.align	2
.L5322:
	.word	.LANCHOR2+2940
	.fnend
	.size	gbam2bam_disconnect_work, .-gbam2bam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_disconnect_work, %function
bam2bam_data_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-124]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #120
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L5335
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5335:
	movw	r0, #:lower16:.LC355
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC355
	add	sp, sp, #8
	ldr	r1, .L5336
	b	printk
.L5337:
	.align	2
.L5336:
	.word	.LANCHOR2+2968
	.fnend
	.size	bam2bam_data_disconnect_work, .-bam2bam_data_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	show_timestamp, %function
show_timestamp:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #3748]
	.pad #28
	sub	sp, sp, #28
	cmp	r0, #0
	moveq	r4, r0
	beq	.L5338
	mov	fp, r3
	movw	r3, #:lower16:kmalloc_caches
	str	r1, [sp, #16]
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [sp, #20]
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L5347
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L5351
.L5340:
	ldr	r7, .L5352
	add	r0, r7, #4
	bl	_raw_read_lock_irqsave
	ldr	r3, [r7]
	str	r0, [sp, #12]
	add	r4, r3, #1
	and	r4, r4, #31
	cmp	r3, r4
	moveq	r5, #0
	beq	.L5342
	movw	r8, #:lower16:.LC69
	mov	r5, #0
	movt	r8, #:upper16:.LC69
	sub	r9, r7, #4096
.L5341:
	add	r10, r9, r4, lsl #7
	mov	r1, #128
	mov	r0, r10
	bl	strnlen
	cmp	r0, #0
	rsb	r1, r5, #4096
	mov	r3, r10
	mov	r2, r8
	add	ip, r4, #1
	add	r0, r6, r5
	beq	.L5343
	bl	scnprintf
	ldr	r3, [r7]
	add	r4, r4, #1
	add	r5, r5, r0
	and	r4, r4, #31
	cmp	r3, r4
	bne	.L5341
.L5342:
	ldr	r0, .L5352+4
	ldr	r1, [sp, #12]
	bl	_raw_read_unlock_irqrestore
	ldrd	r0, [sp, #16]
	mov	r2, fp
	mov	r3, r6
	str	r5, [sp]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L5338:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5343:
	ldr	r3, [r7]
	and	r4, ip, #31
	cmp	r4, r3
	bne	.L5341
	b	.L5342
.L5347:
	mov	r6, #16
	b	.L5340
.L5351:
	mvn	r4, #11
	b	.L5338
.L5353:
	.align	2
.L5352:
	.word	dbg_data+4096
	.word	dbg_data+4100
	.fnend
	.size	show_timestamp, .-show_timestamp
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect_w, %function
ghsic_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #88
	mov	r3, r0
	beq	.L5354
	ldr	r2, [r0, #-84]
	cmp	r2, #0
	beq	.L5354
	ldr	r2, [r0, #92]
	tst	r2, #2
	bne	.L5365
.L5354:
	bx	lr
.L5365:
	movw	r0, #:lower16:.LC356
	ldr	r2, [r3, #68]
	mvn	r3, #18
	movt	r0, #:upper16:.LC356
	ldr	r1, .L5366
	b	printk
.L5367:
	.align	2
.L5366:
	.word	.LANCHOR2+3000
	.fnend
	.size	ghsic_data_connect_w, .-ghsic_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect_w, %function
ghsuart_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #36
	bxeq	lr
	ldr	r3, [r0, #52]
	tst	r3, #2
	bxeq	lr
	ldr	r3, [r0, #52]
	tst	r3, #1
	beq	.L5381
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #20
	mov	r1, #300
	str	lr, [sp, #4]
	bl	wait_for_completion_timeout
	cmp	r0, #0
	beq	.L5384
	movw	r0, #:lower16:.LC358
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC358
	add	sp, sp, #8
	ldr	r1, .L5385
	b	printk
.L5384:
	movw	r0, #:lower16:.LC357
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC357
	add	sp, sp, #8
	ldr	r1, .L5385
	b	printk
.L5381:
	movw	r0, #:lower16:.LC358
	ldr	r1, .L5385
	movt	r0, #:upper16:.LC358
	b	printk
.L5386:
	.align	2
.L5385:
	.word	.LANCHOR2+3024
	.fnend
	.size	ghsuart_ctrl_connect_w, .-ghsuart_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect_w, %function
ghsuart_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #112
	bxeq	lr
	ldr	r3, [r0, #-108]
	cmp	r3, #0
	bxeq	lr
	ldr	r3, [r0, #76]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #76]
	tst	r3, #1
	beq	.L5389
	mov	r1, #300
	sub	r0, r0, #84
	bl	wait_for_completion_timeout
	cmp	r0, #0
	beq	.L5405
.L5389:
	movw	r0, #:lower16:.LC359
	ldr	r2, [r4, #68]
	mvn	r3, #18
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC359
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r1, .L5406
	b	printk
.L5405:
	movw	r0, #:lower16:.LC357
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC357
	add	sp, sp, #8
	ldr	r1, .L5406
	b	printk
.L5407:
	.align	2
.L5406:
	.word	.LANCHOR2+3048
	.fnend
	.size	ghsuart_data_connect_w, .-ghsuart_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	str_to_xport, %function
str_to_xport:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC360
	mov	r1, r4
	movt	r0, #:upper16:.LC360
	str	lr, [sp, #4]
	mov	r2, #12
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #1
	beq	.L5408
	movw	r0, #:lower16:.LC361
	mov	r2, #12
	movt	r0, #:upper16:.LC361
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #2
	beq	.L5408
	movw	r0, #:lower16:.LC362
	mov	r2, #12
	movt	r0, #:upper16:.LC362
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #3
	beq	.L5408
	movw	r0, #:lower16:.LC363
	mov	r2, #12
	movt	r0, #:upper16:.LC363
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #4
	beq	.L5408
	movw	r0, #:lower16:.LC364
	mov	r2, #12
	movt	r0, #:upper16:.LC364
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #5
	beq	.L5408
	movw	r0, #:lower16:.LC365
	mov	r2, #12
	movt	r0, #:upper16:.LC365
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #6
	beq	.L5408
	movw	r0, #:lower16:.LC366
	mov	r2, #12
	movt	r0, #:upper16:.LC366
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #7
	beq	.L5408
	movw	r0, #:lower16:.LC367
	mov	r2, #12
	movt	r0, #:upper16:.LC367
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #8
	beq	.L5408
	movw	r0, #:lower16:.LC368
	mov	r2, #12
	movt	r0, #:upper16:.LC368
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #9
	beq	.L5408
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	moveq	r0, #10
	movne	r0, #0
.L5408:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	str_to_xport, .-str_to_xport
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	hid_function_bind_config, %function
hid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC369
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	movt	r0, #:upper16:.LC369
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	mov	r0, r5
	mov	r2, #0
	ldr	r1, .L5430
	bl	hidg_bind_config
	subs	r4, r0, #0
	bne	.L5428
	movw	r0, #:lower16:.LC371
	movt	r0, #:upper16:.LC371
	bl	printk
	mov	r0, r5
	mov	r2, #1
	ldr	r1, .L5430+4
	bl	hidg_bind_config
	subs	r4, r0, #0
	bne	.L5429
.L5421:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5428:
	ldr	r2, .L5430+8
	movw	r0, #:lower16:.LC370
	mov	r3, r4
	movt	r0, #:upper16:.LC370
	mov	r1, r2
	bl	printk
	b	.L5421
.L5429:
	ldr	r2, .L5430+8
	movw	r0, #:lower16:.LC372
	mov	r3, r4
	movt	r0, #:upper16:.LC372
	mov	r1, r2
	bl	printk
	b	.L5421
.L5431:
	.align	2
.L5430:
	.word	.LANCHOR0+1184
	.word	.LANCHOR0+1256
	.word	.LANCHOR2+3072
	.fnend
	.size	hid_function_bind_config, .-hid_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_read, %function
ffs_epfile_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r4, r2, #1
	strd	r6, [sp, #8]
	mvn	r4, r4, lsr #10
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mvn	r4, r4, lsl #10
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r3, r4, #1
	str	r3, [sp, #4]
	ldr	r6, [fp, #36]
	ldr	r7, [fp, #40]
	cmp	r6, #0
	bne	.L5456
	str	r2, [sp, #8]
	ldr	r2, [r7, #96]
	mov	r8, r0
	str	r1, [sp, #12]
	cmp	r2, #2
	bne	.L5434
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L5435:
	ldr	r5, [fp, #44]
	cmp	r5, #0
	beq	.L5472
.L5454:
	ldrb	r4, [fp, #57]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L5440
	ldrb	r2, [fp, #58]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L5473
.L5441:
	ldr	r2, [r8, #32]
	mov	r0, fp
	tst	r2, #2048
	bne	.L5474
	bl	mutex_lock_interruptible
	subs	r10, r0, #0
	bne	.L5436
.L5445:
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bl	_raw_spin_lock_irq
	ldr	r2, [fp, #44]
	cmp	r2, r5
	bne	.L5475
	cmp	r4, #0
	bne	.L5476
	ldr	r8, [r5, #4]
	movw	r0, #:lower16:ffs_epfile_io_complete
	mov	r2, #32
	ldr	r3, [sp, #4]
	movt	r0, #:upper16:ffs_epfile_io_complete
	str	r6, [r8]
	mov	r1, r8
	str	r3, [r8, #4]
	str	r0, [r8, #28]
	str	r4, [r7, #72]!
	str	r7, [r8, #32]
	ldr	r0, [r5]
	ldr	ip, [r0, #8]
	ldr	r4, [ip, #16]
	blx	r4
	mov	r4, r0
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	cmp	r4, #0
	blt	.L5463
	mov	r0, r7
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bne	.L5477
	bl	_raw_spin_lock_irq
	ldr	r0, [fp, #40]
	ldr	r2, [fp, #44]
	cmp	r5, r2
	beq	.L5451
	add	r0, r0, #28
	mvn	r10, #18
	bl	_raw_spin_unlock_irq
.L5448:
	mov	r0, fp
	bl	mutex_unlock
.L5436:
	mov	r0, r6
	bl	kfree
.L5432:
	mov	r0, r10
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5474:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L5445
.L5462:
	mvn	r10, #10
	b	.L5436
.L5440:
	cmp	r6, #0
	bne	.L5441
	movw	r1, #32976
	ldr	r0, [sp, #4]
	bl	__kmalloc
	subs	r6, r0, #0
	bne	.L5441
	mvn	r10, #11
	b	.L5432
.L5472:
	ldr	r2, [r8, #32]
	tst	r2, #2048
	bne	.L5462
	ldr	r2, [fp, #36]
	cmp	r2, #0
	bne	.L5459
	ldr	ip, [r9, #12]
	movw	r1, #:lower16:autoremove_wake_function
	add	r0, sp, #32
	movt	r1, #:upper16:autoremove_wake_function
	add	r10, fp, #24
	str	r2, [sp, #20]
	str	r0, [sp, #32]
	str	ip, [sp, #24]
	str	r1, [sp, #28]
	str	r0, [sp, #36]
	b	.L5439
.L5478:
	bl	schedule
.L5439:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r5, [fp, #44]
	cmp	r5, #0
	bne	.L5437
	ldr	r2, [r9, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L5478
	mov	r0, r10
	add	r1, sp, #20
	mov	r10, #65024
	bl	finish_wait
	movt	r10, 65535
	b	.L5436
.L5437:
	add	r1, sp, #20
	mov	r0, r10
	bl	finish_wait
	b	.L5454
.L5451:
	ldr	r10, [r5, #24]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	cmp	r10, #0
	ble	.L5448
	ldr	r3, [sp, #8]
	cmp	r3, r10
	mvncc	r10, #74
	bcc	.L5448
	mov	r3, sp
	bic	r2, r3, #8128
	ldr	r3, [sp, #12]
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r10; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L5479
.L5452:
	mvn	r10, #13
	b	.L5448
.L5475:
	ldr	r0, [fp, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	mutex_unlock
	ldr	r2, [fp, #40]
	ldr	r2, [r2, #96]
	cmp	r2, #2
	beq	.L5435
.L5434:
	movw	r0, #:lower16:.LC12
	movw	r1, #787
	movt	r0, #:upper16:.LC12
	mvn	r10, #18
	bl	warn_slowpath_null
	b	.L5436
.L5463:
	mvn	r10, #4
	b	.L5448
.L5476:
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L5480
	ldr	r2, [r0, #8]
	mov	r1, #1
	ldr	r2, [r2, #24]
	blx	r2
.L5455:
	ldr	r0, [fp, #40]
	mvn	r10, #73
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	b	.L5448
.L5477:
	bl	_raw_spin_lock_irq
	ldr	r2, [fp, #44]
	cmp	r5, r2
	bne	.L5450
	ldr	r0, [r5]
	mov	r1, r8
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
.L5450:
	ldr	r0, [fp, #40]
	mvn	r10, #3
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	b	.L5448
.L5459:
	mvn	r10, #18
	b	.L5436
.L5479:
	mov	r0, r3
	mov	r2, r10
	mov	r1, r6
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L5448
	b	.L5452
.L5456:
	mvn	r10, #18
	b	.L5432
.L5473:
	mvn	r10, #21
	b	.L5436
.L5480:
	movw	r0, #:lower16:.LC12
	movw	r1, #862
	movt	r0, #:upper16:.LC12
	bl	warn_slowpath_null
	b	.L5455
	.fnend
	.size	ffs_epfile_read, .-ffs_epfile_read
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write.part.74, %function
gsdio_write.part.74:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	add	r5, r0, #4
	mov	r4, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC373
	ldr	r2, [r4]
	mvn	r3, #18
	movt	r0, #:upper16:.LC373
	ldr	r1, .L5483
	pop	{r4, r5, r6, lr}
	b	printk
.L5484:
	.align	2
.L5483:
	.word	.LANCHOR2+3100
	.fnend
	.size	gsdio_write.part.74, .-gsdio_write.part.74
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_notify, %function
gbam_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L5487
	cmp	r1, #1
	bne	.L5485
	cmp	r2, #0
	bne	.L5502
.L5485:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5487:
	cmp	r2, #0
	beq	.L5485
	add	r6, r0, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L5491
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1316]
	cmp	r2, r3
	bls	.L5490
	ldr	r3, [r4, #244]
	ldr	r0, .L5503
	add	r3, r3, #1
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	beq	.L5491
	movw	r0, #:lower16:.LC374
	ldr	r1, .L5503
	movt	r0, #:upper16:.LC374
	ldr	r2, [r4, #244]
	bl	printk
.L5491:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any
.L5502:
	mov	r0, r2
	add	r5, r4, #4
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #240]
	mov	r1, r0
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #240]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #80
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #3568]
	b	queue_work
.L5490:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5]
	str	r5, [r3]
	ldr	r3, [r4, #44]
	str	r5, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost
.L5504:
	.align	2
.L5503:
	.word	.LANCHOR2+3112
	.fnend
	.size	gbam_notify, .-gbam_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_resume, %function
frmnet_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldrb	ip, [r0, #108]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LANCHOR1
	lsl	lr, ip, #1
	add	r3, lr, ip
	add	r3, r1, r3, lsl #3
	ldr	r3, [r3, #2340]
	sub	r0, r3, #1
	cmp	r0, #9
	bhi	.L5506
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r0, lsl #2
	ldr	r2, [r2, #676]
.L5507:
	mov	r0, #1
	lsl	r0, r0, r3
	tst	r0, #1824
	bne	.L5505
	tst	r0, #192
	beq	.L5508
	sub	r3, r3, #6
	cmp	r3, #1
	bls	.L5515
.L5505:
	ldr	pc, [sp], #4
.L5506:
	cmp	r3, #10
	movw	r2, #:lower16:.LC102
	movt	r2, #:upper16:.LC102
	bls	.L5507
.L5508:
	movw	r0, #:lower16:.LC375
	ldr	r1, .L5516
	movt	r0, #:upper16:.LC375
	ldr	lr, [sp], #4
	b	printk
.L5515:
	add	ip, lr, ip
	ldr	r0, [r1, #3568]
	add	ip, r1, ip, lsl #3
	ldr	lr, [sp], #4
	ldrb	r3, [ip, #2348]	@ zero_extendqisi2
	add	r1, r1, r3, lsl #2
	ldr	r1, [r1, #3752]
	add	r1, r1, #332
	b	queue_work
.L5517:
	.align	2
.L5516:
	.word	.LANCHOR2+3132
	.fnend
	.size	frmnet_resume, .-frmnet_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_header, %function
rndis_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r4, [r0, #116]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L5519
	ldr	r4, [r0, #136]
	cmp	r4, #0
	beq	.L5520
	mov	r1, #44
	mov	r0, r4
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	mov	r6, r5
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	add	r2, r2, #44
	str	r2, [r4, #4]	@ unaligned
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	str	r3, [r4, #12]	@ unaligned
.L5518:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5519:
	mov	r1, #44
	mov	r0, r5
	bl	skb_realloc_headroom
	subs	r6, r0, #0
	beq	.L5522
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r7, r0
	bl	__memzero
	mov	r3, #1
	mov	r2, #36
	strb	r3, [r7]
	strb	r4, [r7, #1]
	strb	r4, [r7, #2]
	strb	r4, [r7, #3]
	ldr	r3, [r6, #80]
	str	r3, [r7, #4]	@ unaligned
	strb	r2, [r7, #8]
	strb	r4, [r7, #9]
	strb	r4, [r7, #10]
	strb	r4, [r7, #11]
	ldr	r3, [r6, #80]
	sub	r3, r3, #44
	str	r3, [r7, #12]	@ unaligned
.L5522:
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L5518
.L5520:
	movw	r0, #:lower16:.LC376
	mov	r6, r4
	movt	r0, #:upper16:.LC376
	bl	printk
	b	.L5518
	.fnend
	.size	rndis_add_header, .-rndis_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup.part.98, %function
bam_data_setup.part.98:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r2, #:lower16:kmalloc_caches
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movt	r2, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	ldr	r3, [r4, #3764]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r4, #3764]
	beq	.L5532
	mov	r2, #232
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L5534
.L5528:
	movw	r3, #:lower16:bam2bam_data_connect_work
	movw	lr, #:lower16:bam2bam_data_disconnect_work
	str	r2, [r2, #16]
	movw	ip, #:lower16:bam2bam_data_suspend_work
	movt	r3, #:upper16:bam2bam_data_connect_work
	movt	lr, #:upper16:bam2bam_data_disconnect_work
	movt	ip, #:upper16:bam2bam_data_suspend_work
	movw	r1, #:lower16:bam2bam_data_resume_work
	add	r6, r2, #172
	add	r5, r2, #188
	movt	r1, #:upper16:bam2bam_data_resume_work
	mov	r0, #0
	str	r3, [r2, #180]
	mov	r3, #2560
	str	lr, [r2, #196]
	add	lr, r2, #204
	str	ip, [r2, #212]
	add	ip, r2, #220
	str	r0, [r2]
	str	r3, [r2, #168]
	str	r6, [r2, #172]
	str	r6, [r2, #176]
	str	r3, [r2, #184]
	str	r5, [r2, #188]
	str	r5, [r2, #192]
	str	r2, [r4, #3440]
	str	r3, [r2, #200]
	str	lr, [r2, #204]
	str	lr, [r2, #208]
	str	r3, [r2, #216]
	str	ip, [r2, #220]
	str	ip, [r2, #224]
	str	r1, [r2, #228]
.L5527:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5532:
	mov	r2, #16
	b	.L5528
.L5534:
	ldr	r3, [r4, #3764]
	movw	r0, #:lower16:.LC377
	mov	r5, r2
	movt	r0, #:upper16:.LC377
	ldr	r1, .L5535
	mov	r7, r2
	add	r6, r4, #3440
	sub	r3, r3, #1
	str	r3, [r4, #3764]
	bl	printk
.L5529:
	ldr	r3, [r4, #3764]
	cmp	r5, r3
	blt	.L5531
	ldr	r0, [r4, #3444]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L5527
.L5531:
	ldr	r0, [r6, r5, lsl #2]
	bl	kfree
	str	r7, [r6, r5, lsl #2]
	add	r5, r5, #1
	b	.L5529
.L5536:
	.align	2
.L5535:
	.word	.LANCHOR2+3148
	.fnend
	.size	bam_data_setup.part.98, .-bam_data_setup.part.98
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind_config, %function
android_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r1, .L5557
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r3, #2228]
	ldr	r0, [r0, #24]
	cmp	r3, r1
	beq	.L5538
	sub	r2, r3, #208
	ldr	r3, [r3, #-200]
	cmp	r0, r3
	bne	.L5539
	b	.L5538
.L5540:
	ldr	r3, [r3, #-200]
	cmp	r0, r3
	beq	.L5538
.L5539:
	ldr	r3, [r2, #208]
	cmp	r3, r1
	sub	r2, r3, #208
	bne	.L5540
.L5538:
	mov	r5, r6
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L5541
.L5547:
	ldr	r0, [r4]
	mov	r1, r6
	ldr	r3, [r0, #40]
	blx	r3
	subs	r7, r0, #0
	bne	.L5555
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L5547
.L5541:
	mov	r7, #0
.L5537:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5555:
	ldr	r2, .L5557+4
	movw	r0, #:lower16:.LC378
	add	r5, r6, #36
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC378
	mov	r8, #512
	mov	r4, #256
	mov	r1, r2
	ldr	r3, [r3]
	bl	printk
	b	.L5544
.L5545:
	ldrd	r2, [r1]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r3, [r1, #-36]
	stm	r1, {r4, r8}
	cmp	r3, #0
	bne	.L5556
.L5544:
	ldr	r1, [r6, #36]
	cmp	r1, r5
	bne	.L5545
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L5537
	mov	r0, r6
	blx	r3
	b	.L5537
.L5556:
	sub	r1, r1, #64
	mov	r0, r6
	blx	r3
	b	.L5544
.L5558:
	.align	2
.L5557:
	.word	.LANCHOR1+2228
	.word	.LANCHOR2+3164
	.fnend
	.size	android_bind_config, .-android_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.105, %function
_snd_pcm_hw_param_set.constprop.105:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L5583
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5562
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5561
.L5562:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #4]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #4]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L5569
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5565
.L5569:
	mov	r0, r5
	b	.L5564
.L5583:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5561
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5562
.L5561:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #4]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #4]
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L5584
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L5559
.L5565:
	mvn	r0, #21
.L5564:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1
	orr	r3, r3, #1
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5559:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5584:
	mov	r0, #0
	b	.L5559
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.105, .-_snd_pcm_hw_param_set.constprop.105
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.106, %function
_snd_pcm_hw_param_set.constprop.106:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #36
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L5609
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5588
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L5587
.L5588:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #36]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #36]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L5595
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L5591
.L5595:
	mov	r0, r5
	b	.L5590
.L5609:
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L5587
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5588
.L5587:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #36]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #36]
	ldr	r0, [r4, #36]
	cmp	r0, #0
	bne	.L5610
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L5585
.L5591:
	mvn	r0, #21
.L5590:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2
	orr	r3, r3, #2
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5585:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5610:
	mov	r0, #0
	b	.L5585
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.106, .-_snd_pcm_hw_param_set.constprop.106
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.107, %function
_snd_pcm_hw_param_set.constprop.107:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #284
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #4]
	str	r2, [sp, #8]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L5611
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1024
	orr	r3, r3, #1024
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5611:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.107, .-_snd_pcm_hw_param_set.constprop.107
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.108, %function
_snd_pcm_hw_param_set.constprop.108:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #296
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #4]
	str	r2, [sp, #8]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L5617
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2048
	orr	r3, r3, #2048
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L5617:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.108, .-_snd_pcm_hw_param_set.constprop.108
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_open_streams, %function
gaudio_open_streams:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r7, #3768]
	cmp	r4, #0
	beq	.L5662
	movw	r6, #:lower16:kmalloc_caches
	mov	r3, #3
	ldr	r8, [r4, #116]
	movt	r6, #:upper16:kmalloc_caches
	mov	r2, #8000
	ldr	r0, [r6, #40]
	str	r3, [r4, #120]
	mov	r3, #2
	str	r3, [r4, #124]
	str	r3, [r4, #128]
	cmp	r0, #0
	str	r2, [r4, #132]
	beq	.L5648
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L5663
.L5626:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #120]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.105
	ldr	r1, [r4, #124]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.106
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.107
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.108
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r8
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5664
.L5628:
	movw	r1, #16657
	mov	r2, r5
	movt	r1, 49756
	mov	r0, r8
	bl	snd_pcm_kernel_ioctl
	subs	r9, r0, #0
	blt	.L5665
	mov	r2, #0
	mov	r0, r8
	movw	r1, #16704
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5666
.L5630:
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L5650
	ldr	r3, [r5, #8]
	cmp	r3, #0
	bne	.L5651
.L5631:
	str	r3, [r4, #120]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L5652
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L5633
.L5634:
	str	r3, [r4, #124]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #128]
	ldr	r3, [r5, #296]
	str	r3, [r4, #132]
	bl	kfree
	ldr	r5, [r7, #3768]
	mov	ip, #3
	mov	r1, #2
	ldr	r0, [r6, #40]
	mov	r2, #1
	mov	r3, #8000
	ldr	r7, [r5, #144]
	cmp	r0, #0
	ldr	r8, [r7, #208]
	str	ip, [r5, #148]
	str	r1, [r5, #152]
	strd	r2, [r5, #156]
	beq	.L5667
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L5668
.L5635:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r5, #148]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.105
	ldr	r1, [r5, #152]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.106
	ldr	r1, [r5, #156]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.107
	ldr	r1, [r5, #160]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.108
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5669
.L5638:
	movw	r1, #16657
	mov	r2, r4
	movt	r1, 49756
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r9, r0, #0
	blt	.L5670
	mov	r2, #0
	movw	r1, #16704
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L5671
.L5640:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L5655
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L5656
.L5641:
	str	r3, [r5, #148]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L5657
	ldr	r3, [r4, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L5643
.L5644:
	str	r3, [r5, #152]
	ldr	r3, [r4, #284]
	str	r3, [r5, #156]
	ldr	r3, [r4, #296]
	str	r3, [r5, #160]
	ldr	r0, [r8, #52]
	bl	snd_pcm_format_physical_width
	str	r0, [r8, #88]
	mov	r0, r4
	bl	kfree
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L5659
	mov	r2, #104
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L5672
.L5645:
	ldr	r3, [r4, #332]
	mov	r2, #1
	mov	ip, #0
	mvn	lr, #-2147483648
	movw	r1, #16659
	mov	r0, r7
	movt	r1, 49256
	str	ip, [r5]
	str	r2, [r5, #4]
	lsr	r3, r3, r2
	str	r3, [r5, #12]
	str	r3, [r5, #16]
	str	r2, [r5, #20]
	mov	r2, r5
	str	lr, [r5, #24]
	str	ip, [r5, #28]
	str	ip, [r5, #32]
	bl	snd_pcm_kernel_ioctl
	subs	r9, r0, #0
	blt	.L5673
	mov	r0, r5
	bl	kfree
	cmp	r9, #0
	bne	.L5637
	movw	r0, #:lower16:.LC389
	ldr	r1, .L5674
	movt	r0, #:upper16:.LC389
	bl	printk
.L5623:
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5668:
	movw	r0, #:lower16:.LC384
	ldr	r1, .L5674+4
	mvn	r9, #11
	movt	r0, #:upper16:.LC384
	bl	printk
.L5637:
	movw	r0, #:lower16:.LC388
	mov	r2, r9
	ldr	r1, .L5674
	movt	r0, #:upper16:.LC388
	bl	printk
	b	.L5623
.L5667:
	mov	r4, #16
	b	.L5635
.L5648:
	mov	r5, #16
	b	.L5626
.L5659:
	mov	r5, #16
	b	.L5645
.L5657:
	mov	r1, #0
.L5643:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/xawlw/kernel/arg/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L5644
.L5652:
	mov	r1, #0
.L5633:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/xawlw/kernel/arg/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L5634
.L5655:
	mov	r1, #0
.L5642:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/xawlw/kernel/arg/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L5641
.L5650:
	mov	r1, #0
.L5632:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/xawlw/kernel/arg/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L5631
.L5656:
	mov	r1, #32
	b	.L5642
.L5651:
	mov	r1, #32
	b	.L5632
.L5663:
	mvn	r9, #11
.L5627:
	movw	r0, #:lower16:.LC383
	mov	r2, r9
	ldr	r1, .L5674
	movt	r0, #:upper16:.LC383
	bl	printk
	b	.L5623
.L5673:
	movw	r0, #:lower16:.LC387
	mov	r2, r9
	ldr	r1, .L5674+4
	movt	r0, #:upper16:.LC387
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L5637
.L5671:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L5674+4
	movt	r0, #:upper16:.LC385
	bl	printk
	b	.L5640
.L5664:
	movw	r0, #:lower16:.LC380
	ldr	r1, .L5674+8
	movt	r0, #:upper16:.LC380
	bl	printk
	b	.L5628
.L5662:
	ldr	r2, .L5674
	movw	r0, #:lower16:.LC379
	mvn	r9, #18
	movt	r0, #:upper16:.LC379
	mov	r1, r2
	bl	printk
	b	.L5623
.L5670:
	movw	r0, #:lower16:.LC381
	mov	r2, r9
	ldr	r1, .L5674+4
	movt	r0, #:upper16:.LC381
	bl	printk
	mov	r0, r4
	bl	kfree
	b	.L5637
.L5669:
	movw	r0, #:lower16:.LC380
	ldr	r1, .L5674+4
	movt	r0, #:upper16:.LC380
	bl	printk
	b	.L5638
.L5666:
	movw	r0, #:lower16:.LC382
	ldr	r1, .L5674+8
	movt	r0, #:upper16:.LC382
	bl	printk
	b	.L5630
.L5665:
	movw	r0, #:lower16:.LC381
	mov	r2, r9
	ldr	r1, .L5674+8
	movt	r0, #:upper16:.LC381
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L5627
.L5672:
	movw	r0, #:lower16:.LC386
	ldr	r1, .L5674+4
	mvn	r9, #11
	movt	r0, #:upper16:.LC386
	bl	printk
	b	.L5637
.L5675:
	.align	2
.L5674:
	.word	.LANCHOR2+3196
	.word	.LANCHOR2+3240
	.word	.LANCHOR2+3216
	.fnend
	.size	gaudio_open_streams, .-gaudio_open_streams
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_capture_work, %function
f_audio_capture_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r5, #1320]
	bl	f_audio_buffer_alloc
	subs	r6, r0, #0
	beq	.L5685
	movw	r7, #:lower16:.LANCHOR1
	ldr	r8, [r4, #-68]
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r6]
	ldrb	r2, [r7, #2224]	@ zero_extendqisi2
	ldr	r9, [r5, #1320]
	ldr	fp, [r8, #208]
	str	r3, [sp]
	cmp	r2, #0
	beq	.L5686
.L5678:
	lsl	r3, r9, #3
	mov	r5, #57344
	movt	r5, 65535
	str	r3, [sp, #4]
	mov	r3, sp
	and	r9, r3, r5
.L5683:
	ldr	r3, [fp, #168]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r8
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L5681
	ands	r2, r2, #1
	bne	.L5681
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L5687
.L5681:
	mov	r3, #0
	ldr	r7, [fp, #88]
	mov	r0, r8
	ldr	r10, [r9, #8]
	str	r3, [r9, #8]
	ldr	r1, [sp]
	ldr	r3, [sp, #4]
	udiv	r7, r3, r7
	mov	r2, r7
	bl	snd_pcm_lib_read
	cmp	r7, r0
	mov	r2, r0
	bne	.L5688
	mov	r3, sp
	and	r5, r5, r3
	str	r10, [r5, #8]
.L5680:
	sub	r5, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #20]
	add	r2, r6, #8
	add	ip, r4, #16
	mov	r1, r0
	mov	r0, r5
	str	r2, [r4, #20]
	str	ip, [r6, #8]
	str	r3, [r6, #12]
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L5686:
	bl	gaudio_open_streams
	subs	r2, r0, #0
	moveq	r2, #1
	strbeq	r2, [r7, #2224]
	beq	.L5678
	movw	r0, #:lower16:.LC391
	ldr	r1, .L5689
	movt	r0, #:upper16:.LC391
	bl	printk
	b	.L5680
.L5685:
	ldr	r2, .L5689+4
	movw	r0, #:lower16:.LC390
	movt	r0, #:upper16:.LC390
	mov	r1, r2
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L5688:
	movw	r0, #:lower16:.LC393
	ldr	r1, .L5689
	movt	r0, #:upper16:.LC393
	bl	printk
	str	r10, [r9, #8]
	b	.L5683
.L5687:
	mov	r2, r0
	movw	r0, #:lower16:.LC385
	ldr	r1, .L5689
	movt	r0, #:upper16:.LC385
	bl	printk
	movw	r0, #:lower16:.LC392
	ldr	r1, .L5689+4
	movt	r0, #:upper16:.LC392
	bl	printk
	b	.L5680
.L5690:
	.align	2
.L5689:
	.word	.LANCHOR2+3288
	.word	.LANCHOR2+3264
	.fnend
	.size	f_audio_capture_work, .-f_audio_capture_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_init, %function
mbim_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC394
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	ldr	r1, .L5702
	movt	r0, #:upper16:.LC394
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5696
	mov	r2, #228
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L5701
.L5692:
	mov	r6, #0
	add	ip, r4, #200
	ldr	r2, .L5702+4
	add	r3, r4, #208
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC221
	strb	r6, [r4, #128]
	add	r0, r4, #100
	str	r6, [r4, #196]
	movt	r1, #:upper16:.LC221
	str	ip, [r4, #200]
	str	ip, [r4, #204]
	str	r3, [r4, #208]
	str	r3, [r4, #212]
	str	r4, [r5, #3712]
	str	r6, [r5, #3716]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC222
	add	r0, r4, #112
	ldr	r2, .L5702+4
	movt	r1, #:upper16:.LC222
	bl	__init_waitqueue_head
	ldr	r3, [r5, #3708]
	str	r6, [r4, #84]
	str	r6, [r4, #88]
	ldr	r0, .L5702+8
	str	r6, [r4, #92]
	str	r6, [r4, #96]
	add	r3, r3, #1
	str	r4, [r5, #2412]
	str	r3, [r5, #3708]
	bl	misc_register
	subs	r4, r0, #0
	beq	.L5694
	movw	r0, #:lower16:.LC396
	ldr	r1, .L5702
	movt	r0, #:upper16:.LC396
	bl	printk
.L5693:
	movw	r0, #:lower16:.LC398
	ldr	r1, .L5702
	movt	r0, #:upper16:.LC398
	bl	printk
	ldr	r3, [r5, #3708]
	cmp	r3, #0
	beq	.L5691
	ldr	r0, [r5, #3712]
	bl	kfree
	mov	r3, #0
	str	r3, [r5, #3712]
.L5691:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5696:
	mov	r4, #16
	b	.L5692
.L5694:
	movw	r0, #:lower16:.LC397
	ldr	r1, .L5702
	ldr	r2, [r5, #3708]
	movt	r0, #:upper16:.LC397
	bl	printk
	b	.L5691
.L5701:
	movw	r0, #:lower16:.LC395
	ldr	r1, .L5702
	movw	r5, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC395
	movt	r5, #:upper16:.LANCHOR1
	bl	printk
	mvn	r4, #11
	b	.L5693
.L5703:
	.align	2
.L5702:
	.word	.LANCHOR2+3304
	.word	.LANCHOR1+3772
	.word	.LANCHOR0+888
	.fnend
	.size	mbim_function_init, .-mbim_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect.constprop.113, %function
bam_data_disconnect.constprop.113:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #3764]
	str	lr, [sp, #12]
	cmp	r3, #0
	ble	.L5721
	cmp	r0, #0
	beq	.L5722
	ldr	r5, [r4, #3440]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L5707
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L5707
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L5707
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L5707:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L5723
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L5724
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5723:
	add	r1, r5, #184
	ldr	r0, [r4, #3444]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
.L5722:
	movw	r0, #:lower16:.LC400
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC400
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L5725
	b	printk
.L5721:
	ldr	r1, .L5725
	movw	r0, #:lower16:.LC399
	mov	r2, #0
	movt	r0, #:upper16:.LC399
.L5720:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L5724:
	ldr	r2, .L5725
	movw	r0, #:lower16:.LC401
	movt	r0, #:upper16:.LC401
	mov	r1, r2
	b	.L5720
.L5726:
	.align	2
.L5725:
	.word	.LANCHOR2+3316
	.fnend
	.size	bam_data_disconnect.constprop.113, .-bam_data_disconnect.constprop.113
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gen_ndis_query_resp.constprop.118, %function
gen_ndis_query_resp.constprop.118:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r7, r1, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #184
	sub	sp, sp, #184
	beq	.L5770
	ldr	r5, [r7, #8]
	cmp	r5, #0
	beq	.L5770
	mov	r3, #16
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r4, r0
	str	r3, [r5, #20]
	mov	r1, sp
	ldr	r0, [r6, #3800]
	bl	dev_get_stats
	movw	r3, #278
	add	r8, r5, #24
	movt	r3, 1
	cmp	r4, r3
	beq	.L5761
	bls	.L5791
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	beq	.L5783
	bls	.L5792
	movw	r3, #261
	movt	r3, 257
	cmp	r4, r3
	beq	.L5764
	bhi	.L5759
	movw	r3, #259
	movt	r3, 257
	cmp	r4, r3
	beq	.L5760
	bls	.L5783
.L5761:
	mov	r2, #1
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5766
.L5791:
	movw	r3, #266
	movt	r3, 1
	cmp	r4, r3
	beq	.L5782
	bls	.L5793
	movw	r3, #270
	movt	r3, 1
	cmp	r4, r3
	beq	.L5741
	bhi	.L5742
	mov	r3, #268
	movt	r3, 1
	cmp	r4, r3
	beq	.L5743
	bls	.L5782
	ldr	r6, [r6, #3812]
	cmp	r6, #0
	beq	.L5768
	mov	r0, r6
	bl	strlen
	mov	r4, r0
	mov	r2, r0
	mov	r1, r6
	mov	r0, r8
	bl	memcpy
	mov	r6, #0
	add	r3, r4, #24
	b	.L5766
.L5793:
	movw	r3, #259
	movt	r3, 1
	cmp	r4, r3
	beq	.L5740
	bls	.L5794
	movw	r3, #262
	movt	r3, 1
	cmp	r4, r3
	beq	.L5738
	movw	r3, #263
	movt	r3, 1
	cmp	r4, r3
	bne	.L5795
	ldr	r3, [r6, #3788]
	cmp	r3, #1
	beq	.L5764
	ldr	r2, [r6, #3784]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L5766
.L5792:
	movw	r3, #258
	movt	r3, 2
	cmp	r4, r3
	beq	.L5751
	bls	.L5796
	mov	r3, #260
	movt	r3, 2
	cmp	r4, r3
	beq	.L5755
	bcc	.L5756
	movw	r3, #261
	movt	r3, 2
	cmp	r4, r3
	bne	.L5729
	cmp	r0, #0
	beq	.L5781
	ldr	r2, [r0, #48]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5766
.L5759:
	movw	r3, #258
	movt	r3, 258
	cmp	r4, r3
	beq	.L5764
	movw	r3, #259
	movt	r3, 258
	cmp	r4, r3
	bne	.L5797
.L5764:
	mov	r2, #0
	mov	r3, #28
	mov	r6, r2
	mov	r4, #4
	str	r2, [r5, #24]
.L5766:
	str	r4, [r5, #16]
	str	r3, [r7, #12]
	str	r3, [r5, #4]
.L5727:
	mov	r0, r6
	add	sp, sp, #184
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5742:
	movw	r3, #275
	movt	r3, 1
	cmp	r4, r3
	beq	.L5746
	mov	r3, #276
	movt	r3, 1
	cmp	r4, r3
	beq	.L5747
	movw	r3, #273
	movt	r3, 1
	cmp	r4, r3
	beq	.L5748
.L5729:
	movw	r0, #:lower16:.LC402
	mov	r2, r4
	ldr	r1, .L5799
	movt	r0, #:upper16:.LC402
	movw	r6, #65012
	bl	printk
	mov	r4, #0
	mov	r3, #24
	movt	r6, 65535
	b	.L5766
.L5795:
	mov	r3, #260
	movt	r3, 1
	cmp	r4, r3
	bne	.L5729
.L5740:
	ldr	r2, [r6, #3780]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L5766
.L5782:
	ldr	r0, [r6, #3800]
	cmp	r0, #0
	beq	.L5781
	ldr	r2, [r0, #364]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5766
.L5783:
	ldr	r0, [r6, #3800]
	cmp	r0, #0
	beq	.L5781
	ldr	r2, [r6, #3792]
	mov	r3, #30
	mov	r4, #6
	mov	r6, #0
	ldr	r0, [r2]	@ unaligned
	str	r0, [r5, #24]	@ unaligned
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r8, #4]	@ unaligned
	b	.L5766
.L5781:
	movw	r6, #65012
	mov	r4, r0
	movt	r6, 65535
	mov	r3, #24
	b	.L5766
.L5796:
	movw	r3, #514
	movt	r3, 1
	cmp	r4, r3
	beq	.L5764
	movw	r3, #257
	movt	r3, 2
	cmp	r4, r3
	bne	.L5729
	cmp	r0, #0
	beq	.L5781
	ldr	r2, [r0, #8]
	mov	r3, #28
	ldr	ip, [r0, #40]
	ldr	r0, [r0, #56]
	b	.L5787
.L5794:
	movw	r3, #257
	movt	r3, 1
	cmp	r4, r3
	bne	.L5798
	mov	r0, r8
	mov	r2, #112
	ldr	r1, .L5799+4
	bl	memcpy
	mov	r4, #112
	mov	r3, #136
	mov	r6, #0
	b	.L5766
.L5751:
	cmp	r0, #0
	beq	.L5781
	ldr	r2, [r0]
	mov	r3, #28
	ldr	ip, [r0, #32]
	ldr	r0, [r0, #48]
.L5787:
	sub	r2, r2, ip
	mov	r6, #0
	sub	r2, r2, r0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5766
.L5797:
	movw	r3, #257
	movt	r3, 258
	cmp	r4, r3
	bne	.L5729
	cmp	r0, #0
	beq	.L5781
	ldr	r2, [r0, #104]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5766
.L5756:
	cmp	r0, #0
	beq	.L5781
	ldr	r2, [r0, #40]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5766
.L5798:
	movw	r3, #258
	movt	r3, 1
	cmp	r4, r3
	beq	.L5764
	b	.L5729
.L5747:
	ldr	r2, [r6, #3788]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L5766
.L5741:
	ldr	r2, [r6, #3796]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	ldrh	r2, [r2]
	str	r2, [r5, #24]
	b	.L5766
.L5748:
	movw	r2, #1558
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5766
.L5743:
	ldr	r2, [r6, #3804]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L5766
.L5760:
	mov	r2, #-536870912
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5766
.L5738:
	ldr	r3, [r6, #3800]
	cmp	r3, #0
	beq	.L5777
	ldr	r2, [r3, #364]
	mov	r6, #0
	mov	r4, #4
	mov	r3, #28
	str	r2, [r5, #24]
	b	.L5766
.L5755:
	cmp	r0, #0
	beq	.L5777
	ldr	r2, [r0, #32]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5766
.L5746:
	mov	r2, #18
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L5766
.L5770:
	mvn	r6, #11
	b	.L5727
.L5777:
	movw	r6, #65012
	mov	r3, #24
	movt	r6, 65535
	mov	r4, #0
	b	.L5766
.L5768:
	mov	r3, #28
	mov	r4, #4
	str	r6, [r5, #24]
	b	.L5766
.L5800:
	.align	2
.L5799:
	.word	.LANCHOR2+3448
	.word	.LANCHOR2+3336
	.fnend
	.size	gen_ndis_query_resp.constprop.118, .-gen_ndis_query_resp.constprop.118
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_init, %function
ccid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5807
	mov	r2, #196
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L5810
.L5802:
	add	ip, r4, #112
	mov	r0, #0
	ldr	r2, .L5812
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC232
	movt	r3, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC232
	str	r0, [r4, #84]
	str	ip, [r4, #112]
	add	r0, r4, #120
	str	ip, [r4, #116]
	str	r4, [r3, #2220]
	bl	__init_waitqueue_head
	ldr	r0, .L5812+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L5804
	movw	r1, #:lower16:.LC403
	ldr	r2, .L5812
	add	r0, r4, #152
	movt	r1, #:upper16:.LC403
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC404
	ldr	r2, .L5812
	add	r0, r4, #164
	movt	r1, #:upper16:.LC404
	bl	__init_waitqueue_head
	add	r3, r4, #184
	ldr	r0, .L5812+8
	str	r3, [r4, #184]
	str	r3, [r4, #188]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L5811
.L5801:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5807:
	mov	r4, #16
	b	.L5802
.L5810:
	mvn	r5, #11
	b	.L5801
.L5811:
	movw	r0, #:lower16:.LC234
	ldr	r1, .L5812+12
	movt	r0, #:upper16:.LC234
	bl	printk
	movw	r0, #:lower16:.LC406
	mov	r2, r5
	ldr	r1, .L5812+16
	movt	r0, #:upper16:.LC406
	bl	printk
	ldr	r0, .L5812+4
	bl	misc_deregister
.L5806:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC407
	movt	r0, #:upper16:.LC407
	bl	printk
	b	.L5801
.L5804:
	movw	r0, #:lower16:.LC234
	ldr	r1, .L5812+20
	movt	r0, #:upper16:.LC234
	bl	printk
	movw	r0, #:lower16:.LC405
	mov	r2, r5
	ldr	r1, .L5812+16
	movt	r0, #:upper16:.LC405
	bl	printk
	b	.L5806
.L5813:
	.align	2
.L5812:
	.word	.LANCHOR1+3832
	.word	.LANCHOR0+852
	.word	.LANCHOR0+816
	.word	.LANCHOR2+3504
	.word	.LANCHOR2+3492
	.word	.LANCHOR2+3468
	.fnend
	.size	ccid_function_init, .-ccid_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_cdc_notify_complete, %function
acm_cdc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	add	r5, r4, #148
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r6, #44]
	cmn	r3, #108
	beq	.L5820
	ldrb	r7, [r4, #144]	@ zero_extendqisi2
	mov	r0, r5
	str	r6, [r4, #156]
	bl	_raw_spin_unlock
	cmp	r7, #0
	beq	.L5814
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r6, [r4, #156]
	cmp	r6, #0
	moveq	r3, #1
	strbeq	r3, [r4, #144]
	bne	.L5821
.L5818:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L5814:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5821:
	mov	r1, #0
	mov	r0, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	strb	r1, [r4, #144]
	mov	ip, #2
	str	r1, [r4, #156]
	ldr	r3, [r6]
	str	r0, [r6, #4]
	mov	r0, r5
	strb	r2, [r3]
	strb	r8, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r5
	bl	_raw_spin_lock
	cmp	r7, #0
	bge	.L5818
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC408
	mov	r3, r7
	movt	r1, #:upper16:.LC408
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err
.L5820:
	str	r6, [r4, #156]
	b	.L5818
	.fnend
	.size	acm_cdc_notify_complete, .-acm_cdc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_notify_complete, %function
gser_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r1, #32]
	add	r6, r4, #148
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #44]
	mov	r1, r0
	cmn	r3, #108
	streq	r5, [r4, #156]
	beq	.L5834
	ldrb	r7, [r4, #144]	@ zero_extendqisi2
	mov	r0, r6
	str	r5, [r4, #156]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L5822
	ldrb	r3, [r4, #138]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L5835
.L5822:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5835:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #156]
	mov	r7, r0
	cmp	r5, #0
	moveq	r3, #1
	strbeq	r3, [r4, #144]
	beq	.L5826
	ldr	r3, [r4, #20]
	mov	r1, #0
	mov	lr, #32
	mov	r2, #10
	mvn	r10, #94
	ldr	ip, [r4, #152]
	mov	r9, #2
	ldr	r8, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r5]
	mov	r0, ip
	str	r2, [r5, #4]
	mov	r2, lr
	strb	r10, [r3]
	strb	lr, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	lr, [r4, #136]	@ zero_extendqisi2
	strh	lr, [r3, #4]	@ unaligned
	strb	r9, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	lr, [r4, #170]	@ unaligned
	mov	r1, r5
	strh	lr, [r3, #8]	@ unaligned
	ldr	r3, [ip, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L5836
.L5826:
	mov	r1, r7
.L5834:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L5836:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC409
	movt	r1, #:upper16:.LC409
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	str	r5, [r4, #156]
	b	.L5826
	.fnend
	.size	gser_notify_complete, .-gser_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_controlbits_tomodem, %function
ghsuart_send_controlbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r3, #1876]
	cmp	r0, #0
	cmpne	r1, ip
	movcs	r5, #1
	movcc	r5, #0
	bcs	.L5856
	mov	r0, #84
	mla	r1, r0, r1, r3
	ldr	r4, [r1, #2052]
	cmp	r4, #0
	beq	.L5857
	ldr	r3, [r4, #196]
	cmp	r3, r2
	beq	.L5837
	ldr	r3, [r4, #188]
	str	r2, [r4, #196]
	tst	r3, #4
	beq	.L5837
	tst	r2, #1
	bne	.L5858
.L5837:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5858:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #24]
	mov	r1, r0
	str	r5, [r4, #200]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L5837
	ldr	r3, [r6, #128]
	cmp	r3, #0
	beq	.L5837
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3
.L5856:
	movw	r0, #:lower16:.LC19
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC19
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L5859
	b	printk
.L5857:
	movw	r0, #:lower16:.LC15
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC15
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L5859
	b	printk
.L5860:
	.align	2
.L5859:
	.word	.LANCHOR2+3528
	.fnend
	.size	ghsuart_send_controlbits_tomodem, .-ghsuart_send_controlbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_complete, %function
rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #36
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	ldr	r3, [r1, #44]
	ldr	r8, [r1, #32]
	add	r9, r4, #28
	add	r7, r4, #16
	cmn	r3, #103
	beq	.L5863
	ble	.L5887
	cmn	r3, #75
	beq	.L5866
	cmp	r3, #0
	bne	.L5862
	mov	r0, r8
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L5868
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L5869
	mov	r1, r8
	add	r2, r4, #52
	ldr	r3, [r4, #84]
	blx	r3
	cmn	r0, #22
	mov	r8, r0
	beq	.L5888
	cmn	r0, #75
	beq	.L5889
	mov	r1, r10
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L5873
	b	.L5871
.L5866:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
.L5862:
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
.L5873:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #28]
	mov	r0, r7
	str	r6, [r3, #4]
	str	r3, [r5, #36]
	str	r9, [r5, #40]
	str	r6, [r4, #28]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #104
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r0, [r3, #3448]
	b	queue_work
.L5887:
	cmn	r3, #108
	beq	.L5865
	cmn	r3, #104
	bne	.L5862
.L5865:
	mov	r0, r8
	bl	dev_kfree_skb_any
.L5871:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #28]
	mov	r0, r7
	str	r6, [r3, #4]
	str	r3, [r5, #36]
	str	r9, [r5, #40]
	str	r6, [r4, #28]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L5863:
	add	r1, r4, #120
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L5865
	add	r0, r4, #88
	bl	schedule_work
	subs	r2, r0, #0
	bne	.L5865
	movw	r0, #:lower16:.LC410
	ldr	r1, [r4, #8]
	movt	r0, #:upper16:.LC410
	bl	printk
	b	.L5865
.L5868:
	mov	r1, r8
	add	r0, r4, #52
	bl	skb_queue_tail
	b	.L5873
.L5888:
	ldr	r2, [r4, #8]
	mov	r1, r10
	mov	r0, r4
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	bl	_raw_spin_unlock_irqrestore
	b	.L5871
.L5889:
	ldr	r2, [r4, #8]
	mov	r1, r10
	mov	r0, r4
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	bl	_raw_spin_unlock_irqrestore
	b	.L5871
.L5869:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r1, r10
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L5871
	.fnend
	.size	rx_complete, .-rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_tx, %function
gs_start_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	add	r10, r0, #76
	str	lr, [sp, #32]
	ldr	r3, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #76]
	ldr	r7, [r3, #80]
	cmp	r10, r5
	beq	.L5910
	ldr	r3, [r0, #84]
	cmp	r3, #7
	bgt	.L5910
	movw	r9, #:lower16:.LANCHOR1
	mov	r4, r0
	mov	fp, #0
	movt	r9, #:upper16:.LANCHOR1
.L5892:
	ldr	r2, [r4, #92]
	sub	r8, r5, #36
	ldr	r1, [r4, #100]
	ldr	r6, [r4, #104]
	add	r6, r6, r2
	sub	r3, r6, r1
	udiv	r6, r3, r2
	mls	r6, r2, r6, r3
	cmp	r6, #4096
	bcs	.L5911
	cmp	r6, #0
	bne	.L5894
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #3832]
	cmp	r3, #0
	moveq	r6, r3
	beq	.L5898
	ldrh	r1, [r7, #20]
	sdiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L5927
.L5898:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #108
	bl	__wake_up
.L5900:
	cmp	fp, #0
	bne	.L5893
.L5890:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5911:
	mov	r6, #4096
.L5894:
	ldr	fp, [r4, #96]
	ldr	r3, [r5, #-36]
	add	fp, fp, r2
	sub	fp, fp, r1
	cmp	fp, r6
	bcc	.L5928
	mov	r0, r3
	mov	r2, r6
	bl	memcpy
	cmp	fp, r6
	ldrhi	r3, [r4, #100]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, r6
	str	r3, [r4, #100]
.L5896:
	ldrd	r2, [r5]
	str	r6, [r5, #-32]
	mov	r1, #512
	mov	r0, r4
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #256
	str	r3, [r5]
	str	r1, [r5, #4]
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L5929
	cmp	r6, #0
	ldr	r0, [r4, #76]
	bne	.L5930
	ldr	r1, [r5, #-32]
	cmp	r10, r0
	ldr	r3, [r4, #84]
	ldr	r2, [r4, #136]
	str	r1, [r9, #3832]
	add	r3, r3, #1
	add	r2, r2, r1
	str	r3, [r4, #84]
	str	r2, [r4, #136]
	beq	.L5893
	cmp	r3, #7
	mov	fp, #1
	bgt	.L5893
	mov	r5, r0
	b	.L5892
.L5928:
	mov	r0, r3
	sub	r3, r6, fp
	mov	r2, fp
	str	r3, [sp, #4]
	bl	memcpy
	add	r0, r0, fp
	ldr	fp, [sp, #4]
	ldr	r1, [r4, #96]
	mov	r2, fp
	bl	memcpy
	ldr	r3, [r4, #96]
	add	r3, r3, fp
	str	r3, [r4, #100]
	b	.L5896
.L5930:
	str	r5, [r0, #4]
	stm	r5, {r0, r10}
	str	r5, [r4, #76]
.L5893:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5890
	bl	tty_wakeup
	b	.L5890
.L5929:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L5890
.L5910:
	mov	r6, #0
	b	.L5890
.L5927:
	ldm	r5, {r1, r2}
	mov	lr, #256
	mov	ip, #512
	str	r3, [r5, #-32]
	mov	r0, r4
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [r5]
	str	ip, [r5, #4]
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L5931
	cmp	r6, #0
	bne	.L5932
.L5901:
	mov	r3, #0
	str	r3, [r9, #3832]
	b	.L5898
.L5931:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L5900
.L5932:
	movw	r2, #:lower16:.LC411
	movw	r0, #:lower16:.LC412
	ldr	r1, .L5933
	mov	r3, r6
	movt	r2, #:upper16:.LC411
	movt	r0, #:upper16:.LC412
	bl	printk
	ldr	r3, [r4, #76]
	str	r5, [r3, #4]
	stm	r5, {r3, r10}
	str	r5, [r4, #76]
	b	.L5901
.L5934:
	.align	2
.L5933:
	.word	.LANCHOR2+3564
	.fnend
	.size	gs_start_tx, .-gs_start_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_flush_chars, %function
gs_flush_chars:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L5936
	mov	r0, r4
	bl	gs_start_tx
.L5936:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_flush_chars, .-gs_flush_chars
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write, %function
gs_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r5, #0
	mov	r6, r0
	bne	.L5956
.L5942:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L5947
	mov	r0, r4
	bl	gs_start_tx
.L5947:
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5956:
	ldr	r1, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r1
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r5, r3
	bhi	.L5957
.L5943:
	ldr	r8, [r4, #96]
	add	r1, r8, r1
	sub	r8, r1, r0
	cmp	r8, r5
	bcc	.L5958
	mov	r1, r7
	mov	r2, r5
	bl	memcpy
	cmp	r8, r5
	ldrhi	r3, [r4, #104]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, r5
	str	r3, [r4, #104]
	b	.L5942
.L5957:
	subs	r5, r3, #0
	beq	.L5942
	b	.L5943
.L5958:
	mov	r2, r8
	mov	r1, r7
	sub	r9, r5, r8
	bl	memcpy
	mov	r2, r9
	add	r1, r7, r8
	ldr	r0, [r4, #96]
	bl	memcpy
	ldr	r2, [r4, #96]
	add	r2, r2, r9
	str	r2, [r4, #104]
	b	.L5942
	.fnend
	.size	gs_write, .-gs_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_complete, %function
gs_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r2, [r4, #140]
	mov	r3, r4
	ldr	r0, [r5, #48]
	add	r1, r5, #36
	add	r2, r2, r0
	str	r2, [r4, #140]
	ldr	r2, [r3, #76]!
	str	r1, [r2, #4]
	strd	r2, [r5, #36]
	ldr	r3, [r4, #84]
	str	r1, [r4, #76]
	sub	r3, r3, #1
	str	r3, [r4, #84]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L5961
	cmp	r3, #0
	bne	.L5973
.L5962:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L5961
	mov	r0, r4
	bl	gs_start_tx
.L5961:
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L5973:
	movw	r0, #:lower16:.LC413
	ldr	r1, .L5974
	ldr	r2, [r7, #4]
	movt	r0, #:upper16:.LC413
	bl	printk
	b	.L5962
.L5975:
	.align	2
.L5974:
	.word	.LANCHOR2+3576
	.fnend
	.size	gs_write_complete, .-gs_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	check_command.constprop.143, %function
check_command.constprop.143:
	.fnstart
	@ args = 4, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	movw	r5, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	mov	r6, r3
	str	r8, [sp, #16]
	ldr	ip, [r5]
	mov	r7, r1
	str	lr, [sp, #20]
	ldr	r0, [r0, #120]
	mov	lr, #0
	.pad #24
	sub	sp, sp, #24
	mov	r8, r2
	ldr	r3, [r4, #124]
	strb	lr, [sp]
	cmp	r0, lr
	str	ip, [sp, #20]
	bne	.L6159
.L5977:
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L5978
	cmp	r2, r3
	bls	.L5979
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r8, r0
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L5980
	cmp	r3, #0
	bne	.L5983
.L5980:
	ldr	r3, [r4, #72]
	cmp	r3, r7
	beq	.L6009
.L6170:
	blt	.L5983
	ldr	r2, [r4, #104]
	ldrb	r1, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L5984
.L6171:
	cmp	r1, #3
	beq	.L5985
	ldrb	r0, [r2, #24]	@ zero_extendqisi2
	mov	r1, #0
	ldr	ip, [r2, #36]
	str	r1, [r2, #28]
	str	r1, [r2, #32]
	bfi	r0, r1, #6, #1
	cmp	ip, r1
	strb	r0, [r2, #24]
	beq	.L5985
	ldrb	r0, [r4, #76]	@ zero_extendqisi2
	cmp	r0, #18
	cmpne	r0, #3
	mvnne	r0, #21
	strne	ip, [r2, #28]
	strne	r1, [r2, #36]
	bne	.L5976
.L5985:
	ldrb	r1, [r4, #77]	@ zero_extendqisi2
	cmp	r3, #1
	and	r1, r1, #31
	strb	r1, [r4, #77]
	ble	.L6005
	ldrb	r1, [r4, #77]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6160
.L5988:
	cmp	r3, #2
	beq	.L5990
	ldrb	r1, [r4, #78]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6161
.L5991:
	cmp	r3, #3
	beq	.L5990
	ldrb	r1, [r4, #79]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6162
.L5992:
	cmp	r3, #4
	beq	.L5990
	ldrb	r1, [r4, #80]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6163
.L5993:
	cmp	r3, #5
	beq	.L5990
	ldrb	r1, [r4, #81]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L5994
	tst	r6, #32
	beq	.L5989
.L5994:
	cmp	r3, #6
	beq	.L5990
	ldrb	r1, [r4, #82]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L5995
	tst	r6, #64
	beq	.L5989
.L5995:
	cmp	r3, #7
	beq	.L5990
	ldrb	r1, [r4, #83]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L5996
	tst	r6, #128
	beq	.L5989
.L5996:
	cmp	r3, #8
	beq	.L5990
	ldrb	r1, [r4, #84]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6164
.L5997:
	cmp	r3, #9
	beq	.L5990
	ldrb	r1, [r4, #85]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6165
.L5998:
	cmp	r3, #10
	beq	.L5990
	ldrb	r1, [r4, #86]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6166
.L5999:
	cmp	r3, #11
	beq	.L5990
	ldrb	r1, [r4, #87]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6167
.L6000:
	cmp	r3, #12
	beq	.L5990
	ldrb	r1, [r4, #88]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6168
.L6001:
	cmp	r3, #13
	beq	.L5990
	ldrb	r1, [r4, #89]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L6002
	tst	r6, #8192
	beq	.L5989
.L6002:
	cmp	r3, #14
	beq	.L5990
	ldrb	r1, [r4, #90]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L6003
	tst	r6, #16384
	beq	.L5989
.L6003:
	cmp	r3, #15
	beq	.L5990
	ldrb	r3, [r4, #91]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L5990
	tst	r6, #32768
	beq	.L5989
.L5990:
	cmp	r2, #0
	beq	.L6006
.L6005:
	ldr	r3, [r2]
	ldr	r1, [sp, #48]
	cmp	r3, #0
	movne	r3, #0
	andeq	r3, r1, #1
	cmp	r3, #0
	movne	r3, #14848
	mvnne	r0, #21
	movtne	r3, 2
	strne	r3, [r2, #28]
	bne	.L5976
.L6006:
	mov	r0, #0
.L5976:
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L6169
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5978:
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	ldr	r3, [r4, #72]
	cmp	r3, r7
	bne	.L6170
.L6009:
	ldr	r2, [r4, #104]
	mov	r3, r7
	ldrb	r1, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L6171
.L5984:
	ldrb	r0, [r4, #144]	@ zero_extendqisi2
	cmp	r1, #18
	cmpne	r1, #3
	bfi	r0, r2, #4, #1
	strb	r0, [r4, #144]
	bne	.L6004
	ldrb	r1, [r4, #77]	@ zero_extendqisi2
	cmp	r3, #1
	and	r1, r1, #31
	strb	r1, [r4, #77]
	ble	.L6006
	ldrb	r1, [r4, #77]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L5988
.L6160:
	tst	r6, #2
	bne	.L5988
.L5989:
	cmp	r2, #0
	beq	.L6004
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r2, #28]
	b	.L5976
.L6161:
	tst	r6, #4
	bne	.L5991
	b	.L5989
.L6162:
	tst	r6, #8
	bne	.L5992
	b	.L5989
.L6163:
	tst	r6, #16
	bne	.L5993
	b	.L5989
.L6159:
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #:lower16:.LC414
	movt	r2, #:upper16:.LANCHOR2
	movt	r1, #:upper16:.LC414
	add	r0, r2, r0
	ldrb	r2, [r0, #3596]	@ zero_extendqisi2
	mov	r0, sp
	bl	sprintf
	ldr	r0, [r4, #120]
	ldr	r3, [r4, #124]
	b	.L5977
.L6164:
	tst	r6, #256
	bne	.L5997
	b	.L5989
.L6165:
	tst	r6, #512
	bne	.L5998
	b	.L5989
.L6166:
	tst	r6, #1024
	bne	.L5999
	b	.L5989
.L6167:
	tst	r6, #2048
	bne	.L6000
	b	.L5989
.L6168:
	tst	r6, #4096
	bne	.L6001
	b	.L5989
.L6004:
	mvn	r0, #21
	b	.L5976
.L5979:
	cmp	r8, r0
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	beq	.L5980
.L5983:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L5976
.L6169:
	bl	__stack_chk_fail
	.fnend
	.size	check_command.constprop.143, .-check_command.constprop.143
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_mount, %function
ffs_fs_mount:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #33152
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r4, r3, #0
	strd	r6, [sp, #8]
	mov	r3, #0
	movt	ip, 65535
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	movw	lr, #16704
	strh	ip, [sp, #20]	@ movhi
	str	r3, [sp, #22]	@ unaligned
	str	r3, [sp, #26]	@ unaligned
	str	r3, [sp, #30]	@ unaligned
	strh	lr, [sp, #32]	@ movhi
	str	r3, [sp, #34]	@ unaligned
	strh	r3, [sp, #38]	@ movhi
	beq	.L6173
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6173
	mov	fp, #32768
	movw	r3, #:lower16:.LC417
	str	r0, [sp, #12]
	movw	r2, #:lower16:.LC418
	movt	r3, #:upper16:.LC417
	movt	r2, #:upper16:.LC418
	movt	fp, 65535
	str	r3, [sp, #4]
	str	r2, [sp, #8]
.L6192:
	mov	r1, #44
	mov	r0, r4
	bl	strchr
	subs	r7, r0, #0
	mov	r1, #61
	movne	r3, #0
	mov	r0, r4
	strbne	r3, [r7]
	bl	strchr
	subs	r5, r0, #0
	beq	.L6210
	mov	r3, #0
	mov	r6, r5
	mov	r2, r3
	add	r1, sp, #16
	strb	r3, [r6], #1
	mov	r0, r6
	bl	simple_strtoul
	ldr	r2, [sp, #16]
	mov	r8, r0
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r2, #44
	cmpne	r2, #0
	bne	.L6211
	sub	r5, r5, r4
	cmp	r5, #4
	beq	.L6179
	cmp	r5, #5
	beq	.L6180
	cmp	r5, #3
	beq	.L6212
.L6178:
	movw	r0, #:lower16:.LC422
	mov	r1, r4
	movt	r0, #:upper16:.LC422
	bl	printk
.L6176:
	mvn	r0, #21
	b	.L6172
.L6208:
	ldr	r8, [sp, #12]
.L6173:
	movw	r3, #:lower16:ffs_sb_fill
	mov	r1, r10
	str	r9, [sp, #36]
	mov	r0, r8
	movt	r3, #:upper16:ffs_sb_fill
	add	r2, sp, #20
	bl	mount_single
.L6172:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6179:
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r2, #109
	bne	.L6178
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	add	r1, r4, #1
	cmp	r2, #111
	bne	.L6178
	ldrb	r2, [r1, #1]!	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L6178
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	cmp	r2, #101
	bne	.L6178
	uxth	r3, r0
	movw	r2, #365
	movw	r1, #438
	and	r2, r2, r3
	and	r3, r3, r1
	orr	r2, r2, #16384
	orr	r3, r3, fp
	strh	r3, [sp, #20]	@ movhi
	strh	r2, [sp, #32]	@ movhi
	b	.L6183
.L6212:
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r2, #117
	beq	.L6213
	cmp	r2, #103
	bne	.L6178
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #105
	bne	.L6178
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L6178
	str	r0, [sp, #28]
	b	.L6183
.L6180:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #4]
	bl	memcmp
	cmp	r0, #0
	bne	.L6182
	movw	r2, #365
	and	r3, r2, r8
	orr	r3, r3, #16384
	strh	r3, [sp, #32]	@ movhi
.L6183:
	cmp	r7, #0
	beq	.L6208
	add	r4, r7, #1
	b	.L6192
.L6182:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #8]
	bl	memcmp
	cmp	r0, #0
	bne	.L6178
	movw	r2, #438
	and	r3, r2, r8
	orr	r3, r3, fp
	strh	r3, [sp, #20]	@ movhi
	b	.L6183
.L6210:
	movw	r0, #:lower16:.LC415
	mov	r1, r4
	movt	r0, #:upper16:.LC415
	bl	printk
	b	.L6176
.L6213:
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #105
	bne	.L6178
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L6178
	str	r0, [sp, #24]
	b	.L6183
.L6211:
	movw	r0, #:lower16:.LC416
	mov	r2, r6
	mov	r1, r4
	movt	r0, #:upper16:.LC416
	bl	printk
	b	.L6176
	.fnend
	.size	ffs_fs_mount, .-ffs_fs_mount
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_qti_send_cpkt_tomodem, %function
grmnet_ctrl_qti_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	cmp	r2, #2048
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #1032]
	bhi	.L6233
	movw	r3, #:lower16:kmalloc_caches
	mov	r7, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r5, [r3, #24]
	cmp	r5, #0
	beq	.L6217
	mov	r0, r5
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L6219
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5]
	beq	.L6223
	cmn	r5, #4096
	str	r6, [r5, #4]
	bhi	.L6219
.L6221:
	mov	r1, r7
	mov	r2, r6
	add	r7, r4, #52
	bl	memcpy
	str	r6, [r5, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldrb	r6, [r4, #4]	@ zero_extendqisi2
	mov	r8, r0
	cmp	r6, #0
	beq	.L6234
	ldr	r3, [r4, #48]
	add	r2, r5, #8
	add	ip, r4, #44
	mov	r1, r0
	mov	r0, r7
	str	r2, [r4, #48]
	str	ip, [r5, #8]
	str	r3, [r5, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #32
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L6214:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6217:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #16]
	strne	r6, [r5, #20]
	movne	r5, #16
	bne	.L6221
	mov	r5, #16
.L6223:
	mov	r0, r5
	bl	kfree
.L6219:
	movw	r0, #:lower16:.LC424
	ldr	r1, .L6235
	movt	r0, #:upper16:.LC424
	bl	printk
	mvn	r0, #11
	b	.L6214
.L6233:
	movw	r0, #:lower16:.LC423
	mov	r1, r2
	movt	r0, #:upper16:.LC423
	mov	r2, #2048
	bl	printk
	mvn	r0, #21
	b	.L6214
.L6234:
	movw	r0, #:lower16:.LC425
	mov	r1, r4
	movt	r0, #:upper16:.LC425
	bl	printk
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5]
	bl	kfree
	mov	r0, r5
	bl	kfree
	mov	r0, r6
	b	.L6214
.L6236:
	.align	2
.L6235:
	.word	.LANCHOR2+3600
	.fnend
	.size	grmnet_ctrl_qti_send_cpkt_tomodem, .-grmnet_ctrl_qti_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_cleanup, %function
ptp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ptp_function_cleanup, .-ptp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epout, %function
rmnet_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	ldr	r8, [r4, #76]
	cmn	r3, #104
	beq	.L6265
	cmp	r3, #0
	beq	.L6241
	cmn	r3, #108
	beq	.L6265
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC128
	ldr	lr, [r5, #4]
	movt	r1, #:upper16:.LC128
	ldr	ip, [r5, #48]
	ldr	r0, [r8]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #308]
	tst	r3, #2
	beq	.L6242
	add	r7, r4, #180
	mov	r0, r7
	bl	_raw_spin_lock
.L6243:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #316]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1324]
	cmp	r2, r3
	bcs	.L6266
	mov	r0, r7
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L6247
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r5
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r5, {r3, ip}
	str	r6, [r5, #32]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L6267
.L6238:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6242:
	movw	r0, #:lower16:.LC161
	ldr	r1, .L6268
	movt	r0, #:upper16:.LC161
	bl	printk
.L6265:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L6241:
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #308]
	tst	r3, #2
	beq	.L6242
	add	r7, r4, #180
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #168]
	add	r2, r4, #164
	add	r1, r4, #228
	strd	r2, [r6]
	str	r6, [r3]
	ldr	r3, [r4, #172]
	str	r6, [r4, #168]
	ldr	r0, [r4, #192]
	add	r3, r3, #1
	str	r3, [r4, #172]
	bl	queue_work
	b	.L6243
.L6266:
	ldr	r3, [r4, #156]
	add	r2, r5, #36
	add	r1, r4, #152
	mov	r0, r7
	str	r2, [r4, #156]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #160]
	add	r3, r3, #1
	str	r3, [r4, #160]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L6267:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L6245:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC0
	mov	r2, r7
	movt	r1, #:upper16:.LC0
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #156]
	add	r2, r5, #36
	add	r1, r4, #152
	str	r2, [r4, #156]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	ldr	r3, [r4, #160]
	add	r3, r3, #1
	str	r3, [r4, #160]
	b	.L6238
.L6247:
	mvn	r7, #11
	b	.L6245
.L6269:
	.align	2
.L6268:
	.word	.LANCHOR2+3636
	.fnend
	.size	rmnet_sdio_complete_epout, .-rmnet_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_command_complete, %function
rmnet_sdio_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #76]
	cmp	r2, #0
	blt	.L6282
	ldr	r3, [r4, #312]
	tst	r3, #2
	bne	.L6283
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6283:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	ldr	r8, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L6273
	mov	r0, r6
	mov	r2, #16
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L6275
	mov	r1, #32
	mov	r0, r8
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	beq	.L6279
	cmn	r6, #4096
	bhi	.L6275
.L6278:
	mov	r2, r8
	ldr	r1, [r5]
	add	r5, r4, #180
	bl	memcpy
	mov	r0, r5
	str	r8, [r6, #4]
	bl	_raw_spin_lock
	ldr	r3, [r4, #104]
	add	r2, r6, #8
	add	r1, r4, #100
	mov	r0, r5
	str	r2, [r4, #104]
	str	r1, [r6, #8]
	str	r3, [r6, #12]
	str	r2, [r3]
	ldr	r3, [r4, #108]
	add	r3, r3, #1
	str	r3, [r4, #108]
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	add	r1, r4, #212
	ldr	r0, [r4, #192]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work
.L6273:
	mov	r1, #32
	mov	r0, r8
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6, #16]
	mov	r6, #16
	bne	.L6278
.L6279:
	mov	r0, r6
	bl	kfree
.L6275:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC426
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC426
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L6282:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC125
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC125
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_command_complete, .-rmnet_sdio_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_init, %function
uasp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	uasp_function_init, .-uasp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_tx_complete, %function
bam_data_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_tx_complete, .-bam_data_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable, %function
android_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r8, [r0, #8]
	ldr	r10, [r0, #20]
	cmp	r10, #0
	beq	.L6317
	sub	r10, r10, #1
	cmp	r10, #0
	str	r10, [r0, #20]
	movne	r10, #0
	bne	.L6286
	mov	r9, r0
	ldr	r3, [r9, #196]!
	cmp	r9, r3
	sub	r4, r3, #120
	beq	.L6289
	ldrb	r1, [r3, #-100]	@ zero_extendqisi2
	cmp	r1, #0
	movwne	r7, #:lower16:.LANCHOR1
	movne	r6, r10
	movtne	r7, #:upper16:.LANCHOR1
	addne	r5, r8, #36
	beq	.L6293
.L6292:
	ldr	r3, [r8, #36]
	cmp	r5, r3
	sub	r2, r3, #28
	bne	.L6296
	b	.L6294
.L6318:
	ldr	r3, [r2, #28]
	cmp	r5, r3
	sub	r2, r3, #28
	beq	.L6294
.L6296:
	ldrb	r3, [r3, #-8]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L6318
	mvn	r10, #15
.L6291:
	ldr	r2, .L6321
	movw	r0, #:lower16:.LC428
	mov	r3, r10
	movt	r0, #:upper16:.LC428
	mov	r1, r2
	bl	printk
.L6286:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6294:
	str	r8, [r4, #24]
	ldr	ip, [r8, #40]
	add	r2, r4, #28
	add	r3, r4, #36
	mov	r1, #64
	str	r2, [r8, #40]
	add	r0, r4, #48
	str	r5, [r4, #28]
	str	ip, [r4, #32]
	str	r2, [ip]
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	strb	r6, [r4, #44]
	bl	__memzero
	mov	r0, r4
	bl	android_bind_config
	subs	r10, r0, #0
	blt	.L6319
	ldr	r1, [r8]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L6320
.L6299:
	ldr	r2, [r3, #12]
	str	r6, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L6299
	cmp	r10, #0
	str	r6, [r7, #3744]
	blt	.L6291
.L6300:
	ldr	r3, [r4, #120]
	cmp	r9, r3
	sub	r4, r3, #120
	beq	.L6289
	ldrb	r1, [r3, #-100]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L6292
.L6293:
	mvn	r10, #21
	b	.L6291
.L6319:
	ldrd	r2, [r4, #28]
	mov	r1, #512
	mov	r0, #256
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r6, [r4, #24]
	strd	r0, [r4, #28]
	ldr	r1, [r8]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	bne	.L6299
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [r3, #3744]
	b	.L6291
.L6289:
	ldr	r0, [r8]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L6286
	mov	r1, #1
	blx	r3
	b	.L6286
.L6320:
	str	r6, [r7, #3744]
	b	.L6300
.L6317:
	movw	r0, #:lower16:.LC427
	movw	r1, #411
	movt	r0, #:upper16:.LC427
	bl	warn_slowpath_null
	b	.L6286
.L6322:
	.align	2
.L6321:
	.word	.LANCHOR2+3664
	.fnend
	.size	android_enable, .-android_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_disable, %function
adb_android_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L6325
	bx	lr
.L6325:
	b	android_enable
	.fnend
	.size	adb_android_function_disable, .-adb_android_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_open, %function
adb_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L6344
	strd	r6, [sp, #8]
	mov	r6, r1
	ldr	r1, .L6344+4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6342
.L6327:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3520]
	cmp	r3, #0
	beq	.L6334
	add	r2, r3, #108
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L6329
	ldr	r3, [r4, #3520]
	mov	r2, #0
	str	r3, [r6, #124]
	ldrb	r1, [r3, #153]	@ zero_extendqisi2
	str	r2, [r3, #96]
	cmp	r1, r2
	bne	.L6343
.L6331:
	mov	r2, #1
	mov	r0, #0
	strb	r2, [r3, #152]
.L6326:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6343:
	movw	r1, #:lower16:.LANCHOR0
	strb	r2, [r3, #153]
	movt	r1, #:upper16:.LANCHOR0
	ldr	r7, [r1, #1356]
	ldr	r6, [r1, #1372]
	cmp	r6, #0
	strbeq	r5, [r7]
	streq	r6, [r7, #4]
	beq	.L6331
	add	r8, r6, #24
	mov	r0, r8
	bl	mutex_lock
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	strb	r5, [r7]
	str	r6, [r7, #4]
	cmp	r3, #0
	beq	.L6333
	mov	r0, r6
	bl	android_enable
.L6333:
	mov	r0, r8
	bl	mutex_unlock
	ldr	r3, [r4, #3520]
	b	.L6331
.L6329:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L6326
.L6334:
	mvn	r0, #18
	b	.L6326
.L6342:
	movw	r0, #:lower16:.LC429
	movt	r0, #:upper16:.LC429
	bl	printk
	b	.L6327
.L6345:
	.align	2
.L6344:
	.word	.LANCHOR0+1328
	.word	.LANCHOR2+3680
	.fnend
	.size	adb_open, .-adb_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_disable, %function
ffs_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L6348
	bx	lr
.L6348:
	b	android_enable
	.fnend
	.size	ffs_function_disable, .-ffs_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_open, %function
debug_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_sdio_open, .-debug_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_open, %function
debug_smd_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_smd_open, .-debug_smd_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_init, %function
qdss_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	qdss_function_init, .-qdss_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_init, %function
ptp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ptp_function_init, .-ptp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_close, %function
f_midi_in_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_in_close, .-f_midi_in_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_close, %function
f_midi_out_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_out_close, .-f_midi_out_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_rx_complete, %function
gbam_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_rx_complete, .-gbam_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_tx_complete, %function
gbam_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_tx_complete, .-gbam_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_debug_open, %function
serial_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #348]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	serial_debug_open, .-serial_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_rmnet_sdio_open, %function
debug_rmnet_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #348]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	debug_rmnet_sdio_open, .-debug_rmnet_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	dbg_rmnet_mux_open, %function
dbg_rmnet_mux_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #348]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	dbg_rmnet_mux_open, .-dbg_rmnet_mux_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_control_complete, %function
audio_control_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	audio_control_complete, .-audio_control_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_rx_complete, %function
bam_data_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_rx_complete, .-bam_data_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_start, %function
acc_hid_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_start, .-acc_hid_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_open, %function
acc_hid_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_open, .-acc_hid_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_release, %function
fsg_lun_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	fsg_lun_release, .-fsg_lun_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_stop, %function
acc_hid_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_stop, .-acc_hid_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_close, %function
acc_hid_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_close, .-acc_hid_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_cleanup, %function
uasp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	uasp_function_cleanup, .-uasp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs.constprop.146, %function
ffs_do_descs.constprop.146:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	cmp	r0, #0
	ldr	r5, [sp, #16]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	clz	lr, r1
	lsr	lr, lr, #5
	moveq	lr, #1
	cmp	lr, #0
	bne	.L6384
	cmp	r2, #1
	bls	.L6385
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r2, r3
	bcc	.L6385
	mov	r4, r2
.L6371:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	sub	ip, ip, #4
	cmp	ip, #44
	ldrls	pc, [pc, ip, asl #2]
	b	.L6385
.L6374:
	.word	.L6373
	.word	.L6375
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6376
	.word	.L6385
	.word	.L6377
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6385
	.word	.L6378
.L6378:
	cmp	r3, #6
	beq	.L6381
.L6385:
	mvn	r0, #21
.L6368:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6376:
	cmp	r3, #5
	bne	.L6385
.L6381:
	adds	r1, r1, r3
	add	lr, lr, #1
	moveq	ip, #1
	movne	ip, #0
	sub	r4, r4, r3
	cmp	r0, lr
	movne	r3, ip
	orreq	r3, ip, #1
	cmp	r3, #0
	bne	.L6396
	cmp	r4, #1
	bls	.L6385
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r4, r3
	bcs	.L6371
	b	.L6385
.L6375:
	sub	ip, r3, #7
	tst	ip, #253
	bne	.L6385
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ands	ip, ip, #15
	beq	.L6385
	ldrh	r6, [r5, #184]
	cmp	ip, r6
	strhgt	ip, [r5, #184]	@ movhi
	b	.L6381
.L6373:
	cmp	r3, #9
	bne	.L6385
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ldrh	r6, [r5, #182]
	cmp	r6, ip
	addls	ip, ip, #1
	strhls	ip, [r5, #182]	@ movhi
	ldrb	ip, [r1, #8]	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L6381
.L6395:
	ldrh	r6, [r5, #180]
	uxth	ip, ip
	cmp	r6, ip
	strhcc	ip, [r5, #180]	@ movhi
	b	.L6381
.L6377:
	cmp	r3, #8
	bne	.L6385
	ldrb	ip, [r1, #7]	@ zero_extendqisi2
	cmp	ip, #0
	bne	.L6395
	b	.L6381
.L6396:
	sub	r0, r2, r4
	b	.L6368
.L6384:
	mov	r0, #0
	b	.L6368
	.fnend
	.size	ffs_do_descs.constprop.146, .-ffs_do_descs.constprop.146
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_cleanup, %function
midi_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	midi_function_cleanup, .-midi_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup.part.73, %function
gserial_cleanup.part.73:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r6, #3836]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	cmp	r3, #0
	beq	.L6399
	mov	r4, #0
.L6400:
	mov	r1, r4
	ldr	r0, [r6, #3840]
	add	r4, r4, #1
	bl	tty_unregister_device
	ldr	r3, [r6, #3836]
	cmp	r4, r3
	bcc	.L6400
	cmp	r3, #0
	beq	.L6399
	mov	r3, sp
	ldr	r5, .L6419
	mov	r8, #0
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L6401:
	mov	r0, r5
	bl	mutex_lock
	ldr	r4, [r5, #24]
	mov	r3, #0
	mov	r0, r5
	str	r3, [r5, #24]
	bl	mutex_unlock
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	bne	.L6402
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6417
.L6402:
	mov	r0, r4
	add	r7, r4, #20
	bl	_raw_spin_unlock_irq
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	mov	r3, #0
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L6406
.L6404:
	bl	_raw_spin_unlock_irq
	bl	schedule
.L6406:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r7
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	mov	r0, r4
	cmp	r3, #0
	bne	.L6404
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6404
	bl	_raw_spin_unlock_irq
	add	r1, sp, #4
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L6418
.L6407:
	mov	r0, r4
	add	r8, r8, #1
	bl	kfree
	ldr	r3, [r6, #3836]
	add	r5, r5, #28
	cmp	r8, r3
	bcc	.L6401
.L6399:
	mov	r4, #0
	ldr	r0, [r6, #4068]
	str	r4, [r6, #3836]
	bl	debugfs_remove_recursive
	ldr	r0, [r6, #3428]
	bl	destroy_workqueue
	ldr	r0, [r6, #3840]
	bl	tty_unregister_driver
	ldr	r0, [r6, #3840]
	bl	put_tty_driver
	str	r4, [r6, #3840]
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L6417:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6407
.L6418:
	movw	r0, #:lower16:.LC430
	movw	r1, #1457
	movt	r0, #:upper16:.LC430
	add	r8, r8, #1
	bl	warn_slowpath_null
	mov	r0, r4
	add	r5, r5, #28
	bl	kfree
	ldr	r3, [r6, #3836]
	cmp	r3, r8
	bhi	.L6401
	b	.L6399
.L6420:
	.align	2
.L6419:
	.word	.LANCHOR1+3844
	.fnend
	.size	gserial_cleanup.part.73, .-gserial_cleanup.part.73
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_cleanup, %function
acm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3840]
	cmp	r3, #0
	beq	.L6421
	b	gserial_cleanup.part.73
.L6421:
	bx	lr
	.fnend
	.size	acm_function_cleanup, .-acm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_data_do_entity, %function
__ffs_data_do_entity:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #2
	beq	.L6425
	cmp	r0, #3
	beq	.L6426
	cmp	r0, #1
	beq	.L6428
	mov	r0, #0
	bx	lr
.L6428:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #182]
	cmp	r1, r2
	addls	r2, r2, #1
	strhls	r2, [r3, #182]	@ movhi
	bx	lr
.L6426:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #184]
	and	r2, r2, #15
	cmp	r2, r1
	strhgt	r2, [r3, #184]	@ movhi
	bx	lr
.L6425:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #180]
	cmp	r1, r2
	strhcc	r2, [r3, #180]	@ movhi
	bx	lr
	.fnend
	.size	__ffs_data_do_entity, .-__ffs_data_do_entity
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_cleanup, %function
ecm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_cleanup, .-ecm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_cleanup, %function
mass_storage_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	mass_storage_function_cleanup, .-mass_storage_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_cleanup, %function
rndis_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_cleanup, .-rndis_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_playback_work, %function
f_audio_playback_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #8
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	mov	r3, r7
	mov	r6, r0
	ldr	r4, [r3, #16]!
	cmp	r4, r3
	beq	.L6447
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r1, r0
	mov	r0, r5
	sub	r10, r4, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r4, {r3, r6}
	ldr	r8, [r7, #-64]
	cmp	r6, #0
	str	r3, [sp, #4]
	ldr	fp, [r8, #208]
	beq	.L6448
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldrb	r2, [r5, #2224]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L6449
.L6439:
	lsl	r3, r6, #3
	mov	r5, #57344
	movt	r5, 65535
	str	r3, [sp, #8]
	mov	r3, sp
	and	r9, r3, r5
.L6444:
	ldr	r3, [fp, #168]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r8
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L6441
	ands	r2, r2, #1
	bne	.L6441
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L6450
.L6441:
	ldr	r2, [fp, #88]
	mov	r0, #0
	ldr	r1, [sp, #4]
	cmp	r2, r0
	beq	.L6451
	ldr	r3, [sp, #8]
	udiv	r6, r3, r2
	ldr	r3, [r9, #8]
	str	r0, [r9, #8]
	ldr	r0, [r7, #-64]
	str	r3, [sp, #12]
	mov	r2, r6
	bl	snd_pcm_lib_write
	cmp	r6, r0
	mov	r2, r0
	bne	.L6452
	mov	r3, sp
	and	r5, r5, r3
	ldr	r3, [sp, #12]
	str	r3, [r5, #8]
.L6438:
	cmp	r10, #0
	beq	.L6435
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #-8]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree
.L6435:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6449:
	bl	gaudio_open_streams
	cmp	r0, #0
	moveq	r2, #1
	strbeq	r2, [r5, #2224]
	beq	.L6439
	movw	r0, #:lower16:.LC433
	ldr	r1, .L6453
	movt	r0, #:upper16:.LC433
	bl	printk
	b	.L6438
.L6450:
	mov	r2, r0
	movw	r0, #:lower16:.LC382
	ldr	r1, .L6453
	movt	r0, #:upper16:.LC382
	bl	printk
	movw	r0, #:lower16:.LC392
	ldr	r1, .L6453+4
	movt	r0, #:upper16:.LC392
	bl	printk
	b	.L6438
.L6452:
	movw	r0, #:lower16:.LC435
	ldr	r1, .L6453
	movt	r0, #:upper16:.LC435
	bl	printk
	ldr	r3, [sp, #12]
	str	r3, [r9, #8]
	b	.L6444
.L6451:
	movw	r0, #:lower16:.LC434
	ldr	r1, .L6453
	movt	r0, #:upper16:.LC434
	bl	printk
	b	.L6438
.L6448:
	movw	r0, #:lower16:.LC432
	ldr	r1, .L6453
	movt	r0, #:upper16:.LC432
	bl	printk
	b	.L6438
.L6447:
	movw	r0, #:lower16:.LC431
	ldr	r1, .L6453+4
	movt	r0, #:upper16:.LC431
	bl	printk
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6454:
	.align	2
.L6453:
	.word	.LANCHOR2+3716
	.word	.LANCHOR2+3692
	.fnend
	.size	f_audio_playback_work, .-f_audio_playback_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_function_cleanup, %function
serial_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3840]
	cmp	r3, #0
	beq	.L6455
	b	gserial_cleanup.part.73
.L6455:
	bx	lr
	.fnend
	.size	serial_function_cleanup, .-serial_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_complete_set_line_coding, %function
gser_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bne	.L6457
	ldr	r3, [r1, #48]
	cmp	r3, #7
	beq	.L6459
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L6459:
	ldr	r3, [r1]
	ldr	r1, [r0]
	ldr	r0, [r3]	@ unaligned
	add	r2, r1, #160
	str	r0, [r1, #160]
	ldrh	r1, [r3, #4]	@ unaligned
	strh	r1, [r2, #4]	@ movhi
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	strb	r3, [r2, #6]
.L6457:
	bx	lr
	.fnend
	.size	gser_complete_set_line_coding, .-gser_complete_set_line_coding
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_in, %function
acc_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2324]
	cmn	r2, #108
	bne	.L6461
	ldrb	r3, [r4, #92]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r4, #92]
.L6461:
	add	r6, r4, #80
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1652]
	add	r2, r5, #36
	add	ip, r4, #1648
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #1652]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1664
	mov	r3, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	r0, r0, #4
	mov	r2, #1
	ldr	lr, [sp, #12]
	mov	r1, #3
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	acc_complete_in, .-acc_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_indicate_status_msg, %function
rndis_indicate_status_msg:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	lsl	r5, r0, #4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	ldr	r8, .L6470
	sub	r4, r5, r0
	lsl	r4, r4, #2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	add	r7, r8, r4
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L6466
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r1
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L6467
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L6468
	add	r1, r3, #20
.L6465:
	movw	r2, #:lower16:.LANCHOR1
	sub	r5, r5, r9
	str	r1, [r3, #8]
	movt	r2, #:upper16:.LANCHOR1
	mov	r1, #20
	add	r2, r2, r5, lsl #2
	mov	r5, #0
	str	r1, [r3, #12]
	add	r4, r4, #52
	str	r5, [r3, #16]
	ldr	r0, [r2, #3828]
	add	r4, r8, r4
	str	r3, [r2, #3828]
	mov	r2, #7
	str	r4, [r3]
	str	r0, [r3, #4]
	str	r3, [r0]
	ldr	r3, [r3, #8]
	str	r2, [r3]
	stmib	r3, {r1, r6}
	str	r5, [r3, #12]
	str	r5, [r3, #16]
	ldr	r3, [r7, #44]
	ldr	r0, [r7, #48]
	blx	r3
	mov	r0, r5
.L6463:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6467:
	mov	r1, #36
	mov	r3, #16
	b	.L6465
.L6466:
	movw	r0, #65012
	movt	r0, 65535
	b	.L6463
.L6468:
	mvn	r0, #11
	b	.L6463
.L6471:
	.align	2
.L6470:
	.word	.LANCHOR1+3772
	.fnend
	.size	rndis_indicate_status_msg, .-rndis_indicate_status_msg
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_write, %function
rndis_proc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #12]
	.pad #12
	sub	sp, sp, #12
	str	r2, [sp, #4]
	ldr	r3, [r3, #40]
	ldr	r3, [r3, #-20]
	ldr	r10, [r3, #44]
	beq	.L6473
	mov	r9, #0
	mov	r6, #57344
	movw	r8, #:lower16:.LANCHOR1
	mov	fp, #12
	mov	r4, r1
	mov	r5, r9
	movt	r6, 65535
	movt	r8, #:upper16:.LANCHOR1
	movt	fp, 16385
	add	r7, r1, r2
.L6481:
	mov	r3, sp
	mov	r0, r4
	and	r2, r3, r6
	ldr	r1, [r2, #8]
	sub	r1, r1, #1
	.syntax divided
@ 1185 "/home/xawlw/kernel/arg/drivers/usb/gadget/rndis.c" 1
	.ifnc r0,r0 ; .err ; .endif
	.ifnc r2,r2 ; .err ; .endif
	.ifnc r1,r1 ; .err ; .endif
	bl	__get_user_1
@ 0 "" 2
	.arm
	.syntax unified
	uxtb	r2, r2
	cmp	r0, #0
	sub	r2, r2, #48
	bne	.L6482
	cmp	r2, #52
	ldrls	pc, [pc, r2, asl #2]
	b	.L6475
.L6477:
	.word	.L6476
	.word	.L6476
	.word	.L6476
	.word	.L6476
	.word	.L6476
	.word	.L6476
	.word	.L6476
	.word	.L6476
	.word	.L6476
	.word	.L6476
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6478
	.word	.L6479
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6475
	.word	.L6478
	.word	.L6479
.L6479:
	ldrb	r0, [r10]	@ zero_extendqisi2
	mov	ip, #1
	mov	r1, fp
	rsb	r2, r0, r0, lsl #4
	add	r2, r8, r2, lsl #2
	str	ip, [r2, #3788]
	bl	rndis_indicate_status_msg
.L6480:
	add	r4, r4, #1
	cmp	r4, r7
	bne	.L6481
.L6473:
	ldr	r0, [sp, #4]
.L6472:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6478:
	ldrb	r0, [r10]	@ zero_extendqisi2
	mov	ip, #0
	mov	r1, #11
	movt	r1, 16385
	rsb	r2, r0, r0, lsl #4
	add	r2, r8, r2, lsl #2
	str	ip, [r2, #3788]
	bl	rndis_indicate_status_msg
	b	.L6480
.L6476:
	add	r5, r5, r5, lsl #2
	mov	r9, #1
	add	r5, r2, r5, lsl r9
	b	.L6480
.L6475:
	cmp	r9, #0
	strne	r5, [r10, #12]
	b	.L6480
.L6482:
	mvn	r0, #13
	b	.L6472
	.fnend
	.size	rndis_proc_write, .-rndis_proc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_complete, %function
f_audio_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [r1, #32]
	ldr	r7, [r1, #44]
	str	r3, [sp, #4]
	cmp	r7, r3
	bne	.L6517
	ldr	r3, [r6, #164]
	mov	r5, r0
	mov	r4, r1
	cmp	r3, r0
	beq	.L6520
	ldr	r3, [r6, #168]
	cmp	r3, r0
	beq	.L6521
	ldr	r5, [r6, #264]
	cmp	r5, #0
	beq	.L6491
	ldm	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy
	ldrh	r2, [sp, #4]
	mov	r0, r5
	ldrb	r1, [r6, #260]	@ zero_extendqisi2
	ldr	r3, [r5, #36]
	blx	r3
	str	r7, [r6, #264]
.L6491:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6520:
	ldr	r7, [r6, #176]
	cmp	r7, #0
	beq	.L6491
	movw	r8, #:lower16:.LANCHOR0
	ldr	r0, [r7, #4]
	movt	r8, #:upper16:.LANCHOR0
	ldr	r2, [r1, #48]
	ldr	r3, [r8, #1028]
	sub	r3, r3, r0
	cmp	r3, r2
	bcs	.L6497
	ldr	r2, [r6, #200]
	add	r1, r7, #8
	add	r3, r6, #196
	add	r0, r6, #180
	str	r1, [r6, #200]
	str	r3, [r7, #8]
	str	r2, [r7, #12]
	str	r1, [r2]
	bl	schedule_work
	ldr	r0, [r8, #1028]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L6498
	ldr	r2, [r4, #48]
	ldr	r0, [r0, #4]
.L6497:
	ldr	r3, [r7]
	ldr	r1, [r4]
	add	r0, r3, r0
	bl	memcpy
	ldr	ip, [r4, #48]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r7, #4]
	mov	r0, r5
	add	r3, r3, ip
	str	r3, [r7, #4]
	str	r7, [r6, #176]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L6491
	ldr	r1, .L6524
	movw	r0, #:lower16:.LC436
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC436
.L6519:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L6521:
	ldr	r7, [r6, #208]
	cmp	r7, #0
	beq	.L6522
.L6501:
	ldm	r7, {r1, r3}
	ldr	r0, [r4]
	ldr	r2, [r4, #48]
	add	r1, r1, r3
	bl	memcpy
	ldr	r1, [r4, #48]
	movw	r2, #:lower16:.LANCHOR0
	ldr	r3, [r7, #4]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1320]
	add	r3, r3, r1
	sub	r2, r2, r3
	str	r3, [r7, #4]
	ldr	r3, [r4, #48]
	cmp	r2, r3
	bcs	.L6503
	cmp	r7, #0
	beq	.L6504
	ldr	r0, [r7]
	bl	kfree
	mov	r3, #0
	mov	r0, r7
	str	r3, [r7]
	bl	kfree
.L6504:
	mov	r3, #0
	add	r0, r6, #212
	str	r3, [r6, #208]
	bl	schedule_work
.L6503:
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r2, #32
	mov	r0, r5
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L6491
	movw	r0, #:lower16:.LC436
	ldr	r1, .L6524+4
	movt	r0, #:upper16:.LC436
	ldr	r2, [r5, #4]
	b	.L6519
.L6522:
	add	r7, r6, #204
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r2, r6
	mov	r1, r0
	ldr	r3, [r2, #228]!
	cmp	r3, r2
	beq	.L6523
	ldr	ip, [r3]
	mov	r0, r7
	mov	r8, #256
	ldr	r2, [r3, #4]
	mov	lr, #512
	sub	r7, r3, #8
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r8, lr}
	str	r7, [r6, #208]
	bl	_raw_spin_unlock_irqrestore
	b	.L6501
.L6523:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r0, r6, #212
	bl	schedule_work
	b	.L6503
.L6498:
	ldr	r1, .L6524
	movw	r0, #:lower16:.LC29
	movt	r0, #:upper16:.LC29
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L6517:
	ldr	r1, .L6524+8
	movw	r0, #:lower16:.LC437
	mov	r2, r7
	movt	r0, #:upper16:.LC437
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L6525:
	.align	2
.L6524:
	.word	.LANCHOR2+3736
	.word	.LANCHOR2+3768
	.word	.LANCHOR2+3796
	.fnend
	.size	f_audio_complete, .-f_audio_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_suspend, %function
rndis_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #3440]
	ldr	r0, [r3, #3444]
	add	r1, r1, #200
	b	queue_work
	.fnend
	.size	rndis_qc_suspend, .-rndis_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_resume, %function
rndis_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #3440]
	ldr	r0, [r3, #3444]
	add	r1, r1, #216
	b	queue_work
	.fnend
	.size	rndis_qc_resume, .-rndis_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_set_interface, %function
do_set_interface:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	clz	r3, r1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	lsr	r3, r3, #5
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:bulk_in_complete
	strd	r10, [sp, #24]
	movw	r8, #:lower16:bulk_out_complete
	movt	r9, #:upper16:bulk_in_complete
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	movt	r8, #:upper16:bulk_out_complete
	str	r3, [sp, #4]
	mov	r3, #0
	str	r3, [sp]
.L6537:
	ldr	fp, [r4, #8]
	cmp	fp, #0
	beq	.L6529
	mov	r6, #0
	mov	r10, r6
.L6532:
	ldr	r5, [r4, #68]
	add	r5, r5, r6
	add	r6, r6, #32
	ldr	r1, [r5, #16]
	cmp	r1, #0
	beq	.L6530
	ldr	r0, [fp, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r5, #16]
.L6530:
	ldr	r1, [r5, #24]
	cmp	r1, #0
	beq	.L6531
	ldr	r0, [fp, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r5, #24]
.L6531:
	cmp	r6, #128
	bne	.L6532
	mov	r0, #0
	mov	r2, #1
	mov	r3, r0
	mov	r1, #3
	str	r0, [r4, #8]
	add	r0, r4, #16
	bl	__wake_up
.L6529:
	ldm	sp, {r2, r6}
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r6, #1
	bfc	r3, #5, #1
	cmp	r6, #0
	strb	r3, [r4, #144]
	bne	.L6528
	str	r7, [r4, #8]
.L6539:
	ldr	r10, [r7, #92]
	mov	r1, #32
	ldr	r5, [r4, #68]
	ldr	r3, [r10, #8]
	mov	r0, r10
	add	r5, r5, r6
	add	r6, r6, r1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r1, #32
	str	r0, [r5, #16]
	beq	.L6555
	ldr	r10, [r7, #96]
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #24]
	beq	.L6555
	ldr	r3, [r5]
	cmp	r6, #128
	str	r3, [r0]
	ldr	r2, [r5, #16]
	str	r3, [r2]
	ldr	r3, [r5, #24]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r9, [r3, #28]
	ldr	r3, [r5, #24]
	str	r8, [r3, #28]
	bne	.L6539
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	orr	r3, r3, #32
	cmp	r2, #0
	strb	r3, [r4, #144]
	beq	.L6541
	mov	r2, #0
	mov	r0, #10496
	mov	r1, r2
	movt	r0, 6
.L6540:
	ldr	r3, [r4, #100]
	add	r1, r1, #1
	add	r3, r3, r2
	add	r2, r2, #400
	str	r0, [r3, #36]
	ldr	r3, [r4, #92]
	cmp	r3, r1
	bhi	.L6540
.L6541:
	mov	r3, #0
	str	r3, [sp]
.L6528:
	ldr	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6555:
	ldr	r0, [r4]
	mvn	r3, #11
	movw	r1, #:lower16:.LC438
	movt	r1, #:upper16:.LC438
	str	r3, [sp]
	ldr	r2, [r10, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L6537
	.fnend
	.size	do_set_interface, .-do_set_interface
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_unbind, %function
qdss_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r0, [r1, #188]
	ldr	r5, [r3]
	bl	flush_workqueue
	movw	r0, #:lower16:.LC305
	movt	r0, #:upper16:.LC305
	ldr	r1, [r5, #28]
	bl	strcmp
	subs	r1, r0, #0
	beq	.L6581
.L6558:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L6562
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L6563
	bl	kfree
	ldr	r3, [r5, #20]
.L6562:
	cmp	r3, #2
	bhi	.L6563
.L6557:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6563:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L6557
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L6581:
	ldr	r0, [r4, #100]
	bl	dwc3_tx_fifo_resize_request
	b	.L6558
	.fnend
	.size	qdss_unbind, .-qdss_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_data_complete, %function
audio_data_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r6, r4, #100
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	add	r2, r5, #36
	add	ip, r4, #88
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #92]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L6582
	ldr	r6, [r5, #44]
	cmp	r6, #0
	bne	.L6582
	ldrd	r2, [r4, #116]
	ldr	r1, [r5, #48]
	add	r3, r3, r1
	cmp	r3, r2
	str	r3, [r4, #120]
	bcs	.L6589
.L6584:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	audio_send
.L6582:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6589:
	ldr	r0, [r4, #84]
	bl	snd_pcm_period_elapsed
	str	r6, [r4, #120]
	b	.L6584
	.fnend
	.size	audio_data_complete, .-audio_data_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_unbind, %function
audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r7, r1, #100
	strd	r8, [sp, #16]
	mov	r9, #256
	mov	r8, #512
	strd	r10, [sp, #24]
	add	r10, r1, #88
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	b	.L6591
.L6594:
	ldr	fp, [r5, #96]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L6591:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #88]
	mov	r3, r0
	mov	r0, r7
	mov	r1, r3
	cmp	r4, r10
	sub	r6, r4, #36
	beq	.L6596
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L6594
.L6593:
	ldr	r0, [r5, #76]
	bl	snd_card_free_when_closed
	mov	r3, #0
	str	r3, [r5, #76]
	str	r3, [r5, #80]
	str	r3, [r5, #84]
	str	r3, [r5, #96]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6596:
	bl	_raw_spin_unlock_irqrestore
	b	.L6593
	.fnend
	.size	audio_unbind, .-audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_in, %function
ccid_bulk_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2220]
	cmp	r2, #0
	movne	r3, #1
	add	r6, r4, #84
	mov	r0, r6
	strne	r3, [r4, #140]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #188]
	add	r2, r5, #36
	add	ip, r4, #184
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #188]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #164
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_in, .-ccid_bulk_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_unbind, %function
ecm_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, [r4, #3440]
	str	lr, [sp, #12]
	bl	kfree
	ldr	r0, [r4, #3444]
	mov	r3, #0
	str	r3, [r4, #3440]
	cmp	r0, r3
	beq	.L6604
	bl	destroy_workqueue
.L6604:
	ldr	r3, [r6, #24]
	mov	r2, #0
	str	r2, [r4, #3444]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L6611
.L6605:
	cmp	r3, #2
	bls	.L6606
	ldr	r0, [r5, #12]
	bl	kfree
.L6606:
	ldr	r0, [r5, #8]
	bl	kfree
	ldr	r3, [r5, #140]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r5, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r5
	str	r2, [r3, #1416]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L6611:
	ldr	r0, [r5, #16]
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L6605
	.fnend
	.size	ecm_qc_unbind, .-ecm_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_init, %function
ecm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L6619
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #6
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L6619:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	ecm_function_init, .-ecm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tohost, %function
ghsic_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #136
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #88
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r5, #-128]
	mov	r2, r0
	cmp	r8, #0
	beq	.L6624
	movw	r3, #16960
	movw	fp, #:lower16:.LANCHOR0
	movt	r3, 15
	movw	r10, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR1
	str	r3, [sp, #12]
	sub	r3, r5, #112
	str	r3, [sp, #4]
.L6623:
	ldr	r3, [r5, #-112]
	ldr	r1, [sp, #4]
	cmp	r3, r1
	beq	.L6624
.L6632:
	mov	r3, r5
	ldr	r6, [r3, #-104]!
	cmp	r6, r3
	beq	.L6624
	cmp	r6, #0
	beq	.L6624
	ldr	r3, [r5, #-96]
	mov	r1, #0
	mov	ip, #256
	sub	r3, r3, #1
	str	r3, [r5, #-96]
	ldm	r6, {r0, r3}
	str	r1, [r6]
	str	r1, [r6, #4]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r4, [r5, #-112]
	str	r6, [r4, #-4]
	ldr	r0, [r6, #172]
	sub	r9, r4, #36
	ldrb	r3, [r4, #-10]	@ zero_extendqisi2
	str	r0, [r4, #-36]
	ldr	r0, [r6, #80]
	orr	r3, r3, #2
	str	r0, [r4, #-32]
	strb	r3, [r4, #-10]
	ldr	r3, [r5, #48]
	ldr	r0, [fp, #1436]
	add	r3, r3, #1
	cmp	r3, r0
	mov	r0, #512
	str	r3, [r5, #48]
	ldrb	r3, [r4, #-10]	@ zero_extendqisi2
	bfieq	r3, r1, #0, #1
	orrne	r3, r3, #1
	strbeq	r3, [r4, #-10]
	strbne	r3, [r4, #-10]
	streq	r1, [r5, #48]
	ldm	r4, {r1, r3}
	str	r3, [r1, #4]
	str	r1, [r3]
	str	ip, [r4]
	ldr	r3, [r10, #3748]
	str	r0, [r4, #4]
	cmp	r3, #0
	bne	.L6651
.L6627:
	mov	r1, r2
	mov	r0, r7
	str	r3, [r6, #44]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r9, #0
	mov	r2, r0
	bne	.L6652
	ldr	r3, [r5, #56]
	ldr	r1, [fp, #552]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r5, #56]
	beq	.L6623
	ldr	r1, [r5, #-96]
	ldr	r3, [fp, #1440]
	cmp	r1, r3
	bhi	.L6623
	add	r1, r5, #28
	mov	r0, #2
	str	r2, [sp, #8]
	bl	_test_and_clear_bit
	cmp	r0, #0
	ldr	r2, [sp, #8]
	beq	.L6623
	ldr	r1, [r5, #-96]
	ldr	r3, [r5, #64]
	str	r1, [r5, #80]
	ldr	r1, [sp, #4]
	add	r3, r3, #1
	str	r3, [r5, #64]
	ldr	r3, [r5, #-112]
	cmp	r3, r1
	bne	.L6632
.L6624:
	mov	r1, r2
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6651:
	add	r0, sp, #16
	str	r2, [sp, #8]
	bl	do_gettimeofday
	ldrd	r2, [sp, #12]
	ldr	r1, [sp, #20]
	ubfx	r3, r3, #0, #12
	mla	r3, r2, r3, r1
	ldr	r2, [sp, #8]
	b	.L6627
.L6652:
	movw	r0, #:lower16:.LC353
	ldr	r1, .L6653
	str	r2, [sp, #8]
	movt	r0, #:upper16:.LC353
	bl	printk
	ldr	r3, [r5, #-112]
	mov	r0, r6
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #4]
	str	r3, [r4, #4]
	str	r4, [r5, #-112]
	bl	dev_kfree_skb_any
	ldr	r2, [sp, #8]
	b	.L6624
.L6654:
	.align	2
.L6653:
	.word	.LANCHOR2+3816
	.fnend
	.size	ghsic_data_write_tohost, .-ghsic_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_probe, %function
ghsic_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r6, [r5, #1456]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L6656
	ldr	r4, [r5, #1460]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6657
	cmp	r6, #1
	bls	.L6656
	ldr	r4, [r5, #1564]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6657
	cmp	r6, #2
	beq	.L6656
	ldr	r4, [r5, #1668]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6657
	cmp	r6, #3
	beq	.L6656
	ldr	r4, [r5, #1772]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L6657
.L6656:
	movw	r0, #:lower16:.LC97
	mvn	r2, #21
	ldr	r1, .L6683
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
.L6655:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6657:
	mov	r0, #1
	add	r1, r4, #180
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L6655
	add	r1, r4, #88
	ldr	r0, [r4, #84]
	bl	queue_work
	mov	r0, #0
	b	.L6655
.L6684:
	.align	2
.L6683:
	.word	.LANCHOR2+3840
	.fnend
	.size	ghsic_data_probe, .-ghsic_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_probe, %function
ghsic_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r5, #1036]
	ldr	r7, [r0]
	cmp	r6, #0
	beq	.L6686
	ldr	r4, [r5, #1040]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6687
	cmp	r6, #1
	bls	.L6686
	ldr	r4, [r5, #1144]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6687
	cmp	r6, #2
	beq	.L6686
	ldr	r4, [r5, #1248]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6687
	cmp	r6, #3
	beq	.L6686
	ldr	r4, [r5, #1352]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L6687
.L6686:
	movw	r0, #:lower16:.LC97
	mvn	r2, #21
	ldr	r1, .L6716
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
.L6685:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6687:
	add	r1, r4, #84
	mov	r0, #1
	add	r5, r4, #4
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #8]
	mov	r6, r0
	cmp	r3, #0
	beq	.L6690
	add	r1, r4, #16
	ldr	r0, [r4, #12]
	bl	queue_work
.L6690:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L6685
.L6717:
	.align	2
.L6716:
	.word	.LANCHOR2+3860
	.fnend
	.size	ghsic_ctrl_probe, .-ghsic_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_notify_complete, %function
mbim_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r1]
	ldr	r4, [r1, #32]
	add	r6, r4, #196
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #44]
	cmn	r3, #104
	beq	.L6720
	cmp	r3, #0
	bne	.L6756
	add	r3, r4, #160
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #160]
.L6722:
	ldr	r5, [r4, #152]
	cmp	r5, #0
	beq	.L6734
	ldrb	r3, [r4, #156]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6736
	cmp	r3, #3
	bne	.L6757
	ldr	r3, [r4, #160]
	cmp	r3, #0
	ble	.L6734
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #148]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	bne	.L6758
.L6734:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock
.L6736:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	ble	.L6734
	movw	r0, #:lower16:.LC441
	ldr	r1, .L6762
	movt	r0, #:upper16:.LC441
	bl	printk
	b	.L6734
.L6757:
	ldr	r3, [r5]
	mvn	r2, #94
	add	r7, r4, #160
	strb	r2, [r3]
	ldrb	r2, [r4, #188]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	.syntax divided
@ 44 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r6
	ldr	r3, [r4, #160]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #148]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	beq	.L6734
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC443
	mov	r2, r5
	ldr	r1, .L6762
	movt	r0, #:upper16:.LC443
	bl	printk
	b	.L6734
.L6756:
	cmn	r3, #108
	beq	.L6720
	movw	r0, #:lower16:.LC440
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldr	r1, .L6762+4
	movt	r0, #:upper16:.LC440
	bl	printk
	b	.L6722
.L6720:
	mov	r3, #0
	movw	r0, #:lower16:.LC439
	ldr	r1, .L6762+4
	movt	r0, #:upper16:.LC439
	mov	r7, r4
	strb	r3, [r4, #156]
	str	r3, [r4, #160]
	bl	printk
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r7, #200]!
	cmp	r3, r7
	beq	.L6723
	ldr	r5, [r3]
	mov	r10, #256
	mov	r9, #512
	mov	r8, r5
	b	.L6724
.L6759:
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, fp
	bl	kfree
	cmp	r7, r8
	ldr	r5, [r5]
	beq	.L6723
.L6726:
	mov	r3, r8
	mov	r8, r5
.L6724:
	ldr	r2, [r3, #4]
	subs	fp, r3, #8
	str	r2, [r5, #4]
	str	r5, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	bne	.L6759
	cmp	r7, r8
	ldr	r5, [r5]
	bne	.L6726
.L6723:
	mov	r8, r4
	ldr	r3, [r8, #208]!
	cmp	r3, r8
	beq	.L6727
	ldr	r5, [r3]
	mov	fp, #256
	mov	r10, #512
	mov	r9, r5
	b	.L6728
.L6760:
	ldr	r0, [r3, #-8]
	bl	kfree
	ldr	r1, [sp, #4]
	mov	r0, r1
	bl	kfree
	cmp	r9, r8
	ldr	r5, [r5]
	beq	.L6727
.L6730:
	mov	r3, r9
	mov	r9, r5
.L6728:
	ldr	r2, [r3, #4]
	subs	r1, r3, #8
	str	r1, [sp, #4]
	str	r2, [r5, #4]
	str	r5, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	bne	.L6760
	cmp	r9, r8
	ldr	r5, [r5]
	bne	.L6730
.L6727:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L6739
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L6761
.L6731:
	mov	r8, #16
	mov	r9, #0
	strd	r8, [r3]
.L6732:
	ldr	r2, [r4, #204]
	add	r1, r3, #8
	mov	r0, r6
	str	r1, [r4, #204]
	str	r7, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r2]
	bl	_raw_spin_unlock
	add	r0, r4, #100
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r0, r6
	bl	_raw_spin_lock
	b	.L6722
.L6739:
	mov	r3, #16
	b	.L6731
.L6761:
	mvn	r3, #11
	b	.L6732
.L6758:
	add	r3, r4, #160
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC442
	mov	r2, r5
	ldr	r1, .L6762
	movt	r0, #:upper16:.LC442
	bl	printk
	b	.L6734
.L6763:
	.align	2
.L6762:
	.word	.LANCHOR2+3904
	.word	.LANCHOR2+3880
	.fnend
	.size	mbim_notify_complete, .-mbim_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_read, %function
ffs_ep0_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 1, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	mov	r9, r0
	strd	r10, [sp, #24]
	.setfp fp, sp, #32
	add	fp, sp, #32
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r6]
	str	r1, [fp, #-72]
	ldr	r5, [r0, #124]
	str	r2, [fp, #-64]
	str	r3, [fp, #-40]
	add	r4, r5, #100
	.syntax divided
@ 193 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L6765:
	.syntax divided
@ 170 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r4]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L6765
	.syntax divided
@ 195 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	beq	.L6797
	ldr	r3, [r9, #32]
	add	r8, r5, #4
	mov	r0, r8
	tst	r3, #2048
	bne	.L6823
	bl	mutex_lock_interruptible
	subs	r10, r0, #0
	blt	.L6764
.L6770:
	ldr	r3, [r5, #96]
	cmp	r3, #2
	mvnne	r10, #76
	movne	r9, #0
	beq	.L6824
.L6768:
	mov	r0, r8
	bl	mutex_unlock
	mov	r0, r9
	bl	kfree
.L6764:
	ldr	r2, [fp, #-40]
	mov	r0, r10
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L6825
	sub	sp, fp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6823:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L6770
	mvn	r10, #10
	b	.L6764
.L6824:
	add	r3, r5, #120
	mov	r0, r3
	str	r3, [fp, #-68]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L6771:
	.syntax divided
@ 170 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r10, [r4]
	mov	r7, #0
	teq	r10, #2
	strexeq r7, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r7, #0
	bne	.L6771
	.syntax divided
@ 195 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r10, #1
	beq	.L6773
	bcc	.L6774
	cmp	r10, #2
	mov	r9, r7
	mvneq	r10, #42
	mvnne	r10, #76
.L6772:
	ldr	r0, [fp, #-68]
	bl	_raw_spin_unlock_irq
	b	.L6768
.L6774:
	ldr	r2, [fp, #-64]
	movw	r3, #43691
	movt	r3, 43690
	umull	r2, r3, r3, r2
	lsrs	r3, r3, #3
	str	r3, [fp, #-76]
	beq	.L6801
	ldr	r3, [r9, #32]
	ldrh	r9, [r5, #108]
	tst	r3, #2048
	bne	.L6826
	cmp	r9, #0
	bne	.L6777
	mov	r4, #57344
	mov	r3, sp
	str	r9, [fp, #-60]
	movt	r4, 65535
	str	r9, [fp, #-56]
	movw	r1, #:lower16:autoremove_wake_function
	and	r2, r3, r4
	str	r9, [fp, #-52]
	sub	r10, fp, #48
	str	r9, [fp, #-48]
	mov	r0, #1
	movt	r1, #:upper16:autoremove_wake_function
	mov	r7, r0
	str	r9, [fp, #-44]
	ldr	ip, [r2, #12]
	add	r9, r5, #124
	str	r0, [fp, #-60]
	mov	r2, r10
	str	ip, [fp, #-56]
	str	r1, [fp, #-52]
	str	r10, [fp, #-48]
	str	r10, [fp, #-44]
	b	.L6781
.L6827:
	ldr	r0, [fp, #-68]
	bl	_raw_spin_unlock_irq
	bl	schedule
	ldr	r0, [fp, #-68]
	bl	_raw_spin_lock_irq
	ldrh	r2, [r5, #108]
	cmp	r2, #0
	ldr	r2, [fp, #-48]
	bne	.L6780
.L6781:
	cmp	r2, r10
	bne	.L6778
	ldr	r2, [r5, #128]
	str	r9, [fp, #-48]
	str	r10, [r5, #128]
	str	r2, [fp, #-44]
	str	r10, [r2]
.L6778:
	mov	r3, sp
	and	r2, r3, r4
	ldr	r1, [r2, #12]
	str	r7, [r1]
	.syntax divided
@ 637 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_fs.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r2, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	ands	r3, r2, #1
	str	r3, [fp, #-64]
	beq	.L6827
	mov	r3, sp
	ldr	r1, [fp, #-48]
	mov	ip, #256
	and	r4, r4, r3
	ldr	r3, [fp, #-44]
	mov	r0, #512
	mov	r2, #0
	mvn	r10, #3
	mov	r9, r2
	str	r3, [r1, #4]
	str	r1, [r3]
	str	ip, [fp, #-48]
	str	r0, [fp, #-44]
	ldr	r1, [r4, #12]
	str	r2, [r1]
	b	.L6772
.L6773:
	ldrsb	r3, [r5, #112]
	cmp	r3, #0
	blt	.L6828
	ldrh	r7, [r5, #118]
	ldr	r0, [fp, #-68]
	ldr	r3, [fp, #-64]
	cmp	r7, r3
	movcs	r7, r3
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	beq	.L6805
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc
	subs	r9, r0, #0
	beq	.L6829
.L6792:
	ldr	r0, [fp, #-68]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L6793:
	.syntax divided
@ 170 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r4]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L6793
	.syntax divided
@ 195 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	mvneq	r10, #42
	beq	.L6772
	ldr	r4, [r5, #32]
	ldrh	r3, [r5, #118]
	ldr	r0, [fp, #-68]
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	cmp	r7, r3
	movcs	r3, #0
	movcc	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r4, #26]
	bl	_raw_spin_unlock_irq
	cmp	r9, #0
	str	r9, [r4]
	str	r7, [r4, #4]
	beq	.L6830
.L6794:
	ldr	r3, [r5]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r4
	str	r0, [r5, #36]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	blt	.L6768
	add	r0, r5, #36
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	bne	.L6831
	ldr	r10, [r5, #52]
	str	r0, [r5, #100]
	cmp	r10, #0
	ble	.L6768
	mov	r2, r7
	mov	r1, r9
	ldr	r0, [fp, #-72]
	bl	__copy_to_user
	cmp	r0, #0
	mvnne	r10, #13
	b	.L6768
.L6826:
	cmp	r9, #0
	bne	.L6777
	mvn	r10, #10
	b	.L6772
.L6828:
	ldr	r0, [fp, #-68]
	bl	_raw_spin_unlock_irq
	ldrh	r9, [r5, #110]
	cmp	r9, #0
	mvneq	r10, #2
	beq	.L6768
	ldr	r2, [r5]
	mov	r1, r10
	mov	r9, r7
	mvn	r10, #50
	ldr	r0, [r2, #4]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #24]
	blx	r2
	str	r7, [r5, #100]
	b	.L6768
.L6780:
	mov	r3, sp
	mov	r0, #256
	and	r4, r4, r3
	ldr	r3, [fp, #-44]
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r2, [fp, #-64]
	strd	r0, [fp, #-48]
	ldr	r3, [r4, #12]
	str	r2, [r3]
	ldrh	r9, [r5, #108]
.L6777:
	ldr	r3, [fp, #-76]
	mov	r4, sp
	cmp	r9, r3
	movcc	r10, r9
	movcs	r10, r3
	add	r7, r10, r10, lsl #1
	lsl	r7, r7, #2
	add	r2, r7, #7
	cmp	r7, #0
	bic	r2, r2, #7
	sub	sp, sp, r2
	mov	r9, sp
	beq	.L6782
	mov	r1, r7
	mov	r0, sp
	bl	__memzero
.L6782:
	ldrb	r2, [r5, #104]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r9, #8]
	bne	.L6783
	ldrd	r0, [r5, #112]
	mov	r2, #1
	str	r0, [r9]	@ unaligned
	str	r1, [r9, #4]	@ unaligned
	str	r2, [r5, #100]
.L6783:
	cmp	r10, #1
	bls	.L6784
	ldrb	r2, [r5, #105]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r9, #20]
	bne	.L6785
	ldrd	r0, [r5, #112]
	mov	r2, #1
	str	r0, [r9, #12]	@ unaligned
	str	r1, [r9, #16]	@ unaligned
	str	r2, [r5, #100]
.L6785:
	cmp	r10, #2
	beq	.L6784
	ldrb	r2, [r5, #106]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r9, #32]
	bne	.L6786
	ldrd	r0, [r5, #112]
	mov	r2, #1
	str	r0, [r9, #24]	@ unaligned
	str	r1, [r9, #28]	@ unaligned
	str	r2, [r5, #100]
.L6786:
	cmp	r10, #3
	beq	.L6784
	ldrb	r2, [r5, #107]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r9, #44]
	bne	.L6784
	ldrd	r0, [r5, #112]
	mov	r2, #1
	str	r0, [r9, #36]	@ unaligned
	str	r1, [r9, #40]	@ unaligned
	str	r2, [r5, #100]
.L6784:
	ldrh	r2, [r5, #108]
	cmp	r10, r2
	movcs	r3, #0
	strhcs	r3, [r5, #108]	@ movhi
	bcs	.L6789
	sub	r2, r2, r10
	add	r0, r5, #104
	uxth	r2, r2
	add	r1, r0, r10
	strh	r2, [r5, #108]	@ movhi
	bl	memmove
.L6789:
	ldr	r0, [fp, #-68]
	bl	_raw_spin_unlock_irq
	mov	r0, r8
	bl	mutex_unlock
	mov	r2, r7
	mov	r1, r9
	ldr	r0, [fp, #-72]
	bl	__copy_to_user
	cmp	r0, #0
	mov	sp, r4
	moveq	r10, r7
	mvnne	r10, #13
	b	.L6764
.L6797:
	mvn	r10, #42
	b	.L6764
.L6801:
	mov	r9, r3
	mvn	r10, #21
	b	.L6772
.L6830:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r4]
	b	.L6794
.L6829:
	mvn	r10, #11
	b	.L6768
.L6805:
	mov	r9, r7
	b	.L6792
.L6831:
	ldr	r2, [r5]
	mov	r1, r4
	mvn	r10, #3
	ldr	r0, [r2, #4]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L6768
.L6825:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_ep0_read, .-ffs_ep0_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_in, %function
adb_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #3520]
	cmp	r2, #0
	movne	r3, #1
	add	r6, r4, #80
	mov	r0, r6
	strne	r3, [r4, #96]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	add	r2, r5, #36
	add	ip, r4, #112
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #116]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #132
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	adb_complete_in, .-adb_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_unbind, %function
mbim_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, r1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r6, [r1, #128]	@ zero_extendqisi2
	add	r6, r5, r6, lsl #2
	ldr	r0, [r6, #3440]
	bl	kfree
	ldr	r0, [r5, #3444]
	mov	r3, #0
	str	r3, [r6, #3440]
	cmp	r0, r3
	beq	.L6839
	bl	destroy_workqueue
.L6839:
	ldr	r3, [r7, #24]
	mov	r2, #0
	str	r2, [r5, #3444]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L6846
.L6840:
	cmp	r3, #2
	bls	.L6841
	ldr	r0, [r4, #12]
	bl	kfree
.L6841:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r3, [r4, #152]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #190]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6846:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L6840
	.fnend
	.size	mbim_unbind, .-mbim_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_remove, %function
android_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L6882
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	str	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR1
	str	lr, [sp, #20]
	ldr	r7, [r0, #92]
	ldr	r1, [r6, #2228]
	cmp	r7, #0
	ldrbne	r2, [r7, #8]	@ zero_extendqisi2
	moveq	r2, r7
	cmp	r1, r5
	sub	r4, r1, #208
	beq	.L6849
	ldr	r3, [r1, #-160]
	cmp	r3, #0
	beq	.L6849
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L6850
	b	.L6849
.L6851:
	ldr	r3, [r3, #-160]
	cmp	r3, #0
	beq	.L6849
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L6849
.L6850:
	ldr	r3, [r4, #208]
	cmp	r3, r5
	sub	r4, r3, #208
	bne	.L6851
.L6849:
	cmp	r4, #0
	beq	.L6852
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #1444]
	cmp	r1, #0
	beq	.L6853
	ldr	r8, .L6882+4
.L6854:
	ldr	r0, [r4, #12]
	bl	device_remove_file
	ldr	r1, [r8], #4
	cmp	r1, #0
	bne	.L6854
.L6853:
	ldr	r3, [r4, #12]
	ldr	r0, [r6, #3732]
	ldr	r1, [r3, #296]
	bl	device_destroy
	cmp	r7, #0
	beq	.L6855
	ldr	r3, [r7, #4]
	cmp	r3, #0
	bne	.L6880
.L6855:
	ldr	r3, [r6, #3728]
	mov	lr, #256
	mov	ip, #512
	ldr	r1, [r4, #208]
	mov	r0, r4
	ldr	r2, [r4, #212]
	sub	r3, r3, #1
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [r4, #208]
	str	ip, [r4, #212]
	str	r3, [r6, #3728]
	bl	kfree
	ldr	r1, [r6, #2228]
.L6852:
	cmp	r1, r5
	beq	.L6881
.L6857:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6880:
	add	r0, r4, #64
	bl	pm_qos_remove_request
	b	.L6855
.L6881:
	ldr	r0, [r6, #3732]
	bl	class_destroy
	ldr	r3, .L6882+8
	mov	r2, #0
	ldr	r0, [r6, #2316]
	str	r2, [r6, #3732]
	cmp	r0, r3
	bne	.L6857
	sub	r0, r0, #464
	bl	usb_gadget_unregister_driver
	b	.L6857
.L6883:
	.align	2
.L6882:
	.word	.LANCHOR1+2228
	.word	.LANCHOR0+1448
	.word	.LANCHOR0+1504
	.fnend
	.size	android_remove, .-android_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_unbind, %function
composite_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r9, r0, #32
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r0, [sp, #4]
	mov	r0, r9
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r7, r0
	cmp	r3, #0
	bne	.L6908
.L6885:
	add	r8, r7, #36
	mov	r6, #256
.L6890:
	ldr	r4, [r7, #36]
	cmp	r4, r8
	beq	.L6909
.L6891:
	ldrd	r0, [r4]
	mov	r3, #512
	sub	r10, r4, #28
	mov	fp, r3
	add	r5, r4, #8
	str	r1, [r0, #4]
	str	r0, [r1]
	str	r6, [r4]
	str	r3, [r4, #4]
	b	.L6888
.L6889:
	ldm	r1, {r0, r3}
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r1, #-36]
	stm	r1, {r6, fp}
	cmp	r3, #0
	bne	.L6910
.L6888:
	ldr	r1, [r4, #8]
	cmp	r1, r5
	bne	.L6889
	ldr	r3, [r4, #-16]
	cmp	r3, #0
	beq	.L6890
	mov	r0, r10
	blx	r3
	ldr	r4, [r7, #36]
	cmp	r4, r8
	bne	.L6891
.L6909:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #2316]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L6892
	mov	r0, r7
	blx	r3
.L6892:
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L6893
	ldr	r0, [r3]
	bl	kfree
	ldr	r3, [sp, #4]
	ldr	r1, [r7, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L6893:
	ldr	r1, .L6911
	mov	r0, r9
	bl	device_remove_file
	mov	r0, r7
	bl	kfree
	mov	r0, r9
	mov	r1, #0
	bl	dev_set_drvdata
	mov	r3, #0
	str	r3, [r4, #2316]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6910:
	sub	r1, r1, #64
	mov	r0, r10
	blx	r3
	b	.L6888
.L6908:
	movw	r0, #:lower16:.LC444
	movw	r1, #1454
	movt	r0, #:upper16:.LC444
	bl	warn_slowpath_null
	b	.L6885
.L6912:
	.align	2
.L6911:
	.word	.LANCHOR0+1548
	.fnend
	.size	composite_unbind, .-composite_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_in, %function
mtp_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2336]
	cmp	r2, #0
	movne	r3, #4
	add	r6, r4, #80
	mov	r0, r6
	strne	r3, [r4, #96]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	add	r2, r5, #36
	add	ip, r4, #108
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #112]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #136
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	mtp_complete_in, .-mtp_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_intr, %function
mtp_complete_intr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2336]
	cmp	r2, #0
	movne	r3, #4
	add	r6, r4, #80
	mov	r0, r6
	strne	r3, [r4, #96]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	add	r2, r5, #36
	add	ip, r4, #116
	mov	r1, r0
	mov	r0, r6
	str	r2, [r4, #120]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #148
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	mtp_complete_intr, .-mtp_complete_intr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_resume, %function
ffs_func_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-44]
	add	r4, r6, #120
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #100]
	mov	r5, r0
	add	r2, r6, #104
	ldrh	r0, [r6, #108]
	mov	lr, r2
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #100]
	cmp	r0, #0
	beq	.L6930
	add	r0, r0, r2
	mov	r3, r2
.L6929:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbhi	r1, [r2]
	addhi	r2, r2, #1
	cmp	r0, r3
	bne	.L6929
	sub	r2, r2, lr
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L6927:
	add	r0, r6, r0
	strh	r3, [r6, #108]	@ movhi
	mov	ip, #6
	mov	r1, #3
	mov	r2, #1
	strb	ip, [r0, #104]
	mov	r0, r4
	bl	__wake_up_locked
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L6930:
	mov	r3, #1
	b	.L6927
	.fnend
	.size	ffs_func_resume, .-ffs_func_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_suspend, %function
ffs_func_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-44]
	add	r4, r6, #120
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #100]
	mov	r5, r0
	add	r2, r6, #104
	ldrh	r0, [r6, #108]
	mov	ip, r2
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #100]
	cmp	r0, #0
	beq	.L6938
	add	r0, r0, r2
	mov	r3, r2
.L6937:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	cmp	r1, #5
	strbne	r1, [r2]
	addne	r2, r2, #1
	cmp	r0, r3
	bne	.L6937
	sub	r2, r2, ip
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L6935:
	add	r0, r6, r0
	strh	r3, [r6, #108]	@ movhi
	mov	ip, #5
	mov	r1, #3
	mov	r2, #1
	strb	ip, [r0, #104]
	mov	r0, r4
	bl	__wake_up_locked
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L6938:
	mov	r3, #1
	b	.L6935
	.fnend
	.size	ffs_func_suspend, .-ffs_func_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tomdm, %function
ghsic_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #120
	bxeq	lr
	ldr	r3, [r0, #-116]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #40
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #44]
	mov	r6, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L6949
	mov	r2, r5
	ldr	r4, [r2, #-56]!
	cmp	r4, r2
	beq	.L6949
	cmp	r4, #0
	beq	.L6949
	ldr	r1, [r5, #-48]
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	sub	r1, r1, #1
	str	r1, [r5, #-48]
	ldrd	r0, [r4]
	str	r3, [r4]
	str	r3, [r4, #4]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r3, [r2, #3748]
	cmp	r3, #0
	bne	.L7000
.L6950:
	mov	r1, r6
	str	r3, [r4, #40]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r1, .L7006
	ldr	r0, .L7006+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L7001
.L6948:
	ldr	r3, [r5, #92]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #92]
	bl	dev_kfree_skb_any
.L6949:
.L6947:
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r5, #-108]
	mov	r6, r0
	cmp	r9, #0
	beq	.L6953
	movw	r3, #16960
	movw	r7, #:lower16:.LANCHOR0
	movt	r3, 15
	movw	r10, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR1
	str	r3, [sp, #12]
	b	.L6952
.L6954:
	mov	r2, #0
	mov	r1, #208
	ldr	r0, [r7, #1592]
	mvn	r3, #0
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r2, #208
	ldr	r1, [sp]
	mov	r0, r9
	beq	.L7002
	ldr	ip, [fp, #172]
	str	r6, [fp, #28]
	str	ip, [r4, #-36]
	ldr	ip, [r7, #1592]
	str	ip, [r4, #-32]
	str	fp, [r4, #-4]
	ldr	ip, [r10, #3748]
	cmp	ip, #0
	bne	.L7003
.L6956:
	str	ip, [fp, #32]
	ldr	ip, [r9, #8]
	ldr	r6, [ip, #16]
	blx	r6
	mov	r2, r0
	mov	r0, r8
	str	r2, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #4]
	mov	r6, r0
	cmp	r2, #0
	bne	.L7004
.L6952:
	ldr	ip, [r5, #-116]
	sub	lr, r5, #64
	mov	r3, #256
	mov	r2, #512
	mov	r1, r6
	mov	r0, r8
	str	lr, [sp, #8]
	cmp	ip, #0
	beq	.L6953
	ldr	r4, [r5, #-64]
	sub	ip, r4, #36
	cmp	r4, lr
	str	ip, [sp]
	beq	.L6953
	ldr	lr, [r5, #-48]
	ldr	ip, [r7, #1588]
	cmp	lr, ip
	bhi	.L6953
	ldr	lr, [r4]
	ldr	ip, [r4, #4]
	str	ip, [lr, #4]
	str	lr, [ip]
	str	r3, [r4]
	str	r2, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r10, #3748]
	cmp	r6, #0
	beq	.L6954
	add	r0, sp, #16
	bl	do_gettimeofday
	ldr	r2, [sp, #12]
	ldr	r6, [sp, #16]
	ldr	r3, [sp, #20]
	ubfx	r6, r6, #0, #12
	mla	r6, r2, r6, r3
	b	.L6954
.L7003:
	add	r0, sp, #16
	bl	do_gettimeofday
	add	r3, sp, #12
	mov	r2, #208
	ldr	r1, [sp]
	ldm	r3, {r3, ip, lr}
	mov	r0, r9
	ubfx	ip, ip, #0, #12
	mla	ip, r3, ip, lr
	b	.L6956
.L7004:
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r1, .L7006+8
	ldr	r0, .L7006+12
	bl	___ratelimit
	cmp	r0, #0
	bne	.L7005
.L6959:
	ldr	r3, [r5, #-116]
	cmp	r3, #0
	bne	.L6999
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r1, [sp]
	ldr	r3, [r3, #12]
	blx	r3
.L6953:
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7002:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
.L6999:
	ldr	r3, [r5, #-64]
	str	r4, [r3, #4]
	str	r3, [r4]
	ldr	r3, [sp, #8]
	str	r3, [r4, #4]
	str	r4, [r5, #-64]
	b	.L6953
.L7000:
	add	r0, sp, #16
	bl	do_gettimeofday
	ldr	r3, [sp, #16]
	movw	r2, #16960
	ldr	r1, [sp, #20]
	movt	r2, 15
	ubfx	r3, r3, #0, #12
	mla	r3, r2, r3, r1
	b	.L6950
.L7001:
	movw	r0, #:lower16:.LC91
	mvn	r2, #18
	ldr	r1, .L7006
	movt	r0, #:upper16:.LC91
	bl	printk
	b	.L6948
.L7005:
	movw	r0, #:lower16:.LC352
	ldr	r1, .L7006+8
	movt	r0, #:upper16:.LC352
	bl	printk
	b	.L6959
.L7007:
	.align	2
.L7006:
	.word	.LANCHOR2+3920
	.word	.LANCHOR0+1564
	.word	.LANCHOR2+3944
	.word	.LANCHOR0+1596
	.fnend
	.size	ghsic_data_write_tomdm, .-ghsic_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_in_transfer, %function
start_in_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L7009
	ldr	r0, [r4, #80]
	mov	r5, r1
	ldr	r6, [r4, #92]
	ldr	r7, [r1, #16]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #20]
	ldr	r0, [r4, #80]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7021
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #20]
	beq	.L7021
	cmn	r3, #95
	bne	.L7013
	ldr	r2, [r7, #4]
	cmp	r2, #0
	beq	.L7021
.L7013:
	ldr	r0, [r4, #76]
	movw	r1, #:lower16:.LC76
	movt	r1, #:upper16:.LC76
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
.L7021:
	mov	r0, #1
.L7011:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7009:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC74
	movw	r3, #707
	movt	r1, #:upper16:.LC74
	ldr	r2, .L7022
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #461
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L7011
.L7023:
	.align	2
.L7022:
	.word	.LANCHOR2+3964
	.fnend
	.size	start_in_transfer, .-start_in_transfer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_status, %function
send_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #44
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #104]
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L7027
	b	.L7025
.L7044:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L7025
.L7027:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L7044
.L7024:
	ldrd	r4, [sp]
	mov	r0, r3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7025:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	beq	.L7028
	tst	r3, #4
	ldr	r0, [r7, #28]
	movne	r0, #2
	beq	.L7045
.L7029:
	ldr	r3, [r6]
	movw	ip, #21333
	movw	r2, #:lower16:.LANCHOR1
	movt	ip, 21314
	movt	r2, #:upper16:.LANCHOR1
	ldr	r1, [r2, #4072]
	str	ip, [r3]
	ldr	ip, [r5, #132]
	cmp	r1, #0
	str	ip, [r3, #4]
	ldr	ip, [r5, #136]
	str	ip, [r3, #8]
	beq	.L7032
	ldr	r1, [r5, #136]
	mov	ip, #0
	str	ip, [r2, #4072]
.L7032:
	str	r1, [r3, #8]
	mov	r2, #13
	mov	r1, r6
	strb	r0, [r3, #12]
	ldr	r3, [r6, #16]
	mov	r0, r5
	str	r2, [r3, #4]
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	ldrne	r2, [r6, #8]
	movne	r3, #0
	mvneq	r3, #4
	strne	r2, [r5, #60]
	b	.L7024
.L7045:
	adds	r0, r0, #0
	movne	r0, #1
	b	.L7029
.L7028:
	tst	r3, #16
	and	r3, r3, #4
	beq	.L7031
	cmp	r3, #0
	moveq	r0, #0
	movne	r0, #2
	b	.L7029
.L7031:
	cmp	r3, #0
	moveq	r0, #1
	movne	r0, #2
	b	.L7029
	.fnend
	.size	send_status, .-send_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_write, %function
do_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #104]
	.pad #68
	sub	sp, sp, #68
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #2
	movne	r3, #9984
	mvnne	r0, #21
	movtne	r3, 7
	strne	r3, [r6, #28]
	bne	.L7046
	mov	r4, r0
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	bic	r3, r3, #1048576
	bic	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_unlock
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #10
	beq	.L7104
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	ldr	r5, [r4, #78]	@ unaligned
	tst	r3, #231
	movne	r3, #9216
	rev	r5, r5
	movtne	r3, 5
	mvnne	r0, #21
	strne	r3, [r6, #28]
	bne	.L7046
	ldrsb	r2, [r6, #24]
	cmp	r2, #0
	blt	.L7050
	tst	r3, #8
	bne	.L7105
.L7050:
	ldrd	r2, [r6, #16]
	mov	r1, #0
	mov	r0, r5
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L7046
	ldr	r3, [r6, #40]
	ldr	r9, [r4, #128]
	sub	r2, r3, #32
	lsl	r10, r5, r3
	lsl	fp, r5, r2
	str	r9, [sp, #40]
	cmp	r9, #0
	rsb	r2, r3, #32
	orr	fp, fp, r5, lsr r2
	beq	.L7054
	mov	r3, #57344
	strd	r10, [sp, #16]
	movw	r2, #3074
	movw	r1, #:lower16:.LANCHOR1
	strd	r10, [sp, #32]
	movt	r3, 65535
	movt	r2, 3
	movt	r1, #:upper16:.LANCHOR1
	mov	r8, #1
	str	r3, [sp, #44]
	str	r1, [sp, #48]
	str	r2, [sp, #52]
.L7053:
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L7055
.L7107:
	cmp	r8, #0
	beq	.L7056
	ldrd	r2, [r6, #8]
	ldrd	r0, [sp, #16]
	cmp	r0, r2
	sbcs	r3, r1, r3
	bge	.L7106
	ldr	r2, [r4, #140]
	cmp	r9, #16384
	movcc	r3, r9
	movcs	r3, #16384
	adds	r0, r0, r3
	adc	r1, r1, #0
	subs	r9, r9, r3
	sub	r2, r2, r3
	movne	r8, #1
	strd	r0, [sp, #16]
	moveq	r8, #0
	mov	r0, r4
	str	r2, [r4, #140]
	str	r3, [r5, #12]
	ldr	r1, [r4, #108]
	udiv	r2, r3, r1
	mls	r2, r1, r2, r3
	cmp	r2, #0
	addne	r3, r3, r1
	mov	r1, r5
	subne	r3, r3, r2
	ldr	r2, [r5, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L7054
	ldr	r3, [r5, #8]
	str	r3, [r4, #60]
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L7107
.L7055:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L7061
	cmp	r8, #0
	beq	.L7054
.L7062:
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	beq	.L7053
.L7046:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7056:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L7054
.L7061:
	cmp	r3, #1
	bne	.L7062
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L7062
	.syntax divided
@ 1028 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r5, #8]
	mov	r3, #0
	str	r2, [r4, #64]
	ldr	r2, [r5, #24]
	str	r3, [r5, #4]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L7108
	ldrd	r10, [sp, #32]
	ldr	r3, [r6, #8]
	ldr	ip, [r6, #12]
	ldr	r2, [r2, #48]
	subs	r1, r3, r10
	sbc	lr, ip, fp
	str	r1, [sp, #24]
	mov	r1, #0
	str	lr, [sp, #28]
	ldrd	r10, [sp, #24]
	cmp	r10, r2
	sbcs	r1, fp, r1
	blt	.L7109
.L7065:
	ldr	r7, [r6, #44]
	ldr	r3, [r5, #12]
	rsb	r7, r7, #0
	cmp	r3, r2
	andls	r7, r7, r3
	andhi	r7, r7, r2
	cmp	r7, #0
	bne	.L7110
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r3, r2
	bls	.L7053
.L7081:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #4
	orr	r3, r3, #8
	strb	r3, [r4, #144]
	b	.L7046
.L7110:
	ldrd	r10, [sp, #32]
	add	r3, sp, #64
	mov	r2, r7
	strd	r10, [r3, #-8]!
	ldr	r1, [r5]
	ldr	r0, [r6]
	bl	vfs_write
	ldr	r2, [sp, #44]
	mov	r3, sp
	and	r3, r3, r2
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L7083
	cmp	r0, #0
	blt	.L7067
	cmp	r0, r7
	ldr	r3, [r4, #136]
	bcc	.L7111
	ldrd	r10, [sp, #32]
	sub	r3, r3, r0
	ldr	r2, [sp, #40]
	str	r3, [r4, #136]
	adds	r10, r10, r0
	adc	fp, fp, r0, asr #31
	sub	r2, r2, r0
	strd	r10, [sp, #32]
	str	r2, [sp, #40]
.L7069:
	cmp	r7, r0
	bne	.L7103
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #4076]
	cmp	r3, #0
	bne	.L7103
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #4072]
	cmp	r3, #0
	bne	.L7054
	ldr	r3, [r4, #68]
	ldr	r2, [r3, #4]
	cmp	r2, #2
	beq	.L7103
	ldr	r2, [r3, #36]
	cmp	r2, #2
	beq	.L7103
	ldr	r2, [r3, #68]
	cmp	r2, #2
	beq	.L7103
	ldr	r3, [r3, #100]
	cmp	r3, #2
	beq	.L7103
	cmp	r9, #0
	bne	.L7103
	ldr	r2, [sp, #48]
	mov	r3, #1
	mov	r0, r4
	str	r3, [r2, #4076]
	bl	send_status
.L7103:
	ldr	r3, [r5, #12]
.L7071:
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r2, r3
	bcc	.L7081
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L7053
.L7054:
	mvn	r0, #4
	b	.L7046
.L7106:
	ldr	r3, [r6, #40]
	mov	r2, #8448
	mov	r10, r0
	movt	r2, 5
	mov	fp, r1
	mov	r8, #0
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L7053
.L7109:
	ldrd	r10, [sp, #32]
	movw	r1, #:lower16:.LC445
	add	r0, r6, #48
	movt	r1, #:upper16:.LC445
	strd	r10, [sp]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	dev_err
	ldr	r2, [r6, #8]
	sub	r2, r2, r10
	b	.L7065
.L7111:
	ldr	r2, [r6, #44]
	rsb	r2, r2, #0
	and	r2, r2, r0
	adds	r10, r10, r2
	mov	r0, r2
	adc	fp, fp, r2, asr #31
	sub	r3, r3, r2
	cmp	r2, r7
	ldr	r2, [sp, #40]
	str	r3, [r4, #136]
	strd	r10, [sp, #32]
	sub	r2, r2, r0
	str	r2, [sp, #40]
	bcs	.L7069
.L7067:
	ldr	r3, [r6, #40]
	ldrd	r10, [sp, #32]
	ldr	r2, [sp, #52]
	subs	r1, r3, #32
	str	r2, [r6, #28]
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	mov	r1, #1
	str	r2, [r6, #32]
	ldr	r2, [sp, #48]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	ldr	r3, [r5, #12]
	str	r1, [r2, #4072]
	b	.L7071
.L7104:
	ldrb	r5, [r4, #79]	@ zero_extendqisi2
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	ldrb	r3, [r4, #78]	@ zero_extendqisi2
	orr	r5, r5, #167772160
	orr	r5, r5, r2, lsl #16
	orr	r5, r5, r3, lsl #8
	bic	r5, r5, #-16777216
	b	.L7050
.L7105:
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	orr	r3, r3, #1048576
	orr	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #24
	bl	_raw_spin_unlock
	b	.L7050
.L7083:
	mvn	r0, #3
	b	.L7046
.L7108:
	ldr	r3, [r6, #40]
	mov	r2, #2048
	mvn	r0, #4
	ldrd	r10, [sp, #32]
	movt	r2, 4
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	orrpl	r2, r2, fp, asr r1
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	str	r2, [r6, #32]
	b	.L7046
	.fnend
	.size	do_write, .-do_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_read, %function
do_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #76]	@ zero_extendqisi2
	.pad #36
	sub	sp, sp, #36
	ldrb	r2, [r0, #77]	@ zero_extendqisi2
	ldrb	ip, [r0, #78]	@ zero_extendqisi2
	ldr	r7, [r0, #104]
	cmp	r3, #8
	ldrb	r3, [r0, #79]	@ zero_extendqisi2
	beq	.L7148
	tst	r2, #231
	ldr	r1, [r0, #78]	@ unaligned
	movne	r2, #9216
	mvnne	r3, #21
	movtne	r2, 5
	rev	r1, r1
	strne	r2, [r7, #28]
	bne	.L7112
.L7114:
	ldrd	r2, [r7, #16]
	mov	r5, #0
	cmp	r1, r2
	sbcs	r3, r5, r3
	movge	r2, #8448
	mvnge	r3, #21
	movtge	r2, 5
	strge	r2, [r7, #28]
	bge	.L7112
	ldr	r3, [r7, #40]
	mov	r4, #0
	mov	r5, #0
	ldr	r8, [r0, #128]
	strd	r4, [sp]
	sub	r2, r3, #32
	cmp	r8, #0
	lsl	r2, r1, r2
	str	r2, [sp, #4]
	rsb	r2, r3, #32
	lsl	r3, r1, r3
	ldr	ip, [sp, #4]
	str	r3, [sp]
	orr	r2, ip, r1, lsr r2
	str	r2, [sp, #4]
	beq	.L7117
	mov	r3, sp
	mov	r5, r0
	bic	r9, r3, #8128
	add	r4, r0, #44
	bic	r9, r9, #63
.L7127:
	mov	r0, r4
	ldrd	r10, [r7, #8]
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L7119
	b	.L7118
.L7149:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L7118
.L7119:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L7149
.L7112:
	mov	r0, r3
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7118:
	ldrd	r2, [sp]
	subs	r1, r10, r2
	sbc	r3, fp, r3
	cmp	r8, #16384
	str	r1, [sp, #16]
	str	r3, [sp, #20]
	movcc	r3, r8
	movcs	r3, #16384
	str	r3, [sp, #8]
	mov	r3, #0
	str	r3, [sp, #12]
	ldrd	r0, [sp, #8]
	ldrd	r2, [sp, #16]
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L7150
.L7120:
	mov	r0, r4
	ldr	r10, [sp, #8]
	bl	_raw_spin_unlock_irq
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L7151
	ldrd	r0, [sp]
	mov	r2, r3
	add	r3, sp, #32
	strd	r0, [r3, #-8]!
	ldr	r1, [r6]
	ldr	r0, [r7]
	bl	vfs_read
	ldr	r3, [r9, #12]
	mov	fp, r0
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L7129
	cmp	r0, #0
	blt	.L7123
	cmp	r0, r10
	ldr	r3, [r5, #136]
	bcs	.L7124
	ldr	r2, [r7, #44]
	mov	r0, r4
	rsb	r2, r2, #0
	and	fp, fp, r2
	sub	r1, r3, fp
	ldrd	r2, [sp]
	sub	r8, r8, fp
	str	r1, [r5, #136]
	adds	r2, r2, fp
	adc	r3, r3, fp, asr #31
	strd	r2, [sp]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	fp, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	cmp	fp, r10
	bcc	.L7128
.L7125:
	cmp	r8, #0
	beq	.L7117
	ldr	r3, [r6, #16]
	mov	r1, r6
	mov	r0, r5
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L7117
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
	b	.L7127
.L7150:
	strd	r2, [sp, #8]
	b	.L7120
.L7123:
	mov	r0, r4
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irq
	ldr	r3, [sp, #8]
	mov	r2, #1
	mov	r0, r4
	ldr	r1, [r6, #16]
	str	r3, [r1, #4]
	str	r2, [r6, #4]
	bl	_raw_spin_unlock_irq
.L7128:
	ldr	r3, [r7, #40]
	mov	r2, #4352
	ldrd	r4, [sp]
	movt	r2, 3
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r4, r3
	rsb	r3, r3, #32
	orr	r2, r2, r5, lsl r3
	movpl	r3, r5
	orrpl	r2, r2, r3, asr r1
	ldrb	r1, [r7, #24]	@ zero_extendqisi2
	mvn	r3, #4
	str	r2, [r7, #32]
	orr	r2, r1, #64
	strb	r2, [r7, #24]
	b	.L7112
.L7148:
	orr	r1, r3, #134217728
	orr	r1, r1, r2, lsl #16
	orr	r1, r1, ip, lsl #8
	bic	r1, r1, #-16777216
	b	.L7114
.L7124:
	sub	r1, r3, r0
	ldrd	r2, [sp]
	mov	r0, r4
	sub	r8, r8, fp
	str	r1, [r5, #136]
	adds	r2, r2, fp
	adc	r3, r3, fp, asr #31
	strd	r2, [sp]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	fp, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	b	.L7125
.L7117:
	mvn	r3, #4
	b	.L7112
.L7129:
	mvn	r3, #3
	b	.L7112
.L7151:
	ldr	r3, [r7, #40]
	mov	r2, #8448
	mov	r0, r4
	ldrd	r8, [sp]
	movt	r2, 5
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	movpl	r3, r9
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	str	r2, [r7, #32]
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r1, #0
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	mvn	r3, #4
	b	.L7112
	.fnend
	.size	do_read, .-do_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_start, %function
bam_data_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L7168
	cmp	r3, #0
	beq	.L7152
	ldr	r3, [r3, #8]
	mov	r2, #32
	ldr	r1, [r0, #40]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r3, [ip, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L7169
.L7152:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L7168:
	cmp	r3, #0
	beq	.L7152
	ldr	r3, [r3, #12]
	mov	r2, #32
	ldr	r1, [r0, #36]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r3, [ip, #16]
	blx	r3
	subs	r2, r0, #0
	movwne	r0, #:lower16:.LC209
	ldrne	r1, .L7170
	beq	.L7152
.L7167:
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC209
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L7169:
	movw	r0, #:lower16:.LC209
	ldr	r1, .L7170+4
	b	.L7167
.L7171:
	.align	2
.L7170:
	.word	.LANCHOR2+2008
	.word	.LANCHOR2+2036
	.fnend
	.size	bam_data_start, .-bam_data_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_sb_fill, %function
ffs_sb_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L7180
	mov	r2, #224
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L7173
.L7197:
	mvn	r0, #11
.L7172:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7180:
	mov	r4, #16
.L7173:
	mov	r8, #0
	mov	r6, #1
	ldr	r2, .L7198
	movw	r1, #:lower16:.LC446
	add	r0, r4, #4
	movt	r1, #:upper16:.LC446
	str	r6, [r4, #88]
	mov	r9, #12
	str	r8, [r4, #92]
	str	r8, [r4, #96]
	bl	__mutex_init
	movw	r1, #:lower16:.LC447
	ldr	r2, .L7198
	add	r0, r4, #120
	movt	r1, #:upper16:.LC447
	str	r8, [r4, #28]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC448
	ldr	r2, .L7198
	add	r0, r4, #40
	movt	r1, #:upper16:.LC448
	str	r8, [r4, #36]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC448
	ldr	r2, .L7198
	add	r0, r4, #76
	movt	r1, #:upper16:.LC448
	str	r8, [r4, #72]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC448
	ldr	r2, .L7198
	add	r0, r4, #60
	movt	r1, #:upper16:.LC448
	str	r8, [r4, #56]
	bl	__init_waitqueue_head
	strh	r6, [r4, #110]	@ movhi
	ldr	ip, .L7198+4
	movw	r1, #29537
	str	r5, [r4, #204]
	ldr	r3, [r7, #16]
	movt	r1, 2660
	mov	lr, #4096
	mov	r0, r5
	str	r3, [r4, #140]
	ldrd	r2, [r7]
	strd	r2, [r4, #208]
	ldr	r3, [r7, #8]
	str	r3, [r4, #216]
	strb	r9, [r5, #13]
	str	lr, [r5, #16]
	str	ip, [r5, #36]
	str	r1, [r5, #56]
	str	r4, [r5, #496]
	str	r6, [r5, #508]
	ldrh	r3, [r7, #12]
	strh	r3, [r7]	@ movhi
	bl	new_inode
	subs	r6, r0, #0
	beq	.L7175
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r6, #40]
	ldrh	r3, [r7]
	movw	r1, #:lower16:simple_dir_operations
	movt	r1, #:upper16:simple_dir_operations
	cmp	r1, r8
	strh	r3, [r6]	@ movhi
	ldrd	r2, [sp]
	ldr	r0, [r7, #4]
	str	r0, [r6, #4]
	ldr	r0, [r7, #8]
	strne	r1, [r6, #208]
	strd	r2, [r6, #52]
	strd	r2, [r6, #60]
	strd	r2, [r6, #68]
	movw	r3, #:lower16:simple_dir_inode_operations
	movt	r3, #:upper16:simple_dir_inode_operations
	str	r0, [r6, #8]
	cmp	r3, #0
	str	r8, [r6, #348]
	strne	r3, [r6, #24]
.L7175:
	mov	r0, r6
	bl	d_make_root
	cmp	r0, #0
	str	r0, [r5, #60]
	beq	.L7197
	movw	r1, #:lower16:.LC449
	ldr	r6, [r5, #496]
	movt	r1, #:upper16:.LC449
	bl	d_alloc_name
	subs	r7, r0, #0
	beq	.L7197
	mov	r0, r5
	bl	new_inode
	subs	r5, r0, #0
	beq	.L7179
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r5, #40]
	ldrh	r3, [r6, #208]
	mov	r1, r5
	ldr	ip, .L7198+8
	mov	r0, r7
	strh	r3, [r5]	@ movhi
	ldr	lr, [r6, #212]
	ldrd	r2, [sp]
	str	lr, [r5, #4]
	ldr	lr, [r6, #216]
	str	lr, [r5, #8]
	strd	r2, [r5, #52]
	strd	r2, [r5, #60]
	strd	r2, [r5, #68]
	str	ip, [r5, #208]
	str	r4, [r5, #348]
	bl	d_instantiate
	mov	r0, r7
	bl	d_rehash
	mov	r0, #0
	b	.L7172
.L7179:
	mov	r0, r7
	bl	dput
	b	.L7197
.L7199:
	.align	2
.L7198:
	.word	.LANCHOR1+4080
	.word	.LANCHOR2+3984
	.word	.LANCHOR2+4092
	.fnend
	.size	ffs_sb_fill, .-ffs_sb_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_add_header, %function
rndis_qc_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #44
	mov	r0, r6
	str	lr, [sp, #12]
	bl	skb_realloc_headroom
	subs	r5, r0, #0
	beq	.L7201
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L7201:
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_add_header, .-rndis_qc_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_disconnect_work, %function
usb_qdss_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC450
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC450
	str	lr, [sp, #12]
	ldr	r5, [r4, #-64]
	ldr	r3, [r5]
	ldr	r3, [r3, #76]
	ldr	r6, [r3]
	bl	printk
	movw	r0, #:lower16:.LC305
	movt	r0, #:upper16:.LC305
	ldr	r1, [r6, #28]
	bl	strcmp
	cmp	r0, #0
	beq	.L7220
.L7208:
	ldr	r5, [r4, #-48]
	cmp	r5, #0
	beq	.L7206
	mov	r3, #0
	ldr	r0, [r4, #-44]
	mov	r1, #1
	mov	r2, r3
	blx	r5
	ldr	r0, [r4, #-88]
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	ldr	r0, [r0]
	ldr	r0, [r0, #28]
	bl	usb_bam_get_connection_idx
	movw	r3, #:lower16:.LANCHOR1
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #4092]
	bl	kfree
	uxtb	r0, r4
	bl	usb_bam_disconnect_pipe
	cmp	r0, #0
	bne	.L7221
.L7206:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7220:
	mov	r0, r5
	bl	msm_ep_unconfig
	cmp	r0, #0
	beq	.L7208
	movw	r0, #:lower16:.LC451
	movt	r0, #:upper16:.LC451
	bl	printk
	movw	r0, #:lower16:.LC452
	ldr	r1, .L7222
	movt	r0, #:upper16:.LC452
	bl	printk
	b	.L7208
.L7221:
	movw	r0, #:lower16:.LC453
	movt	r0, #:upper16:.LC453
	bl	printk
	movw	r0, #:lower16:.LC454
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC454
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L7223:
	.align	2
.L7222:
	.word	.LANCHOR3-3988
	.fnend
	.size	usb_qdss_disconnect_work, .-usb_qdss_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_write, %function
acc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	str	r2, [sp, #12]
	ldrb	r3, [r5, #92]	@ zero_extendqisi2
	and	r2, r3, #3
	cmp	r2, #1
	bne	.L7243
	cmp	r6, #0
	beq	.L7224
	tst	r3, #1
	beq	.L7228
	mov	r3, #57344
	movw	r2, #:lower16:autoremove_wake_function
	movt	r3, 65535
	movt	r2, #:upper16:autoremove_wake_function
	mov	r8, r1
	add	r7, r5, #80
	str	r3, [sp, #8]
	add	r3, r5, #1648
	str	r3, [sp, #4]
	str	r2, [sp, #16]
	b	.L7227
.L7259:
	mov	r2, r9
	mov	r1, r8
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L7239
	str	r9, [r4, #4]
	ldr	r0, [r5, #84]
	mov	r2, #208
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7249
	subs	r6, r6, r9
	add	r8, r8, r9
	beq	.L7224
	ldrb	r3, [r5, #92]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L7228
.L7227:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #4]
	ldr	r3, [r5, #1648]
	cmp	r2, r3
	beq	.L7258
	ldr	ip, [r3]
	mov	lr, #512
	mov	r9, #256
	ldr	r2, [r3, #4]
	mov	r1, r0
	sub	r4, r3, #36
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r9, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	beq	.L7230
.L7231:
	cmp	r6, #16384
	movhi	r9, #16384
	movhi	r3, #0
	bhi	.L7237
	ldr	r3, [r5, #84]
	mov	r9, r6
	ldrh	r2, [r3, #20]
	udiv	r3, r6, r2
	mls	r3, r2, r3, r6
	clz	r3, r3
	lsr	r3, r3, #5
.L7237:
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	mov	r1, sp
	ldr	r0, [sp, #8]
	bfi	r2, r3, #1, #1
	and	r1, r1, r0
	ldr	r0, [r4]
	strb	r2, [r4, #26]
	ldr	r3, [r1, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L7259
	mov	r1, r9
	bl	__memzero
.L7239:
	mvn	r3, #13
	str	r3, [sp, #12]
.L7241:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [sp, #4]
	add	r2, r4, #36
	mov	r1, r0
	ldr	r3, [r5, #1652]
	mov	r0, r7
	str	r2, [r5, #1652]
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
.L7224:
	ldr	r0, [sp, #12]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7258:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L7230:
	ldrb	r3, [r5, #92]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L7245
	ldr	r1, [sp, #8]
	mov	r3, #0
	mov	r2, sp
	add	r9, r5, #1664
	str	r8, [sp, #20]
	ldr	r8, [sp, #4]
	str	r3, [sp, #28]
	add	r9, r9, #4
	str	r3, [sp, #32]
	and	r2, r2, r1
	str	r3, [sp, #36]
	ldr	r1, [sp, #16]
	mov	r10, r2
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	ldr	r2, [r2, #12]
	add	r3, sp, #40
	str	r2, [sp, #32]
	str	r1, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	b	.L7236
.L7261:
	bl	schedule
.L7236:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r9
	mov	fp, #256
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1648]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r7
	mov	r1, r2
	cmp	r8, r3
	sub	r4, r3, #36
	beq	.L7260
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	bne	.L7234
.L7233:
	ldrb	r3, [r5, #92]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L7257
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7261
	mov	r3, #65024
	movt	r3, 65535
.L7257:
	add	r1, sp, #28
	mov	r0, r9
	str	r3, [sp, #12]
	bl	finish_wait
	b	.L7224
.L7234:
	add	r1, sp, #28
	mov	r0, r9
	ldr	r8, [sp, #20]
	bl	finish_wait
	b	.L7231
.L7260:
	bl	_raw_spin_unlock_irqrestore
	b	.L7233
.L7245:
	str	r3, [sp, #12]
	b	.L7224
.L7228:
	mvn	r3, #4
	str	r3, [sp, #12]
	b	.L7224
.L7249:
	mvn	r3, #4
	str	r3, [sp, #12]
	b	.L7241
.L7243:
	mvn	r3, #18
	str	r3, [sp, #12]
	b	.L7224
	.fnend
	.size	acc_write, .-acc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_read, %function
mbim_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #4]
	cmp	r4, #0
	beq	.L7292
	cmp	r2, #4096
	mov	fp, r2
	bhi	.L7293
	add	r10, r4, #92
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r10]
	add	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L7290
	mov	r3, sp
	ldr	r8, .L7299
	movw	r7, #:lower16:.LC458
	bic	r5, r3, #8128
	movt	r7, #:upper16:.LC458
	bic	r5, r5, #63
.L7266:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	bne	.L7271
	ldr	r3, [r4, #224]
	cmp	r3, #0
	beq	.L7272
.L7271:
	ldr	r3, [r4, #224]
	cmp	r3, #0
	bne	.L7294
	add	r8, r4, #196
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r1, r0
	ldr	r5, [r3, #200]!
	cmp	r5, r3
	bne	.L7284
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L7279
.L7275:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #200]
	mov	r1, r0
	cmp	r5, r6
	bne	.L7274
.L7279:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #200]
	cmp	r3, r5
	bne	.L7275
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r6, sp, #12
	add	r7, r4, #100
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L7278
.L7295:
	bl	schedule
.L7278:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #200]
	cmp	r3, r5
	bne	.L7276
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7295
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
	movw	r0, #:lower16:.LC461
	ldr	r1, .L7299
	movt	r0, #:upper16:.LC461
	bl	printk
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
.L7262:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7276:
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
	b	.L7275
.L7284:
	mov	r6, r5
.L7274:
	ldr	r3, [r6, #-4]
	sub	r5, r6, #8
	cmp	r3, fp
	bhi	.L7296
	ldrd	r2, [r6]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r6]
	str	ip, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r6, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #4]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L7297
.L7281:
	cmp	r2, #0
	ldreq	r4, [r6, #-4]
	bne	.L7298
.L7283:
	cmp	r5, #0
	beq	.L7262
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r5
	bl	kfree
	b	.L7262
.L7297:
	ldr	r1, [r6, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L7281
.L7294:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r4, #4
	b	.L7262
.L7272:
	mov	r1, r8
	mov	r0, r7
	bl	printk
	ldr	r3, [r4, #80]
	cmp	r3, #0
	bne	.L7266
	ldr	r3, [r4, #224]
	cmp	r3, #0
	bne	.L7266
	ldr	r0, [r5, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r6, sp, #12
	str	r3, [sp, #12]
	add	r9, r4, #100
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
.L7270:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #80]
	cmp	r3, #0
	bne	.L7268
	ldr	r3, [r4, #224]
	cmp	r3, #0
	bne	.L7268
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L7269
	bl	schedule
	b	.L7270
.L7290:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC457
	ldr	r1, .L7299
	mvn	r4, #15
	movt	r0, #:upper16:.LC457
	bl	printk
	b	.L7262
.L7269:
	mov	r1, r6
	mov	r0, r9
	bl	finish_wait
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L7262
.L7268:
	mov	r1, r6
	mov	r0, r9
	bl	finish_wait
	b	.L7266
.L7296:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC459
	mov	r3, fp
	ldr	r1, .L7299
	ldr	r2, [r6, #-4]
	movt	r0, #:upper16:.LC459
	mvn	r4, #11
	bl	printk
	b	.L7262
.L7298:
	movw	r0, #:lower16:.LC460
	ldr	r1, .L7299
	mvn	r4, #11
	movt	r0, #:upper16:.LC460
	bl	printk
	b	.L7283
.L7293:
	movw	r0, #:lower16:.LC456
	mov	r3, #4096
	ldr	r1, .L7299
	movt	r0, #:upper16:.LC456
	mvn	r4, #21
	bl	printk
	b	.L7262
.L7292:
	movw	r0, #:lower16:.LC455
	ldr	r1, .L7299
	mvn	r4, #18
	movt	r0, #:upper16:.LC455
	bl	printk
	b	.L7262
.L7300:
	.align	2
.L7299:
	.word	.LANCHOR3-3960
	.fnend
	.size	mbim_read, .-mbim_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_write, %function
adb_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #3520]
	.pad #52
	sub	sp, sp, #52
	ldr	r4, [r0, #124]
	str	r1, [sp, #8]
	str	r2, [sp, #16]
	cmp	r3, #0
	beq	.L7325
	add	r3, r4, #104
	str	r3, [sp, #20]
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L7336
	movw	r3, #:lower16:autoremove_wake_function
	mov	r10, #57344
	movt	r3, #:upper16:autoremove_wake_function
	movt	r10, 65535
	str	r10, [sp, #4]
	str	r3, [sp, #12]
	ldr	r3, [sp, #16]
	mov	r10, r3
.L7303:
	ldr	r2, [sp, #4]
	mov	r3, sp
	and	r9, r3, r2
.L7324:
	cmp	r10, #0
	beq	.L7337
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L7322
	add	r7, r4, #112
	add	r5, r4, #80
	mov	fp, #256
	mov	r8, #512
.L7304:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r2, r0
	mov	r0, r5
	mov	r1, r2
	cmp	r3, r7
	sub	r6, r3, #36
	beq	.L7338
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	fp, [r3]
	str	r8, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L7307
.L7308:
	ldr	r2, [sp, #4]
	mov	r3, sp
	cmp	r10, #4096
	movcc	r8, r10
	movcs	r8, #4096
	ldr	r1, [sp, #8]
	ldr	r0, [r6]
	and	r3, r3, r2
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L7316
	mov	r2, r8
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L7317
	str	r8, [r6, #4]
	ldr	r0, [r4, #84]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7339
	ldr	r3, [sp, #8]
	sub	r10, r10, r8
	add	r3, r3, r8
	str	r3, [sp, #8]
	b	.L7303
.L7338:
	bl	_raw_spin_unlock_irqrestore
.L7307:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L7340
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L7304
.L7322:
	ldr	r3, [r4, #96]
	mvn	r8, #4
	cmp	r3, #0
	beq	.L7323
.L7343:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #120
	bl	__wake_up
	b	.L7323
.L7340:
	ldr	r1, [sp, #12]
	str	r3, [sp, #28]
	add	r2, sp, #40
	str	r3, [sp, #32]
	add	r8, r4, #132
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	ldr	r3, [r9, #12]
	str	r3, [sp, #32]
	str	r1, [sp, #36]
	str	r2, [sp, #40]
	str	r2, [sp, #44]
	b	.L7315
.L7342:
	bl	schedule
.L7315:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r8
	mov	fp, #256
	bl	prepare_to_wait
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r5
	mov	r1, r2
	cmp	r3, r7
	sub	r6, r3, #36
	beq	.L7341
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L7312
.L7311:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L7313
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7342
	mov	r0, r8
	mov	r8, #65024
	add	r1, sp, #28
	movt	r8, 65535
	bl	finish_wait
.L7305:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L7343
.L7323:
	ldr	r1, [sp, #20]
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L7301:
	mov	r0, r8
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7316:
	mov	r1, r8
	bl	__memzero
.L7317:
	mvn	r8, #13
.L7320:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r5
	str	r2, [r4, #116]
	str	r7, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L7305
.L7312:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	b	.L7308
.L7313:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	b	.L7324
.L7341:
	bl	_raw_spin_unlock_irqrestore
	b	.L7311
.L7337:
	ldr	r8, [sp, #16]
	b	.L7305
.L7336:
	ldr	r1, [sp, #20]
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r8, #15
	b	.L7301
.L7339:
	mov	r3, #1
	mvn	r8, #4
	str	r3, [r4, #96]
	b	.L7320
.L7325:
	mvn	r8, #18
	b	.L7301
	.fnend
	.size	adb_write, .-adb_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_unbind, %function
f_audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, [r1, #8]
	mov	r4, r1
	str	lr, [sp, #4]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_audio_unbind, .-f_audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_put_char, %function
gs_put_char:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r4, [r0, #280]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #92]
	mov	r1, r0
	ldr	r3, [r4, #100]
	ldr	ip, [r4, #104]
	add	r3, r3, r5
	sub	r3, r3, ip
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r3, r5, r2, r3
	cmp	r3, #0
	moveq	r5, r3
	beq	.L7347
	ldr	r2, [r4, #96]
	add	r5, r2, r5
	subs	r3, r5, ip
	beq	.L7352
	cmp	r3, #1
	strb	r6, [ip]
	bne	.L7353
	ldr	r2, [r4, #96]
	mov	r5, r3
	str	r2, [r4, #104]
.L7347:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7352:
	strb	r6, [r2]
	ldr	r3, [r4, #96]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L7347
.L7353:
	ldr	r3, [r4, #104]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L7347
	.fnend
	.size	gs_put_char, .-gs_put_char
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_bind, %function
composite_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r6, #28]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L7379
	mov	r2, #68
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7405
.L7355:
	mov	r3, #0
	add	r7, r5, #32
	str	r5, [r4]
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4, #60]
	bl	dev_set_drvdata
	add	r3, r4, #36
	mov	r1, #208
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #4]
	beq	.L7357
	ldr	r0, [r6, #48]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L7358
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L7358:
	str	r0, [r8]
	ldr	r2, [r4, #4]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L7357
	movw	r3, #:lower16:composite_setup_complete
	movw	r6, #:lower16:.LANCHOR1
	movt	r3, #:upper16:composite_setup_complete
	movt	r6, #:upper16:.LANCHOR1
	ldr	r0, [r6, #2316]
	str	r3, [r2, #28]
	ldr	r2, [r5, #4]
	mov	r3, #4096
	str	r4, [r2]
	ldr	r1, [r4]
	str	r3, [r4, #8]
	str	r0, [r4, #44]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L7359
	mov	r0, #0
.L7360:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L7360
.L7359:
	movw	r8, #:lower16:.LANCHOR4
	mov	r2, #0
	movt	r8, #:upper16:.LANCHOR4
	mov	r0, r4
	ldr	r3, [r8, #-4088]
	str	r2, [r6, #3744]
	blx	r3
	subs	r9, r0, #0
	blt	.L7361
	ldr	ip, [r6, #2316]
	sub	r1, r8, #4080
	ldrh	r0, [r1, #-4]
	ldrh	r3, [r1, #-2]
	ldr	r2, [ip, #12]
	cmp	r0, #0
	ldr	fp, [r2]	@ unaligned
	ldr	r10, [r2, #4]	@ unaligned
	ldr	r9, [r2, #8]	@ unaligned
	ldr	lr, [r2, #12]	@ unaligned
	str	fp, [r4, #17]	@ unaligned
	str	r10, [r4, #21]	@ unaligned
	str	r9, [r4, #25]	@ unaligned
	str	lr, [r4, #29]	@ unaligned
	ldrh	r2, [r2, #16]	@ unaligned
	strhne	r0, [r4, #25]	@ unaligned
	cmp	r3, #0
	strhne	r3, [r4, #27]	@ unaligned
	ldrh	r3, [r1]
	strh	r2, [r4, #33]	@ unaligned
	ldr	r2, [r8, #-4076]
	cmp	r3, #0
	strhne	r3, [r4, #29]	@ unaligned
	cmp	r2, #0
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	beq	.L7406
.L7365:
	cmp	r3, #0
	beq	.L7367
.L7368:
	strb	r3, [r4, #49]
.L7366:
	ldr	r2, [r8, #-4020]
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L7407
	cmp	r3, #0
	beq	.L7372
.L7373:
	strb	r3, [r4, #50]
.L7371:
	ldr	r3, [r8, #-4016]
	cmp	r3, #0
	beq	.L7375
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7376
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L7377
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC463
	movt	r1, #:upper16:.LC463
	add	r0, r0, #32
	bl	dev_warn
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
.L7376:
	strb	r3, [r4, #51]
.L7375:
	ldr	r3, [r6, #2316]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L7378
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7408
.L7378:
	mov	r0, r7
	ldr	r1, .L7410
	bl	device_create_file
	subs	r9, r0, #0
	bne	.L7361
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC465
	ldr	r3, [r6, #2316]
	movt	r1, #:upper16:.LC465
	add	r0, r0, #32
	ldr	r2, [r3]
	bl	_dev_info
	b	.L7354
.L7357:
	mvn	r9, #11
.L7361:
	mov	r0, r5
	bl	composite_unbind
.L7354:
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7379:
	mov	r4, #16
	b	.L7355
.L7407:
	cmp	r3, #0
	bne	.L7371
	ldr	r3, [r6, #2316]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L7371
.L7372:
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L7374
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC463
	movt	r1, #:upper16:.LC463
	add	r0, r0, #32
	bl	dev_warn
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	b	.L7373
.L7406:
	cmp	r3, #0
	bne	.L7366
	ldr	r3, [ip, #8]
	cmp	r3, #0
	beq	.L7409
.L7367:
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L7369
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC463
	movt	r1, #:upper16:.LC463
	add	r0, r0, #32
	bl	dev_warn
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	b	.L7368
.L7369:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r4, #31]
	strb	r3, [r4, #48]
	b	.L7368
.L7374:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r4, #32]
	strb	r3, [r4, #48]
	b	.L7373
.L7377:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r4, #33]
	strb	r3, [r4, #48]
	b	.L7376
.L7408:
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC464
	movt	r1, #:upper16:.LC464
	add	r0, r0, #32
	bl	dev_warn
	b	.L7378
.L7409:
	ldrb	r3, [r8, #-4072]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7367
	ldr	r3, .L7410+4
	movw	r2, #:lower16:.LC462
	mov	r1, #50
	ldr	ip, [r5, #28]
	movt	r2, #:upper16:.LC462
	ldr	r0, .L7410+8
	stm	sp, {r3, ip}
	sub	r3, r3, #130
	bl	snprintf
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	b	.L7365
.L7405:
	mvn	r9, #11
	b	.L7354
.L7411:
	.align	2
.L7410:
	.word	.LANCHOR0+1548
	.word	init_uts_ns+134
	.word	.LANCHOR4-4072
	.fnend
	.size	composite_bind, .-composite_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_suspend, %function
gps_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #136
	strd	r8, [sp, #16]
	add	r9, r0, #124
	mov	r0, r9
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #136]
	mov	r10, r0
	cmp	r6, r3
	beq	.L7413
	mov	r8, #256
	mov	r7, #512
.L7414:
	ldm	r3, {r1, r2}
	mov	r4, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r5, #136]
	cmp	r3, r6
	bne	.L7414
.L7413:
	mov	r3, #0
	mov	r1, r10
	mov	r0, r9
	str	r3, [r5, #144]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gps_suspend, .-gps_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	lookup_string, %function
lookup_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r3
	strd	r6, [sp, #8]
	mov	r7, r1
	sub	r6, r0, #4
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, #126
	str	r10, [sp, #24]
	add	r10, r1, #2
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
.L7418:
	ldr	r3, [r6, #4]!
	cmp	r3, #0
	beq	.L7440
	ldrh	r2, [r3]
	cmp	r2, r8
	bne	.L7418
	cmp	r5, #0
	beq	.L7441
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L7439
	b	.L7418
.L7442:
	adds	r3, r3, #8
	beq	.L7418
.L7439:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L7418
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r5, r2
	bne	.L7442
	mov	r0, r4
	bl	strlen
	cmp	r0, #126
	mov	r3, r10
	str	r9, [sp]
	movcc	r1, r0
	movcs	r1, #126
	mov	r2, #1
	mov	r0, r4
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L7418
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r7, #1]
	uxtb	r3, r3
	subs	r0, r3, #0
	strb	r3, [r7]
	beq	.L7418
.L7417:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7440:
	mvn	r0, #21
	b	.L7417
.L7441:
	mov	r2, #4
	mov	r1, #3
	mov	r0, r2
	strb	r2, [r7]
	strb	r1, [r7, #1]
	ldrh	r2, [r3]
	strb	r2, [r7, #2]
	ldrh	r3, [r3]
	lsr	r3, r3, #8
	strb	r3, [r7, #3]
	b	.L7417
	.fnend
	.size	lookup_string, .-lookup_string
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup, %function
composite_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	bl	dev_get_drvdata
	ldrh	fp, [r8, #6]	@ unaligned
	ldrh	r9, [r8, #4]	@ unaligned
	ldrh	r3, [r8, #2]	@ unaligned
	ldr	r4, [r0, #4]
	cmp	fp, #4096
	bhi	.L7690
	ldrb	r1, [r4, #26]	@ zero_extendqisi2
	movw	r2, #:lower16:composite_setup_complete
	mov	r5, r0
	movt	r2, #:upper16:composite_setup_complete
	mov	r0, #0
	uxtb	ip, r9
	str	r0, [r4, #4]
	bfc	r1, #1, #1
	strb	r1, [r4, #26]
	str	r2, [r4, #28]
	ldr	r2, [r6, #4]
	str	r5, [r2]
	ldrb	r2, [r8, #1]	@ zero_extendqisi2
	cmp	r2, #11
	ldrls	pc, [pc, r2, asl #2]
	b	.L7446
.L7448:
	.word	.L7447
	.word	.L7449
	.word	.L7446
	.word	.L7449
	.word	.L7446
	.word	.L7446
	.word	.L7450
	.word	.L7446
	.word	.L7451
	.word	.L7452
	.word	.L7453
	.word	.L7454
.L7454:
	ldrb	r7, [r8]	@ zero_extendqisi2
	ldr	r0, [r5, #12]
	cmp	r7, #1
	beq	.L7854
.L7456:
	and	r7, r7, #31
	cmp	r7, #1
	beq	.L7630
.L7857:
	cmp	r7, #2
	bne	.L7629
	mov	ip, r0
	asr	lr, r9, #3
	ldr	r1, [ip, #36]!
	and	r3, r9, #15
	and	lr, lr, #16
	orr	r3, lr, r3
	cmp	ip, r1
	sub	r2, r1, #64
	beq	.L7629
	ldr	r1, [r1, #8]
	lsr	r1, r1, r3
	tst	r1, #1
	bne	.L7634
	mov	lr, #1
	lsl	lr, lr, r3
	b	.L7635
.L7636:
	ldr	r3, [r3, #8]
	tst	r3, lr
	bne	.L7634
.L7635:
	ldr	r3, [r2, #64]
	cmp	ip, r3
	sub	r2, r3, #64
	bne	.L7636
.L7629:
	cmp	r0, #0
	beq	.L7690
.L7633:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	beq	.L7690
	mov	r1, r8
	blx	r3
	mov	r7, r0
	movw	r3, #32767
	cmp	r7, r3
	beq	.L7855
.L7443:
	mov	r0, r7
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7447:
	ldr	r3, [r6, #20]
	ldrb	r7, [r8]	@ zero_extendqisi2
	cmp	r3, #4
	bls	.L7850
	cmp	r7, #129
	bne	.L7850
	ldr	r2, [r4]
	mov	r1, #0
	cmp	ip, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	fp, #2
	movls	fp, #0
	movhi	fp, #1
	strb	r1, [r2]
	strb	r1, [r2, #1]
	ldr	r2, [r5, #12]
	cmp	r2, r1
	moveq	r3, #1
	cmp	r3, r1
	beq	.L7856
.L7687:
	mov	r8, #2
	b	.L7480
.L7450:
	ldrb	r7, [r8]	@ zero_extendqisi2
	cmp	r7, #128
	beq	.L7455
.L7850:
	and	r7, r7, #31
	ldr	r0, [r5, #12]
	cmp	r7, #1
	bne	.L7857
.L7630:
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	ip, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L7629
	add	ip, ip, #12
	ldr	r2, [r0, ip, lsl #2]
	cmp	r2, #0
	beq	.L7633
.L7632:
	ldr	r3, [r2, #44]
	cmp	r3, #0
	beq	.L7629
	mov	r1, r8
	mov	r0, r2
	blx	r3
	mov	r7, r0
	movw	r3, #32767
	cmp	r7, r3
	bne	.L7443
.L7855:
	ldr	r3, [r5, #56]
	add	r3, r3, #1
	str	r3, [r5, #56]
	b	.L7443
.L7449:
	ldr	r2, [r6, #20]
	ldrb	r7, [r8]	@ zero_extendqisi2
	cmp	r2, #4
	bls	.L7850
	cmp	r7, #1
	bne	.L7850
	cmp	r3, #0
	bne	.L7826
	ldr	r1, [r5, #12]
	clz	r2, r1
	lsr	r2, r2, #5
	cmp	ip, #15
	orrhi	r2, r2, #1
	cmp	r2, #0
	bne	.L7690
	add	ip, ip, #12
	ldr	r0, [r1, ip, lsl #2]
	cmp	r0, #0
	beq	.L7690
	ldr	r2, [r0, #60]
	cmp	r2, #0
	beq	.L7852
	lsr	r1, r9, #8
	str	r3, [sp, #12]
	blx	r2
	subs	r7, r0, #0
	ldr	r3, [sp, #12]
	blt	.L7628
.L7851:
	movw	r8, #32767
	subs	r8, r7, r8
	movne	r8, #1
.L7520:
	cmp	r8, #0
	beq	.L7457
.L7577:
	cmp	fp, r7
	mov	r8, r7
	movle	fp, #0
	movgt	fp, #1
	b	.L7480
.L7452:
	ldrb	r7, [r8]	@ zero_extendqisi2
	cmp	r7, #0
	bne	.L7850
	str	r3, [sp, #20]
	add	r3, r5, #60
	mov	r0, r3
	str	r3, [sp, #16]
	bl	_raw_spin_lock
	ldr	r3, [r5]
	ldr	r1, [r5, #12]
	mov	r9, r3
	str	r3, [sp, #12]
	ldr	r3, [sp, #20]
	cmp	r1, #0
	beq	.L7575
	ldrb	r2, [r1, #20]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L7858
	cmp	r3, #0
	bne	.L7641
	ldr	r8, [r1, #36]!
	cmp	r8, r1
	sub	r8, r8, #64
	beq	.L7823
	mov	r7, r3
	mov	r10, r3
.L7587:
	ldr	r3, [r8, #40]
	mov	r0, r8
	cmp	r3, #0
	beq	.L7589
	blx	r3
	str	r7, [r8, #72]
	ldr	r3, [r5, #12]
	ldr	r8, [r8, #64]
	add	r3, r3, #36
	cmp	r3, r8
	sub	r8, r8, #64
	bne	.L7587
.L7849:
	ldr	r8, [r5]
	mov	r3, r10
.L7588:
	mov	r2, #0
	str	r3, [sp, #20]
	add	r8, r8, #32
	str	r2, [r5, #12]
	str	r2, [r5, #56]
	ldr	r0, [r9, #16]
	bl	usb_speed_string
	ldr	r3, [sp, #20]
	mov	r2, r0
.L7592:
	movw	ip, #:lower16:.LC470
	movw	r1, #:lower16:.LC466
	movt	ip, #:upper16:.LC470
	mov	r0, r8
	movt	r1, #:upper16:.LC466
	str	ip, [sp]
	bl	_dev_info
	ldr	r3, [sp, #12]
	ldr	r3, [r3]
	ldr	r7, [r3, #16]
	cmp	r7, #0
	beq	.L7611
	mov	r1, #100
	ldr	r0, [sp, #12]
	blx	r7
	mov	r7, #0
.L7611:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	bne	.L7859
	movw	r8, #32767
	subs	r8, r7, r8
	movne	r8, #1
.L7649:
	ldr	r0, [sp, #16]
	bl	_raw_spin_unlock
	b	.L7520
.L7451:
	ldrb	r7, [r8]	@ zero_extendqisi2
	ldr	r0, [r5, #12]
	cmp	r7, #128
	bne	.L7456
	cmp	r0, #0
	ldr	r3, [r4]
	ldrbne	r2, [r0, #20]	@ zero_extendqisi2
	strbeq	r0, [r3]
	strbne	r2, [r3]
	adds	r8, fp, #0
	movne	r8, #1
	cmp	fp, r8
	movls	fp, #0
	movhi	fp, #1
	b	.L7480
.L7453:
	ldrb	r7, [r8]	@ zero_extendqisi2
	ldr	r0, [r5, #12]
	cmp	r7, #129
	bne	.L7456
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	ip, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L7690
	add	ip, ip, #12
	ldr	r0, [r0, ip, lsl #2]
	cmp	r0, #0
	beq	.L7690
	ldr	r7, [r0, #36]
	cmp	r7, #0
	beq	.L7620
	mov	r1, r9
	blx	r7
	subs	r7, r0, #0
	blt	.L7443
.L7620:
	adds	r8, fp, #0
	ldr	r3, [r4]
	movne	r8, #1
	cmp	r8, fp
	movge	fp, #0
	movlt	fp, #1
	strb	r7, [r3]
.L7480:
	ldrb	r0, [r4, #26]	@ zero_extendqisi2
	str	r8, [r4, #4]
	mov	r2, #32
	mov	r1, r4
	bfi	r0, fp, #1, #1
	strb	r0, [r4, #26]
	ldr	r0, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	movlt	r3, #0
	strlt	r3, [r4, #44]
	b	.L7443
.L7446:
	ldrb	r7, [r8]	@ zero_extendqisi2
	b	.L7850
.L7634:
	cmp	r2, #0
	bne	.L7632
	b	.L7629
.L7463:
	ldr	r2, [r6, #20]
	cmp	r2, #2
	bls	.L7690
	ldr	r2, [r6, #16]
	cmp	r2, #4
	bls	.L7460
.L7690:
	mvn	r7, #94
	b	.L7443
.L7455:
	lsr	r1, r3, #8
	sub	r2, r1, #1
	cmp	r2, #14
	ldrls	pc, [pc, r2, asl #2]
	b	.L7826
.L7459:
	.word	.L7458
	.word	.L7460
	.word	.L7461
	.word	.L7826
	.word	.L7826
	.word	.L7462
	.word	.L7463
	.word	.L7826
	.word	.L7826
	.word	.L7826
	.word	.L7826
	.word	.L7826
	.word	.L7826
	.word	.L7826
	.word	.L7464
.L7460:
	ldr	r2, [r5]
	ldr	r9, [r2, #16]
	cmp	r9, #5
	beq	.L7492
	ldr	r2, [r2, #20]
	cmp	r2, #2
	movls	r9, #0
	bls	.L7492
	cmp	r9, #3
	beq	.L7493
	cmp	r1, #7
	moveq	r9, #3
	movne	r9, #0
.L7492:
	mov	r0, r5
	uxtb	r3, r3
	ldr	r8, [r0, #36]!
	cmp	r0, r8
	sub	r8, r8, #28
	bne	.L7494
	b	.L7647
.L7861:
	cmp	r9, #5
	bne	.L7821
	tst	r2, #1
	beq	.L7498
.L7499:
	cmp	r3, #0
	sub	r3, r3, #1
	beq	.L7860
.L7498:
	ldr	r8, [r8, #28]
	cmp	r0, r8
	sub	r8, r8, #28
	beq	.L7647
.L7494:
	cmp	r9, #3
	ldrb	r2, [r8, #45]	@ zero_extendqisi2
	bne	.L7861
	tst	r2, #2
	bne	.L7499
	b	.L7498
.L7458:
	ldr	r1, [r5]
	ldr	r3, [r1, #20]
	cmp	r3, #2
	bhi	.L7465
	mov	r0, r5
	ldr	r3, [r0, #36]!
	cmp	r0, r3
	sub	r3, r3, #28
	beq	.L7652
.L7466:
	mov	r2, #0
.L7472:
	ldrb	ip, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	ip, #4
	addne	r2, r2, #1
	cmp	r0, r3
	sub	r3, r3, #28
	bne	.L7472
.L7467:
	strb	r2, [r5, #34]
	ldr	r2, [r1, #4]
	mov	r3, #2
	ldrh	r2, [r2, #20]
	strb	r2, [r5, #24]
	str	r3, [r5, #64]
	ldr	r2, [r6, #20]
	cmp	r2, #4
	bls	.L7475
	ldr	r2, [r6, #16]
	cmp	r2, #4
	bls	.L7476
	mov	r0, #0
	mov	r1, #3
	mov	r2, #9
	mov	r3, #8
	strb	r0, [r5, #19]
	strb	r1, [r5, #20]
	strb	r2, [r5, #24]
	str	r3, [r5, #64]
.L7477:
	cmp	fp, #17
	bls	.L7478
	mov	r8, #18
	cmp	fp, r8
	mov	r2, r8
	movls	fp, #0
	movhi	fp, #1
.L7479:
	add	r1, r5, #17
	ldr	r0, [r4]
	bl	memcpy
	b	.L7480
.L7464:
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bhi	.L7569
	ldrb	r3, [r6, #385]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7690
.L7569:
	ldr	r0, [r5, #4]
	mov	r2, #0
	mov	r3, #5
	mov	ip, #15
	mov	r9, #12
	mov	r1, #1
	mov	r8, #7
	mov	lr, #16
	ldr	r7, [r0]
	mov	r0, #2
	strb	r3, [r7]
	strb	ip, [r7, #1]
	strb	r3, [r7, #2]
	strb	r2, [r7, #3]
	strb	r2, [r7, #4]
	ldr	r3, [r5, #4]
	ldr	r3, [r3]
	strh	r9, [r7, #2]	@ movhi
	strb	r1, [r7, #4]
	strb	r8, [r3, #5]
	strb	lr, [r3, #6]
	strb	r0, [r3, #7]
	strb	r0, [r3, #8]
	strb	r2, [r3, #9]
	strb	r2, [r3, #10]
	strb	r2, [r3, #11]
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L7570
	ldr	lr, [r5, #4]
	movw	r9, #4106
	ldrh	r3, [r7, #2]	@ unaligned
	movt	r9, 3
	ldrb	r0, [r7, #4]	@ zero_extendqisi2
	ldr	lr, [lr]
	add	r8, r3, #10
	add	r0, r0, r1
	strh	r8, [r7, #2]	@ movhi
	add	r8, lr, r3
	strb	r0, [r7, #4]
	str	r9, [lr, r3]	@ unaligned
	strb	ip, [r8, #4]
	strb	r2, [r8, #5]
	strb	r1, [r8, #6]
	ldr	r3, [r5]
	ldr	r3, [r3]
	ldr	r3, [r3, #28]
	cmp	r3, r2
	beq	.L7571
	add	r0, sp, #44
	blx	r3
.L7572:
	ldrb	r2, [sp, #44]	@ zero_extendqisi2
	ldrh	r3, [sp, #46]
	strb	r2, [r8, #7]
	strh	r3, [r8, #8]	@ unaligned
.L7570:
	ldrh	r7, [r7, #2]	@ unaligned
	cmp	fp, r7
	bcs	.L7851
.L7573:
	mov	r8, fp
	mov	fp, #0
	b	.L7480
.L7462:
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bls	.L7690
	ldr	r3, [r6, #16]
	cmp	r3, #4
	bhi	.L7690
	ldr	r2, [r5, #4]
	mov	r1, #10
	mov	r3, #6
	ldr	r2, [r2]
	strb	r1, [r2]
	strb	r3, [r2, #1]
	ldrh	r3, [r5, #19]	@ unaligned
	strh	r3, [r2, #2]	@ unaligned
	ldrb	r3, [r5, #21]	@ zero_extendqisi2
	strb	r3, [r2, #4]
	ldrb	r3, [r5, #22]	@ zero_extendqisi2
	strb	r3, [r2, #5]
	ldrb	r3, [r5, #23]	@ zero_extendqisi2
	strb	r3, [r2, #6]
	ldr	r3, [r5]
	ldr	r3, [r3, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r2, #7]
	ldr	r3, [r5]
	ldr	r1, [r3, #20]
	cmp	r1, #2
	bhi	.L7482
	ldr	r3, [r5, #36]!
	cmp	r5, r3
	sub	r3, r3, #28
	beq	.L7657
.L7483:
	mov	r1, #0
.L7489:
	ldrb	r0, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	r0, #4
	addne	r1, r1, #1
	cmp	r5, r3
	sub	r3, r3, #28
	bne	.L7489
.L7484:
	cmp	fp, #10
	mov	r3, #0
	strb	r1, [r2, #8]
	movlt	r8, fp
	movge	r8, #10
	cmp	fp, r8
	strb	r3, [r2, #9]
	movle	fp, #0
	movgt	fp, #1
	b	.L7480
.L7461:
	ands	r10, r3, #255
	ldr	r3, [r4]
	str	r3, [sp, #12]
	beq	.L7862
	ldrb	r3, [r5, #49]	@ zero_extendqisi2
	cmp	r10, r3
	beq	.L7863
	ldrb	r3, [r5, #50]	@ zero_extendqisi2
	cmp	r10, r3
	beq	.L7864
	ldrb	r3, [r5, #51]	@ zero_extendqisi2
	cmp	r10, r3
	beq	.L7865
.L7553:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2316]
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L7556
	mov	r3, r10
	mov	r2, r9
	ldr	r1, [sp, #12]
	bl	lookup_string
	cmp	r0, #0
	ble	.L7556
.L7548:
	uxth	r3, r0
	cmp	r3, fp
	bhi	.L7573
	uxth	r7, r0
	movw	r8, #32767
	subs	r8, r7, r8
	movne	r8, #1
	b	.L7520
.L7826:
	mvn	r7, #94
.L7457:
	movw	r3, #32767
	sub	r3, r7, r3
	clz	r3, r3
	lsr	r3, r3, #5
.L7619:
	cmp	fp, #0
	moveq	r3, #0
	cmp	r3, #0
	beq	.L7443
	cmp	r5, #0
	movweq	r7, #32767
	beq	.L7443
	movw	r2, #:lower16:.LC469
	movw	r0, #:lower16:.LC444
	ldr	r3, .L7877
	movt	r2, #:upper16:.LC469
	movt	r0, #:upper16:.LC444
	movw	r1, #1402
	movw	r7, #32767
	bl	warn_slowpath_fmt
	b	.L7443
.L7854:
	clz	r2, r0
	lsr	r2, r2, #5
	cmp	ip, #15
	orrhi	r2, r2, #1
	cmp	r2, #0
	bne	.L7690
	add	ip, ip, #12
	ldr	r0, [r0, ip, lsl #2]
	cmp	r0, #0
	beq	.L7690
	cmp	r3, #0
	bne	.L7866
	ldr	r2, [r0, #36]
	cmp	r2, #0
	ldrne	r7, [r0, #32]
	beq	.L7852
.L7616:
	mov	r2, r3
	mov	r1, r9
	blx	r7
	movw	r3, #32767
	mov	r7, r0
	cmp	r0, r3
	beq	.L7618
	mvn	r8, r0
	lsr	r8, r8, #31
	b	.L7520
.L7821:
	tst	r2, #4
	bne	.L7499
	b	.L7498
.L7641:
	mov	r0, r5
	ldr	r2, [r0, #36]!
	sub	ip, r2, #28
	cmp	r0, r2
	str	ip, [sp, #20]
	beq	.L7675
	ldrb	r2, [r2, #-8]	@ zero_extendqisi2
	cmp	r3, r2
	bne	.L7580
	b	.L7579
.L7586:
	ldrb	r2, [r2, #-8]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L7867
.L7580:
	ldr	r2, [ip, #28]
	cmp	r0, r2
	sub	ip, r2, #28
	bne	.L7586
.L7675:
	mvn	r7, #21
.L7578:
	ldr	r3, [sp, #12]
	ldr	r3, [r3]
	ldr	r8, [r3, #16]
	cmp	r8, #0
	beq	.L7649
	mov	r1, #100
	ldr	r0, [sp, #12]
	blx	r8
	ldr	r0, [sp, #16]
	bl	_raw_spin_unlock
	b	.L7457
.L7575:
	cmp	r3, #0
	bne	.L7641
	str	r3, [sp, #20]
	ldr	r3, [sp, #12]
	ldr	r0, [r3, #16]
	add	r8, r3, #32
	bl	usb_speed_string
	mov	r2, r0
	ldr	r3, [sp, #20]
	b	.L7592
.L7561:
	ldr	r7, [r7, #64]
	ldr	r3, [sp, #12]
	cmp	r3, r7
	sub	r7, r7, #64
	bne	.L7558
.L7559:
	ldr	r3, [sp, #16]
	ldr	r2, [sp, #36]
	ldr	r3, [r3, #28]
	cmp	r2, r3
	sub	r3, r3, #28
	str	r3, [sp, #16]
	bne	.L7555
.L7647:
	mvn	r7, #21
	b	.L7443
.L7858:
	ldr	r0, [sp, #16]
	bl	_raw_spin_unlock
	b	.L7577
.L7867:
	str	ip, [sp, #20]
.L7579:
	cmp	r1, #0
	beq	.L7581
	ldr	r8, [r1, #36]!
	cmp	r1, r8
	sub	r8, r8, #64
	beq	.L7583
	mov	r7, #0
	mov	r9, r3
.L7582:
	ldr	r3, [r8, #40]
	mov	r0, r8
	cmp	r3, #0
	beq	.L7584
	blx	r3
	str	r7, [r8, #72]
	ldr	r3, [r5, #12]
	ldr	r8, [r8, #64]
	add	r3, r3, #36
	cmp	r3, r8
	sub	r8, r8, #64
	bne	.L7582
.L7848:
	mov	r3, r9
	ldr	r9, [r5]
.L7583:
	mov	r2, #0
	str	r2, [r5, #12]
	str	r2, [r5, #56]
.L7581:
	ldr	r10, [sp, #12]
	str	r3, [sp, #24]
	add	r8, r9, #32
	ldr	r0, [r10, #16]
	bl	usb_speed_string
	ldr	r9, [sp, #20]
	mov	r2, r0
	ldr	r3, [sp, #24]
	cmp	r9, #0
	beq	.L7592
	ldr	ip, [r9]
	movw	r1, #:lower16:.LC466
	mov	r7, #0
	mov	r0, r8
	movt	r1, #:upper16:.LC466
	mov	r8, r7
	str	ip, [sp]
	bl	_dev_info
	mov	r3, r9
	mov	r0, r7
	str	r4, [sp, #24]
	add	r9, r9, #44
	str	r6, [sp, #28]
	str	r3, [r5, #12]
.L7609:
	ldr	r4, [r9, #4]!
	cmp	r4, #0
	beq	.L7593
	ldr	r3, [r10, #16]
	cmp	r3, #3
	beq	.L7595
	cmp	r3, #5
	bne	.L7824
	ldr	r6, [r4, #16]
	cmp	r6, #0
	beq	.L7868
.L7597:
	ldr	r1, [r6]
	cmp	r1, #0
	addne	r7, r4, #72
	beq	.L7600
.L7603:
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #5
	beq	.L7869
	ldr	r1, [r6, #4]!
	cmp	r1, #0
	bne	.L7603
.L7600:
	mov	r0, r4
	mov	r2, #0
	ldr	r3, [r4, #32]
	mov	r1, r8
	blx	r3
	cmp	r0, #0
	blt	.L7870
	movw	r3, #32767
	cmp	r0, r3
	bne	.L7608
	ldr	r3, [r5, #56]
	add	r3, r3, #1
	str	r3, [r5, #56]
.L7608:
	add	r8, r8, #1
	cmp	r8, #16
	bne	.L7609
.L7593:
	add	r3, sp, #20
	mov	r7, r0
	ldm	r3, {r3, r4, r6}
	ldrb	r3, [r3, #23]	@ zero_extendqisi2
	cmp	r3, #0
	moveq	r1, #500
	beq	.L7610
	ldr	r1, [r5, #64]
	mul	r1, r1, r3
.L7610:
	ldr	r3, [sp, #12]
	ldr	r3, [r3]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L7611
	ldr	r0, [sp, #12]
	blx	r3
	b	.L7611
.L7869:
	ldrb	r0, [r1, #2]	@ zero_extendqisi2
	mov	r1, r7
	asr	r3, r0, #3
	and	r0, r0, #15
	and	r3, r3, #16
	orr	r0, r3, r0
	bl	_set_bit
	ldr	r1, [r6, #4]!
	cmp	r1, #0
	bne	.L7603
	b	.L7600
.L7824:
	ldr	r6, [r4, #8]
	b	.L7597
.L7595:
	ldr	r6, [r4, #12]
	b	.L7597
.L7856:
	add	ip, ip, #12
	ldr	r0, [r2, ip, lsl #2]
	cmp	r0, r1
	beq	.L7687
	ldr	r3, [r0, #56]
	cmp	r3, r1
	beq	.L7623
	blx	r3
	subs	r3, r0, #0
	blt	.L7687
.L7623:
	ldr	r2, [r4]
	mov	r8, #2
	strh	r3, [r2]	@ unaligned
	b	.L7480
.L7859:
	ldr	r0, [sp, #16]
	movw	r7, #32767
	bl	_raw_spin_unlock
	b	.L7457
.L7866:
	ldr	r7, [r0, #32]
	cmp	r7, #0
	bne	.L7616
	b	.L7690
.L7870:
	ldr	r3, [r5, #12]
	mov	r7, r0
	ldr	r4, [sp, #24]
	ldr	r6, [sp, #28]
	ldr	r10, [r3, #36]!
	cmp	r3, r10
	sub	r10, r10, #64
	beq	.L7605
	mov	r8, #0
.L7604:
	ldr	r3, [r10, #40]
	mov	r0, r10
	cmp	r3, #0
	beq	.L7606
	blx	r3
	str	r8, [r10, #72]
	ldr	r3, [r5, #12]
	ldr	r10, [r10, #64]
	add	r3, r3, #36
	cmp	r3, r10
	sub	r10, r10, #64
	bne	.L7604
.L7605:
	mov	r3, #0
	str	r3, [r5, #12]
	str	r3, [r5, #56]
	b	.L7578
.L7589:
	str	r3, [r8, #72]
	ldr	r3, [r5, #12]
	ldr	r8, [r8, #64]
	add	r3, r3, #36
	cmp	r8, r3
	sub	r8, r8, #64
	bne	.L7587
	b	.L7849
.L7478:
	mov	r2, fp
	mov	fp, #0
	mov	r8, r2
	b	.L7479
.L7475:
	ldrb	r2, [r6, #385]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L7477
	mov	r2, #1
	strb	r2, [r5, #19]
	strb	r3, [r5, #20]
	b	.L7477
.L7465:
	ldr	r2, [r1, #16]
	cmp	r2, #3
	beq	.L7468
	mov	r0, r5
	ldr	r3, [r0, #36]!
	cmp	r0, r3
	sub	r3, r3, #28
	beq	.L7652
	cmp	r2, #5
	moveq	r2, #0
	bne	.L7466
.L7469:
	ldrb	ip, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	ip, #1
	addne	r2, r2, #1
	cmp	r0, r3
	sub	r3, r3, #28
	bne	.L7469
	b	.L7467
.L7618:
	ldr	r2, [r5, #56]
	mov	r3, #1
	add	r2, r2, r3
	str	r2, [r5, #56]
	b	.L7619
.L7860:
	ldr	r2, [r5, #4]
	mov	r3, #9
	ldr	r2, [r2]
	strb	r3, [r2]
	add	r3, r2, r3
	strb	r1, [r2, #1]
	str	r3, [sp, #12]
	ldrb	r3, [r8, #44]	@ zero_extendqisi2
	str	r2, [sp, #16]
	strb	r3, [r2, #4]
	ldrb	r3, [r8, #20]	@ zero_extendqisi2
	strb	r3, [r2, #5]
	ldrb	r3, [r8, #21]	@ zero_extendqisi2
	strb	r3, [r2, #6]
	ldrb	r3, [r8, #22]	@ zero_extendqisi2
	mvn	r3, r3, lsl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r2, #7]
	ldrb	r3, [r8, #23]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7501
	ldr	r2, [r8, #24]
	mov	r3, #500
	ldr	r2, [r2, #64]
	sdiv	r3, r3, r2
	ldr	r2, [sp, #16]
	uxtb	r3, r3
.L7501:
	strb	r3, [r2, #8]
	ldr	r2, [r8, #8]
	cmp	r2, #0
	beq	.L7664
	ldr	r1, [r2]
	cmp	r1, #0
	beq	.L7665
	ldr	r7, [sp, #12]
	movw	r3, #4087
	str	r4, [sp, #20]
	ldrb	r10, [r1]	@ zero_extendqisi2
	mov	r4, r3
	mov	r3, r7
	mov	r7, r6
	mov	r6, r5
	mov	r5, r2
	b	.L7504
.L7506:
	ldrb	r10, [r1]	@ zero_extendqisi2
	cmp	r10, r4
	bhi	.L7647
.L7504:
	mov	r0, r3
	mov	r2, r10
	bl	memcpy
	ldr	r1, [r5, #4]!
	sub	r4, r4, r10
	add	r3, r0, r10
	cmp	r1, #0
	bne	.L7506
	ldr	r4, [sp, #20]
	mov	r5, r6
	mov	r6, r7
	mov	r7, r3
.L7503:
	ldr	r3, [sp, #12]
	subs	r7, r7, r3
	bmi	.L7443
	add	r3, r3, r7
	rsb	r2, r7, #4080
	str	r3, [sp, #12]
	add	r3, r2, #7
	mov	r2, r3
.L7502:
	mov	r10, r8
	ldr	r3, [r10, #36]!
	cmp	r10, r3
	sub	r3, r3, #64
	beq	.L7508
	ldr	r7, [sp, #12]
	mov	r8, r2
	str	r4, [sp, #20]
	str	r6, [sp, #32]
	mov	r6, r3
	str	fp, [sp, #24]
	str	r5, [sp, #28]
.L7517:
	cmp	r9, #3
	beq	.L7510
	cmp	r9, #5
	bne	.L7822
	ldr	fp, [r6, #16]
.L7512:
	cmp	fp, #0
	beq	.L7513
	ldr	r1, [fp]
	mov	r5, r8
	cmp	r1, #0
	beq	.L7666
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r8, r4
	bcc	.L7647
	mov	r3, r7
	b	.L7515
.L7516:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L7647
.L7515:
	mov	r0, r3
	mov	r2, r4
	bl	memcpy
	ldr	r1, [fp, #4]!
	sub	r5, r5, r4
	add	r3, r0, r4
	cmp	r1, #0
	bne	.L7516
.L7514:
	subs	r7, r3, r7
	bmi	.L7443
	sub	r8, r8, r7
	mov	r7, r3
.L7513:
	ldr	r6, [r6, #64]
	cmp	r10, r6
	sub	r6, r6, #64
	bne	.L7517
	ldr	r4, [sp, #20]
	str	r7, [sp, #12]
	ldr	fp, [sp, #24]
	ldr	r5, [sp, #28]
	ldr	r6, [sp, #32]
.L7508:
	ldr	r3, [sp, #12]
	ldr	r2, [sp, #16]
	sub	r7, r3, r2
	uxth	r3, r7
	cmp	r7, #0
	strh	r3, [r2, #2]	@ unaligned
	blt	.L7443
	cmp	fp, r3
	bcc	.L7573
	uxth	r7, r7
	movw	r8, #32767
	subs	r8, r7, r8
	movne	r8, #1
	b	.L7520
.L7822:
	ldr	fp, [r6, #8]
	b	.L7512
.L7510:
	ldr	fp, [r6, #12]
	b	.L7512
.L7862:
	mov	r0, r3
	mov	r1, #256
	mov	r8, r3
	bl	__memzero
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #3
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2316]
	strb	r2, [r8, #1]
	ldr	lr, [r3, #16]
	cmp	lr, #0
	beq	.L7522
	ldr	r3, [lr]
	add	r7, r8, #2
	ldrh	ip, [r8, #2]	@ unaligned
	cmp	r3, #0
	beq	.L7523
	add	r0, r8, #254
.L7528:
	cmp	ip, #0
	ldrh	r1, [r3]
	beq	.L7668
	cmp	r7, r0
	bcs	.L7668
	cmp	r1, ip
	beq	.L7525
	mov	r3, r7
	b	.L7526
.L7871:
	cmp	r3, r0
	bcs	.L7524
	cmp	r1, r2
	beq	.L7525
.L7526:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L7871
.L7524:
	strh	r1, [r3]	@ movhi
	ldrh	ip, [r8, #2]	@ unaligned
.L7525:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L7528
.L7523:
	mov	r2, r5
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	sub	r10, r3, #28
	beq	.L7529
	ldr	r8, [sp, #12]
	strd	r4, [sp, #16]
	mov	r5, r2
	add	r7, r8, #2
	add	r0, r8, #254
.L7544:
	ldr	lr, [r10, #4]
	cmp	lr, #0
	beq	.L7530
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L7530
.L7535:
	cmp	ip, #0
	ldrh	r1, [r3]
	beq	.L7670
	cmp	r7, r0
	bcs	.L7670
	cmp	r1, ip
	beq	.L7532
	mov	r3, r7
	b	.L7533
.L7872:
	cmp	r3, r0
	bcs	.L7531
	cmp	r1, r2
	beq	.L7532
.L7533:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L7872
.L7531:
	strh	r1, [r3]	@ movhi
	ldrh	ip, [r8, #2]	@ unaligned
.L7532:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L7535
.L7530:
	mov	r9, r10
	ldr	r4, [r9, #36]!
	cmp	r9, r4
	sub	r4, r4, #64
	beq	.L7536
.L7543:
	ldr	lr, [r4, #4]
	cmp	lr, #0
	beq	.L7537
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L7537
.L7542:
	cmp	ip, #0
	ldrh	r1, [r3]
	beq	.L7672
	cmp	r7, r0
	bcs	.L7672
	cmp	r1, ip
	beq	.L7539
	mov	r3, r7
	b	.L7540
.L7873:
	cmp	r3, r0
	bcs	.L7538
	cmp	r1, r2
	beq	.L7539
.L7540:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L7873
.L7538:
	strh	r1, [r3]	@ movhi
	ldrh	ip, [r8, #2]	@ unaligned
.L7539:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L7542
.L7537:
	ldr	r4, [r4, #64]
	cmp	r9, r4
	sub	r4, r4, #64
	bne	.L7543
.L7536:
	ldr	r10, [r10, #28]
	cmp	r5, r10
	sub	r10, r10, #28
	bne	.L7544
	ldrd	r4, [sp, #16]
.L7529:
	mov	r3, #0
.L7545:
	ldr	r2, [sp, #12]
	add	r2, r2, r3, lsl #1
	ldrh	r2, [r2, #2]	@ unaligned
	cmp	r2, #0
	bne	.L7547
	cmp	r3, #0
	beq	.L7647
.L7546:
	add	r3, r3, #1
	ldr	r2, [sp, #12]
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2]
	b	.L7548
.L7672:
	mov	r3, r7
	b	.L7538
.L7670:
	mov	r3, r7
	b	.L7531
.L7584:
	str	r3, [r8, #72]
	ldr	r3, [r5, #12]
	ldr	r8, [r8, #64]
	add	r3, r3, #36
	cmp	r8, r3
	sub	r8, r8, #64
	bne	.L7582
	b	.L7848
.L7556:
	mov	r2, r5
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	sub	r3, r3, #28
	str	r3, [sp, #16]
	str	r2, [sp, #36]
	beq	.L7647
	ldr	r3, [sp, #12]
	str	r4, [sp, #20]
	str	r6, [sp, #32]
	str	fp, [sp, #24]
	str	r5, [sp, #28]
	add	r2, r3, #2
	mov	r6, r3
	ldr	r3, [sp, #16]
	mov	fp, r2
.L7555:
	ldr	r0, [r3, #4]
	cmp	r0, #0
	beq	.L7560
	mov	r3, r10
	mov	r2, r9
	mov	r1, r6
	bl	lookup_string
	cmp	r0, #0
	bgt	.L7843
.L7560:
	ldr	r3, [sp, #16]
	ldr	r7, [r3, #36]!
	cmp	r3, r7
	str	r3, [sp, #12]
	sub	r7, r7, #64
	beq	.L7559
	mov	r8, #126
.L7558:
	ldr	r5, [r7, #4]
	cmp	r5, #0
	subne	r5, r5, #4
	beq	.L7561
.L7562:
	ldr	r3, [r5, #4]!
	cmp	r3, #0
	beq	.L7561
	ldrh	r2, [r3]
	cmp	r2, r9
	bne	.L7562
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L7853
	b	.L7562
.L7874:
	adds	r3, r3, #8
	beq	.L7562
.L7853:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L7562
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r10, r2
	bne	.L7874
	mov	r0, r4
	bl	strlen
	cmp	r0, #126
	mov	r3, fp
	str	r8, [sp]
	movcc	r1, r0
	movcs	r1, #126
	mov	r2, #1
	mov	r0, r4
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L7562
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r6, #1]
	uxtb	r3, r3
	subs	r0, r3, #0
	strb	r3, [r6]
	beq	.L7562
.L7843:
	ldr	r4, [sp, #20]
	ldr	fp, [sp, #24]
	ldr	r5, [sp, #28]
	ldr	r6, [sp, #32]
	b	.L7548
.L7823:
	ldr	r8, [sp, #12]
	b	.L7588
.L7476:
	mov	r2, #16
	strb	r2, [r5, #19]
	strb	r3, [r5, #20]
	b	.L7477
.L7606:
	str	r3, [r10, #72]
	ldr	r3, [r5, #12]
	ldr	r10, [r10, #64]
	add	r3, r3, #36
	cmp	r10, r3
	sub	r10, r10, #64
	bne	.L7604
	b	.L7605
.L7664:
	movw	r3, #4087
	mov	r2, r3
	b	.L7502
.L7863:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r7, [r3, #-4076]
	cmp	r7, #0
	beq	.L7875
.L7550:
	mov	r0, r7
	bl	strlen
	ldr	r3, [sp, #12]
	mov	r2, #126
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r7
	mov	r2, #1
	add	r3, r3, #2
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L7647
	add	r3, r0, #1
	ldr	r1, [sp, #12]
	mov	r2, #3
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r1]
	strb	r2, [r1, #1]
	b	.L7548
.L7547:
	add	r3, r3, #1
	cmp	r3, #127
	bne	.L7545
	b	.L7546
.L7666:
	mov	r3, r7
	b	.L7514
.L7864:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r7, [r3, #-4020]
	cmp	r7, #0
	bne	.L7550
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2316]
	ldr	r7, [r3, #4]
.L7552:
	cmp	r7, #0
	beq	.L7553
	b	.L7550
.L7652:
	mov	r2, #0
	b	.L7467
.L7493:
	cmp	r1, #7
	moveq	r9, #0
	b	.L7492
.L7468:
	mov	ip, r5
	mov	r2, #0
	ldr	r3, [ip, #36]!
	cmp	ip, r3
	sub	r3, r3, #28
	beq	.L7467
.L7470:
	ldrb	r0, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	r0, #2
	addne	r2, r2, #1
	cmp	ip, r3
	sub	r3, r3, #28
	bne	.L7470
	b	.L7467
.L7668:
	mov	r3, r7
	b	.L7524
.L7522:
	ldr	r3, [sp, #12]
	ldrh	ip, [r3, #2]	@ unaligned
	b	.L7523
.L7482:
	ldr	r1, [r3, #16]
	ldr	r3, [r5, #36]!
	cmp	r1, #3
	beq	.L7876
	cmp	r5, r3
	sub	r3, r3, #28
	beq	.L7657
	cmp	r1, #5
	mov	r1, #0
	bne	.L7487
.L7486:
	ldrb	r0, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	r0, #1
	addne	r1, r1, #1
	cmp	r5, r3
	sub	r3, r3, #28
	bne	.L7486
	b	.L7484
.L7487:
	ldrb	r0, [r3, #45]	@ zero_extendqisi2
	ldr	r3, [r3, #28]
	tst	r0, #2
	addne	r1, r1, #1
	cmp	r5, r3
	sub	r3, r3, #28
	bne	.L7487
	b	.L7484
.L7865:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r7, [r3, #-4016]
	b	.L7552
.L7628:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC468
	adds	fp, fp, #0
	mov	r2, r7
	movt	r1, #:upper16:.LC468
	movne	fp, #1
	mov	r8, r3
	add	r0, r0, #32
	bl	dev_err
	b	.L7480
.L7852:
	adds	fp, fp, #0
	mov	r8, r3
	movne	fp, #1
	b	.L7480
.L7875:
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, .L7877+4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2316]
	ldr	r7, [r3, #8]
	cmp	r7, #0
	moveq	r7, r2
	b	.L7550
.L7571:
	mov	r3, #500
	strb	r1, [sp, #44]
	strh	r3, [sp, #46]	@ movhi
	b	.L7572
.L7876:
	cmp	r5, r3
	sub	r3, r3, #28
	bne	.L7483
.L7657:
	mov	r1, #0
	b	.L7484
.L7665:
	ldr	r7, [sp, #12]
	b	.L7503
.L7868:
	movw	r0, #:lower16:.LC467
	ldr	r1, .L7877+8
	mvn	r7, #21
	ldr	r2, [r4]
	movt	r0, #:upper16:.LC467
	bl	printk
	ldr	r0, [sp, #16]
	bl	_raw_spin_unlock
	b	.L7457
.L7878:
	.align	2
.L7877:
	.word	.LANCHOR3-3936
	.word	.LANCHOR4-4072
	.word	.LANCHOR3-3948
	.fnend
	.size	composite_setup, .-composite_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_setup, %function
android_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r4, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	stmib	sp, {r0, r3}
	add	r0, r0, #32
	bl	dev_get_drvdata
	ldr	r3, [r4, #2228]
	mov	r6, r0
	ldr	r2, .L7992
	sub	r9, r3, #208
	cmp	r3, r2
	bne	.L7882
	b	.L7880
.L7977:
	ldr	r3, [r9, #208]
	cmp	r3, r2
	sub	r9, r3, #208
	beq	.L7880
.L7882:
	ldr	r3, [r3, #-200]
	cmp	r6, r3
	bne	.L7977
.L7880:
	ldr	r3, [r6, #4]
	movw	r2, #:lower16:composite_setup_complete
	mov	r0, #0
	movt	r2, #:upper16:composite_setup_complete
	mov	r10, r9
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	str	r0, [r3, #4]
	str	r2, [r3, #28]
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #4]
	str	r6, [r3]
	ldr	r8, [r10, #196]!
	cmp	r10, r8
	sub	r8, r8, #120
	beq	.L7883
	mvn	fp, #94
.L7887:
	mov	r5, r8
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L7886
	b	.L7884
.L7885:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L7884
.L7886:
	ldr	r0, [r4]
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [r0, #48]
	cmp	r3, #0
	beq	.L7885
	blx	r3
	subs	fp, r0, #0
	blt	.L7885
.L7884:
	ldr	r8, [r8, #120]
	cmp	r10, r8
	sub	r8, r8, #120
	bne	.L7887
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
	cmp	fp, #0
	blt	.L7889
.L7890:
	add	r5, r6, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r9, #52]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7931
	mov	r3, #1
	mov	r1, r0
	mov	r0, r5
	strb	r3, [r9, #52]
	bl	_raw_spin_unlock_irqrestore
.L7932:
	add	r0, r9, #180
	bl	schedule_work
.L7879:
	mov	r0, fp
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7931:
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	mov	r1, r0
	mov	r0, r5
	cmp	r3, #9
	beq	.L7978
.L7976:
	bl	_raw_spin_unlock_irqrestore
	b	.L7879
.L7883:
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
.L7889:
	ldrb	r2, [r7]	@ zero_extendqisi2
	ldr	r3, [sp, #8]
	cmp	r2, #64
	ldr	r5, [r3, #2324]
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	beq	.L7979
	cmp	r2, #192
	cmpeq	r3, #51
	bne	.L7898
	ldr	r3, [r6, #4]
	mov	r8, #2
	mov	r1, #256
	add	r0, r5, #93
	ldr	r3, [r3]
	strh	r8, [r3]	@ movhi
	bl	__memzero
	add	r0, r5, #348
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #604
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #860
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #1104
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero
	add	r0, r5, #1360
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero
	mov	r3, #0
	str	r3, [r5, #1636]
	str	r3, [r5, #1640]
.L7893:
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	r8, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	bge	.L7890
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC471
	movt	r1, #:upper16:.LC471
	ldr	r2, .L7992+4
	add	r0, r0, #32
	bl	dev_err
.L7898:
	mov	r1, r7
	ldr	r0, [sp, #4]
	bl	composite_setup
	mov	fp, r0
	b	.L7890
.L7978:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L7976
	cmp	r4, #0
	bne	.L7976
	bl	_raw_spin_unlock_irqrestore
	b	.L7932
.L7979:
	cmp	r3, #53
	beq	.L7980
	ldrh	r2, [r7, #4]	@ unaligned
	cmp	r3, #52
	str	r2, [sp, #8]
	ldrh	r8, [r7, #6]	@ unaligned
	beq	.L7981
	cmp	r3, #58
	cmpeq	r2, #0
	ldrh	r10, [r7, #2]	@ unaligned
	moveq	r2, #1
	movne	r2, #0
	cmp	r8, #0
	movne	r2, #0
	cmp	r2, #0
	movne	r8, #0
	strne	r10, [r5, #1640]
	bne	.L7893
	cmp	r3, #54
	beq	.L7982
	cmp	r3, #55
	beq	.L7983
	cmp	r3, #56
	beq	.L7984
	cmp	r3, #57
	bne	.L7898
	add	r3, r5, #80
	add	r5, r5, #1744
	mov	r0, r3
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5, #12]
	add	r5, r5, #12
	mov	r1, r0
	ldr	r3, [sp, #8]
	cmp	r5, fp
	bne	.L7930
	b	.L7927
.L7985:
	ldr	fp, [fp]
	cmp	r5, fp
	beq	.L7927
.L7930:
	ldr	r2, [fp, #16]
	cmp	r10, r2
	bne	.L7985
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L7898
	ldr	r2, [r6, #4]
	movw	r3, #:lower16:acc_complete_send_hid_event
	movt	r3, #:upper16:acc_complete_send_hid_event
	str	fp, [r2, #32]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L7893
.L7981:
	str	r2, [r5, #1632]
	ldr	r2, [r6]
	movw	r3, #:lower16:acc_complete_set_string
	movt	r3, #:upper16:acc_complete_set_string
	ldr	r2, [r2, #4]
	str	r5, [r2]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L7893
.L7980:
	mov	r1, #1
	add	r0, r5, #1680
	add	r0, r0, #12
	mov	r8, #0
	str	r1, [r5, #1636]
	bl	schedule_delayed_work
	b	.L7893
.L7927:
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	b	.L7898
.L7984:
	add	r3, r5, #80
	add	r5, r5, #1760
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5, #4]
	add	r5, r5, #4
	mov	r1, r0
	ldr	r3, [sp, #12]
	cmp	r5, fp
	bne	.L7925
	b	.L7927
.L7986:
	ldr	fp, [fp]
	cmp	r5, fp
	beq	.L7927
.L7925:
	ldr	r2, [fp, #16]
	cmp	r10, r2
	bne	.L7986
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L7898
	ldr	r3, [fp, #28]
	ldr	r1, [sp, #8]
	cmp	r1, r3
	bne	.L7898
	ldr	r2, [fp, #24]
	add	r3, r8, r1
	cmp	r3, r2
	bgt	.L7898
	ldr	r2, [r6, #4]
	movw	r3, #:lower16:acc_complete_set_hid_report_desc
	movt	r3, #:upper16:acc_complete_set_hid_report_desc
	str	fp, [r2, #32]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L7893
.L7983:
	add	r8, r5, #80
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1756]
	add	r2, r5, #1744
	mov	r1, r0
	add	r2, r2, #12
	cmp	r3, r2
	bne	.L7915
	b	.L7912
.L7987:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L7912
.L7915:
	ldr	r0, [r3, #16]
	cmp	r10, r0
	bne	.L7987
	cmp	r3, #0
	beq	.L7912
.L7916:
	ldr	lr, [r3]
	add	r2, r5, #1760
	mov	r0, r8
	ldr	ip, [r3, #4]
	add	r2, r2, #12
	str	ip, [lr, #4]
	str	lr, [ip]
	ldr	ip, [r5, #1772]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r2, [r3, #4]
	str	r3, [r5, #1772]
.L7975:
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #1728
	mov	r8, #0
	add	r0, r0, #12
	bl	schedule_work
	b	.L7893
.L7982:
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L7898
	add	r8, r5, #80
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1756]
	add	r2, r5, #1744
	mov	fp, r0
	add	r2, r2, #12
	cmp	r2, r3
	bne	.L7902
	b	.L7899
.L7988:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L7899
.L7902:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L7988
	cmp	r3, #0
	beq	.L7899
.L7903:
	ldrd	r0, [r3]
	add	r2, r5, #1760
	add	r2, r2, #12
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r1, [r5, #1772]
	str	r3, [r1, #4]
	stm	r3, {r1, r2}
	str	r3, [r5, #1772]
.L7904:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7937
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L7909
.L7908:
	movw	r1, #32800
	ldr	r0, [sp, #8]
	str	r3, [sp, #12]
	bl	__kmalloc
	ldr	r3, [sp, #12]
	cmp	r0, #0
	str	r0, [r3, #20]
	beq	.L7989
	ldr	ip, [sp, #8]
	str	r5, [r3, #12]
	add	r2, r5, #1760
	str	r10, [r3, #16]
	add	r2, r2, #4
	mov	r1, fp
	mov	r0, r8
	str	ip, [r3, #24]
	ldr	ip, [r5, #1764]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r2, [r3, #4]
	str	r3, [r5, #1764]
	b	.L7975
.L7899:
	ldr	r3, [r5, #1764]
	add	r2, r5, #1760
	add	r2, r2, #4
	cmp	r2, r3
	bne	.L7907
	b	.L7904
.L7990:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L7904
.L7907:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L7990
	cmp	r3, #0
	beq	.L7904
	b	.L7903
.L7912:
	ldr	r3, [r5, #1764]
	add	r2, r5, #1760
	add	r2, r2, #4
	cmp	r2, r3
	bne	.L7920
	b	.L7917
.L7991:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L7917
.L7920:
	ldr	r0, [r3, #16]
	cmp	r10, r0
	bne	.L7991
	cmp	r3, #0
	bne	.L7916
.L7917:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L7898
.L7989:
	mov	r0, r3
	bl	kfree
.L7909:
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L7898
.L7937:
	mov	r3, #16
	b	.L7908
.L7993:
	.align	2
.L7992:
	.word	.LANCHOR1+2228
	.word	.LANCHOR3-3920
	.fnend
	.size	android_setup, .-android_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_unbind_config, %function
rndis_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC472
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r1, #:upper16:.LC472
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L7994
	.syntax divided
@ 17 "/home/xawlw/kernel/arg/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
@ 40 "/home/xawlw/kernel/arg/arch/arm/include/asm/percpu.h" 1
	mrc p15, 0, r1, c13, c0, 4
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #640]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/xawlw/kernel/arg/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L7994:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_function_unbind_config, .-rndis_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_fill, %function
rx_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #28
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r4, r3
	strd	r8, [sp, #16]
	add	r9, r0, #16
	strd	r10, [sp, #24]
	mov	r0, r9
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r6, #28]
	mov	r1, r0
	cmp	r4, r5
	beq	.L7998
	movw	r3, #:lower16:.LANCHOR0
	mov	r8, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	fp, r10
	str	r3, [sp, #12]
	b	.L8014
.L8043:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L8021
	ldr	r3, [sp, #12]
	ldr	r3, [r3, #560]
	lsl	r3, r3, #1
	cmp	r3, r8
	blt	.L7998
.L8044:
	ldrd	r2, [r5]
	mov	r0, r9
	sub	r10, r5, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r5]
	str	r5, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L8040
	ldr	r7, [r3, #84]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L8039
	ldmib	r6, {r2, ip}
	ldrh	r3, [r7, #20]
	ldr	r1, [r6, #72]
	ldr	r0, [r2, #92]
	ldr	r4, [ip, #364]
	cmp	r1, #0
	add	r4, r4, r0
	add	r4, r4, #33
	add	r4, r4, r3
	udiv	r0, r4, r3
	mls	r3, r3, r0, r4
	sub	r4, r4, r3
	ldrb	r3, [r2, #96]	@ zero_extendqisi2
	mulne	r4, r1, r4
	cmp	r3, #0
	beq	.L8004
	ldr	r3, [r2, #100]
	cmp	r4, r3
	movcc	r4, r3
.L8004:
	mvn	r3, #0
	mov	r2, #0
	mov	r1, fp
	add	r0, r4, #2
	bl	__alloc_skb
	subs	r3, r0, #0
	beq	.L8005
	ldr	lr, [r3, #160]
	mov	r1, r10
	mov	r0, r7
	ldr	ip, [r3, #172]
	mov	r2, fp
	str	r3, [sp, #4]
	add	lr, lr, #2
	add	ip, ip, #2
	str	lr, [r3, #160]
	str	ip, [r3, #172]
	str	ip, [r5, #-36]
	str	r4, [r5, #-32]
	str	r3, [r5, #-4]
	ldr	ip, [r7, #8]
	ldr	r4, [ip, #16]
	blx	r4
	cmn	r0, #12
	mov	r4, r0
	ldr	r3, [sp, #4]
	beq	.L8041
	cmp	r0, #0
	bne	.L8042
.L8010:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #8]
	mov	r1, r0
	ldr	r5, [r6, #28]
	cmp	r3, r5
	beq	.L7998
.L8014:
	ldr	r3, [r6, #12]
	add	r8, r8, #1
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L8043
.L8021:
	mov	r3, #2
	cmp	r3, r8
	bge	.L8044
.L7998:
	mov	r0, r9
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L8041:
	add	r4, r6, #120
	mov	r0, #0
	mov	r1, r4
	mov	fp, r3
	bl	_test_and_set_bit
	cmp	r0, #0
	mov	r7, r4
	bne	.L8017
	add	r0, r6, #88
	bl	schedule_work
	cmp	r0, #0
	bne	.L8017
.L8019:
	movw	r0, #:lower16:.LC410
	mov	r2, #0
	ldr	r1, [r6, #8]
	movt	r0, #:upper16:.LC410
	bl	printk
	cmp	fp, #0
	bne	.L8017
.L8001:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #28]
	mov	r1, r0
	mov	r0, r9
	str	r5, [r3, #4]
	str	r3, [r5]
	ldr	r3, [sp, #8]
	str	r3, [r5, #4]
	str	r5, [r6, #28]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r7
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L8045
.L7997:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8040:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r7, r6, #120
	b	.L8001
.L8042:
	mov	r0, r3
	bl	dev_kfree_skb_any
	cmp	r4, #0
	bge	.L8010
.L8039:
	add	r4, r6, #120
	b	.L8009
.L8017:
	mov	r0, fp
	bl	dev_kfree_skb_any
.L8009:
	mov	r7, r4
	b	.L8001
.L8005:
	add	r4, r6, #120
	mov	fp, r3
	mov	r1, r4
	mov	r7, r4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L8001
	add	r0, r6, #88
	bl	schedule_work
	cmp	r0, #0
	bne	.L8001
	b	.L8019
.L8045:
	add	r0, r6, #88
	bl	schedule_work
	subs	r2, r0, #0
	bne	.L7997
	ldr	r1, [r6, #8]
	movw	r0, #:lower16:.LC410
	movt	r0, #:upper16:.LC410
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
	.fnend
	.size	rx_fill, .-rx_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_work, %function
eth_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L8046
	ldr	r3, [r4, #-80]
	ldr	r3, [r3, #160]
	tst	r3, #1
	bne	.L8055
.L8046:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8055:
	sub	r5, r4, #88
	ldr	r6, [sp, #8]
	mov	r1, #208
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rx_fill
	.fnend
	.size	eth_work, .-eth_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	process_rx_w, %function
process_rx_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-100]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #52
	mov	r6, #0
	str	r8, [sp, #16]
	movw	r8, #1500
	str	lr, [sp, #20]
.L8059:
	mov	r0, r7
	bl	skb_dequeue
	subs	r4, r0, #0
	beq	.L8072
.L8063:
	cmp	r6, #0
	ldr	r1, [r5, #-96]
	blt	.L8060
	ldr	r3, [r4, #80]
	sub	r3, r3, #14
	cmp	r3, r8
	bls	.L8061
.L8060:
	ldr	r3, [r1, #248]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r1, #248]
	ldr	r2, [r5, #-96]
	ldr	r3, [r2, #272]
	add	r3, r3, #1
	str	r3, [r2, #272]
	bl	dev_kfree_skb_any
	mov	r0, r7
	bl	skb_dequeue
	subs	r4, r0, #0
	bne	.L8063
.L8072:
	ldr	r3, [r5, #-96]
	ldr	r3, [r3, #160]
	tst	r3, #1
	bne	.L8073
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8061:
	bl	eth_type_trans
	strh	r0, [r4, #102]	@ movhi
	ldr	r2, [r5, #-96]
	mov	r0, r4
	ldr	r3, [r2, #232]
	add	r3, r3, #1
	str	r3, [r2, #232]
	ldr	r2, [r5, #-96]
	ldr	r1, [r4, #80]
	ldr	r3, [r2, #240]
	add	r3, r3, r1
	str	r3, [r2, #240]
	bl	netif_rx_ni
	mov	r6, r0
	b	.L8059
.L8073:
	sub	r0, r5, #104
	mov	r1, #208
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	rx_fill
	.fnend
	.size	process_rx_w, .-process_rx_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_open, %function
eth_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	add	r6, r0, #1216
	str	lr, [sp, #12]
	ldr	r3, [r0, #1224]
	ldr	r5, [r3, #160]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L8075
.L8076:
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1220]
	cmp	r0, #0
	beq	.L8078
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L8078
	blx	r3
.L8078:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8075:
	mov	r1, #208
	mov	r0, r6
	bl	rx_fill
	ldr	r3, [r4, #1224]
	mov	r0, r5
	str	r5, [r4, #1252]
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L8076
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L8076
	.fnend
	.size	eth_open, .-eth_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_unbind, %function
gser_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
	.fnend
	.size	gser_unbind, .-gser_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_unbind_config, %function
ncm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR4
	movt	r4, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldr	r3, [r4, #-4012]
	cmp	r3, #0
	beq	.L8091
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #-4012]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #-4012]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #-4012]
.L8091:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_function_unbind_config, .-ncm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unbind, %function
ncm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r0, [r1, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1632]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ncm_unbind, .-ncm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_unbind, %function
ecm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r0, [r1, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1672]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ecm_unbind, .-ecm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_unbind, %function
acm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	bl	kfree
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
	.fnend
	.size	acm_unbind, .-acm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_unbind_config, %function
rndis_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR4
	movt	r4, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldr	r3, [r4, #-4012]
	cmp	r3, #0
	beq	.L8103
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #-4012]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #-4012]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #-4012]
.L8103:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_unbind_config, .-rndis_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_unbind_config, %function
ecm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR4
	movt	r4, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldr	r3, [r4, #-4012]
	cmp	r3, #0
	beq	.L8109
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #-4012]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #-4012]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #-4012]
.L8109:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_unbind_config, .-ecm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_unbind, %function
f_midi_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #80]
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	mov	r3, #0
	str	r3, [r4, #88]
	cmp	r0, r3
	beq	.L8116
	bl	snd_card_free
.L8116:
	ldr	r0, [r4, #324]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r4, #8]
	str	r3, [r4, #324]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_midi_unbind, .-f_midi_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_suspend, %function
frmnet_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	strd	r10, [sp, #24]
	movt	r9, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	ldrb	r3, [r0, #108]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	add	r3, r3, r3, lsl #1
	add	r3, r9, r3, lsl #3
	ldr	r8, [r3, #2340]
	sub	r2, r8, #1
	cmp	r2, #9
	bhi	.L8128
	movw	r3, #:lower16:.LANCHOR2
	movt	r3, #:upper16:.LANCHOR2
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #676]
	str	r3, [sp, #4]
.L8122:
	ldr	r0, [r4, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8123
	blx	r3
.L8123:
	add	r10, r4, #124
	add	r5, r4, #136
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	str	r0, [sp]
	cmp	r3, r5
	beq	.L8124
	mov	r7, #256
	mov	r6, #512
.L8125:
	ldrd	r0, [r3]
	mov	fp, r3
	str	r1, [r0, #4]
	str	r0, [r1]
	str	r7, [r3]
	str	r6, [r3, #4]
	ldr	r0, [fp, #-8]!
	bl	kfree
	mov	r0, fp
	bl	kfree
	ldr	r3, [r4, #136]
	cmp	r3, r5
	bne	.L8125
.L8124:
	mov	r3, #0
	mov	r0, r10
	ldr	r1, [sp]
	str	r3, [r4, #144]
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #10
	bhi	.L8126
	mov	r3, #1
	lsl	r3, r3, r8
	tst	r3, #1824
	bne	.L8121
	tst	r3, #192
	beq	.L8126
	sub	r8, r8, #6
	cmp	r8, #1
	bls	.L8137
.L8121:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8128:
	movw	r3, #:lower16:.LC102
	movt	r3, #:upper16:.LC102
	str	r3, [sp, #4]
	b	.L8122
.L8137:
	ldrb	r3, [r4, #108]	@ zero_extendqisi2
	ldr	r0, [r9, #3568]
	add	r3, r3, r3, lsl #1
	add	r3, r9, r3, lsl #3
	ldrb	r3, [r3, #2348]	@ zero_extendqisi2
	add	r9, r9, r3, lsl #2
	ldr	r1, [r9, #3752]
	add	r1, r1, #316
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L8126:
	ldr	r1, .L8138
	movw	r0, #:lower16:.LC375
	ldr	r2, [sp, #4]
	movt	r0, #:upper16:.LC375
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L8139:
	.align	2
.L8138:
	.word	.LANCHOR3-3904
	.fnend
	.size	frmnet_suspend, .-frmnet_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_disable, %function
qdss_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #180
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #84]
	mov	r1, r0
	cmp	r3, #0
	beq	.L8155
	mov	r6, #0
	mov	r0, r5
	str	r6, [r4, #84]
	bl	_raw_spin_unlock_irqrestore
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L8142
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #184]	@ zero_extendqisi2
	bfi	r2, r6, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #184]
.L8142:
	tst	r3, #4
	beq	.L8143
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #184]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #184]
.L8143:
	tst	r3, #1
	beq	.L8144
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #184]
.L8144:
	add	r1, r4, #164
	ldr	r0, [r4, #188]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
.L8155:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	qdss_disable, .-qdss_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_unbind, %function
rndis_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:__stack_chk_guard
	mov	r4, r1
	str	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	str	lr, [sp, #12]
	ldr	r3, [r1, #156]
	.pad #24
	sub	sp, sp, #24
	ldr	r2, [r5]
	cmp	r3, #0
	str	r2, [sp, #20]
	bgt	.L8157
	rsb	r3, r3, r3, lsl #4
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	add	r3, r2, r3, lsl #2
	mov	r2, #0
	strb	r2, [r3, #3773]
.L8157:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldrb	r2, [r3, #-4008]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8158
	mov	r6, #0
	movw	r1, #:lower16:.LC473
	movt	r1, #:upper16:.LC473
	mov	r2, r6
	mov	r0, sp
	strb	r6, [r3, #-4008]
	bl	sprintf
	mov	r0, sp
	mov	r1, r6
	bl	remove_proc_entry
.L8158:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #164]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r4
	bl	kfree
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L8164
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8164:
	bl	__stack_chk_fail
	.fnend
	.size	rndis_unbind, .-rndis_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_usb_unbind, %function
android_usb_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r2, .L8190
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	ldr	r3, [r7, #2228]
	str	lr, [sp, #20]
	cmp	r3, r2
	sub	r4, r3, #208
	bne	.L8168
	b	.L8166
.L8188:
	ldr	r3, [r4, #208]
	cmp	r3, r2
	sub	r4, r3, #208
	beq	.L8166
.L8168:
	ldr	r3, [r3, #-200]
	cmp	r0, r3
	bne	.L8188
.L8166:
	mov	r3, #0
	mov	r2, #48
	add	r0, r4, #180
	strb	r2, [r7, #2416]
	strb	r3, [r7, #2672]
	strb	r3, [r7, #2928]
	bl	cancel_work_sync
	ldr	r6, [r4, #4]
	sub	r6, r6, #4
.L8169:
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	beq	.L8189
.L8173:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L8169
	ldr	r1, [r3, #296]
	ldr	r0, [r7, #3732]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L8171
	mov	r0, r4
	blx	r3
.L8171:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L8169
	ldr	r1, [r5]
	add	r5, r5, #4
	cmp	r1, #0
	beq	.L8169
.L8172:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r5], #4
	cmp	r1, #0
	bne	.L8172
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	bne	.L8173
.L8189:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8191:
	.align	2
.L8190:
	.word	.LANCHOR1+2228
	.fnend
	.size	android_usb_unbind, .-android_usb_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_setup, %function
mbim_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r9, [r0, #76]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #80]
	ldrh	r8, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r7, [r1, #6]	@ unaligned
	cmp	r3, #0
	ldr	r4, [r9, #4]
	beq	.L8217
	mov	r5, r1
	ldrh	r1, [r1]	@ unaligned
	mov	r10, r0
	movw	r0, #8582
	ldrb	r2, [r5]	@ zero_extendqisi2
	rev16	r1, r1
	uxth	r1, r1
	cmp	r1, r0
	beq	.L8196
	bls	.L8218
	movw	r3, #41344
	cmp	r1, r3
	beq	.L8201
	bls	.L8219
	movw	r3, #41347
	cmp	r1, r3
	beq	.L8204
	movw	r3, #41349
	cmp	r1, r3
	bne	.L8195
	adds	r3, r6, #0
	movne	r3, #1
	cmp	r7, #3
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L8208
	ldrb	r3, [r10, #188]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L8208
	ldr	r3, [r4]
	cmp	r7, #4
	mov	r8, #4
	ldr	r2, [r10, #216]
	movle	r6, #0
	movgt	r6, #1
	str	r2, [r3]	@ unaligned
.L8206:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r8, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r9]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L8220
.L8192:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8218:
	movw	r3, #8453
	cmp	r1, r3
	beq	.L8198
	movw	r3, #8580
	cmp	r1, r3
	beq	.L8199
	cmp	r1, #8448
	beq	.L8221
.L8195:
	movw	r0, #:lower16:.LC478
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	stm	sp, {r6, r8}
	movt	r0, #:upper16:.LC478
	ldr	r1, .L8226
	str	r7, [sp, #8]
	bl	printk
	ldrb	r2, [r5]	@ zero_extendqisi2
.L8208:
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC480
	mov	r3, r2
	ldr	r1, .L8226
	mvn	r2, #94
	movt	r0, #:upper16:.LC480
	mov	r4, r2
	str	ip, [sp]
	stmib	sp, {r6, r8}
	str	r7, [sp, #12]
	bl	printk
	b	.L8192
.L8204:
	adds	r3, r6, #0
	movne	r3, #1
	cmp	r7, #1
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L8208
	ldrb	r3, [r10, #188]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L8208
	ldr	r3, [r10, #192]
	cmp	r7, #2
	mov	r8, #2
	ldr	r1, .L8226+4
	movle	r6, #0
	movgt	r6, #1
	ldr	r2, [r4]
	subs	r3, r3, r1
	movne	r3, #1
	strh	r3, [r2]	@ unaligned
	b	.L8206
.L8199:
	cmp	r7, #0
	bne	.L8208
	ldrb	r3, [r10, #188]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L8208
	cmp	r6, #0
	beq	.L8212
	cmp	r6, #1
	bne	.L8222
	ldr	r3, .L8226+8
	mov	r8, r7
	mov	r6, r7
	str	r3, [r10, #192]
	b	.L8206
.L8221:
	movw	r3, #:lower16:fmbim_cmd_complete
	mov	r8, r7
	str	r10, [r4, #32]
	movt	r3, #:upper16:fmbim_cmd_complete
	mov	r6, #0
	str	r3, [r4, #28]
	b	.L8206
.L8198:
	movw	r3, #:lower16:fmbim_reset_cmd_complete
	adds	r6, r7, #0
	str	r10, [r4, #32]
	movt	r3, #:upper16:fmbim_reset_cmd_complete
	movne	r6, #1
	mov	r8, #0
	str	r3, [r4, #28]
	b	.L8206
.L8219:
	movw	r3, #41217
	cmp	r1, r3
	bne	.L8195
	cmp	r6, #0
	bne	.L8223
	add	r3, r10, #196
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	ldr	fp, [r10, #208]!
	ldr	r3, [sp, #20]
	cmp	fp, r10
	beq	.L8224
	mov	r0, r3
	ldrd	r2, [fp]
	mov	ip, #256
	mov	r1, #512
	sub	r6, fp, #8
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [fp]
	str	r1, [fp, #4]
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r8}
	ldr	r0, [r4]
	cmp	r7, r8
	movcc	r8, r7
	mov	r2, r8
	bl	memcpy
	cmp	r6, #0
	beq	.L8210
	ldr	r0, [fp, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	cmp	r8, r7
	movge	r6, #0
	movlt	r6, #1
	b	.L8206
.L8201:
	adds	r3, r6, #0
	movne	r3, #1
	cmp	r7, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L8208
	ldrb	r3, [r10, #188]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L8208
	cmp	r7, #28
	ldr	r1, .L8226+12
	movcc	r6, r7
	movcs	r6, #28
	ldr	r0, [r4]
	mov	r2, r6
	mov	r8, r6
	bl	memcpy
	cmp	r6, r7
	movcs	r6, #0
	movcc	r6, #1
	b	.L8206
.L8196:
	sub	r3, r7, #4
	bic	r3, r3, #4
	uxth	r3, r3
	cmp	r3, #0
	bne	.L8225
	cmp	r6, #0
	bne	.L8208
	ldrb	r3, [r10, #188]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L8208
	movw	r3, #:lower16:mbim_ep0out_complete
	mov	r8, r7
	str	r10, [r4, #32]
	movt	r3, #:upper16:mbim_ep0out_complete
	str	r3, [r4, #28]
	b	.L8206
.L8210:
	cmp	r8, r7
	movge	r6, #0
	movlt	r6, #1
	b	.L8206
.L8222:
	mov	r8, r7
	mov	r6, r7
	b	.L8206
.L8212:
	ldr	r3, .L8226+4
	mov	r8, r6
	str	r3, [r10, #192]
	b	.L8206
.L8220:
	movw	r0, #:lower16:.LC479
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	str	r4, [sp]
	ldr	r1, .L8226
	movt	r0, #:upper16:.LC479
	ldrb	r2, [r5]	@ zero_extendqisi2
	bl	printk
	b	.L8192
.L8217:
	movw	r0, #:lower16:.LC474
	ldr	r1, .L8226
	mvn	r4, #106
	movt	r0, #:upper16:.LC474
	bl	printk
	b	.L8192
.L8225:
	movw	r0, #:lower16:.LC477
	mov	r2, r7
	ldr	r1, .L8226
	movt	r0, #:upper16:.LC477
	bl	printk
	ldrb	r2, [r5]	@ zero_extendqisi2
	b	.L8208
.L8224:
	movw	r0, #:lower16:.LC476
	ldr	r1, .L8226
	movt	r0, #:upper16:.LC476
	bl	printk
	ldr	r3, [sp, #20]
	mov	r0, r3
	bl	_raw_spin_unlock
	ldrb	r2, [r5]	@ zero_extendqisi2
	b	.L8208
.L8223:
	movw	r0, #:lower16:.LC475
	mov	r2, r7
	ldr	r1, .L8226
	movt	r0, #:upper16:.LC475
	bl	printk
	ldrb	r2, [r5]	@ zero_extendqisi2
	b	.L8208
.L8227:
	.align	2
.L8226:
	.word	.LANCHOR3-3888
	.word	.LANCHOR0+1700
	.word	.LANCHOR0+1744
	.word	.LANCHOR0+136
	.fnend
	.size	mbim_setup, .-mbim_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_unbind, %function
rndis_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r4, #:upper16:.LANCHOR1
	movt	r6, #:upper16:__stack_chk_guard
	str	r8, [sp, #16]
	mov	r7, r0
	ldr	r3, [r6]
	str	lr, [sp, #20]
	.pad #24
	sub	sp, sp, #24
	ldr	r0, [r4, #3440]
	str	r3, [sp, #20]
	bl	kfree
	ldr	r0, [r4, #3444]
	mov	r3, #0
	str	r3, [r4, #3440]
	cmp	r0, r3
	beq	.L8229
	bl	destroy_workqueue
.L8229:
	ldr	r3, [r5, #136]
	mov	r2, #0
	str	r2, [r4, #3444]
	cmp	r3, r2
	bgt	.L8230
	rsb	r3, r3, r3, lsl #4
	add	r3, r4, r3, lsl #2
	strb	r2, [r3, #3773]
.L8230:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldrb	r2, [r3, #-4008]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L8241
.L8231:
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L8232
	ldr	r0, [r5, #12]
	bl	kfree
.L8232:
	ldr	r0, [r5, #8]
	bl	kfree
	ldr	r3, [r5, #152]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r5, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, .L8243
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r5
	bl	kfree
	mov	r3, #0
	mov	r1, r7
	ldr	r0, .L8243
	str	r3, [r4, #2332]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L8242
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8241:
	mov	r8, #0
	movw	r1, #:lower16:.LC473
	mov	r2, r8
	movt	r1, #:upper16:.LC473
	mov	r0, sp
	strb	r8, [r3, #-4008]
	bl	sprintf
	mov	r0, sp
	mov	r1, r8
	bl	remove_proc_entry
	b	.L8231
.L8242:
	bl	__stack_chk_fail
.L8244:
	.align	2
.L8243:
	.word	.LANCHOR1+2328
	.fnend
	.size	rndis_qc_unbind, .-rndis_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_unbind, %function
acc_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #80
	strd	r8, [sp, #16]
	add	r8, r1, #1648
	mov	r9, #512
	strd	r10, [sp, #24]
	mov	r10, #256
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	b	.L8246
.L8249:
	ldr	fp, [r5, #84]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L8246:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1648]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r8, r4
	sub	r7, r4, #36
	beq	.L8265
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L8249
.L8248:
	ldr	r4, [r5, #1680]
	cmp	r4, #0
	beq	.L8250
	ldr	r7, [r5, #88]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L8250:
	ldr	r4, [r5, #1684]
	cmp	r4, #0
	beq	.L8251
	ldr	r7, [r5, #88]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L8251:
	ldr	r0, .L8266
	bl	hid_unregister_driver
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1756]
	mov	r1, r0
	add	r0, r5, #1744
	add	r0, r0, #12
	cmp	r3, r0
	ldr	r2, [r3]
	beq	.L8252
	add	r4, r5, #1760
	mov	ip, r2
	add	r4, r4, #12
	mov	r8, #256
	mov	r7, #512
	b	.L8253
.L8256:
	mov	ip, r2
.L8253:
	ldr	lr, [r3, #4]
	cmp	r0, ip
	str	lr, [r2, #4]
	str	r2, [lr]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r2, [r5, #1772]
	str	r3, [r2, #4]
	stm	r3, {r2, r4}
	str	r3, [r5, #1772]
	mov	r3, ip
	ldr	r2, [ip]
	bne	.L8256
.L8252:
	ldr	r3, [r5, #1764]
	add	r4, r5, #1760
	add	r4, r4, #4
	cmp	r3, r4
	ldr	r2, [r3]
	beq	.L8254
	add	r0, r5, #1760
	mov	ip, r2
	add	r0, r0, #12
	mov	r8, #256
	mov	r7, #512
	b	.L8255
.L8257:
	mov	ip, r2
.L8255:
	ldr	lr, [r3, #4]
	cmp	ip, r4
	str	lr, [r2, #4]
	str	r2, [lr]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r2, [r5, #1772]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r0, [r3, #4]
	str	r3, [r5, #1772]
	mov	r3, ip
	ldr	r2, [ip]
	bne	.L8257
.L8254:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #1728
	add	r0, r0, #12
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	schedule_work
.L8265:
	bl	_raw_spin_unlock_irqrestore
	b	.L8248
.L8267:
	.align	2
.L8266:
	.word	.LANCHOR0+1788
	.fnend
	.size	acc_function_unbind, .-acc_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_write, %function
mtp_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	stm	sp, {r1, r2}
	add	r7, r4, #80
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #3
	beq	.L8308
	cmp	r3, #0
	beq	.L8309
	mov	r3, #2
	mov	r0, r7
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #84]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	tst	r3, r6
	moveq	r9, #1
	movne	r9, #0
	orrs	r3, r9, r6
	beq	.L8272
	mov	r3, #57344
	movw	r2, #:lower16:autoremove_wake_function
	movt	r3, 65535
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #8]
	str	r2, [sp, #16]
	b	.L8288
.L8276:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r10, [r3, #1920]
	cmp	r10, r6
	movcs	r10, r6
	cmp	r10, #0
	bne	.L8310
.L8284:
	str	r10, [r5, #4]
	ldr	r0, [r4, #84]
	mov	r2, #208
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8295
	ldr	r3, [sp]
	sub	r6, r6, r10
	add	r3, r3, r10
	str	r3, [sp]
	orrs	r3, r9, r6
	beq	.L8272
.L8288:
	ldr	r3, [r4, #96]
	cmp	r6, #0
	moveq	r9, #0
	cmp	r3, #2
	bne	.L8291
	mov	r0, r7
	add	r8, r4, #108
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #108]
	cmp	r8, r3
	beq	.L8311
	ldr	ip, [r3]
	mov	lr, #512
	mov	r10, #256
	ldr	r2, [r3, #4]
	mov	r1, r0
	sub	r5, r3, #36
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L8276
.L8275:
	ldr	r3, [r4, #96]
	cmp	r3, #2
	mov	r3, #0
	bne	.L8292
	ldr	r1, [sp, #8]
	mov	r2, sp
	str	r6, [sp, #20]
	str	r3, [sp, #28]
	ldr	r0, [sp, #16]
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	and	r10, r2, r1
	add	r2, sp, #40
	str	r3, [sp, #40]
	add	r1, r4, #136
	str	r3, [sp, #44]
	ldr	r3, [r10, #12]
	mov	r6, r1
	str	r1, [sp, #12]
	str	r3, [sp, #32]
	str	r0, [sp, #36]
	str	r2, [sp, #40]
	str	r2, [sp, #44]
	b	.L8281
.L8313:
	bl	schedule
.L8281:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r6
	mov	fp, #256
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #108]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r7
	mov	r1, r2
	cmp	r8, r3
	sub	r5, r3, #36
	beq	.L8312
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L8279
.L8278:
	ldr	r3, [r4, #96]
	cmp	r3, #2
	bne	.L8293
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8313
	mov	r3, #65024
	movt	r3, 65535
	str	r3, [sp, #4]
.L8280:
	add	r1, sp, #28
	ldr	r0, [sp, #12]
	bl	finish_wait
.L8272:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #3
	beq	.L8296
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #96]
.L8289:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
.L8268:
	ldr	r0, [sp, #4]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8310:
	mov	r3, sp
	ldr	r1, [sp]
	ldr	r2, [sp, #8]
	ldr	r0, [r5]
	and	r3, r3, r2
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L8285
	mov	r2, r10
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L8284
	b	.L8286
.L8285:
	mov	r1, r10
	bl	__memzero
.L8286:
	mvn	r3, #13
	str	r3, [sp, #4]
.L8287:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	add	r2, r5, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r4, #112]
	str	r8, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L8272
.L8279:
	add	r1, sp, #28
	ldr	r0, [sp, #12]
	ldr	r6, [sp, #20]
	bl	finish_wait
	b	.L8276
.L8293:
	mov	r3, #0
	str	r3, [sp, #4]
	b	.L8280
.L8312:
	bl	_raw_spin_unlock_irqrestore
	b	.L8278
.L8292:
	str	r3, [sp, #4]
	b	.L8272
.L8296:
	mvn	r3, #124
	str	r3, [sp, #4]
	b	.L8289
.L8311:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L8275
.L8291:
	mvn	r3, #4
	str	r3, [sp, #4]
	b	.L8272
.L8295:
	mvn	r3, #4
	str	r3, [sp, #4]
	b	.L8287
.L8309:
	mvn	r3, #18
	mov	r0, r7
	str	r3, [sp, #4]
	bl	_raw_spin_unlock_irq
	b	.L8268
.L8308:
	mov	r3, #1
	mvn	r2, #124
	mov	r0, r7
	str	r3, [r4, #96]
	str	r2, [sp, #4]
	bl	_raw_spin_unlock_irq
	b	.L8268
	.fnend
	.size	mtp_write, .-mtp_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_notify_modem, %function
gqti_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r3, #1032]
	add	r5, r4, #52
	str	r2, [r4, #12]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #4]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r3, #0
	beq	.L8322
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8316
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L8323
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L8317:
	ldr	r2, [r4, #48]
	add	ip, r3, #8
	add	lr, r4, #44
	mov	r1, r6
	mov	r0, r5
	str	ip, [r4, #48]
	str	lr, [r3, #8]
	str	r2, [r3, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #32
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L8316:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L8317
.L8323:
	mvn	r3, #11
	b	.L8317
.L8322:
	movw	r0, #:lower16:.LC481
	mov	r2, r4
	ldr	r1, .L8324
	movt	r0, #:upper16:.LC481
	bl	printk
	ldr	lr, [sp, #12]
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L8325:
	.align	2
.L8324:
	.word	.LANCHOR3-3876
	.fnend
	.size	gqti_ctrl_notify_modem, .-gqti_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_unbind_config, %function
ecm_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L8335
	str	lr, [sp, #4]
	bl	strim
	mov	r1, r0
	movw	r0, #:lower16:.LC366
	movt	r0, #:upper16:.LC366
	bl	strcmp
	cmp	r0, #0
	bne	.L8334
.L8326:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L8334:
	movw	r1, #:lower16:.LC482
	movw	r0, #:lower16:init_net
	movt	r1, #:upper16:.LC482
	movt	r0, #:upper16:init_net
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L8326
	.syntax divided
@ 17 "/home/xawlw/kernel/arg/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
@ 40 "/home/xawlw/kernel/arg/arch/arm/include/asm/percpu.h" 1
	mrc p15, 0, r1, c13, c0, 4
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #640]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/xawlw/kernel/arg/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L8336:
	.align	2
.L8335:
	.word	.LANCHOR1+3184
	.fnend
	.size	ecm_qc_function_unbind_config, .-ecm_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_file_work, %function
send_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 64
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	.syntax divided
@ 751 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r1, [r0, #32]
	ldr	r4, [r0, #56]
	ldrd	r2, [r0, #40]
	ldrd	r8, [r0, #48]
	str	r1, [sp, #12]
	cmp	r4, #0
	strd	r2, [sp, #32]
	beq	.L8338
	adds	r8, r8, #12
	mov	r4, #12
	adc	r9, r9, #0
.L8338:
	ldr	r3, [r6, #-92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	asr	r1, r3, #31
	and	r3, r3, r8
	and	r2, r1, r9
	orrs	r3, r3, r2
	moveq	r3, #1
	movne	r3, #0
	cmp	r8, #1
	sbcs	r2, r9, #0
	str	r3, [sp, #4]
	orrge	r3, r3, #1
	cmp	r3, #0
	beq	.L8339
	mov	r3, sp
	sub	r2, r6, #68
	bic	r3, r3, #8128
	sub	r7, r6, #96
	bic	fp, r3, #63
	str	r2, [sp, #8]
	b	.L8356
.L8343:
	ldr	r2, [r6, #-80]
	cmp	r2, #3
	beq	.L8350
.L8386:
	cmp	r5, #0
	beq	.L8378
	movw	r2, #:lower16:.LANCHOR0
	mov	r1, #0
	ldr	r3, [r5]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1920]
	cmp	r2, r8
	sbcs	r1, r1, r9
	movge	r2, r8
	cmp	r4, #0
	beq	.L8353
	mov	r1, #2
	str	r8, [r3]
	strh	r1, [r3, #4]	@ movhi
	ldrh	r1, [r6, #60]
	strh	r1, [r3, #6]	@ movhi
	ldr	r1, [r6, #64]
	str	r1, [r3, #8]
	ldr	r3, [r5]
.L8353:
	add	r1, r3, r4
	sub	r2, r2, r4
	ldr	r0, [sp, #12]
	add	r3, sp, #32
	bl	vfs_read
	subs	r3, r0, #0
	blt	.L8379
	add	r4, r4, r3
	mov	r2, #208
	mov	r1, r5
	str	r4, [r5, #4]
	ldr	r0, [r6, #-92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8381
	ldr	r3, [sp, #4]
	subs	r8, r8, r4
	sbc	r9, r9, r4, asr #31
	cmp	r8, #1
	mov	r4, #0
	sbcs	r2, r9, #0
	and	r3, r3, #1
	orrge	r3, r3, #1
	cmp	r3, r4
	beq	.L8339
.L8356:
	orrs	r3, r8, r9
	ldr	r3, [sp, #4]
	mov	r0, r7
	moveq	r3, #0
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	ldr	r3, [r6, #-68]
	cmp	r3, r2
	beq	.L8382
	ldr	ip, [r3]
	mov	lr, #512
	mov	r10, #256
	ldr	r2, [r3, #4]
	sub	r5, r3, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	movne	r3, #0
	bne	.L8343
.L8342:
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	bne	.L8383
	ldr	r0, [fp, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #56
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	str	r4, [sp, #20]
	sub	r10, r6, #40
	str	r1, [sp, #56]
	str	r10, [sp, #16]
	strd	r8, [sp, #24]
	ldr	r9, [sp, #8]
	str	r3, [sp, #44]
	str	r0, [sp, #48]
	str	r2, [sp, #52]
	str	r1, [sp, #60]
	b	.L8349
.L8385:
	bl	schedule
.L8349:
	mov	r2, #1
	add	r1, sp, #44
	mov	r0, r10
	mov	r4, #256
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-68]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r7
	mov	r1, r2
	cmp	r3, r9
	sub	r5, r3, #36
	beq	.L8384
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r4, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L8361
.L8347:
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	bne	.L8362
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8385
	ldr	r4, [sp, #20]
	mov	r3, #65024
	mov	r5, #0
	ldrd	r8, [sp, #24]
	movt	r3, 65535
.L8348:
	add	r1, sp, #44
	ldr	r0, [sp, #16]
	str	r3, [sp, #20]
	bl	finish_wait
	ldr	r2, [r6, #-80]
	ldr	r3, [sp, #20]
	cmp	r2, #3
	bne	.L8386
.L8350:
	cmp	r5, #0
	beq	.L8357
	mvn	fp, #124
	b	.L8354
.L8383:
	cmp	r3, #3
	beq	.L8357
.L8339:
	mov	fp, #0
.L8345:
	str	fp, [r6, #68]
	.syntax divided
@ 836 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8361:
	mov	r3, #0
	ldr	r4, [sp, #20]
	ldrd	r8, [sp, #24]
	b	.L8348
.L8362:
	mov	r5, #0
	ldr	r4, [sp, #20]
	mov	r3, r5
	ldrd	r8, [sp, #24]
	b	.L8348
.L8384:
	bl	_raw_spin_unlock_irqrestore
	b	.L8347
.L8382:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L8342
.L8379:
	mov	fp, r3
.L8354:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [sp, #8]
	add	r2, r5, #36
	mov	r1, r0
	ldr	r3, [r6, #-64]
	mov	r0, r7
	str	r2, [r6, #-64]
	str	ip, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L8345
.L8381:
	ldr	r3, [r6, #-80]
	cmp	r3, #0
	mvneq	fp, #4
	beq	.L8354
	mov	r3, #4
	mvn	fp, #4
	str	r3, [r6, #-80]
	b	.L8354
.L8357:
	mvn	fp, #124
	b	.L8345
.L8378:
	mov	fp, r3
	b	.L8345
	.fnend
	.size	send_file_work, .-send_file_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_reset_cmd_complete, %function
fmbim_reset_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #196
	mov	r0, r5
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8388
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L8394
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L8389:
	ldr	r2, [r4, #204]
	add	r1, r3, #8
	add	ip, r4, #200
	mov	r0, r5
	str	r1, [r4, #204]
	str	ip, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r2]
	bl	_raw_spin_unlock
	ldr	r6, [sp, #8]
	add	r0, r4, #100
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L8388:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L8389
.L8394:
	mvn	r3, #11
	b	.L8389
	.fnend
	.size	fmbim_reset_cmd_complete, .-fmbim_reset_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_unbind, %function
mtp_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #80
	strd	r8, [sp, #16]
	add	r8, r1, #108
	mov	r9, #512
	strd	r10, [sp, #24]
	mov	r10, #256
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	b	.L8396
.L8399:
	ldr	fp, [r5, #84]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L8396:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #108]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r8, r4
	sub	r7, r4, #36
	beq	.L8413
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L8399
.L8398:
	ldr	r4, [r5, #160]
	cmp	r4, #0
	beq	.L8400
	ldr	r7, [r5, #88]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L8400:
	ldr	r4, [r5, #164]
	cmp	r4, #0
	beq	.L8401
	ldr	r7, [r5, #88]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L8401:
	add	r8, r5, #116
	mov	r10, #256
	mov	r9, #512
	b	.L8402
.L8405:
	ldr	fp, [r5, #92]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L8402:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #116]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r4, r8
	sub	r7, r4, #36
	beq	.L8414
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L8405
.L8404:
	mov	r3, #0
	str	r3, [r5, #96]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8413:
	bl	_raw_spin_unlock_irqrestore
	b	.L8398
.L8414:
	bl	_raw_spin_unlock_irqrestore
	b	.L8404
	.fnend
	.size	mtp_function_unbind, .-mtp_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_complete, %function
f_midi_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r0]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r1, #44]
	ldr	r2, [r0, #20]
	cmn	r3, #103
	ldr	r7, [r2, #24]
	bgt	.L8417
	cmn	r3, #104
	bge	.L8418
	cmn	r3, #108
	bne	.L8416
.L8418:
	ldr	r3, [r0, #84]
	ldr	r0, [r5]
	cmp	r3, r4
	beq	.L8453
.L8425:
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L8417:
	cmp	r3, #0
	bne	.L8416
	ldr	r3, [r0, #84]
	cmp	r3, r4
	beq	.L8454
	ldr	r3, [r0, #80]
	cmp	r3, r4
	beq	.L8455
.L8416:
	ldr	r3, [r4, #8]
	mov	r2, #32
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L8456
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L8456:
	ldr	ip, [r7]
	movw	r1, #:lower16:.LC483
	ldr	r3, [r5, #4]
	movt	r1, #:upper16:.LC483
	str	r0, [sp]
	ldr	r2, [r4, #4]
	add	r0, ip, #32
	bl	dev_err
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3
.L8453:
	ldr	r2, [r5, #48]
	cmp	r2, #3
	bls	.L8425
	movw	r8, #:lower16:.LANCHOR3
	add	r6, r0, #1
	movt	r8, #:upper16:.LANCHOR3
	rsb	r7, r0, #6
	b	.L8427
.L8426:
	add	r3, r7, r6
	add	r6, r6, #4
	cmp	r3, r2
	bcs	.L8457
.L8427:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8426
	ldr	r1, [r4]
	lsr	ip, r3, #4
	add	r0, ip, #40
	ldr	r0, [r1, r0, lsl #2]
	cmp	r0, #0
	beq	.L8426
	ldr	r1, [r1, #288]
	lsr	r1, r1, ip
	tst	r1, #1
	beq	.L8426
	and	r3, r3, #15
	mov	r1, r6
	add	r3, r8, r3
	ldrb	r2, [r3, #-3852]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L8426
.L8454:
	ldr	r8, [r1]
	ldr	r2, [r1, #48]
	cmp	r2, #3
	bls	.L8416
	movw	r9, #:lower16:.LANCHOR3
	add	r6, r8, #1
	movt	r9, #:upper16:.LANCHOR3
	rsb	r8, r8, #6
	b	.L8423
.L8422:
	add	r3, r8, r6
	add	r6, r6, #4
	cmp	r3, r2
	bcs	.L8416
.L8423:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8422
	ldr	r1, [r4]
	lsr	ip, r3, #4
	add	r0, ip, #40
	ldr	r0, [r1, r0, lsl #2]
	cmp	r0, #0
	beq	.L8422
	ldr	r1, [r1, #288]
	lsr	r1, r1, ip
	tst	r1, #1
	beq	.L8422
	and	r3, r3, #15
	mov	r1, r6
	add	r3, r9, r3
	ldrb	r2, [r3, #-3852]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L8422
.L8457:
	ldr	r0, [r5]
	b	.L8425
.L8455:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	f_midi_transmit
	.fnend
	.size	f_midi_complete, .-f_midi_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	transport_store, %function
transport_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r1, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r1, #2320]
	.pad #44
	sub	sp, sp, #44
	str	r3, [sp, #4]
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L8555
	movw	r1, #:lower16:.LC264
	mov	r0, r2
	movt	r1, #:upper16:.LC264
	add	r2, sp, #16
	bl	sscanf
	ldr	r3, [sp, #16]
	ldr	r6, [r4, #352]
	cmp	r3, #0
	moveq	r5, #3
	movne	r5, #2
	cmp	r6, r5
	beq	.L8556
	mov	r3, #0
	cmp	r6, #0
	str	r3, [r4, #352]
	beq	.L8463
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8464
	blx	r3
.L8464:
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8465
	blx	r3
.L8465:
	cmp	r6, #2
	beq	.L8466
	cmp	r6, #3
	bne	.L8463
	add	r0, r4, #144
	add	r9, r4, #356
	bl	tasklet_kill
	add	r0, r4, #124
	add	r6, r4, #96
	bl	tasklet_kill
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	str	r0, [sp, #8]
	cmp	r6, r3
	beq	.L8476
	mov	r8, #256
	mov	r7, #512
.L8477:
	ldm	r3, {r1, r2}
	mov	r10, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	fp, [r4, #80]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #96]
	cmp	r6, r3
	bne	.L8477
.L8476:
	ldr	r3, [r4, #104]
	add	r6, r4, #104
	cmp	r6, r3
	beq	.L8478
	mov	r8, #256
	mov	r7, #512
.L8479:
	ldm	r3, {r1, r2}
	mov	r10, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	fp, [r4, #84]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #104]
	cmp	r6, r3
	bne	.L8479
.L8478:
	ldr	r3, [r4, #112]
	add	r6, r4, #112
	cmp	r6, r3
	beq	.L8480
	mov	r8, #256
	mov	r7, #512
.L8481:
	ldm	r3, {r1, r2}
	mov	r10, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	fp, [r4, #84]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #112]
	cmp	r6, r3
	bne	.L8481
.L8480:
	mov	r0, r9
	ldr	r1, [sp, #8]
	bl	_raw_spin_unlock_irqrestore
.L8463:
	cmp	r5, #2
	str	r5, [r4, #352]
	beq	.L8509
.L8564:
	cmp	r5, #3
	bne	.L8557
	ldr	r3, [r4, #164]
	tst	r3, #1
	beq	.L8558
.L8494:
	movw	r8, #:lower16:kmalloc_caches
	movw	r9, #:lower16:rmnet_mux_smd_complete_epout
	movt	r8, #:upper16:kmalloc_caches
	movt	r9, #:upper16:rmnet_mux_smd_complete_epout
	mov	r7, #8
.L8501:
	ldr	r6, [r4, #80]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #2048
	bne	.L8559
.L8486:
	ldr	r0, [sp, #4]
.L8458:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8509:
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epout
	mov	r6, #16
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epout
	add	r5, r4, #208
.L8483:
	ldr	r0, [r4, #80]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L8486
	cmn	r0, #4096
	bhi	.L8486
	str	r7, [r0, #28]
	ldr	r2, [r4, #212]
	subs	r6, r6, #1
	str	r3, [r4, #212]
	str	r5, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	bne	.L8483
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epin
	mov	r6, #100
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epin
	add	r8, r4, #184
.L8488:
	ldr	r0, [r4, #84]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L8486
	cmn	r0, #4096
	bhi	.L8486
	str	r7, [r0, #28]
	ldr	r2, [r4, #188]
	subs	r6, r6, #1
	str	r3, [r4, #188]
	str	r8, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	bne	.L8488
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L8486
	ldr	r3, [r4, #76]
	add	r8, r4, #356
	mov	r0, r8
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #208]
	mov	r7, r0
	cmp	r5, r6
	beq	.L8489
	mov	r10, #256
	mov	r9, #512
	mov	r1, r0
	b	.L8505
.L8492:
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #208]
	mov	r1, r0
	cmp	r5, r6
	beq	.L8560
.L8505:
	ldrd	r2, [r6]
	mov	r0, r8
	sub	r7, r6, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r6]
	str	r9, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #208
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	mov	r1, r7
	subs	r7, r0, #0
	mov	ip, #2048
	mov	r2, #208
	beq	.L8561
	ldr	r0, [r7, #160]
	ldr	r3, [r7, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r7, #160]
	str	r3, [r7, #172]
	str	r3, [r6, #-36]
	str	ip, [r6, #-32]
	str	r7, [r6, #-4]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	mov	r0, r8
	beq	.L8492
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
.L8491:
	ldr	r3, [sp, #8]
	movw	r1, #:lower16:.LC166
	mov	r2, fp
	movt	r1, #:upper16:.LC166
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #212]
	str	r6, [r4, #212]
	str	r5, [r6]
	str	r3, [r6, #4]
	str	r6, [r3]
.L8489:
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L8486
.L8559:
	str	r2, [r5, #4]
	ldr	r3, [r8, #44]
	mov	ip, #16
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L8500
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L8500
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L8486
.L8500:
	cmn	r5, #4096
	mov	r1, #2048
	add	r2, r5, #36
	add	r0, r4, #104
	bhi	.L8486
	str	r1, [r5, #4]
	subs	r7, r7, #1
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	ldr	r3, [r4, #108]
	str	r2, [r4, #108]
	str	r0, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bne	.L8501
	movw	r9, #:lower16:rmnet_mux_smd_complete_epin
	mov	r6, r1
	movt	r9, #:upper16:rmnet_mux_smd_complete_epin
	mov	r10, #8
.L8504:
	ldr	r7, [r4, #84]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L8486
	str	r6, [r5, #4]
	ldr	r3, [r8, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L8503
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L8503
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L8486
.L8466:
	add	r3, r4, #356
	add	r7, r4, #184
	mov	r0, r3
	mov	r6, #0
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #184]
	str	r6, [r4, #300]
	str	r0, [sp, #12]
	cmp	r7, r3
	beq	.L8468
	mov	fp, #256
	mov	r10, #512
.L8469:
	ldm	r3, {r1, r2}
	mov	r8, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	str	r6, [r8, #-36]!
	ldr	r9, [r4, #80]
	bl	kfree
	mov	r1, r8
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #184]
	cmp	r3, r7
	bne	.L8469
.L8468:
	ldr	r3, [r4, #208]
	add	r6, r4, #208
	cmp	r6, r3
	beq	.L8470
	mov	fp, #256
	mov	r10, #512
	mov	r7, #0
.L8471:
	ldm	r3, {r1, r2}
	mov	r8, r3
	mov	r0, #0
	str	r2, [r1, #4]
	str	r1, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	str	r7, [r8, #-36]!
	ldr	r9, [r4, #84]
	bl	kfree
	mov	r1, r8
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #208]
	cmp	r3, r6
	bne	.L8471
.L8470:
	ldr	r3, [r4, #192]
	add	r6, r4, #192
	cmp	r6, r3
	beq	.L8472
	mov	r7, #0
	b	.L8473
.L8562:
	ldr	r2, [r4, #200]
	sub	r2, r2, #1
	str	r2, [r4, #200]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #192]
	cmp	r3, r6
	beq	.L8472
.L8473:
	subs	r0, r3, #0
	bne	.L8562
.L8472:
	ldr	r3, [r4, #216]
	add	r6, r4, #216
	cmp	r6, r3
	beq	.L8474
	mov	r7, #0
	b	.L8475
.L8563:
	ldr	r2, [r4, #224]
	sub	r2, r2, #1
	str	r2, [r4, #224]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #216]
	cmp	r6, r3
	beq	.L8474
.L8475:
	subs	r0, r3, #0
	bne	.L8563
.L8474:
	ldrd	r0, [sp, #8]
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #2
	str	r5, [r4, #352]
	bne	.L8564
	b	.L8509
.L8503:
	cmn	r5, #4096
	add	r2, r5, #36
	add	r1, r4, #96
	bhi	.L8486
	str	r9, [r5, #28]
	subs	r10, r10, #1
	str	r4, [r5, #32]
	ldr	r3, [r4, #100]
	str	r2, [r4, #100]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bne	.L8504
	mov	r0, r4
	bl	rmnet_mux_smd_start_rx
	b	.L8486
.L8558:
	movw	r2, #:lower16:.LANCHOR4
	movw	r3, #:lower16:rmnet_mux_smd_notify
	ldr	r5, [r4, #76]
	movt	r2, #:upper16:.LANCHOR4
	movt	r3, #:upper16:rmnet_mux_smd_notify
	ldr	r0, [r2, #-4004]
	add	r1, r4, #120
	mov	r2, r4
	bl	smd_open
	cmp	r0, #0
	bne	.L8565
	ldr	r3, [r4, #164]
	ands	r3, r3, #1
	bne	.L8494
	mov	r2, sp
	str	r3, [sp, #20]
	add	r5, r4, #172
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #32
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L8498
.L8566:
	bl	schedule
.L8498:
	mov	r2, #2
	add	r1, sp, #20
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r4, #164]
	tst	r3, #1
	beq	.L8566
	add	r1, sp, #20
	mov	r0, r5
	bl	finish_wait
	b	.L8494
.L8565:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC144
	movt	r1, #:upper16:.LC144
	add	r0, r0, #32
	bl	dev_err
	b	.L8486
.L8560:
	mov	r7, r0
	b	.L8489
.L8557:
	movw	r0, #:lower16:.LC486
	ldr	r1, .L8567
	movt	r0, #:upper16:.LC486
	bl	printk
	b	.L8486
.L8556:
	movw	r3, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LC485
	ldr	r1, .L8567
	movt	r3, #:upper16:.LANCHOR2
	movt	r0, #:upper16:.LC485
	add	r3, r3, r6, lsl #2
	ldr	r3, [r3, #672]
	mov	r2, r3
	bl	printk
	mov	r0, #0
	b	.L8458
.L8555:
	movw	r0, #:lower16:.LC484
	ldr	r1, .L8567
	movt	r0, #:upper16:.LC484
	bl	printk
	mvn	r0, #21
	b	.L8458
.L8561:
	mov	r0, r8
	mvn	fp, #11
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L8491
.L8568:
	.align	2
.L8567:
	.word	.LANCHOR3-3836
	.fnend
	.size	transport_store, .-transport_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_close, %function
gs_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #280]
	.pad #24
	sub	sp, sp, #24
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #1
	beq	.L8570
	cmp	r3, #0
	subne	r3, r3, #1
	strne	r3, [r4, #12]
	beq	.L8603
.L8572:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8603:
	movw	r0, #:lower16:.LC430
	movw	r1, #890
	movt	r0, #:upper16:.LC430
	bl	warn_slowpath_null
	b	.L8572
.L8570:
	ldr	r0, [r4, #4]
	mov	r2, #0
	str	r2, [r4, #12]
	strb	r3, [r4, #16]
	cmp	r0, r2
	beq	.L8588
	ldr	r3, [r0, #112]
	cmp	r3, #0
	beq	.L8599
	blx	r3
.L8599:
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r0, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L8604
.L8589:
	str	r0, [r4, #100]
.L8574:
	mov	ip, #0
	mov	r2, #1
	mov	r3, ip
	mov	r1, r2
	str	ip, [r5, #280]
	add	r0, r4, #20
	str	ip, [r4, #8]
	strb	ip, [r4, #16]
	bl	__wake_up
	b	.L8572
.L8604:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L8602
	ldr	r1, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L8581
.L8602:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
.L8580:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L8588
	ldr	r0, [r4, #104]
	b	.L8589
.L8588:
	ldr	r0, [r4, #96]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L8574
.L8581:
	mov	r0, r4
	add	r7, r4, #108
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	movw	r1, #:lower16:autoremove_wake_function
	bic	r2, r3, #8128
	movt	r1, #:upper16:autoremove_wake_function
	bic	r2, r2, #63
	mov	r3, #0
	ldr	r0, [r2, #12]
	mov	r6, r2
	movw	r8, #1500
	add	r2, sp, #16
	str	r3, [sp, #4]
	strd	r0, [sp, #8]
	str	r2, [sp, #16]
	str	r2, [sp, #20]
.L8587:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r7
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L8600
	ldr	r1, [r4, #92]
	mov	r0, r4
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L8583
.L8601:
	bl	_raw_spin_unlock_irq
.L8584:
	add	r1, sp, #4
	mov	r0, r7
	bl	finish_wait
	b	.L8580
.L8583:
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #12]
	mov	r0, r8
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8584
	bl	schedule_timeout
	subs	r8, r0, #0
	bne	.L8587
	mov	r0, r4
	bl	_raw_spin_lock_irq
.L8600:
	mov	r0, r4
	b	.L8601
	.fnend
	.size	gs_close, .-gs_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_suspend, %function
android_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r8, r0, #32
	mov	r0, r8
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	dev_get_drvdata
	ldr	r3, [r5, #2228]
	ldr	r2, .L8625
	sub	r4, r3, #208
	cmp	r3, r2
	bne	.L8608
	b	.L8606
.L8624:
	ldr	r3, [r4, #208]
	cmp	r3, r2
	sub	r4, r3, #208
	beq	.L8606
.L8608:
	ldr	r3, [r3, #-200]
	cmp	r0, r3
	bne	.L8624
.L8606:
	add	r7, r0, #60
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #54]	@ zero_extendqisi2
	mov	r9, r0
	cmp	r3, #0
	bne	.L8609
	mov	r3, #1
	add	r0, r4, #180
	strb	r3, [r4, #54]
	bl	schedule_work
.L8609:
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L8610
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #64
	beq	.L8610
.L8611:
	ldr	r2, [r4, #48]
	mov	r0, r4
	cmp	r2, #0
	beq	.L8612
	blx	r2
	ldr	r3, [r7, #12]
	ldr	r4, [r4, #64]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #64
	bne	.L8611
.L8610:
	ldr	r3, [r5, #2316]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8614
	mov	r0, r7
	blx	r3
.L8614:
	ldrb	r3, [r7, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #16]
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L8605
	mov	r0, r6
	ldrd	r4, [sp]
	mov	r1, #2
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3
.L8612:
	ldr	r4, [r4, #64]
	cmp	r3, r4
	sub	r4, r4, #64
	bne	.L8611
	b	.L8610
.L8605:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8626:
	.align	2
.L8625:
	.word	.LANCHOR1+2228
	.fnend
	.size	android_suspend, .-android_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_send_modem_ctrl_bits, %function
acm_send_modem_ctrl_bits:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	strh	r1, [r0, #170]	@ movhi
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r5, [r4, #156]
	cmp	r5, #0
	bne	.L8631
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
.L8629:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8631:
	mov	r1, #0
	mov	r0, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	strb	r1, [r4, #144]
	mov	ip, #2
	str	r1, [r4, #156]
	ldr	r3, [r5]
	str	r0, [r5, #4]
	mov	r0, r6
	strb	r2, [r3]
	strb	r8, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r5
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	bge	.L8629
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC408
	mov	r3, r7
	movt	r1, #:upper16:.LC408
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err
	str	r5, [r4, #156]
	b	.L8629
	.fnend
	.size	acm_send_modem_ctrl_bits, .-acm_send_modem_ctrl_bits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_disable, %function
ffs_func_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #-44]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r6, #136]
	cmp	r9, #0
	beq	.L8633
	ldr	r3, [r9, #8]
	mov	r8, #1
	mov	r7, #0
	ldr	r4, [r9, #12]
	add	r0, r3, #28
	ldr	r5, [r3, #220]
	ldrh	fp, [r3, #184]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
.L8634:
	str	r8, [r5, #36]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L8635
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	r5, r5, #60
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	fp, fp, #1
	str	r7, [r3]
	str	r7, [r5, #-16]
	bne	.L8634
.L8637:
	ldr	r0, [r9, #8]
	mov	r1, r10
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r6, #136]
.L8633:
	ldr	r7, [r6, #96]
	cmp	r7, #2
	bne	.L8632
	mov	r3, #0
	add	r4, r6, #120
	mov	r0, r4
	str	r3, [r6, #136]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #100]
	mov	r5, r0
	add	r0, r6, #104
	ldrh	r2, [r6, #108]
	mov	lr, r0
	cmp	r3, #1
	streq	r7, [r6, #100]
	cmp	r2, #0
	beq	.L8643
	add	r2, r2, r0
	mov	r3, r0
.L8642:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L8642
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L8640:
	add	r3, r6, r2
	strh	r1, [r6, #108]	@ movhi
	mov	r0, #3
	mov	r2, #1
	mov	r1, r0
	strb	r0, [r3, #104]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r5
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L8635:
	subs	fp, fp, #1
	str	r3, [r5, #44]
	add	r4, r4, #28
	add	r5, r5, #60
	bne	.L8634
	b	.L8637
.L8643:
	mov	r1, #1
	b	.L8640
.L8632:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_func_disable, .-ffs_func_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_send_break, %function
acm_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	mov	r0, r6
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock
	ldr	r5, [r4, #156]
	cmp	r5, #0
	bne	.L8657
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
.L8652:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8657:
	mov	r1, #0
	mov	r0, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	strb	r1, [r4, #144]
	mov	ip, #2
	str	r1, [r4, #156]
	ldr	r3, [r5]
	str	r0, [r5, #4]
	mov	r0, r6
	strb	r2, [r3]
	strb	r8, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r5
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	bge	.L8652
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC408
	mov	r3, r7
	movt	r1, #:upper16:.LC408
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err
	str	r5, [r4, #156]
	b	.L8652
	.fnend
	.size	acm_send_break, .-acm_send_break
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disconnect, %function
acm_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r5, r0, #148
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock
	ldr	r6, [r4, #156]
	cmp	r6, #0
	moveq	r3, #1
	strbeq	r3, [r4, #144]
	bne	.L8662
.L8660:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L8662:
	mov	r1, #0
	mov	r0, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	strb	r1, [r4, #144]
	mov	ip, #2
	str	r1, [r4, #156]
	ldr	r3, [r6]
	str	r0, [r6, #4]
	mov	r0, r5
	strb	r2, [r3]
	strb	r8, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r5
	bl	_raw_spin_lock
	cmp	r7, #0
	bge	.L8660
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC408
	mov	r3, r7
	movt	r1, #:upper16:.LC408
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err
	str	r6, [r4, #156]
	b	.L8660
	.fnend
	.size	acm_disconnect, .-acm_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_connect, %function
acm_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r5, r0, #148
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock
	ldr	r6, [r4, #156]
	cmp	r6, #0
	moveq	r3, #1
	strbeq	r3, [r4, #144]
	bne	.L8667
.L8665:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L8667:
	mov	r1, #0
	mov	r0, #10
	ldr	r7, [r4, #152]
	mvn	r2, #94
	mov	r8, #32
	strb	r1, [r4, #144]
	mov	ip, #2
	str	r1, [r4, #156]
	ldr	r3, [r6]
	str	r0, [r6, #4]
	mov	r0, r5
	strb	r2, [r3]
	strb	r8, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, r8
	mov	r0, r7
	mov	r1, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r5
	bl	_raw_spin_lock
	cmp	r7, #0
	bge	.L8665
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC408
	mov	r3, r7
	movt	r1, #:upper16:.LC408
	ldrb	r2, [r4, #138]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err
	str	r6, [r4, #156]
	b	.L8665
	.fnend
	.size	acm_connect, .-acm_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_start_io, %function
rmnet_sdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #180
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #184]
	mov	r7, r0
	cmp	r5, #0
	beq	.L8696
	ldr	r3, [r4, #308]
	tst	r3, #2
	beq	.L8680
	ldr	r3, [r4, #312]
	tst	r3, #2
	beq	.L8680
	movw	r9, #:lower16:rmnet_sdio_complete_epout
	mov	r5, #16
	movt	r9, #:upper16:rmnet_sdio_complete_epout
	add	r8, r4, #152
.L8672:
	ldr	r0, [r4, #80]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L8687
	cmn	r0, #4096
	bhi	.L8695
	str	r9, [r0, #28]
	ldr	r2, [r4, #156]
	subs	r5, r5, #1
	str	r3, [r4, #156]
	str	r8, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	ldr	r3, [r4, #160]
	add	r3, r3, #1
	str	r3, [r4, #160]
	bne	.L8672
	movw	r9, #:lower16:rmnet_sdio_complete_epin
	mov	r5, #200
	movt	r9, #:upper16:rmnet_sdio_complete_epin
	add	r10, r4, #124
.L8678:
	ldr	r0, [r4, #84]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L8687
	cmn	r0, #4096
	bhi	.L8695
	str	r9, [r0, #28]
	ldr	r2, [r4, #128]
	subs	r5, r5, #1
	str	r3, [r4, #128]
	str	r10, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	ldr	r3, [r4, #132]
	add	r3, r3, #1
	str	r3, [r4, #132]
	bne	.L8678
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #76]
	ldr	r3, [r4, #184]
	str	r2, [sp, #4]
	cmp	r3, #0
	beq	.L8697
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #152]
	mov	r7, r0
	cmp	r8, r5
	beq	.L8680
	mov	fp, #256
	mov	r9, #512
	b	.L8684
.L8683:
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #152]
	mov	r7, r0
	cmp	r8, r5
	beq	.L8680
.L8684:
	ldrd	r2, [r5]
	mov	r1, r7
	mov	r0, r6
	sub	r7, r5, #36
	str	r3, [r2, #4]
	str	r2, [r3]
	str	fp, [r5]
	str	r9, [r5, #4]
	ldr	r3, [r4, #160]
	sub	r3, r3, #1
	str	r3, [r4, #160]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #32
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	mov	r1, r7
	subs	r7, r0, #0
	mov	ip, #2048
	mov	r2, #32
	beq	.L8698
	ldr	r0, [r7, #160]
	ldr	r3, [r7, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r7, #160]
	str	r3, [r7, #172]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r7, [r5, #-4]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	mov	r0, r6
	beq	.L8683
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
.L8682:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC0
	mov	r2, r10
	movt	r1, #:upper16:.LC0
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #156]
	str	r5, [r4, #156]
	str	r8, [r5]
	str	r3, [r5, #4]
	str	r5, [r3]
	ldr	r3, [r4, #160]
	add	r3, r3, #1
	str	r3, [r4, #160]
.L8680:
	mov	r1, r7
	mov	r0, r6
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore
.L8668:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8696:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L8668
.L8687:
	mvn	r5, #11
.L8676:
.L8675:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	rmnet_sdio_free_buf
	mov	r3, #0
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	b	.L8668
.L8698:
	mov	r0, r6
	mvn	r10, #11
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L8682
.L8697:
	movw	r0, #:lower16:.LC487
	ldr	r1, .L8699
	movt	r0, #:upper16:.LC487
	bl	printk
	b	.L8668
.L8695:
	mov	r5, r0
	b	.L8676
.L8700:
	.align	2
.L8699:
	.word	.LANCHOR3-3820
	.fnend
	.size	rmnet_sdio_start_io, .-rmnet_sdio_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_open_sdio_work, %function
rmnet_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #-168]
	ldr	r3, [r0, #68]
	ldr	r3, [r0, #64]
	ldr	r3, [r0, #64]
	tst	r3, #2
	beq	.L8702
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L8717
.L8702:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r2, [r3, #-4000]
	add	r2, r2, #1
	cmp	r2, #90
	str	r2, [r3, #-4000]
	ble	.L8705
	ldr	r3, [r4, #68]
	tst	r3, #2
	beq	.L8718
	ldr	r3, [r4, #64]
	tst	r3, #2
	beq	.L8719
.L8701:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8719:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC490
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC490
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r0, r0, #32
	b	dev_err
.L8718:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC489
	movt	r1, #:upper16:.LC489
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #64]
	tst	r3, #2
	bne	.L8701
	b	.L8719
.L8705:
	mov	r1, r4
	ldr	r0, [r4, #-52]
	mov	r2, #200
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work
.L8717:
	sub	r0, r0, #244
	bl	rmnet_sdio_start_io
	ldr	r3, [r4, #-60]
	cmp	r3, #0
	beq	.L8703
	add	r1, r4, #80
	ldr	r0, [r4, #-52]
	bl	queue_work
.L8703:
	movw	r4, #:lower16:.LANCHOR4
	movw	r0, #:lower16:.LC488
	ldr	r1, .L8720
	movt	r4, #:upper16:.LANCHOR4
	movt	r0, #:upper16:.LC488
	ldr	r2, [r4, #-4000]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #-4000]
	b	.L8701
.L8721:
	.align	2
.L8720:
	.word	.LANCHOR3-3800
	.fnend
	.size	rmnet_open_sdio_work, .-rmnet_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_unbind, %function
adb_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r2, #0
	mov	r5, r1
	mov	r1, #1
	strd	r6, [sp, #8]
	mov	r3, r2
	strd	r8, [sp, #16]
	add	r0, r5, #120
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	str	r2, [r5, #92]
	mov	r2, r1
	str	r1, [r5, #96]
	mov	r1, #3
	bl	__wake_up
	ldr	r4, [r5, #144]
	cmp	r4, #0
	beq	.L8723
	ldr	r6, [r5, #88]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L8723:
	add	r8, r5, #112
	add	r7, r5, #80
	mov	r10, #256
	mov	r9, #512
	b	.L8724
.L8726:
	ldr	fp, [r5, #84]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L8724:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #112]
	mov	r3, r0
	mov	r0, r7
	mov	r1, r3
	cmp	r8, r4
	sub	r6, r4, #36
	beq	.L8731
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L8726
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8731:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	adb_function_unbind, .-adb_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start, %function
gbam_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L8746
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L8747
	ldr	r0, [r3, #76]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L8748
.L8737:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L8746:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L8749
	ldr	r0, [r3, #80]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L8737
	movw	r0, #:lower16:.LC209
	ldr	r1, .L8750
	movt	r0, #:upper16:.LC209
	bl	printk
	b	.L8737
.L8748:
	movw	r0, #:lower16:.LC209
	ldr	r1, .L8750+4
	movt	r0, #:upper16:.LC209
	bl	printk
	b	.L8737
.L8747:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L8750+4
	movw	r0, #:lower16:.LC17
.L8745:
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC17
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L8749:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC17
	ldr	r1, .L8750
	b	.L8745
.L8751:
	.align	2
.L8750:
	.word	.LANCHOR2+1932
	.word	.LANCHOR2+1956
	.fnend
	.size	gbam_start, .-gbam_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_disable, %function
fsg_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #86]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L8753
	ldr	r0, [r0, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #92]
	bfc	r3, #0, #1
	strb	r3, [r4, #86]
	str	r1, [r2]
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
.L8753:
	tst	r3, #2
	beq	.L8754
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #96]
	bfc	r3, #1, #1
	strb	r3, [r4, #86]
	str	r1, [r2]
.L8754:
	ldr	r3, [r4, #80]
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r4, [r4, #80]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L8756
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L8756
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L8756:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	fsg_disable, .-fsg_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_set_alt, %function
ffs_func_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmn	r2, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [r0, #-44]
	beq	.L8769
	ldrh	ip, [r9, #182]
	ldr	r4, [r0, #-8]
	cmp	ip, #0
	beq	.L8793
	uxtb	r1, r1
	mov	r5, r4
.L8772:
	mov	r3, r5
	ldrsh	lr, [r3], #2
	cmp	lr, #0
	blt	.L8771
	cmp	lr, r1
	beq	.L8810
.L8771:
	subs	ip, ip, #1
	mov	r5, r3
	bne	.L8772
.L8793:
	mvn	r5, #32
.L8768:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8810:
	subs	r5, r5, r4
	asrmi	r5, r5, #1
	bmi	.L8768
.L8769:
	ldr	r8, [r9, #136]
	mov	r6, r2
	str	r0, [sp]
	cmp	r8, #0
	beq	.L8773
	ldr	r3, [r8, #8]
	mov	r7, #1
	mov	r5, #0
	ldr	r4, [r8, #12]
	add	r0, r3, #28
	ldr	fp, [r3, #220]
	add	r4, r4, #28
	ldrh	r10, [r3, #184]
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
.L8774:
	str	r7, [fp, #36]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L8775
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	fp, fp, #60
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	r10, r10, #1
	str	r5, [r3]
	str	r5, [fp, #-16]
	bne	.L8774
.L8777:
	ldr	r0, [r8, #8]
	ldr	r1, [sp, #4]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r9, #136]
.L8773:
	ldr	r5, [r9, #96]
	cmp	r5, #2
	bne	.L8794
	cmn	r6, #1
	beq	.L8811
	ldr	r2, [sp]
	sub	r3, r2, #52
	str	r3, [r9, #136]
	ldr	fp, [r2, #-44]
	ldr	r4, [r2, #-40]
	ldr	r6, [fp, #220]
	add	r0, fp, #28
	ldrh	r10, [fp, #184]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r6, r6, #24
	b	.L8786
.L8813:
	str	r8, [r6, #20]
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	add	r6, r6, #60
	lsr	ip, ip, #7
	strb	ip, [r6, #-27]
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	and	ip, ip, r1
	sub	ip, ip, r2
	clz	ip, ip
	lsr	ip, ip, #5
	strb	ip, [r6, #-26]
	bl	__wake_up
	subs	r10, r10, #1
	beq	.L8812
.L8786:
	ldr	r3, [fp]
	sub	r8, r4, #28
	ldr	r3, [r3, #16]
	cmp	r3, #5
	subne	r3, r3, #3
	moveq	r3, #2
	clzne	r3, r3
	lsrne	r3, r3, #5
	add	r3, r3, #2
	ldr	r7, [r8, r3, lsl #2]
	cmp	r7, #0
	beq	.L8784
	ldr	r3, [r4, #-28]
	add	r4, r4, #28
	str	r8, [r3]
	ldr	r3, [r4, #-56]
	str	r7, [r3, #28]
	ldr	r3, [r4, #-56]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #1
	mov	r1, #3
	mov	r0, r6
	mov	r3, r5
	beq	.L8813
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-44]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	blt	.L8768
.L8792:
	add	r4, r9, #120
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #100]
	mov	r6, r0
	add	r0, r9, #104
	ldrh	r2, [r9, #108]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r9, #100]
	cmp	r2, #0
	beq	.L8797
	add	r2, r2, r0
	mov	r3, r0
.L8791:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L8791
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L8789:
	add	r3, r9, r2
	strh	r1, [r9, #108]	@ movhi
	mov	r0, #2
	mov	r2, #1
	mov	r1, #3
	strb	r0, [r3, #104]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L8768
.L8775:
	subs	r10, r10, #1
	str	r3, [fp, #44]
	add	r4, r4, #28
	add	fp, fp, #60
	bne	.L8774
	b	.L8777
.L8811:
	mov	r3, #0
	add	r4, r9, #120
	mov	r0, r4
	str	r3, [r9, #136]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #100]
	mov	r6, r0
	add	r0, r9, #104
	ldrh	r2, [r9, #108]
	mov	lr, r0
	cmp	r3, #1
	streq	r5, [r9, #100]
	cmp	r2, #0
	beq	.L8795
	add	r2, r2, r0
	mov	r3, r0
.L8782:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L8782
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L8780:
	add	r3, r9, r2
	strh	r1, [r9, #108]	@ movhi
	mov	r0, #3
	mov	r2, #1
	mov	r1, r0
	mov	r5, #0
	strb	r0, [r3, #104]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L8768
.L8784:
	ldr	r3, [sp]
	mvn	r5, #21
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-44]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	b	.L8768
.L8812:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-44]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	b	.L8792
.L8797:
	mov	r1, #1
	b	.L8789
.L8795:
	mov	r1, #1
	b	.L8780
.L8794:
	mvn	r5, #18
	b	.L8768
	.fnend
	.size	ffs_func_set_alt, .-ffs_func_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_peer_reset_cb, %function
gbam_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #12]
	cmp	r3, #0
	moveq	r5, r3
	beq	.L8815
	ldr	r5, [r3, #76]
	cmp	r5, #0
	beq	.L8815
	ldr	r5, [r5]
	cmp	r5, #0
	beq	.L8815
	ldr	r0, [r3, #80]
	mov	r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #12]
	mov	r3, #0
	ldr	r2, [r2, #76]
	str	r3, [r2]
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #80]
	str	r3, [r2]
.L8815:
	mov	r0, #1
	bl	msm_hw_bam_disable
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	bne	.L8842
	bl	msm_hw_bam_disable
.L8817:
	cmp	r5, #0
	beq	.L8818
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #76]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L8843
	ldr	r3, [r3, #76]
	str	r4, [r3]
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #80]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L8844
	ldr	r3, [r3, #80]
	add	r5, r4, #4
	mov	r0, r5
	str	r4, [r3]
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L8845
	ldr	r0, [r3, #80]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L8846
.L8824:
	mov	r0, r5
	bl	_raw_spin_unlock
.L8823:
	add	r5, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L8847
	ldr	r0, [r3, #76]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L8848
.L8826:
	mov	r0, r5
	bl	_raw_spin_unlock
.L8818:
	ldr	r3, [r4, #132]
	cmp	r3, #6
	beq	.L8849
.L8831:
	mov	r5, #0
.L8814:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8849:
	ldr	r5, [r4]
	cmp	r5, #0
	bne	.L8831
	mov	r1, r5
	mov	r0, r5
	bl	usb_bam_register_peer_reset_cb
	b	.L8814
.L8842:
	movw	r0, #:lower16:.LC491
	ldr	r1, .L8850
	movt	r0, #:upper16:.LC491
	bl	printk
	b	.L8817
.L8846:
	movw	r0, #:lower16:.LC209
	ldr	r1, .L8850+4
	movt	r0, #:upper16:.LC209
	bl	printk
	b	.L8824
.L8848:
	movw	r0, #:lower16:.LC209
	ldr	r1, .L8850+8
	movt	r0, #:upper16:.LC209
	bl	printk
	b	.L8826
.L8847:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC17
	ldr	r1, .L8850+8
	movt	r0, #:upper16:.LC17
	bl	printk
	b	.L8818
.L8844:
	movw	r0, #:lower16:.LC493
	ldr	r2, [r3, #80]
	movt	r0, #:upper16:.LC493
	ldr	r1, .L8850
	bl	printk
	ldr	r3, [r4, #12]
	mov	r2, #0
	ldr	r3, [r3, #76]
	str	r2, [r3]
	b	.L8814
.L8843:
	movw	r0, #:lower16:.LC492
	ldr	r1, .L8850
	ldr	r2, [r3, #76]
	movt	r0, #:upper16:.LC492
	bl	printk
	b	.L8814
.L8845:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC17
	ldr	r1, .L8850+4
	movt	r0, #:upper16:.LC17
	bl	printk
	b	.L8823
.L8851:
	.align	2
.L8850:
	.word	.LANCHOR3-3776
	.word	.LANCHOR2+1932
	.word	.LANCHOR2+1956
	.fnend
	.size	gbam_peer_reset_cb, .-gbam_peer_reset_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_unbind, %function
diag_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L8866
	cmp	r3, #2
	bhi	.L8867
.L8854:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r3, [r4, #116]
	cmp	r3, #0
	beq	.L8855
	ldr	r2, [r3, #20]
	cmp	r2, r4
	moveq	r2, #0
	streq	r2, [r3, #20]
.L8855:
	ldrd	r2, [r4, #132]
	mov	r9, #256
	mov	r8, #512
	add	r6, r4, #100
	mov	r5, r4
	mov	r0, r6
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4, #132]
	str	r8, [r4, #136]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]!
	mov	r7, r0
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L8856
.L8860:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	mov	r10, r2
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r10
	mov	r3, r10
	ldr	r2, [r10]
	bne	.L8860
.L8856:
	mov	r5, r4
	ldr	r3, [r5, #84]!
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L8858
	mov	r10, r2
	mov	r9, #256
	mov	r8, #512
	b	.L8859
.L8861:
	mov	r10, r2
.L8859:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r4, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r10
	mov	r3, r10
	ldr	r2, [r10]
	bne	.L8861
.L8858:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L8866:
	mov	r5, r0
	ldr	r0, [r1, #16]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L8854
.L8867:
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L8854
	.fnend
	.size	diag_function_unbind, .-diag_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_send_modem_ctrl_bits, %function
gser_send_modem_ctrl_bits:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	strh	r1, [r0, #170]	@ movhi
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r5, #0
	bne	.L8872
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
.L8870:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8872:
	ldr	r3, [r4, #20]
	mov	r1, #0
	mov	lr, #32
	mov	r2, #10
	mvn	r10, #94
	ldr	ip, [r4, #152]
	mov	r7, #2
	ldr	r9, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r5]
	mov	r0, ip
	str	r2, [r5, #4]
	mov	r2, lr
	strb	r10, [r3]
	strb	lr, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	lr, [r4, #136]	@ zero_extendqisi2
	strh	lr, [r3, #4]	@ unaligned
	strb	r7, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	lr, [r4, #170]	@ unaligned
	mov	r1, r5
	strh	lr, [r3, #8]	@ unaligned
	ldr	r3, [ip, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bge	.L8870
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC409
	mov	r3, r7
	movt	r1, #:upper16:.LC409
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	str	r5, [r4, #156]
	b	.L8870
	.fnend
	.size	gser_send_modem_ctrl_bits, .-gser_send_modem_ctrl_bits
	.align	2
	.global	gser_send_carrier_detect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_send_carrier_detect, %function
gser_send_carrier_detect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	mov	r0, r6
	bic	r3, r3, #1
	uxth	r3, r3
	orrne	r3, r3, #1
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r5, #0
	bne	.L8882
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
.L8877:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8882:
	ldr	r3, [r4, #20]
	mov	r1, #0
	mov	lr, #32
	mov	r2, #10
	mvn	r10, #94
	ldr	ip, [r4, #152]
	mov	r7, #2
	ldr	r9, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r5]
	mov	r0, ip
	str	r2, [r5, #4]
	mov	r2, lr
	strb	r10, [r3]
	strb	lr, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	lr, [r4, #136]	@ zero_extendqisi2
	strh	lr, [r3, #4]	@ unaligned
	strb	r7, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	lr, [r4, #170]	@ unaligned
	mov	r1, r5
	strh	lr, [r3, #8]	@ unaligned
	ldr	r3, [ip, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bge	.L8877
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC409
	mov	r3, r7
	movt	r1, #:upper16:.LC409
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	str	r5, [r4, #156]
	b	.L8877
	.fnend
	.size	gser_send_carrier_detect, .-gser_send_carrier_detect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_send_break, %function
gser_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	mov	r0, r6
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r5, #0
	bne	.L8891
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
.L8886:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8891:
	ldr	r3, [r4, #20]
	mov	r1, #0
	mov	lr, #32
	mov	r2, #10
	mvn	r10, #94
	ldr	ip, [r4, #152]
	mov	r7, #2
	ldr	r9, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r5]
	mov	r0, ip
	str	r2, [r5, #4]
	mov	r2, lr
	strb	r10, [r3]
	strb	lr, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	lr, [r4, #136]	@ zero_extendqisi2
	strh	lr, [r3, #4]	@ unaligned
	strb	r7, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	lr, [r4, #170]	@ unaligned
	mov	r1, r5
	strh	lr, [r3, #8]	@ unaligned
	ldr	r3, [ip, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bge	.L8886
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC409
	mov	r3, r7
	movt	r1, #:upper16:.LC409
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	str	r5, [r4, #156]
	b	.L8886
	.fnend
	.size	gser_send_break, .-gser_send_break
	.align	2
	.global	gser_send_ring_indicator
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_send_ring_indicator, %function
gser_send_ring_indicator:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	mov	r0, r6
	bic	r3, r3, #8
	uxth	r3, r3
	orrne	r3, r3, #8
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r5, #0
	bne	.L8901
	mov	r3, #1
	mov	r7, r5
	strb	r3, [r4, #144]
.L8896:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8901:
	ldr	r3, [r4, #20]
	mov	r1, #0
	mov	lr, #32
	mov	r2, #10
	mvn	r10, #94
	ldr	ip, [r4, #152]
	mov	r7, #2
	ldr	r9, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r5]
	mov	r0, ip
	str	r2, [r5, #4]
	mov	r2, lr
	strb	r10, [r3]
	strb	lr, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	lr, [r4, #136]	@ zero_extendqisi2
	strh	lr, [r3, #4]	@ unaligned
	strb	r7, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	lr, [r4, #170]	@ unaligned
	mov	r1, r5
	strh	lr, [r3, #8]	@ unaligned
	ldr	r3, [ip, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bge	.L8896
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC409
	mov	r3, r7
	movt	r1, #:upper16:.LC409
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	str	r5, [r4, #156]
	b	.L8896
	.fnend
	.size	gser_send_ring_indicator, .-gser_send_ring_indicator
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_connect, %function
gser_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	mov	r0, r6
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #156]
	mov	r7, r0
	cmp	r5, #0
	moveq	r3, #1
	strbeq	r3, [r4, #144]
	bne	.L8906
.L8904:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L8906:
	ldr	r3, [r4, #20]
	mov	r1, #0
	mov	lr, #32
	mov	r2, #10
	mvn	r10, #94
	ldr	ip, [r4, #152]
	mov	r9, #2
	ldr	r8, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r5]
	mov	r0, ip
	str	r2, [r5, #4]
	mov	r2, lr
	strb	r10, [r3]
	strb	lr, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	lr, [r4, #136]	@ zero_extendqisi2
	strh	lr, [r3, #4]	@ unaligned
	strb	r9, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	lr, [r4, #170]	@ unaligned
	mov	r1, r5
	strh	lr, [r3, #8]	@ unaligned
	ldr	r3, [ip, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	bge	.L8904
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC409
	movt	r1, #:upper16:.LC409
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	str	r5, [r4, #156]
	b	.L8904
	.fnend
	.size	gser_connect, .-gser_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_disconnect, %function
gser_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	mov	r0, r6
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #156]
	mov	r7, r0
	cmp	r5, #0
	moveq	r3, #1
	strbeq	r3, [r4, #144]
	bne	.L8911
.L8909:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L8911:
	ldr	r3, [r4, #20]
	mov	r1, #0
	mov	lr, #32
	mov	r2, #10
	mvn	r10, #94
	ldr	ip, [r4, #152]
	mov	r9, #2
	ldr	r8, [r3, #24]
	strb	r1, [r4, #144]
	str	r1, [r4, #156]
	ldr	r3, [r5]
	mov	r0, ip
	str	r2, [r5, #4]
	mov	r2, lr
	strb	r10, [r3]
	strb	lr, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	lr, [r4, #136]	@ zero_extendqisi2
	strh	lr, [r3, #4]	@ unaligned
	strb	r9, [r3, #6]
	strb	r1, [r3, #7]
	ldrh	lr, [r4, #170]	@ unaligned
	mov	r1, r5
	strh	lr, [r3, #8]	@ unaligned
	ldr	r3, [ip, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	bge	.L8909
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC409
	movt	r1, #:upper16:.LC409
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	str	r5, [r4, #156]
	b	.L8909
	.fnend
	.size	gser_disconnect, .-gser_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_common_release, %function
fsg_common_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-100]
	cmp	r3, #7
	bne	.L8939
.L8913:
	ldr	r0, [r6, #-112]
	cmp	r0, #0
	beq	.L8917
	ldr	r5, [r6, #-120]
	cmp	r5, #0
	beq	.L8918
	ldr	r7, .L8941
	add	r4, r0, #48
	add	r9, r7, #16
	add	r8, r7, #32
.L8919:
	mov	r1, r7
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r9
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r8
	mov	r0, r4
	bl	device_remove_file
	mov	r0, r4
	ldr	r1, .L8941+4
	bl	device_remove_file
	ldr	r3, [r4, #-48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L8920
	mov	r0, r3
	bl	fput
	mov	r3, #0
	mov	r0, r4
	add	r4, r4, #400
	str	r3, [r4, #-448]
	bl	device_unregister
	subs	r5, r5, #1
	bne	.L8919
.L8922:
	ldr	r0, [r6, #-112]
.L8918:
	bl	kfree
.L8917:
	ldr	r5, [r6, #-144]
	add	r4, r5, #32
	add	r5, r5, #160
.L8923:
	ldr	r0, [r4, #-32]
	add	r4, r4, #32
	bl	kfree
	cmp	r5, r4
	bne	.L8923
	ldr	r0, [r6, #-144]
	bl	kfree
	ldrb	r3, [r6, #-68]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L8940
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8920:
	bl	device_unregister
	subs	r5, r5, #1
	add	r4, r4, #400
	bne	.L8919
	b	.L8922
.L8939:
	sub	r4, r0, #168
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-100]
	mov	r5, r0
	cmp	r3, #6
	bgt	.L8915
	ldr	r3, [r6, #-156]
	mov	r1, #6
	ldr	r2, [r6, #-44]
	str	r1, [r6, #-100]
	str	r3, [r6, #-96]
	cmp	r2, #0
	beq	.L8915
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L8915:
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	sub	r0, r6, #60
	bl	wait_for_completion
	b	.L8913
.L8940:
	sub	r0, r6, #212
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L8942:
	.align	2
.L8941:
	.word	.LANCHOR0+1924
	.word	.LANCHOR0+1972
	.fnend
	.size	fsg_common_release, .-fsg_common_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_init, %function
mass_storage_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 96
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r2, .L9095
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r9, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2228]
	.pad #108
	sub	sp, sp, #108
	cmp	r3, r2
	sub	r6, r3, #208
	bne	.L8946
	b	.L8944
.L9080:
	ldr	r3, [r6, #208]
	cmp	r3, r2
	sub	r6, r3, #208
	beq	.L8944
.L8946:
	ldr	r3, [r3, #-200]
	cmp	r9, r3
	bne	.L9080
.L8944:
	movw	r3, #:lower16:kmalloc_caches
	ldr	r7, [r6, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	str	r3, [sp, #28]
	cmp	r7, #0
	ldrbne	r7, [r7, #48]	@ zero_extendqisi2
	cmp	r0, #0
	beq	.L9004
	mov	r2, #100
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L9081
.L8948:
	mov	r2, #1
	movw	r1, #30060
	movt	r1, 110
	str	r2, [r5]
	strb	r2, [r5, #9]
	ldr	r3, [r6, #48]
	str	r1, [sp, #40]
	cmp	r3, #0
	beq	.L9082
	ldrb	r1, [r3, #9]	@ zero_extendqisi2
	ldr	r4, [r5]
	cmp	r1, #0
	bne	.L9083
	ldrb	r3, [r3, #10]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9084
.L8951:
	rsb	r3, r4, #8
	cmp	r7, r3
	uxtbhi	r7, r3
	cmp	r7, #0
	beq	.L8954
	movw	r10, #:lower16:.LC506
	mov	r6, #0
	movt	r10, #:upper16:.LC506
	mov	fp, #1
.L8955:
	lsl	r4, r4, #3
	add	r1, sp, #40
	mov	r3, r6
	add	r0, r1, r4
	add	r4, r5, r4
	mov	r2, r10
	mov	r1, #8
	bl	snprintf
	strb	fp, [r4, #9]
	ldr	r4, [r5]
	add	r6, r6, #1
	cmp	r6, r7
	add	r4, r4, #1
	str	r4, [r5]
	bne	.L8955
.L8954:
	ldr	r2, [r9]
	sub	r3, r4, #1
	cmp	r3, #7
	str	r2, [sp, #24]
	bhi	.L9085
	ldr	r3, [sp, #28]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L9006
	mov	r2, #216
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L8959
.L8958:
	ldrb	r3, [r10, #144]	@ zero_extendqisi2
	movw	r1, #32976
	mov	r0, #128
	orr	r3, r3, #2
	strb	r3, [r10, #144]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r10, #68]
	beq	.L9086
	ldr	r3, [r5, #76]
	mov	r0, #400
	movw	r1, #32976
	ldr	r2, [sp, #24]
	mul	r0, r0, r4
	str	r3, [r10, #172]
	ldr	r3, [r5, #80]
	str	r2, [r10]
	str	r3, [r10, #176]
	ldr	r3, [r2, #4]
	str	r3, [r10, #48]
	ldr	r3, [r9, #4]
	str	r9, [r10, #4]
	str	r3, [r10, #52]
	bl	__kmalloc
	subs	fp, r0, #0
	beq	.L8976
	add	r3, r10, #28
	movw	r1, #:lower16:.LC508
	str	fp, [r10, #100]
	mov	r0, r3
	movt	r1, #:upper16:.LC508
	str	r3, [sp, #12]
	ldr	r3, .L9095+4
	add	r7, r5, #4
	sub	r2, r3, #12
	bl	__init_rwsem
	cmp	r4, #0
	ble	.L8963
	mov	r2, #255
	movw	r1, #:lower16:.LC494
	str	r10, [sp, #32]
	movt	r2, 255
	movw	r3, #:lower16:fsg_lun_release
	movt	r3, #:upper16:fsg_lun_release
	mov	r9, #0
	str	r2, [sp, #20]
	mov	r2, r1
	ldr	r1, [sp, #24]
	movt	r2, #:upper16:.LC494
	str	r8, [sp, #36]
	mov	r10, r3
	mov	r8, fp
	mov	fp, r2
	add	r1, r1, #32
	str	r1, [sp, #16]
	b	.L8974
.L9090:
	bl	fsg_lun_open
	cmp	r0, #0
	bne	.L9087
.L8973:
	add	r9, r9, #1
	add	r8, r8, #400
	cmp	r4, r9
	beq	.L9088
.L8974:
	ldrb	r2, [r7, #6]	@ zero_extendqisi2
	mov	r6, r8
	ldrb	r0, [r8, #24]	@ zero_extendqisi2
	ldr	r1, [sp, #12]
	ldr	r3, [sp, #20]
	adds	r2, r2, #0
	movne	r2, #1
	bfi	r0, r2, #3, #1
	strb	r0, [r8, #24]
	ldr	r0, [r7, #4]
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	tst	r0, r3
	ldr	r3, [sp, #16]
	movne	r0, #1
	moveq	r0, #0
	bfi	r2, r0, #1, #1
	bfi	r2, r0, #0, #1
	mov	r0, r2
	strb	r2, [r8, #24]
	ldrb	r2, [r7, #5]	@ zero_extendqisi2
	bfi	r0, r2, #2, #1
	mov	r2, r0
	strb	r0, [r8, #24]
	ldrb	r0, [r7, #7]	@ zero_extendqisi2
	str	r10, [r8, #388]
	bfi	r2, r0, #7, #1
	strb	r2, [r8, #24]
	str	r3, [r6, #48]!
	mov	r0, r6
	bl	dev_set_drvdata
	ldr	r1, [r5, #68]
	mov	r2, r9
	mov	r0, r6
	cmp	r1, #0
	moveq	r1, fp
	bl	dev_set_name
	mov	r0, r6
	bl	device_register
	subs	r2, r0, #0
	ldr	r1, .L9095+8
	mov	r0, r6
	bne	.L9089
	bl	device_create_file
	subs	r2, r0, #0
	ldr	r1, .L9095+12
	mov	r0, r6
	bne	.L8967
	bl	device_create_file
	subs	r2, r0, #0
	ldr	r1, .L9095+16
	mov	r0, r6
	bne	.L8967
	bl	device_create_file
	subs	r2, r0, #0
	ldr	r1, .L9095+20
	mov	r0, r6
	bne	.L8967
	bl	device_create_file
	subs	r2, r0, #0
	mov	r0, r8
	bne	.L8967
	ldr	r2, [r7]
	add	r7, r7, #8
	subs	r1, r2, #0
	bne	.L9090
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	tst	r2, #12
	bne	.L8973
	ldr	r10, [sp, #32]
	movw	r1, #:lower16:.LC510
	mov	r2, r9
	movt	r1, #:upper16:.LC510
	add	r9, r9, #1
	mvn	r4, #21
	ldr	r0, [r10]
	add	r0, r0, #32
	bl	dev_err
	mov	r3, #7
	add	r0, r10, #212
	str	r9, [r10, #92]
	str	r3, [r10, #112]
	bl	fsg_common_release
.L8962:
	mov	r9, r4
	b	.L9079
.L9006:
	mov	r10, #16
	b	.L8958
.L9084:
	lsl	r3, r4, #3
	movw	r2, #:lower16:.LC505
	movt	r2, #:upper16:.LC505
	add	r0, sp, #40
	add	r1, r5, r3
	ldr	ip, [r2]
	add	r3, r0, r3
	ldrb	r0, [r2, #4]	@ zero_extendqisi2
	mov	r2, #0
	mov	lr, #1
	strb	r2, [r1, #8]
	strb	lr, [r1, #9]
	strb	r2, [r1, #10]
	add	r2, sp, #40
	str	ip, [r2, r4, lsl #3]	@ unaligned
	strb	r0, [r3, #4]
	ldr	r4, [r5]
	add	r4, r4, lr
	str	r4, [r5]
	b	.L8951
.L9083:
	lsl	r3, r4, #3
	movw	r1, #:lower16:.LC504
	movt	r1, #:upper16:.LC504
	add	r0, r5, r3
	ldr	ip, [r1]
	add	lr, sp, #40
	ldrb	r1, [r1, #4]	@ zero_extendqisi2
	add	r3, lr, r3
	mov	lr, #0
	strb	r2, [r0, #8]
	strb	lr, [r0, #9]
	strb	r2, [r0, #10]
	add	r2, sp, #40
	str	ip, [r2, r4, lsl #3]	@ unaligned
	strb	r1, [r3, #4]
	ldr	r4, [r5]
	add	r4, r4, #1
	str	r4, [r5]
	ldr	r3, [r6, #48]
	cmp	r3, lr
	beq	.L8951
	ldrb	r3, [r3, #10]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8951
	b	.L9084
.L9004:
	mov	r5, #16
	b	.L8948
.L9082:
	ldr	r4, [r5]
	b	.L8951
.L9085:
	mov	r3, r2
	movw	r1, #:lower16:.LC507
	mov	r2, r4
	add	r0, r3, #32
	movt	r1, #:upper16:.LC507
	mvn	r9, #21
	bl	dev_err
.L9079:
	mov	r0, r5
	bl	kfree
.L8943:
	mov	r0, r9
	add	sp, sp, #108
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8959:
	mvn	r9, #11
	b	.L9079
.L8967:
	ldr	r10, [sp, #32]
	mov	r4, r2
	mov	r7, r2
	ldr	r8, [sp, #36]
.L8969:
	add	r9, r9, #1
	str	r9, [r10, #92]
.L8966:
	mov	r3, #7
	add	r0, r10, #212
	str	r3, [r10, #112]
	bl	fsg_common_release
.L8995:
	cmn	r7, #4096
	bhi	.L8962
	ldr	r3, [r5]
	cmp	r3, #0
	movne	r7, #0
	movne	r6, r7
	beq	.L8998
.L8997:
	ldr	r1, [r4, #100]
	add	r3, sp, #40
	ldr	r0, [r8, #8]
	add	r2, r3, r6, lsl #3
	add	r1, r1, r7
	add	r7, r7, #400
	add	r1, r1, #56
	add	r0, r0, #8
	bl	sysfs_create_link
	cmp	r0, #0
	bne	.L9091
	ldr	r3, [r5]
	add	r6, r6, #1
	cmp	r3, r6
	bhi	.L8997
.L8998:
	str	r4, [r5, #96]
	mov	r9, #0
	str	r5, [r8, #4]
	b	.L8943
.L9091:
	cmp	r6, #0
	mov	r9, r0
	beq	.L9001
	sub	r6, r6, #1
	add	r3, sp, #40
	add	r6, r3, r6, lsl #3
	add	r7, sp, #32
.L9002:
	ldr	r0, [r8, #8]
	mov	r1, r6
	sub	r6, r6, #8
	add	r0, r0, #8
	bl	sysfs_remove_link
	cmp	r7, r6
	bne	.L9002
.L9001:
	add	r0, r4, #212
	bl	fsg_common_release
	b	.L9079
.L9086:
	ldrb	r3, [r10, #144]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L8959
	mov	r0, r10
	mvn	r9, #11
	bl	kfree
	b	.L9079
.L9088:
	ldr	r10, [sp, #32]
	ldr	r8, [sp, #36]
.L8963:
	ldr	r6, [r10, #68]
	str	r4, [r10, #92]
	add	r4, r6, #96
.L8975:
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	bl	kmalloc_order_trace
	cmp	r0, #0
	str	r0, [r6]
	beq	.L8976
	cmp	r6, r4
	beq	.L9092
	add	r6, r6, #32
	str	r6, [r6, #-24]
	b	.L8975
.L9089:
	ldr	r10, [sp, #32]
	movw	r1, #:lower16:.LC509
	mov	r3, r2
	movt	r1, #:upper16:.LC509
	mov	r2, r9
	ldr	r8, [sp, #36]
	mov	r4, r3
	mov	r7, r3
	ldr	r0, [r10]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, r6
	str	r9, [r10, #92]
	bl	put_device
	b	.L8966
.L9092:
	ldr	r2, [r10, #68]
	movw	r3, #65535
	str	r2, [r6, #8]
	ldrh	r1, [r5, #92]
	cmp	r1, r3
	beq	.L9093
.L8979:
	ldr	r3, [r5, #84]
	movw	r2, #:lower16:.LC495
	add	r0, r10, #180
	ldr	ip, [r5, #88]
	movt	r2, #:upper16:.LC495
	cmp	r3, #0
	moveq	r3, r2
	cmp	ip, #0
	beq	.L9094
.L8982:
	movw	r2, #:lower16:.LC512
	str	ip, [sp]
	str	r1, [sp, #4]
	movt	r2, #:upper16:.LC512
	mov	r1, #29
	bl	snprintf
	ldrb	r3, [r5, #94]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8983
	ldr	r3, [r10]
	movw	r0, #:lower16:.LC288
	movt	r0, #:upper16:.LC288
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r3, r0, #0
	movne	r3, #1
.L8983:
	ldrb	lr, [r10, #144]	@ zero_extendqisi2
	mov	r6, #0
	mov	r2, #1
	movw	ip, #:lower16:.LC498
	movw	r0, #:lower16:fsg_main_thread
	str	r6, [r10, #44]
	movt	ip, #:upper16:.LC498
	movt	r0, #:upper16:fsg_main_thread
	str	r2, [r10, #212]
	mov	r1, r10
	mvn	r2, #0
	bfi	lr, r3, #0, #1
	strb	lr, [r10, #144]
	ldr	r3, [r5, #72]
	cmp	r3, r6
	moveq	r3, ip
	bl	kthread_create_on_node
	cmn	r0, #4096
	mov	r4, r0
	str	r0, [r10, #168]
	movhi	r7, r0
	bhi	.L8966
	movw	r1, #:lower16:.LC448
	ldr	r2, .L9095+24
	add	r0, r10, #156
	movt	r1, #:upper16:.LC448
	str	r6, [r10, #152]
	bl	__init_waitqueue_head
	ldr	r3, .L9095+4
	movw	r1, #:lower16:.LC513
	add	r0, r10, #16
	movt	r1, #:upper16:.LC513
	sub	r2, r3, #12
	bl	__init_waitqueue_head
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC514
	movt	r1, #:upper16:.LC514
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC515
	movt	r1, #:upper16:.LC515
	ldr	r2, [r10, #92]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r3, [sp, #28]
	ldr	r0, [r3, #48]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [sp, #16]
	beq	.L8986
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	str	r0, [sp, #16]
.L8986:
	ldr	r3, [r10, #92]
	ldr	r4, [r10, #100]
	cmp	r3, #0
	str	r3, [sp, #12]
	ble	.L8987
	movw	r3, #:lower16:.LC499
	movw	r2, #:lower16:.LC500
	str	r5, [sp, #28]
	movw	fp, #:lower16:.LC502
	movt	r3, #:upper16:.LC499
	movt	r2, #:upper16:.LC500
	add	r4, r4, #48
	movt	fp, #:upper16:.LC502
	mov	r7, #0
	strd	r2, [sp, #20]
.L8988:
	ldr	r0, [r4, #-48]
	sub	r5, r4, #48
	cmp	r0, #0
	beq	.L9039
	ldr	r3, [sp, #16]
	mov	r2, #4096
	add	r0, r0, #8
	subs	r1, r3, #0
	beq	.L8990
	bl	d_path
	cmn	r0, #4096
	mov	r9, r0
	bhi	.L8990
.L8989:
	ldrb	r5, [r5, #24]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC501
	movw	lr, #:lower16:.LC503
	movt	ip, #:upper16:.LC501
	movt	lr, #:upper16:.LC503
	movw	r6, #:lower16:.LC517
	movw	r1, #:lower16:.LC516
	movt	r6, #:upper16:.LC517
	mov	r0, r4
	tst	r5, #4
	movt	r1, #:upper16:.LC516
	moveq	ip, fp
	tst	r5, #2
	moveq	lr, fp
	tst	r5, #8
	mov	r2, ip
	mov	r3, lr
	bne	.L8993
	str	fp, [sp]
	add	r7, r7, #1
	add	r4, r4, #400
	str	r9, [sp, #4]
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r7, r3
	bne	.L8988
.L9078:
	ldr	r5, [sp, #28]
.L8987:
	ldr	r0, [sp, #16]
	mov	r7, r10
	mov	r4, r10
	bl	kfree
	ldr	r0, [r10, #168]
	bl	wake_up_process
	b	.L8995
.L8993:
	movw	r1, #:lower16:.LC516
	stm	sp, {r6, r9}
	add	r7, r7, #1
	movt	r1, #:upper16:.LC516
	add	r4, r4, #400
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r3, r7
	bne	.L8988
	b	.L9078
.L8990:
	ldr	r9, [sp, #20]
	b	.L8989
.L9039:
	ldr	r9, [sp, #24]
	b	.L8989
.L8976:
	mov	r3, #7
	add	r0, r10, #212
	mvn	r4, #11
	str	r3, [r10, #112]
	bl	fsg_common_release
	b	.L8962
.L9087:
	mov	r4, r0
	mov	r7, r0
	ldr	r10, [sp, #32]
	ldr	r8, [sp, #36]
	b	.L8969
.L9093:
	ldr	r3, [sp, #24]
	movw	r0, #:lower16:.LC281
	movt	r0, #:upper16:.LC281
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #769
	beq	.L8979
	movw	r0, #:lower16:.LC282
	mov	r1, r4
	movt	r0, #:upper16:.LC282
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #770
	beq	.L8979
	movw	r0, #:lower16:.LC283
	mov	r1, r4
	movt	r0, #:upper16:.LC283
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #771
	beq	.L8979
	movw	r0, #:lower16:.LC284
	mov	r1, r4
	movt	r0, #:upper16:.LC284
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #774
	beq	.L8979
	movw	r0, #:lower16:.LC285
	mov	r1, r4
	movt	r0, #:upper16:.LC285
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #776
	beq	.L8979
	movw	r0, #:lower16:.LC286
	mov	r1, r4
	movt	r0, #:upper16:.LC286
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #785
	beq	.L8979
	movw	r0, #:lower16:.LC287
	mov	r1, r4
	movt	r0, #:upper16:.LC287
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #786
	beq	.L8979
	movw	r0, #:lower16:.LC288
	mov	r1, r4
	movt	r0, #:upper16:.LC288
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #787
	beq	.L8979
	movw	r0, #:lower16:.LC289
	mov	r1, r4
	movt	r0, #:upper16:.LC289
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #788
	beq	.L8979
	movw	r0, #:lower16:.LC290
	mov	r1, r4
	movt	r0, #:upper16:.LC290
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #790
	beq	.L8979
	movw	r0, #:lower16:.LC291
	mov	r1, r4
	movt	r0, #:upper16:.LC291
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #792
	beq	.L8979
	movw	r0, #:lower16:.LC292
	mov	r1, r4
	movt	r0, #:upper16:.LC292
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #793
	beq	.L8979
	movw	r0, #:lower16:.LC293
	mov	r1, r4
	movt	r0, #:upper16:.LC293
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #800
	beq	.L8979
	movw	r0, #:lower16:.LC294
	mov	r1, r4
	movt	r0, #:upper16:.LC294
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #801
	beq	.L8979
	movw	r0, #:lower16:.LC295
	mov	r1, r4
	movt	r0, #:upper16:.LC295
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #802
	beq	.L8979
	movw	r0, #:lower16:.LC296
	mov	r1, r4
	movt	r0, #:upper16:.LC296
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #803
	beq	.L8979
	movw	r0, #:lower16:.LC297
	mov	r1, r4
	movt	r0, #:upper16:.LC297
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #804
	beq	.L8979
	movw	r0, #:lower16:.LC298
	mov	r1, r4
	movt	r0, #:upper16:.LC298
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #805
	beq	.L8979
	movw	r0, #:lower16:.LC299
	mov	r1, r4
	movt	r0, #:upper16:.LC299
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #806
	beq	.L8979
	movw	r0, #:lower16:.LC300
	mov	r1, r4
	movt	r0, #:upper16:.LC300
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #807
	beq	.L8979
	movw	r0, #:lower16:.LC301
	mov	r1, r4
	movt	r0, #:upper16:.LC301
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #808
	beq	.L8979
	movw	r0, #:lower16:.LC302
	mov	r1, r4
	movt	r0, #:upper16:.LC302
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #809
	beq	.L8979
	movw	r0, #:lower16:.LC303
	mov	r1, r4
	movt	r0, #:upper16:.LC303
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #816
	beq	.L8979
	movw	r0, #:lower16:.LC304
	mov	r1, r4
	movt	r0, #:upper16:.LC304
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #817
	beq	.L8979
	movw	r0, #:lower16:.LC305
	mov	r1, r4
	movt	r0, #:upper16:.LC305
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #818
	beq	.L8979
	movw	r0, #:lower16:.LC306
	mov	r1, r4
	movt	r0, #:upper16:.LC306
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #819
	beq	.L8979
	movw	r0, #:lower16:.LC307
	mov	r1, r4
	movt	r0, #:upper16:.LC307
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #820
	beq	.L8979
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC511
	mov	r2, r4
	movt	r1, #:upper16:.LC511
	add	r0, r0, #32
	bl	dev_warn
	movw	r1, #921
	b	.L8979
.L9094:
	ldr	lr, [r10, #100]
	movw	r2, #:lower16:.LC496
	movw	ip, #:lower16:.LC497
	movt	r2, #:upper16:.LC496
	movt	ip, #:upper16:.LC497
	ldrb	lr, [lr, #24]	@ zero_extendqisi2
	tst	lr, #8
	movne	ip, r2
	b	.L8982
.L9081:
	mvn	r9, #11
	b	.L8943
.L9096:
	.align	2
.L9095:
	.word	.LANCHOR1+2228
	.word	.LANCHOR4-3984
	.word	.LANCHOR0+1956
	.word	.LANCHOR0+1972
	.word	.LANCHOR0+1940
	.word	.LANCHOR0+1924
	.word	.LANCHOR1+4080
	.fnend
	.size	mass_storage_function_init, .-mass_storage_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_setup, %function
rndis_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r0, #20]
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	r2, [r1, #2]	@ unaligned
	rev16	r3, r3
	ldrh	r9, [r1, #6]	@ unaligned
	uxth	r3, r3
	ldr	r10, [r0, #24]
	cmp	r3, #8448
	ldr	r6, [r10, #4]
	beq	.L9099
	movw	r1, #41217
	cmp	r3, r1
	bne	.L9118
	cmp	r2, #0
	bne	.L9118
	ldrb	r3, [r8, #112]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L9118
	ldr	r2, [r8, #136]
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r4, .L9122
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r3, r5, r2
	add	r2, r2, #52
	ldr	r1, [r3, #3824]
	add	r2, r4, r2
	cmp	r1, r2
	ldr	r3, [r1]
	beq	.L9118
	ldr	r0, [r1, #16]
	cmp	r0, #0
	bne	.L9105
	b	.L9120
.L9107:
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L9104
	mov	r3, r1
.L9105:
	cmp	r3, r2
	ldr	r1, [r3]
	bne	.L9107
.L9118:
	mvn	r7, #94
.L9097:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9099:
	cmp	r2, #0
	bne	.L9118
	ldrb	r3, [r8, #112]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L9118
	movw	r3, #:lower16:rndis_qc_command_complete
	mov	r7, r9
	movt	r3, #:upper16:rndis_qc_command_complete
	mov	r9, r2
	str	r3, [r6, #28]
.L9103:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r7, [r6, #4]
	mov	r1, r6
	str	r8, [r6, #32]
	mov	r2, #32
	bfi	r3, r9, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r10]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bge	.L9097
	movw	r0, #:lower16:.LC518
	mov	r2, r7
	ldr	r1, .L9122+4
	movt	r0, #:upper16:.LC518
	bl	printk
	b	.L9097
.L9120:
	mov	r3, r1
.L9104:
	ldr	fp, [r3, #8]
	mov	r2, #1
	ldr	r7, [r3, #12]
	str	r2, [r3, #16]
	cmp	fp, #0
	beq	.L9118
	mov	r2, r7
	mov	r1, fp
	ldr	r0, [r6]
	bl	memcpy
	movw	r3, #:lower16:rndis_qc_response_complete
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r3, [r6, #28]
	ldr	r3, [r8, #136]
	rsb	r3, r3, r3, lsl #4
	lsl	r3, r3, #2
	add	r5, r5, r3
	add	r3, r3, #52
	ldr	ip, [r5, #3824]
	add	r3, r4, r3
	cmp	r3, ip
	ldr	r4, [ip]
	beq	.L9108
	mov	r5, r4
	mov	r1, #256
	mov	r2, #512
	b	.L9110
.L9114:
	mov	r5, r4
.L9110:
	cmp	ip, #0
	beq	.L9109
	ldr	r0, [ip, #8]
	cmp	fp, r0
	beq	.L9121
.L9109:
	cmp	r3, r5
	mov	ip, r5
	ldr	r4, [r4]
	bne	.L9114
.L9108:
	cmp	r7, #0
	blt	.L9097
	cmp	r7, r9
	movge	r9, #0
	movlt	r9, #1
	b	.L9103
.L9121:
	ldr	lr, [ip, #4]
	mov	r0, ip
	str	r3, [sp, #4]
	str	lr, [r4, #4]
	str	r4, [lr]
	stm	ip, {r1, r2}
	bl	kfree
	ldr	r3, [sp, #4]
	mov	r1, #256
	mov	r2, #512
	b	.L9109
.L9123:
	.align	2
.L9122:
	.word	.LANCHOR1+3772
	.word	.LANCHOR3-3756
	.fnend
	.size	rndis_qc_setup, .-rndis_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_setup, %function
rndis_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	.pad #4
	sub	sp, sp, #4
	ldr	r0, [r0, #20]
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	r2, [r1, #2]	@ unaligned
	rev16	r3, r3
	ldrh	r7, [r1, #6]	@ unaligned
	uxth	r3, r3
	ldr	r8, [r0, #24]
	cmp	r3, #8448
	ldr	r5, [r8, #4]
	beq	.L9126
	movw	r1, #41217
	cmp	r3, r1
	bne	.L9145
	cmp	r2, #0
	bne	.L9145
	ldrb	r3, [r4, #140]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L9145
	ldr	r2, [r4, #156]
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r10, .L9149
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r3, fp, r2
	add	r2, r2, #52
	ldr	r1, [r3, #3824]
	add	r2, r10, r2
	cmp	r1, r2
	ldr	r3, [r1]
	beq	.L9145
	ldr	r0, [r1, #16]
	cmp	r0, #0
	bne	.L9132
	b	.L9147
.L9134:
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L9131
	mov	r3, r1
.L9132:
	cmp	r3, r2
	ldr	r1, [r3]
	bne	.L9134
.L9145:
	mvn	r6, #94
.L9124:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9126:
	cmp	r2, #0
	bne	.L9145
	ldrb	r3, [r4, #140]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L9145
	movw	r3, #:lower16:rndis_command_complete
	mov	r6, r7
	str	r4, [r5, #32]
	movt	r3, #:upper16:rndis_command_complete
	mov	r7, r2
	str	r3, [r5, #28]
.L9130:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L9124
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC519
	mov	r2, r6
	movt	r1, #:upper16:.LC519
	add	r0, r0, #32
	bl	dev_err
	b	.L9124
.L9147:
	mov	r3, r1
.L9131:
	ldr	r9, [r3, #8]
	mov	r2, #1
	ldr	r6, [r3, #12]
	str	r2, [r3, #16]
	cmp	r9, #0
	beq	.L9145
	mov	r2, r6
	mov	r1, r9
	ldr	r0, [r5]
	bl	memcpy
	movw	r3, #:lower16:rndis_response_complete
	str	r4, [r5, #32]
	movt	r3, #:upper16:rndis_response_complete
	str	r3, [r5, #28]
	ldr	r3, [r4, #156]
	rsb	r3, r3, r3, lsl #4
	lsl	r3, r3, #2
	add	fp, fp, r3
	add	r2, r3, #52
	ldr	r3, [fp, #3824]
	add	r10, r10, r2
	cmp	r10, r3
	ldr	r4, [r3]
	beq	.L9135
	mov	fp, r4
	mov	r1, #256
	mov	r2, #512
	b	.L9137
.L9141:
	mov	fp, r4
.L9137:
	cmp	r3, #0
	beq	.L9136
	ldr	r0, [r3, #8]
	cmp	r9, r0
	beq	.L9148
.L9136:
	cmp	r10, fp
	mov	r3, fp
	ldr	r4, [r4]
	bne	.L9141
.L9135:
	cmp	r6, #0
	blt	.L9124
	cmp	r6, r7
	movge	r7, #0
	movlt	r7, #1
	b	.L9130
.L9148:
	ldr	ip, [r3, #4]
	mov	r0, r3
	str	ip, [r4, #4]
	str	r4, [ip]
	stm	r3, {r1, r2}
	bl	kfree
	mov	r1, #256
	mov	r2, #512
	b	.L9136
.L9150:
	.align	2
.L9149:
	.word	.LANCHOR1+3772
	.fnend
	.size	rndis_setup, .-rndis_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_disable, %function
ccid_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #92]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r4, [r5, #104]
	cmp	r4, #0
	beq	.L9152
	ldr	r6, [r5, #92]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9152:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L9153
	ldr	r4, [r5, #176]
	cmp	r4, #0
	beq	.L9153
	ldr	r6, [r5, #100]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9153:
	add	r8, r5, #184
	add	r7, r5, #84
	mov	r10, #256
	mov	r9, #512
	b	.L9154
.L9157:
	ldr	fp, [r5, #96]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L9154:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #184]
	mov	r3, r0
	mov	r0, r7
	mov	r1, r3
	cmp	r8, r4
	sub	r6, r4, #36
	beq	.L9165
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4]
	str	r9, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L9157
.L9156:
	mov	r4, #0
	add	r0, r5, #164
	mov	r3, r4
	mov	r2, #1
	mov	r1, #3
	str	r4, [r5, #88]
	str	r4, [r5, #192]
	bl	__wake_up
	mov	r3, r4
	add	r0, r5, #152
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r3, r4
	add	r0, r5, #120
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__wake_up
.L9165:
	bl	_raw_spin_unlock_irqrestore
	b	.L9156
	.fnend
	.size	ccid_function_disable, .-ccid_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_setup, %function
fsg_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #80]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r5, [r1, #6]	@ unaligned
	ldr	r2, [r3, #8]
	ldr	r0, [r3, #52]
	cmp	r2, #0
	beq	.L9167
	ldr	r2, [r3, #56]
	mov	ip, #0
	add	r2, r2, #1
	str	r2, [r3, #56]
	str	ip, [r0, #4]
	str	ip, [r0, #32]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #254
	beq	.L9169
	cmp	r3, #255
	bne	.L9179
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #33
	bne	.L9179
	ldrh	r3, [r4, #84]
	cmp	r3, lr
	bne	.L9181
	orrs	r3, r6, r5
	bne	.L9181
	ldr	r5, [r4, #80]
	add	r6, r5, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	mov	r7, r0
	cmp	r3, #2
	bgt	.L9172
	ldr	r3, [r5, #56]
	mov	r1, #2
	ldr	r2, [r5, #168]
	str	r1, [r5, #112]
	str	r3, [r5, #116]
	cmp	r2, #0
	beq	.L9172
	mov	r0, #10
	bl	send_sig_info
.L9172:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #80]
	movw	r3, #1255
	movw	r4, #32767
	ldr	r2, [r2, #4]
	cmp	r2, #0
	moveq	r4, r3
	b	.L9166
.L9179:
	mvn	r4, #94
.L9166:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9169:
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #161
	bne	.L9179
	ldrh	r3, [r4, #84]
	cmp	r3, lr
	bne	.L9181
	cmp	r5, #1
	cmpeq	r6, #0
	bne	.L9181
	ldr	r3, [r4, #80]
	mov	r1, #1
	mov	r2, #32
	ldr	ip, [r0]
	ldr	r3, [r3, #92]
	sub	r3, r3, #1
	strb	r3, [ip]
	str	r1, [r0, #4]
	ldr	r5, [r4, #80]
	ldrd	r0, [r5, #48]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r5, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r4, r0
	str	r5, [r3]
	beq	.L9166
	mov	r3, r0
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC76
	ldr	r2, [r5, #48]
	movt	r1, #:upper16:.LC76
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
	b	.L9166
.L9167:
	ldr	r0, [r3]
	movw	r1, #:lower16:.LC74
	movw	r3, #617
	movt	r1, #:upper16:.LC74
	ldr	r2, .L9190
	mvn	r4, #94
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #461
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	b	.L9166
.L9181:
	mvn	r4, #32
	b	.L9166
.L9191:
	.align	2
.L9190:
	.word	.LANCHOR3-3740
	.fnend
	.size	fsg_setup, .-fsg_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_unbind, %function
fsg_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #80]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r4, #8]
	cmp	r3, r1
	beq	.L9206
.L9194:
	add	r0, r4, #212
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r0]
	sub	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L9201
	bl	fsg_common_release
.L9201:
	ldr	r0, [r5, #8]
	bl	kfree
	ldr	r0, [r5, #12]
	bl	kfree
	ldr	r0, [r5, #16]
	bl	kfree
	mov	r0, r5
	bl	kfree
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9206:
	mov	r3, #0
	str	r3, [r4, #12]
	ldr	r6, [r1, #80]
	add	r7, r6, #44
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	r8, r0
	cmp	r3, #4
	bgt	.L9196
	ldr	r3, [r6, #56]
	mov	r1, #4
	ldr	r2, [r6, #168]
	str	r1, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L9196
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L9196:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #8]
	cmp	r3, r5
	bne	.L9194
	mov	r3, sp
	add	r1, sp, #16
	bic	r2, r3, #8128
	mov	r3, #0
	bic	r2, r2, #63
	add	r6, r4, #16
	ldr	r0, [r2, #12]
	movw	r2, #:lower16:autoremove_wake_function
	str	r3, [sp, #4]
	movt	r2, #:upper16:autoremove_wake_function
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L9200
.L9207:
	bl	schedule
.L9200:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #8]
	cmp	r3, r5
	beq	.L9207
	add	r1, sp, #4
	mov	r0, r6
	bl	finish_wait
	b	.L9194
	.fnend
	.size	fsg_unbind, .-fsg_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_open, %function
ecm_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #140]
	strb	r3, [r0, #144]
	strb	r3, [r0, #145]
	cmp	r5, #0
	beq	.L9208
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	r2, #8
	mov	r1, #2
	mvn	r0, #94
	strb	ip, [r3, #1]
	ldrb	lr, [r4, #145]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	r2, [r5, #4]
	mov	r2, #32
	strb	r1, [r4, #144]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	ip, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #140]
.L9208:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_open, .-ecm_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_close, %function
ecm_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	ip, #0
	mov	r3, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #140]
	strb	r3, [r0, #144]
	strb	ip, [r0, #145]
	cmp	r5, ip
	beq	.L9213
	ldr	r3, [r5]
	mov	r4, r0
	mov	lr, #8
	mov	r1, #2
	mvn	r0, #94
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r6, [r4, #145]	@ zero_extendqisi2
	strh	r6, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	lr, [r5, #4]
	strb	r1, [r4, #144]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	ip, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #140]
.L9213:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_close, .-ecm_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_open, %function
ecm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #160]
	strb	r3, [r0, #164]
	strb	r3, [r0, #165]
	cmp	r5, #0
	beq	.L9218
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	r2, #8
	mov	r1, #2
	mvn	r0, #94
	strb	ip, [r3, #1]
	ldrb	lr, [r4, #165]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	r2, [r5, #4]
	mov	r2, #32
	strb	r1, [r4, #164]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #156]
	str	ip, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #160]
.L9218:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_open, .-ecm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_close, %function
ecm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	ip, #0
	mov	r3, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #160]
	strb	r3, [r0, #164]
	strb	ip, [r0, #165]
	cmp	r5, ip
	beq	.L9223
	ldr	r3, [r5]
	mov	r4, r0
	mov	lr, #8
	mov	r1, #2
	mvn	r0, #94
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r6, [r4, #165]	@ zero_extendqisi2
	strh	r6, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	lr, [r5, #4]
	strb	r1, [r4, #164]
	mov	r1, r5
	strb	r0, [r3]
	ldrb	r0, [r4, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #156]
	str	ip, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #160]
.L9223:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_close, .-ecm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_close, %function
rndis_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #1
	strd	r6, [sp, #8]
	ldr	r7, .L9241
	movt	r4, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #156]
	lsl	r9, r6, #4
	ands	r3, r6, #255
	sub	r5, r9, r6
	streq	r3, [r4, #3780]
	lsl	r5, r5, #2
	streq	r3, [r4, #3784]
	add	r3, r4, r5
	add	r8, r7, r5
	str	r2, [r3, #3788]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L9228
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L9234
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L9228
	add	r3, r0, #20
.L9232:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #12
	str	r2, [r0, #16]
	ldr	r3, [r4, #3828]
	mov	lr, #7
	str	r0, [r4, #3828]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L9234:
	mov	r3, #36
	mov	r0, #16
	b	.L9232
.L9228:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9242:
	.align	2
.L9241:
	.word	.LANCHOR1+3772
	.fnend
	.size	rndis_close, .-rndis_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_close, %function
rndis_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #1
	strd	r6, [sp, #8]
	ldr	r7, .L9256
	movt	r4, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #136]
	lsl	r9, r6, #4
	ands	r3, r6, #255
	sub	r5, r9, r6
	streq	r3, [r4, #3780]
	lsl	r5, r5, #2
	streq	r3, [r4, #3784]
	add	r3, r4, r5
	add	r8, r7, r5
	str	r2, [r3, #3788]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L9243
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L9249
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L9243
	add	r3, r0, #20
.L9247:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #12
	str	r2, [r0, #16]
	ldr	r3, [r4, #3828]
	mov	lr, #7
	str	r0, [r4, #3828]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L9249:
	mov	r3, #36
	mov	r0, #16
	b	.L9247
.L9243:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9257:
	.align	2
.L9256:
	.word	.LANCHOR1+3772
	.fnend
	.size	rndis_qc_close, .-rndis_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_open, %function
ncm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #176
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock
	ldr	r5, [r4, #160]
	mov	r3, #1
	mov	r2, #2
	strb	r2, [r4, #164]
	strb	r3, [r4, #165]
	cmp	r5, #0
	beq	.L9260
	ldr	r1, [r4, #20]
	mov	r2, #0
	mov	lr, #42
	ldr	r3, [r5]
	mov	ip, #8
	mov	r0, #16
	ldr	r1, [r1, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	str	r0, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L9266
.L9261:
	ldr	r1, [r5]
	mvn	lr, #94
	mov	r7, #1
	mov	ip, #0
	mov	r0, r6
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r7, [r4, #164]
	strb	lr, [r3]
	ldrb	r2, [r4, #140]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	str	ip, [r4, #160]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r5, [r4, #160]
.L9260:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L9266:
	ldr	r0, [r2, #16]
	mov	r1, #0
	mov	r2, #28672
	movt	r1, 6500
	movt	r2, 148
	cmp	r0, #3
	moveq	r2, r1
	b	.L9261
	.fnend
	.size	ncm_open, .-ncm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_close, %function
ncm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #176
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock
	ldr	r5, [r4, #160]
	mov	r2, #0
	mov	r3, #2
	strb	r3, [r4, #164]
	strb	r2, [r4, #165]
	cmp	r5, r2
	beq	.L9269
	ldr	r1, [r4, #20]
	mov	lr, #42
	mov	ip, #8
	ldr	r3, [r5]
	mov	r0, #16
	ldr	r1, [r1, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	str	r0, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L9275
.L9270:
	ldr	r1, [r5]
	mvn	lr, #94
	mov	r7, #1
	mov	ip, #0
	mov	r0, r6
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r7, [r4, #164]
	strb	lr, [r3]
	ldrb	r2, [r4, #140]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	str	ip, [r4, #160]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r5, [r4, #160]
.L9269:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L9275:
	ldr	r0, [r2, #16]
	mov	r1, #0
	mov	r2, #28672
	movt	r1, 6500
	movt	r2, 148
	cmp	r0, #3
	moveq	r2, r1
	b	.L9270
	.fnend
	.size	ncm_close, .-ncm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_notify_complete, %function
ecm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	cmn	r3, #108
	beq	.L9278
	cmn	r3, #104
	beq	.L9278
.L9277:
	cmp	r1, #0
	str	r1, [r5, #160]
	beq	.L9276
	ldrb	r2, [r5, #164]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L9282
	bcc	.L9276
	cmp	r2, #2
	bne	.L9281
	ldr	ip, [r5, #20]
	mov	r2, #0
	mov	r0, #8
	mov	r4, #42
	mov	lr, #16
	ldr	ip, [ip, #24]
	strb	r4, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r0, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r0, [r1]
	str	lr, [r1, #4]
	ldr	r2, [ip]
	ldr	ip, [r2, #20]
	cmp	ip, #4
	bls	.L9284
	ldr	ip, [r2, #16]
	cmp	ip, #5
	beq	.L9298
.L9286:
	mov	lr, #0
	mov	r2, #28672
	movt	lr, 6500
	cmp	ip, #3
	movt	r2, 148
	moveq	r2, lr
.L9285:
	mov	ip, #0
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	strb	ip, [r5, #164]
.L9281:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r4, r1
	strb	r0, [r3]
	ldrb	r0, [r5, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #156]
	str	ip, [r5, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #160]
.L9276:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9278:
	mov	r3, #0
	strb	r3, [r5, #164]
	b	.L9277
.L9282:
	mov	r2, #0
	mov	ip, #8
	mov	r0, #2
	strb	r2, [r3, #1]
	ldrb	lr, [r5, #165]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	ip, [r1, #4]
	strb	r0, [r5, #164]
	b	.L9281
.L9284:
	cmp	ip, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L9285
	ldr	ip, [r2, #16]
	b	.L9286
.L9298:
	mov	r2, #0
	movt	r2, 13000
	b	.L9285
	.fnend
	.size	ecm_notify_complete, .-ecm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_notify_complete, %function
ecm_qc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	cmn	r3, #108
	beq	.L9301
	cmn	r3, #104
	beq	.L9301
.L9300:
	cmp	r1, #0
	str	r1, [r5, #140]
	beq	.L9299
	ldrb	r2, [r5, #144]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L9305
	bcc	.L9299
	cmp	r2, #2
	bne	.L9304
	ldr	ip, [r5, #20]
	mov	r2, #0
	mov	r0, #8
	mov	r4, #42
	mov	lr, #16
	ldr	ip, [ip, #24]
	strb	r4, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r0, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r0, [r1]
	str	lr, [r1, #4]
	ldr	r2, [ip]
	ldr	ip, [r2, #20]
	cmp	ip, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L9307
	ldr	lr, [r2, #16]
	mov	ip, #0
	mov	r2, #28672
	movt	ip, 6500
	movt	r2, 148
	cmp	lr, #3
	moveq	r2, ip
.L9307:
	mov	ip, #0
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	strb	ip, [r5, #144]
.L9304:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r4, r1
	strb	r0, [r3]
	ldrb	r0, [r5, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #136]
	str	ip, [r5, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #140]
.L9299:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9301:
	mov	r3, #0
	strb	r3, [r5, #144]
	b	.L9300
.L9305:
	mov	r2, #0
	mov	ip, #8
	mov	r0, #2
	strb	r2, [r3, #1]
	ldrb	lr, [r5, #145]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	ip, [r1, #4]
	strb	r0, [r5, #144]
	b	.L9304
	.fnend
	.size	ecm_qc_notify_complete, .-ecm_qc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_notify_complete, %function
ncm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	add	r6, r5, #176
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L9320
	cmn	r3, #104
	beq	.L9320
.L9319:
	cmp	r4, #0
	str	r4, [r5, #160]
	beq	.L9322
	ldrb	r2, [r5, #164]	@ zero_extendqisi2
	ldr	r3, [r4]
	cmp	r2, #1
	beq	.L9324
	bcc	.L9322
	cmp	r2, #2
	bne	.L9323
	ldr	r0, [r5, #20]
	mov	r2, #0
	mov	r1, #8
	mov	lr, #42
	mov	ip, #16
	ldr	r0, [r0, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r1, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r1, [r4]
	str	ip, [r4, #4]
	ldr	r2, [r0]
	ldr	r0, [r2, #20]
	cmp	r0, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L9326
	ldr	ip, [r2, #16]
	mov	r0, #0
	mov	r2, #28672
	movt	r0, 6500
	movt	r2, 148
	cmp	ip, #3
	moveq	r2, r0
.L9326:
	mov	r0, #1
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r0, [r5, #164]
.L9323:
	mvn	r1, #94
	mov	r2, #0
	mov	r0, r6
	strb	r1, [r3]
	ldrb	r1, [r5, #140]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r5, #160]
	bl	_raw_spin_unlock
	ldr	r0, [r5, #156]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r4, [r5, #160]
.L9322:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L9320:
	mov	r3, #0
	strb	r3, [r5, #164]
	b	.L9319
.L9324:
	mov	r2, #0
	mov	r1, #8
	strb	r2, [r3, #1]
	ldrb	r0, [r5, #165]	@ zero_extendqisi2
	strh	r0, [r3, #2]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	r1, [r4, #4]
	strb	r2, [r5, #164]
	b	.L9323
	.fnend
	.size	ncm_notify_complete, .-ncm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_open, %function
rndis_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #20]
	ldr	r6, [r0, #156]
	ldr	r3, [r3, #24]
	uxtb	r2, r6
	ldr	r3, [r3]
	ldr	r1, [r3, #20]
	cmp	r1, #4
	bls	.L9338
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L9356
.L9340:
	cmp	r3, #3
	movne	r3, #97280
	moveq	r3, #4259840
.L9339:
	lsl	r9, r6, #4
	movw	r4, #:lower16:.LANCHOR1
	ldr	r7, .L9357
	cmp	r2, #0
	sub	r5, r9, r6
	movt	r4, #:upper16:.LANCHOR1
	lsl	r5, r5, #2
	streq	r2, [r4, #3780]
	mov	r2, #0
	streq	r3, [r4, #3784]
	add	r3, r4, r5
	add	r8, r7, r5
	str	r2, [r3, #3788]
	ldr	r3, [r8, #4]
	cmp	r3, r2
	beq	.L9337
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r2
	beq	.L9349
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L9337
	add	r3, r0, #20
.L9344:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #11
	str	r2, [r0, #16]
	ldr	r3, [r4, #3828]
	mov	lr, #7
	str	r0, [r4, #3828]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L9338:
	cmp	r1, #2
	movls	r3, #97280
	bls	.L9339
	ldr	r3, [r3, #16]
	b	.L9340
.L9356:
	mov	r3, #8519680
	b	.L9339
.L9349:
	mov	r3, #36
	mov	r0, #16
	b	.L9344
.L9337:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9358:
	.align	2
.L9357:
	.word	.LANCHOR1+3772
	.fnend
	.size	rndis_open, .-rndis_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open, %function
rndis_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #20]
	ldr	r6, [r0, #136]
	ldr	r3, [r3, #24]
	uxtb	r2, r6
	ldr	r3, [r3]
	ldr	r1, [r3, #20]
	cmp	r1, #4
	bls	.L9360
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L9378
.L9362:
	cmp	r3, #3
	movne	r3, #97280
	moveq	r3, #4259840
.L9361:
	lsl	r9, r6, #4
	movw	r4, #:lower16:.LANCHOR1
	ldr	r7, .L9379
	cmp	r2, #0
	sub	r5, r9, r6
	movt	r4, #:upper16:.LANCHOR1
	lsl	r5, r5, #2
	streq	r2, [r4, #3780]
	mov	r2, #0
	streq	r3, [r4, #3784]
	add	r3, r4, r5
	add	r8, r7, r5
	str	r2, [r3, #3788]
	ldr	r3, [r8, #4]
	cmp	r3, r2
	beq	.L9359
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r2
	beq	.L9371
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L9359
	add	r3, r0, #20
.L9366:
	sub	r6, r9, r6
	mov	r2, #0
	str	r3, [r0, #8]
	add	r4, r4, r6, lsl #2
	mov	ip, #20
	add	r5, r5, #52
	str	ip, [r0, #12]
	add	r5, r7, r5
	mov	r1, #11
	str	r2, [r0, #16]
	ldr	r3, [r4, #3828]
	mov	lr, #7
	str	r0, [r4, #3828]
	movt	r1, 16385
	str	r5, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	str	r1, [r3, #8]
	str	r2, [r3, #12]
	str	r2, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L9360:
	cmp	r1, #2
	movls	r3, #97280
	bls	.L9361
	ldr	r3, [r3, #16]
	b	.L9362
.L9378:
	mov	r3, #8519680
	b	.L9361
.L9371:
	mov	r3, #36
	mov	r0, #16
	b	.L9366
.L9359:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9380:
	.align	2
.L9379:
	.word	.LANCHOR1+3772
	.fnend
	.size	rndis_qc_open, .-rndis_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_remove, %function
gsdio_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r3]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #4]
	cmp	r5, #0
	beq	.L9382
	add	r9, r3, #4
	mov	r10, #0
	str	r0, [sp]
	mov	r6, #256
.L9394:
	ldr	r3, [sp]
	mov	r2, #9
	ldr	r4, [r9, #24]
	ldr	r1, [r3]
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp
	subs	r1, r0, #0
	bne	.L9383
	ldr	r7, [r4, #96]
	mov	r3, #1
	str	r1, [r4, #108]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r7, #0
	beq	.L9412
	str	r1, [r4, #172]
	ldr	r3, [r7, #128]
	cmp	r3, #0
	beq	.L9385
	mov	r0, r7
	blx	r3
.L9385:
	ldr	r0, [r7, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9386
	blx	r3
.L9386:
	ldr	r0, [r7, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9387
	blx	r3
.L9387:
	add	r3, r4, #4
	add	r0, r4, #28
	mov	r5, r3
	add	r8, r4, #12
	str	r3, [sp, #8]
	bl	cancel_work_sync
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	str	r0, [sp, #12]
	ldr	r5, [r7, #84]
	cmp	r8, r3
	beq	.L9388
.L9389:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	mov	r2, #512
	str	r6, [r3]
	str	r2, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r8, r3
	bne	.L9389
	ldr	r5, [r7, #84]
.L9388:
	ldr	r3, [r4, #20]
	add	r8, r4, #20
	cmp	r8, r3
	beq	.L9390
.L9391:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	mov	r2, #512
	str	r6, [r3]
	str	r2, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r8, r3
	bne	.L9391
.L9390:
	ldr	r3, [r4, #52]
	add	r8, r4, #52
	ldr	r5, [r7, #80]
	cmp	r8, r3
	beq	.L9392
	mov	r7, #512
.L9393:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	strd	r6, [r3]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #52]
	cmp	r8, r3
	bne	.L9393
.L9392:
	mov	r3, #0
	ldrd	r0, [sp, #8]
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
.L9412:
	ldr	r3, [sp, #4]
	ldr	r5, [r3]
.L9383:
	add	r10, r10, #1
	add	r9, r9, #108
	cmp	r10, r5
	bcc	.L9394
.L9382:
	mov	r0, #0
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_ch_remove, .-gsdio_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind_config, %function
ccid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L9429
	movt	r2, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
	ldr	r4, [r2, #2220]
	movw	ip, #:lower16:ccid_function_unbind
	ldr	r6, [r1, #24]
	movw	r1, #:lower16:.LC520
	movw	r0, #:lower16:ccid_function_set_alt
	movt	r1, #:upper16:.LC520
	movw	lr, #:lower16:ccid_function_bind
	movw	r2, #:lower16:ccid_function_setup
	movt	r0, #:upper16:ccid_function_set_alt
	str	r1, [r4]
	movw	r1, #:lower16:ccid_function_disable
	movt	ip, #:upper16:ccid_function_unbind
	str	r3, [r4, #8]
	movt	r1, #:upper16:ccid_function_disable
	add	r3, r3, #24
	movt	lr, #:upper16:ccid_function_bind
	movt	r2, #:upper16:ccid_function_setup
	str	r3, [r4, #12]
	str	r5, [r4, #20]
	str	lr, [r4, #24]
	str	ip, [r4, #28]
	str	r0, [r4, #32]
	add	r0, r5, #36
	str	r1, [r4, #40]
	add	r1, r4, #64
	str	r2, [r4, #44]
	str	r6, [r4, #76]
	ldr	r3, [r5, #40]
	str	r1, [r5, #40]
	str	r0, [r4, #64]
	str	r3, [r4, #68]
	str	r1, [r3]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L9418
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9414
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
.L9414:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9415
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9415
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9415:
	tst	r3, #2
	bne	.L9416
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9416
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9416:
	tst	r3, #1
	bne	.L9413
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9413
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9417:
.L9413:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9418:
	mov	r0, r3
	b	.L9414
.L9430:
	.align	2
.L9429:
	.word	.LANCHOR0+1988
	.fnend
	.size	ccid_function_bind_config, .-ccid_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind_config, %function
adb_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L9448
	movw	r0, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
	ldr	r4, [r0, #3520]
	movw	r2, #:lower16:.LC521
	ldr	r1, [r1, #24]
	movt	r2, #:upper16:.LC521
	add	r0, r3, #16
	str	r2, [r4]
	str	r3, [r4, #8]
	str	r0, [r4, #12]
	movw	r0, #:lower16:adb_function_set_alt
	str	r1, [r4, #76]
	ldr	r2, [r5, #24]
	movw	r1, #:lower16:adb_function_disable
	movt	r1, #:upper16:adb_function_disable
	movt	r0, #:upper16:adb_function_set_alt
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r5, [r4, #20]
	str	r0, [r4, #32]
	str	r1, [r4, #40]
	cmp	r2, #4
	movw	r2, #:lower16:adb_function_unbind
	addhi	r3, r3, #32
	movt	r2, #:upper16:adb_function_unbind
	strhi	r3, [r4, #16]
	movw	r3, #:lower16:adb_function_bind
	movt	r3, #:upper16:adb_function_bind
	str	r3, [r4, #24]
	add	r3, r4, #64
	str	r2, [r4, #28]
	ldr	r1, [r5, #40]
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L9437
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9433
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
.L9433:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9434
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9434
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9434:
	tst	r3, #2
	bne	.L9435
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9435
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9435:
	tst	r3, #1
	bne	.L9431
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9431
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9436:
.L9431:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9437:
	mov	r0, r3
	b	.L9433
.L9449:
	.align	2
.L9448:
	.word	.LANCHOR0+2036
	.fnend
	.size	adb_function_bind_config, .-adb_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_bind_config, %function
accessory_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC522
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC522
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	mov	r5, r1
	ldr	r4, [r3, #2324]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2092]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L9451
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L9457
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2092]
	strb	r2, [r3, #2116]
.L9451:
	ldr	r3, .L9469
	movw	r2, #:lower16:.LC523
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC523
	add	r1, r3, #8
	strd	r2, [r4]
	add	r2, r3, #24
	str	r1, [r4, #8]
	movw	r1, #:lower16:acc_function_disable
	str	r2, [r4, #12]
	movt	r1, #:upper16:acc_function_disable
	str	r0, [r4, #76]
	ldr	r2, [r5, #24]
	movw	r0, #:lower16:acc_function_set_alt
	movt	r0, #:upper16:acc_function_set_alt
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r5, [r4, #20]
	str	r0, [r4, #32]
	str	r1, [r4, #40]
	cmp	r2, #4
	movw	r2, #:lower16:acc_function_unbind
	addhi	r3, r3, #40
	movt	r2, #:upper16:acc_function_unbind
	strhi	r3, [r4, #16]
	movw	r3, #:lower16:acc_function_bind
	movt	r3, #:upper16:acc_function_bind
	str	r3, [r4, #24]
	add	r3, r4, #64
	str	r2, [r4, #28]
	ldr	r1, [r5, #40]
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L9458
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9454
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
.L9454:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9455
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9455
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9455:
	tst	r3, #2
	bne	.L9456
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9456
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9456:
	tst	r3, #1
	bne	.L9450
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9450
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9450:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9458:
	mov	r0, r3
	b	.L9454
.L9457:
	mvn	r0, #18
	b	.L9450
.L9470:
	.align	2
.L9469:
	.word	.LANCHOR0+2120
	.fnend
	.size	accessory_function_bind_config, .-accessory_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_bind_config, %function
rmnet_smd_sdio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r3, #2320]
	cmp	r4, #0
	beq	.L9476
	ldr	r3, .L9488
	movw	r0, #:lower16:.LC524
	movw	r2, #:lower16:rmnet_mux_bind
	movt	r0, #:upper16:.LC524
	movt	r2, #:upper16:rmnet_mux_bind
	mov	r5, r1
	movw	lr, #:lower16:rmnet_mux_unbind
	movw	r1, #:lower16:rmnet_mux_setup
	movw	ip, #:lower16:rmnet_mux_set_alt
	add	r6, r3, #8
	str	r2, [r4, #24]
	movw	r2, #:lower16:rmnet_mux_suspend
	movt	r2, #:upper16:rmnet_mux_suspend
	movt	lr, #:upper16:rmnet_mux_unbind
	stm	r4, {r0, r3, r6}
	movw	r0, #:lower16:rmnet_mux_disable
	add	r3, r3, #28
	movt	r0, #:upper16:rmnet_mux_disable
	movt	r1, #:upper16:rmnet_mux_setup
	movt	ip, #:upper16:rmnet_mux_set_alt
	str	r3, [r4, #12]
	add	r3, r4, #64
	str	r5, [r4, #20]
	str	lr, [r4, #28]
	str	ip, [r4, #32]
	str	r0, [r4, #40]
	add	r0, r5, #36
	str	r1, [r4, #44]
	str	r2, [r4, #48]
	ldr	r2, [r5, #40]
	str	r3, [r5, #40]
	str	r0, [r4, #64]
	str	r2, [r4, #68]
	str	r3, [r2]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L9477
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9473
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
.L9473:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9474
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9474
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9474:
	tst	r3, #2
	bne	.L9475
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9475
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9475:
	tst	r3, #1
	bne	.L9471
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9471
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9471:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9477:
	mov	r0, r3
	b	.L9473
.L9476:
	mvn	r0, #18
	b	.L9471
.L9489:
	.align	2
.L9488:
	.word	.LANCHOR0+2184
	.fnend
	.size	rmnet_smd_sdio_bind_config, .-rmnet_smd_sdio_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind_config, %function
mtp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC525
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC525
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	mov	r5, r1
	ldr	r4, [r3, #2336]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2232]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L9491
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L9497
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2232]
	strb	r2, [r3, #2256]
.L9491:
	ldr	r3, .L9509
	movw	r2, #:lower16:.LC526
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC526
	add	r1, r3, #8
	strd	r2, [r4]
	add	r2, r3, #28
	str	r1, [r4, #8]
	movw	r1, #:lower16:mtp_function_disable
	str	r2, [r4, #12]
	movt	r1, #:upper16:mtp_function_disable
	str	r0, [r4, #76]
	ldr	r2, [r5, #24]
	movw	r0, #:lower16:mtp_function_set_alt
	movt	r0, #:upper16:mtp_function_set_alt
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r5, [r4, #20]
	str	r0, [r4, #32]
	str	r1, [r4, #40]
	cmp	r2, #4
	movw	r2, #:lower16:mtp_function_unbind
	addhi	r3, r3, #48
	movt	r2, #:upper16:mtp_function_unbind
	strhi	r3, [r4, #16]
	movw	r3, #:lower16:mtp_function_bind
	movt	r3, #:upper16:mtp_function_bind
	str	r3, [r4, #24]
	add	r3, r4, #64
	str	r2, [r4, #28]
	ldr	r1, [r5, #40]
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L9498
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9494
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
.L9494:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9495
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9495
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9495:
	tst	r3, #2
	bne	.L9496
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9496
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9496:
	tst	r3, #1
	bne	.L9490
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9490
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9490:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9498:
	mov	r0, r3
	b	.L9494
.L9497:
	mvn	r0, #18
	b	.L9490
.L9510:
	.align	2
.L9509:
	.word	.LANCHOR0+2260
	.fnend
	.size	mtp_function_bind_config, .-mtp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_bind_config, %function
ptp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC525
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC525
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	mov	r5, r1
	ldr	r4, [r3, #2336]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2232]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L9512
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L9518
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2232]
	strb	r2, [r3, #2256]
.L9512:
	ldr	r3, .L9530
	movw	r2, #:lower16:.LC526
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC526
	add	r1, r3, #80
	strd	r2, [r4]
	add	r2, r3, #100
	str	r1, [r4, #8]
	movw	r1, #:lower16:mtp_function_disable
	str	r2, [r4, #12]
	movt	r1, #:upper16:mtp_function_disable
	str	r0, [r4, #76]
	ldr	r2, [r5, #24]
	movw	r0, #:lower16:mtp_function_set_alt
	movt	r0, #:upper16:mtp_function_set_alt
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r5, [r4, #20]
	str	r0, [r4, #32]
	str	r1, [r4, #40]
	cmp	r2, #4
	movw	r2, #:lower16:mtp_function_unbind
	addhi	r3, r3, #120
	movt	r2, #:upper16:mtp_function_unbind
	strhi	r3, [r4, #16]
	movw	r3, #:lower16:mtp_function_bind
	movt	r3, #:upper16:mtp_function_bind
	str	r3, [r4, #24]
	add	r3, r4, #64
	str	r2, [r4, #28]
	ldr	r1, [r5, #40]
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L9519
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L9515
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
.L9515:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9516
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9516
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9516:
	tst	r3, #2
	bne	.L9517
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9517
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9517:
	tst	r3, #1
	bne	.L9511
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9511
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9511:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9519:
	mov	r0, r3
	b	.L9515
.L9518:
	mvn	r0, #18
	b	.L9511
.L9531:
	.align	2
.L9530:
	.word	.LANCHOR0+2260
	.fnend
	.size	ptp_function_bind_config, .-ptp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_bind_config, %function
qdss_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR0
	mov	r6, r1
	movt	r7, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r7, #2412]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	cmp	r3, #0
	bne	.L9533
	ldr	r2, [r1, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L9536
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r1, #24]
	strb	r3, [r7, #2412]
	strb	r3, [r7, #2444]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L9536
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r7, #2420]
	strb	r3, [r7, #2456]
.L9533:
	ldr	r0, .L9571
	bl	_raw_spin_lock_irqsave
	ldr	r8, .L9571+4
	mov	r9, r0
	ldr	r3, [r7, #312]
	cmp	r3, r8
	sub	r5, r3, #4
	beq	.L9537
	movw	r4, #:lower16:.LC527
	movt	r4, #:upper16:.LC527
	b	.L9539
.L9566:
	ldr	r5, [r5, #4]
	cmp	r5, r8
	sub	r5, r5, #4
	beq	.L9537
.L9539:
	mov	r0, r4
	ldr	r1, [r5]
	bl	strcmp
	cmp	r0, #0
	bne	.L9566
	movw	r10, #:lower16:.LC527
	sub	r4, r5, #104
	movt	r10, #:upper16:.LC527
	str	r4, [r5, #20]
.L9547:
	mov	r1, r9
	ldr	r0, .L9571
	mov	r8, #0
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, .L9571+8
	movw	r1, #:lower16:qdss_bind
	movw	ip, #:lower16:qdss_unbind
	movt	r1, #:upper16:qdss_bind
	movw	r0, #:lower16:qdss_set_alt
	ldr	lr, [r6, #24]
	movw	r2, #:lower16:qdss_disable
	movt	ip, #:upper16:qdss_unbind
	str	r10, [r4]
	movt	r0, #:upper16:qdss_set_alt
	movt	r2, #:upper16:qdss_disable
	add	r7, r3, #24
	add	r9, r4, #132
	str	r1, [r4, #24]
	movw	r1, #:lower16:usb_qdss_disconnect_work
	str	r3, [r4, #8]
	movt	r1, #:upper16:usb_qdss_disconnect_work
	str	r3, [r4, #12]
	movw	r3, #:lower16:usb_qdss_connect_work
	str	r7, [r4, #4]
	movt	r3, #:upper16:usb_qdss_connect_work
	add	r7, r4, #140
	str	ip, [r4, #28]
	add	ip, r4, #152
	str	r6, [r4, #20]
	str	r0, [r4, #32]
	add	r0, r4, #168
	str	r2, [r4, #40]
	mov	r2, #2560
	str	lr, [r4, #76]
	str	r9, [r4, #132]
	str	r9, [r4, #136]
	str	r7, [r4, #140]
	str	r7, [r4, #144]
	str	r2, [r4, #148]
	str	ip, [r4, #152]
	str	ip, [r4, #156]
	str	r3, [r4, #160]
	add	r3, r4, #64
	str	r2, [r4, #164]
	add	r2, r6, #36
	str	r0, [r4, #168]
	strd	r0, [r4, #172]
	str	r8, [r4, #180]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r7, [r4, #24]
	cmp	r7, r8
	beq	.L9542
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	bge	.L9542
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r8, [r4, #20]
	strd	r0, [r4, #64]
.L9542:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9543
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9543
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L9543:
	tst	r3, #2
	bne	.L9544
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9544
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L9544:
	tst	r3, #1
	bne	.L9545
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9545
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L9545:
	cmp	r7, #0
	bne	.L9567
.L9532:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9537:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L9568
	mov	r2, #192
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L9569
.L9540:
	mov	r1, r9
	ldr	r0, .L9571
	movw	r10, #:lower16:.LC527
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	movt	r10, #:upper16:.LC527
	mov	r3, r2
	mov	r0, r10
	str	r2, [sp]
	mov	r1, #10
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #188]
	beq	.L9570
	ldr	r0, .L9571
	add	r5, r4, #104
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r7, #316]
	add	r3, r4, #108
	str	r10, [r4, #104]
	str	r8, [r4, #108]
	mov	r9, r0
	str	r3, [r7, #316]
	str	r2, [r4, #112]
	str	r3, [r2]
	b	.L9547
.L9568:
	mov	r4, #16
	b	.L9540
.L9536:
	mvn	r7, #18
.L9535:
	movw	r0, #:lower16:.LC530
	ldr	r1, .L9571+12
	movt	r0, #:upper16:.LC530
	bl	printk
	b	.L9532
.L9570:
	mov	r0, r4
	mvn	r7, #11
	bl	kfree
	b	.L9535
.L9567:
	movw	r0, #:lower16:.LC529
	movt	r0, #:upper16:.LC529
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #20]
	bl	kfree
	b	.L9535
.L9569:
	movw	r0, #:lower16:.LC528
	mvn	r7, #11
	movt	r0, #:upper16:.LC528
	bl	printk
	mov	r1, r9
	ldr	r0, .L9571
	bl	_raw_spin_unlock_irqrestore
	b	.L9535
.L9572:
	.align	2
.L9571:
	.word	.LANCHOR1+3452
	.word	.LANCHOR0+312
	.word	.LANCHOR0+2460
	.word	.LANCHOR3-3728
	.fnend
	.size	qdss_function_bind_config, .-qdss_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_bind_config, %function
mbim_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	ldr	r0, .L9607
	mov	r5, r1
	strd	r6, [sp, #8]
	ldr	r7, .L9607+4
	movw	r4, #:lower16:.LANCHOR1
	strd	r8, [sp, #16]
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	bl	strim
	mov	r8, r0
	sub	r9, r7, #4
	movw	r0, #:lower16:.LC531
	mov	r1, r9
	movt	r0, #:upper16:.LC531
	mov	r2, #0
	bl	printk
	ldr	r6, [r4, #3708]
	cmp	r6, #0
	beq	.L9603
	movw	r0, #:lower16:.LC533
	mov	r2, r6
	movt	r0, #:upper16:.LC533
	add	r1, r7, #16
	bl	printk
	cmp	r6, #1
	bne	.L9604
	ldr	r3, [r4, #3444]
	cmp	r3, #0
	beq	.L9605
.L9578:
	movw	r0, #:lower16:.LC397
	movw	r6, #:lower16:.LANCHOR0
	ldr	r1, .L9607+8
	movt	r0, #:upper16:.LC397
	mov	r2, #1
	movt	r6, #:upper16:.LANCHOR0
	bl	printk
	ldrb	r3, [r6, #2492]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9581
.L9582:
	ldr	r4, [r4, #3712]
	cmp	r4, #0
	beq	.L9606
	ldr	lr, .L9607+12
	movw	r2, #:lower16:.LC540
	movw	r3, #:lower16:mbim_unbind
	movt	r2, #:upper16:.LC540
	movt	r3, #:upper16:mbim_unbind
	mov	r0, r8
	movw	r1, #:lower16:mbim_bind
	ldr	r8, [r5, #24]
	str	r3, [r4, #28]
	movw	r3, #:lower16:mbim_setup
	movt	r1, #:upper16:mbim_bind
	add	r9, lr, #852
	movt	r3, #:upper16:mbim_setup
	movw	ip, #:lower16:mbim_get_alt
	stm	r4, {r2, r9}
	movw	r2, #:lower16:mbim_set_alt
	movt	ip, #:upper16:mbim_get_alt
	movt	r2, #:upper16:mbim_set_alt
	str	r1, [r4, #24]
	movw	r1, #:lower16:mbim_disable
	movt	r1, #:upper16:mbim_disable
	str	r2, [r4, #32]
	movw	r2, #:lower16:mbim_suspend
	str	r3, [r4, #44]
	movw	r3, #:lower16:mbim_resume
	movt	r2, #:upper16:mbim_suspend
	movt	r3, #:upper16:mbim_resume
	str	ip, [r4, #36]
	str	r1, [r4, #40]
	mov	r1, #16384
	strd	r2, [r4, #48]
	mov	r2, #0
	str	r8, [r4, #76]
	str	r2, [r4, #80]
	str	lr, [r4, #192]
	str	r1, [r4, #216]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #124]
	beq	.L9586
	mov	r3, #6
	str	r3, [r4, #124]
.L9587:
	add	r1, r4, #208
	add	r0, r4, #200
	str	r5, [r4, #20]
	add	r3, r4, #64
	add	r2, r5, #36
	str	r0, [r4, #200]
	strd	r0, [r4, #204]
	str	r1, [r4, #212]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, #0
	beq	.L9588
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L9588
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #64]
.L9588:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9589
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9589
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9589:
	tst	r3, #2
	bne	.L9590
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9590
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9590:
	tst	r3, #1
	bne	.L9591
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9591
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9591:
	movw	r0, #:lower16:.LC541
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC541
	mov	r2, r6
	bl	printk
.L9573:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L9581:
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L9584
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #2492]
	strb	r3, [r6, #2524]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L9584
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r6, #2500]
	strb	r3, [r6, #2536]
	strb	r3, [r6, #2548]
	b	.L9582
.L9586:
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r6, #140]
	strh	r1, [r6, #144]	@ movhi
	str	r3, [r6, #152]
	strh	r2, [r6, #162]	@ movhi
	b	.L9587
.L9605:
	movw	r0, #:lower16:.LC535
	mov	r2, r6
	str	r3, [sp]
	movt	r0, #:upper16:.LC535
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3444]
	beq	.L9579
	bl	bam_data_setup.part.98
	subs	r6, r0, #0
	beq	.L9578
.L9577:
	movw	r0, #:lower16:.LC537
	mov	r2, r6
	ldr	r1, .L9607+8
	movt	r0, #:upper16:.LC537
	bl	printk
.L9580:
	movw	r0, #:lower16:.LC538
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC538
	bl	printk
	b	.L9573
.L9584:
	mvn	r6, #18
	b	.L9573
.L9606:
	movw	r0, #:lower16:.LC539
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC539
	mvn	r6, #11
	bl	printk
	b	.L9573
.L9603:
	movw	r0, #:lower16:.LC532
	mov	r3, r6
	mov	r2, r6
	mov	r1, r9
	movt	r0, #:upper16:.LC532
	mvn	r6, #18
	bl	printk
	b	.L9573
.L9604:
	movw	r0, #:lower16:.LC534
	mov	r2, r6
	ldr	r1, .L9607+16
	movt	r0, #:upper16:.LC534
	mvn	r6, #21
	bl	printk
	b	.L9577
.L9579:
	movw	r0, #:lower16:.LC536
	ldr	r1, .L9607+16
	mvn	r6, #11
	movt	r0, #:upper16:.LC536
	bl	printk
	movw	r0, #:lower16:.LC537
	mov	r2, r6
	add	r1, r7, #16
	movt	r0, #:upper16:.LC537
	bl	printk
	b	.L9580
.L9608:
	.align	2
.L9607:
	.word	.LANCHOR1+3372
	.word	.LANCHOR3-3696
	.word	.LANCHOR3-3680
	.word	.LANCHOR0+1700
	.word	.LANCHOR2+3148
	.fnend
	.size	mbim_function_bind_config, .-mbim_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_bind_config, %function
mass_storage_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r3, #2560]	@ zero_extendqisi2
	ldr	r0, [r0, #4]
	cmp	r2, #0
	ldr	r6, [r0, #96]
	bne	.L9610
	ldr	r0, [r1, #24]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	mvnhi	r6, #18
	bhi	.L9609
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r0, #48]
	strb	r2, [r3, #2560]
	strb	r2, [r3, #2584]
.L9610:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L9620
	mov	r2, #100
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r6, #11
	bne	.L9612
.L9609:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9620:
	mov	r4, #16
.L9612:
	ldr	r0, .L9635
	movw	r2, #:lower16:.LC542
	movw	ip, #:lower16:fsg_bind
	movt	r2, #:upper16:.LC542
	movw	r3, #:lower16:fsg_unbind
	movw	r1, #:lower16:fsg_setup
	movt	r3, #:upper16:fsg_unbind
	str	r2, [r4]
	movw	r2, #:lower16:fsg_set_alt
	movt	r1, #:upper16:fsg_setup
	str	r0, [r4, #4]
	movw	r0, #:lower16:fsg_disable
	movt	r2, #:upper16:fsg_set_alt
	movt	ip, #:upper16:fsg_bind
	movt	r0, #:upper16:fsg_disable
	str	r5, [r4, #20]
	str	ip, [r4, #24]
	str	r3, [r4, #28]
	add	r3, r4, #64
	str	r2, [r4, #32]
	add	r2, r5, #36
	str	r0, [r4, #40]
	str	r1, [r4, #44]
	str	r6, [r4, #80]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, #0
	beq	.L9613
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L9613
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #64]
.L9613:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9614
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9614
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9614:
	tst	r3, #2
	bne	.L9615
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9615
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L9615:
	tst	r3, #1
	bne	.L9616
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9616
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9616:
	cmp	r6, #0
	bne	.L9633
	ldr	r4, [r4, #80]
	ldr	r3, [r4, #212]
	cmp	r3, #0
	beq	.L9634
.L9618:
	add	r3, r4, #212
	.syntax divided
@ 44 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L9609
.L9633:
	mov	r0, r4
	bl	kfree
	b	.L9609
.L9634:
	movw	r0, #:lower16:.LC543
	mov	r1, #42
	movt	r0, #:upper16:.LC543
	bl	warn_slowpath_null
	b	.L9618
.L9636:
	.align	2
.L9635:
	.word	.LANCHOR0+2588
	.fnend
	.size	mass_storage_function_bind_config, .-mass_storage_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_bind_config, %function
rmnet_sdio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L9646
	mov	r2, #364
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L9660
.L9638:
	mov	r5, #0
	movw	r0, #:lower16:.LC544
	mov	r3, r5
	movt	r0, #:upper16:.LC544
	mov	r2, #1
	mov	r1, #10
	str	r5, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #192]
	beq	.L9648
	movw	ip, #:lower16:rmnet_sdio_disconnect_work
	movw	r0, #:lower16:rmnet_sdio_control_rx_work
	str	r5, [r4, #180]
	movw	r2, #:lower16:rmnet_sdio_data_rx_work
	movt	ip, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #184]
	movt	r0, #:upper16:rmnet_sdio_control_rx_work
	movt	r2, #:upper16:rmnet_sdio_data_rx_work
	str	r5, [r4, #188]
	movw	r3, #:lower16:rmnet_sdio_set_modem_cbits_w
	movw	r1, #:lower16:rmnet_open_sdio_work
	str	ip, [r4, #208]
	mov	r7, #2560
	add	lr, r4, #216
	add	ip, r4, #232
	movt	r3, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #200
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r7, [r4, #196]
	str	r0, [r4, #224]
	add	r0, r4, #328
	str	r2, [r4, #240]
	add	r2, r4, #248
	str	r8, [r4, #200]
	str	r8, [r4, #204]
	movw	r8, #:lower16:rmnet_sdio_suspend
	str	r7, [r4, #212]
	movt	r8, #:upper16:rmnet_sdio_suspend
	str	lr, [r4, #216]
	str	lr, [r4, #220]
	str	r7, [r4, #228]
	str	ip, [r4, #232]
	str	ip, [r4, #236]
	str	r7, [r4, #244]
	str	r2, [r4, #248]
	str	r2, [r4, #252]
	mov	r2, r5
	str	r1, [r4, #256]
	mov	r1, r5
	str	r7, [r4, #324]
	str	r0, [r4, #328]
	str	r0, [r4, #332]
	add	r0, r4, #260
	str	r3, [r4, #336]
	bl	init_timer_key
	movw	ip, #:lower16:rmnet_sdio_bind
	ldr	r3, .L9664
	movw	lr, #:lower16:.LC545
	movt	ip, #:upper16:rmnet_sdio_bind
	movw	r0, #:lower16:rmnet_sdio_unbind
	movt	lr, #:upper16:.LC545
	movt	r0, #:upper16:rmnet_sdio_unbind
	movw	r2, #:lower16:delayed_work_timer_fn
	movw	r1, #:lower16:rmnet_close_sdio_work
	str	ip, [r4, #24]
	movw	ip, #:lower16:rmnet_sdio_set_alt
	movt	r2, #:upper16:delayed_work_timer_fn
	movt	ip, #:upper16:rmnet_sdio_set_alt
	str	lr, [r4]
	movw	lr, #:lower16:rmnet_sdio_setup
	str	r3, [r4, #4]
	movt	lr, #:upper16:rmnet_sdio_setup
	movt	r1, #:upper16:rmnet_close_sdio_work
	str	r0, [r4, #28]
	movw	r0, #:lower16:rmnet_sdio_disable
	str	ip, [r4, #32]
	add	ip, r3, #8
	add	r3, r3, #28
	movt	r0, #:upper16:rmnet_sdio_disable
	str	ip, [r4, #8]
	add	ip, r4, #112
	str	r3, [r4, #12]
	add	r3, r4, #100
	str	r0, [r4, #40]
	add	r0, r4, #296
	str	ip, [r4, #112]
	str	r3, [r4, #100]
	str	r3, [r4, #104]
	add	r3, r4, #152
	str	ip, [r4, #116]
	add	ip, r4, #124
	str	lr, [r4, #44]
	add	lr, r4, #244
	str	r8, [r4, #48]
	str	ip, [r4, #124]
	str	ip, [r4, #128]
	add	ip, r4, #136
	str	r3, [r4, #152]
	str	r3, [r4, #156]
	add	r3, r4, #164
	str	ip, [r4, #136]
	str	ip, [r4, #140]
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r3, [r4, #164]
	str	r3, [r4, #168]
	add	r3, r4, #64
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	str	r2, [r4, #276]
	add	r2, r6, #36
	str	lr, [r4, #280]
	str	r7, [r4, #292]
	str	r0, [r4, #296]
	str	r0, [r4, #300]
	str	r1, [r4, #304]
	str	r6, [r4, #20]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r7, [r4, #24]
	cmp	r7, r5
	beq	.L9641
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L9661
.L9641:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9642
.L9663:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9642
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L9642:
	tst	r3, #2
	bne	.L9643
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9643
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L9643:
	tst	r3, #1
	bne	.L9644
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9644
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L9644:
	cmp	r7, #0
	beq	.L9662
.L9645:
	ldr	r0, [r4, #192]
	bl	destroy_workqueue
.L9640:
	mov	r0, r4
	bl	kfree
.L9637:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9662:
	movw	r0, #:lower16:.LC546
	mov	r1, r7
	movt	r0, #:upper16:.LC546
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #340]
	bhi	.L9637
	ldr	ip, .L9664+4
	movw	r0, #:lower16:.LC154
	mov	r3, r4
	mov	r1, #292
	movt	r0, #:upper16:.LC154
	str	ip, [sp]
	bl	debugfs_create_file
	b	.L9637
.L9661:
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r4, #20]
	strd	r0, [r4, #64]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9642
	b	.L9663
.L9646:
	mov	r4, #16
	b	.L9638
.L9648:
	mvn	r7, #11
	b	.L9640
.L9660:
	mvn	r7, #11
	b	.L9637
.L9665:
	.align	2
.L9664:
	.word	.LANCHOR0+2596
	.word	.LANCHOR3-3664
	.fnend
	.size	rmnet_sdio_function_bind_config, .-rmnet_sdio_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_function_bind_config, %function
gps_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r2, [r3, #-3996]
	.pad #12
	sub	sp, sp, #12
	cmp	r2, #0
	movwne	r6, #:lower16:.LANCHOR1
	movtne	r6, #:upper16:.LANCHOR1
	bne	.L9667
	movw	r2, #:lower16:kmalloc_caches
	mov	r1, #1
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #8]
	str	r1, [r3, #-3996]
	cmp	r0, #0
	beq	.L9685
	mov	r2, #152
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L9702
.L9668:
	movw	r6, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r6, #:upper16:.LANCHOR1
	add	r3, r0, #136
	mov	r1, #3
	strb	r2, [r0, #104]
	str	r2, [r0, #124]
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	str	r1, [r6, #2236]
	str	r0, [r6, #2240]
.L9667:
	ldrb	r3, [r6, #3532]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9703
.L9670:
	movw	r2, #:lower16:kmalloc_caches
	add	r3, r3, #1
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #32]
	strb	r3, [r6, #3532]
	cmp	r0, #0
	beq	.L9704
	mov	r2, #208
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L9705
.L9676:
	movw	r3, #:lower16:grmnet_ctrl_smd_connect_w
	mov	r8, #0
	add	ip, r4, #116
	mov	r5, #2560
	movt	r3, #:upper16:grmnet_ctrl_smd_connect_w
	mov	r2, #3
	mov	r1, r8
	add	r0, r4, #128
	str	r2, [r4, #100]
	mov	r2, r8
	movw	r9, #:lower16:delayed_work_timer_fn
	str	r8, [r4, #108]
	movt	r9, #:upper16:delayed_work_timer_fn
	str	r5, [r4, #112]
	str	ip, [r4, #116]
	str	ip, [r4, #120]
	str	r3, [r4, #124]
	bl	init_timer_key
	movw	r3, #:lower16:grmnet_ctrl_smd_disconnect_w
	add	r0, r4, #164
	str	r9, [r4, #144]
	movt	r3, #:upper16:grmnet_ctrl_smd_disconnect_w
	add	r1, r4, #112
	mov	r2, r8
	str	r1, [r4, #148]
	mov	r1, r8
	str	r5, [r4, #160]
	str	r0, [r4, #164]
	str	r0, [r4, #168]
	add	r0, r4, #176
	str	r3, [r4, #172]
	bl	init_timer_key
	movw	r3, #:lower16:.LC551
	add	r2, r4, #160
	str	r4, [r4, #84]
	movt	r3, #:upper16:.LC551
	movw	r1, #:lower16:.LC552
	movt	r1, #:upper16:.LC552
	add	r0, r4, #12
	str	r3, [r4, #4]
	str	r9, [r4, #192]
	str	r2, [r4, #196]
	ldr	r2, .L9710
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC553
	ldr	r2, .L9710
	add	r0, r4, #24
	movt	r1, #:upper16:.LC553
	bl	__init_waitqueue_head
	movw	r2, #:lower16:grmnet_ctrl_smd_read_w
	movw	r3, #:lower16:grmnet_ctrl_smd_write_w
	str	r5, [r4, #52]
	movt	r2, #:upper16:grmnet_ctrl_smd_read_w
	movt	r3, #:upper16:grmnet_ctrl_smd_write_w
	movw	ip, #:lower16:grmnet_ctrl_smd_ch_probe
	movw	r0, #:lower16:grmnet_ctrl_smd_ch_remove
	str	r2, [r4, #64]
	add	r1, r4, #40
	add	r2, r4, #56
	movt	ip, #:upper16:grmnet_ctrl_smd_ch_probe
	movt	r0, #:upper16:grmnet_ctrl_smd_ch_remove
	str	r3, [r4, #80]
	add	r3, r4, #72
	str	r1, [r4, #40]
	str	r1, [r4, #44]
	movw	r1, #:lower16:.LANCHOR0
	str	r2, [r4, #56]
	movt	r1, #:upper16:.LANCHOR0
	str	r2, [r4, #60]
	ldrb	r2, [r1, #2644]	@ zero_extendqisi2
	str	r5, [r4, #68]
	ldr	r5, [r6, #2240]
	str	r3, [r4, #72]
	str	r3, [r4, #76]
	str	r4, [r6, #780]
	cmp	r2, r8
	str	ip, [r6, #784]
	str	r0, [r6, #788]
	ldr	r3, [r4, #4]
	str	r3, [r6, #804]
	str	r8, [r6, #812]
	ldrb	r3, [r5, #104]	@ zero_extendqisi2
	add	r3, r3, #3
	strb	r3, [r5, #104]
	bne	.L9675
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	addls	r3, r3, #1
	uxtbls	r3, r3
	strbls	r3, [r1, #2644]
	strbls	r3, [r2, #48]
	bhi	.L9706
.L9675:
	add	r4, r5, #124
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC557
	mov	r6, r0
	movt	r1, #:upper16:.LC557
	mov	r0, #32
	str	r3, [r5, #120]
	bl	kasprintf
	str	r0, [r5]
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L9707
	movw	r3, #:lower16:gps_bind
	movw	r2, #:lower16:gps_unbind
	ldr	lr, .L9710+4
	movw	r1, #:lower16:gps_disable
	movw	r0, #:lower16:gps_set_alt
	movt	r3, #:upper16:gps_bind
	movt	r2, #:upper16:gps_unbind
	movt	r1, #:upper16:gps_disable
	movt	r0, #:upper16:gps_set_alt
	movw	ip, #:lower16:gps_setup
	str	lr, [r5, #4]
	str	r3, [r5, #24]
	movw	r3, #:lower16:gps_suspend
	movt	ip, #:upper16:gps_setup
	str	r2, [r5, #28]
	movw	r2, #:lower16:gps_send_cpkt_response
	movt	r3, #:upper16:gps_suspend
	movt	r2, #:upper16:gps_send_cpkt_response
	str	r7, [r5, #20]
	str	r0, [r5, #32]
	movw	r0, #:lower16:gps_disconnect
	str	r1, [r5, #40]
	movw	r1, #:lower16:gps_connect
	movt	r0, #:upper16:gps_disconnect
	movt	r1, #:upper16:gps_connect
	str	ip, [r5, #44]
	str	r3, [r5, #48]
	add	r3, r5, #64
	str	r2, [r5, #84]
	add	r2, r7, #36
	strd	r0, [r5, #96]
	ldr	r1, [r7, #40]
	str	r3, [r7, #40]
	str	r2, [r5, #64]
	str	r1, [r5, #68]
	str	r3, [r1]
	ldr	r4, [r5, #24]
	cmp	r4, #0
	beq	.L9681
	mov	r1, r5
	mov	r0, r7
	blx	r4
	subs	r4, r0, #0
	bge	.L9681
	ldrd	r2, [r5, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5, #20]
	strd	r0, [r5, #64]
.L9681:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9682
	ldr	r2, [r5, #8]
	cmp	r2, #0
	beq	.L9682
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L9682:
	tst	r3, #2
	bne	.L9683
	ldr	r2, [r5, #12]
	cmp	r2, #0
	beq	.L9683
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L9683:
	tst	r3, #1
	bne	.L9684
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L9684
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L9684:
	cmp	r4, #0
	bne	.L9708
.L9666:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L9685:
	mov	r0, #16
	b	.L9668
.L9703:
	movw	r0, #:lower16:.LC549
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC549
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r6, #3516]
	beq	.L9671
	ldrb	r3, [r6, #3532]	@ zero_extendqisi2
	b	.L9670
.L9704:
	mov	r4, #16
	b	.L9676
.L9705:
	movw	r0, #:lower16:.LC554
	mov	r2, #3
	ldr	r1, .L9710+8
	movt	r0, #:upper16:.LC554
	bl	printk
	ldrb	r3, [r6, #3532]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r6, #3532]
	beq	.L9709
.L9677:
	ldr	r2, [r6, #2240]
	ldrb	r3, [r2, #104]	@ zero_extendqisi2
	add	r3, r3, #3
	strb	r3, [r2, #104]
.L9672:
	movw	r0, #:lower16:.LC555
	ldr	r1, .L9710+12
	mvn	r4, #11
	movt	r0, #:upper16:.LC555
	bl	printk
	b	.L9666
.L9709:
	ldr	r0, [r6, #3516]
	bl	destroy_workqueue
	b	.L9677
.L9706:
	movw	r0, #:lower16:.LC556
	mvn	r2, #18
	ldr	r1, .L9710+16
	movt	r0, #:upper16:.LC556
	mov	r4, r2
	bl	printk
.L9679:
	movw	r0, #:lower16:.LC560
	ldr	r1, .L9710+12
	movt	r0, #:upper16:.LC560
	bl	printk
	b	.L9666
.L9707:
	movw	r0, #:lower16:.LC558
	ldr	r1, .L9710+16
	mvn	r4, #11
	movt	r0, #:upper16:.LC558
	bl	printk
	b	.L9679
.L9708:
	movw	r0, #:lower16:.LC559
	mov	r2, r4
	ldr	r1, .L9710+16
	movt	r0, #:upper16:.LC559
	bl	printk
	ldr	r0, [r5]
	bl	kfree
	b	.L9679
.L9702:
	ldr	r5, .L9710+20
	movw	r0, #:lower16:.LC547
	mvn	r4, #11
	movt	r0, #:upper16:.LC547
	sub	r1, r5, #8
	bl	printk
	movw	r0, #:lower16:.LC548
	add	r1, r5, #8
	movt	r0, #:upper16:.LC548
	bl	printk
	b	.L9666
.L9671:
	movw	r0, #:lower16:.LC550
	ldr	r1, .L9710+8
	movt	r0, #:upper16:.LC550
	bl	printk
	ldr	r2, [r6, #2240]
	ldrb	r3, [r2, #104]	@ zero_extendqisi2
	add	r3, r3, #3
	strb	r3, [r2, #104]
	b	.L9672
.L9711:
	.align	2
.L9710:
	.word	.LANCHOR4-3992
	.word	.LANCHOR0+2660
	.word	.LANCHOR3-3516
	.word	.LANCHOR3-3544
	.word	.LANCHOR3-3500
	.word	.LANCHOR3-3552
	.fnend
	.size	gps_function_bind_config, .-gps_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_function_bind_config, %function
rmnet_smd_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L9724
	mov	r2, #448
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L9741
.L9713:
	mov	r5, #0
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC544
	mov	r3, r5
	movt	r0, #:upper16:.LC544
	str	r5, [sp]
	mov	r2, #1
	mov	r1, #10
	str	r4, [r8, #3424]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #380]
	beq	.L9726
	add	r1, r4, #388
	movw	r2, #:lower16:rmnet_smd_connect_work
	str	r5, [r4, #156]
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	mov	ip, #2560
	str	r5, [r4, #160]
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	add	r0, r4, #404
	str	r5, [r4, #164]
	movt	r2, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #388]
	movw	r9, #:lower16:rmnet_smd_setup
	str	r1, [r4, #392]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	add	r7, r4, #116
	str	r5, [r4, #300]
	movt	r1, #:upper16:rmnet_control_rx_tlet
	movt	r9, #:upper16:rmnet_smd_setup
	str	r5, [r4, #364]
	str	ip, [r4, #384]
	str	r2, [r4, #396]
	mov	r2, r4
	str	ip, [r4, #400]
	str	r0, [r4, #404]
	str	r0, [r4, #408]
	add	r0, r4, #276
	str	r3, [r4, #412]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	add	r0, r4, #256
	movt	r1, #:upper16:rmnet_control_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	add	r0, r4, #340
	movt	r1, #:upper16:rmnet_data_rx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #320
	movt	r1, #:upper16:rmnet_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC561
	ldr	r2, .L9745
	add	r0, r4, #304
	movt	r1, #:upper16:.LC561
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC562
	ldr	r2, .L9745
	add	r0, r4, #368
	movt	r1, #:upper16:.LC562
	bl	__init_waitqueue_head
	ldr	r3, .L9745+4
	movw	r0, #:lower16:rmnet_smd_ch_probe
	movw	r2, #:lower16:.LC563
	movt	r0, #:upper16:rmnet_smd_ch_probe
	movt	r2, #:upper16:.LC563
	movw	ip, #:lower16:rmnet_smd_bind
	movw	r1, #:lower16:.LC502
	movt	ip, #:upper16:rmnet_smd_bind
	movt	r1, #:upper16:.LC502
	strd	r2, [r4]
	add	lr, r3, #8
	add	r3, r3, #28
	str	r0, [r4, #168]
	movw	r0, #:lower16:rmnet_smd_unbind
	movw	r2, #:lower16:rmnet_smd_set_alt
	movt	r0, #:upper16:rmnet_smd_unbind
	movt	r2, #:upper16:rmnet_smd_set_alt
	str	lr, [r4, #8]
	str	r3, [r4, #12]
	movw	r3, #:lower16:rmnet_smd_disable
	add	lr, r4, #108
	movt	r3, #:upper16:rmnet_smd_disable
	str	r6, [r4, #20]
	str	r0, [r4, #28]
	add	r0, r4, #100
	str	ip, [r4, #24]
	add	ip, r4, #124
	str	r2, [r4, #32]
	add	r2, r4, #140
	str	r3, [r4, #40]
	add	r3, r4, #132
	str	r9, [r4, #44]
	str	r0, [r4, #100]
	str	r0, [r4, #104]
	add	r0, r4, #148
	str	lr, [r4, #108]
	str	lr, [r4, #112]
	str	r7, [r4, #116]
	str	r7, [r4, #120]
	str	ip, [r4, #124]
	str	ip, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	add	r3, r4, #64
	str	r2, [r4, #140]
	str	r2, [r4, #144]
	add	r2, r6, #36
	str	r0, [r4, #148]
	str	r0, [r4, #152]
	str	r1, [r4, #188]
	str	r5, [r4, #196]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r7, [r4, #24]
	cmp	r7, r5
	beq	.L9716
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L9742
.L9716:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9717
.L9744:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9717
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L9717:
	tst	r3, #2
	bne	.L9718
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9718
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L9718:
	tst	r3, #1
	bne	.L9719
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9719
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L9719:
	cmp	r7, #0
	beq	.L9743
.L9720:
	ldr	r0, [r4, #380]
	bl	destroy_workqueue
.L9715:
	mov	r0, r4
	bl	kfree
.L9712:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L9743:
	movw	r0, #:lower16:.LC564
	mov	r1, r7
	movt	r0, #:upper16:.LC564
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r8, #3456]
	beq	.L9712
	cmn	r0, #4096
	bhi	.L9712
	ldr	ip, .L9745+8
	movw	r0, #:lower16:.LC154
	mov	r3, r4
	movt	r0, #:upper16:.LC154
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L9723
	cmn	r0, #4096
	bls	.L9712
.L9723:
	ldr	r0, [r8, #3456]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r8, #3456]
	b	.L9712
.L9742:
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r4, #20]
	strd	r0, [r4, #64]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9717
	b	.L9744
.L9724:
	mov	r4, #16
	b	.L9713
.L9726:
	mvn	r7, #11
	b	.L9715
.L9741:
	mvn	r7, #11
	b	.L9712
.L9746:
	.align	2
.L9745:
	.word	.LANCHOR4-3992
	.word	.LANCHOR0+2668
	.word	.LANCHOR3-3484
	.fnend
	.size	rmnet_smd_function_bind_config, .-rmnet_smd_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_write, %function
ccid_bulk_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r5, #88]
	cmp	r3, #0
	beq	.L9765
	cmp	r2, #0
	mov	r4, r2
	mov	r8, r1
	beq	.L9780
	cmp	r2, #524
	bcs	.L9781
	add	r7, r5, #84
	add	r9, r5, #184
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #184]
	mov	r1, r0
	cmp	r9, r3
	beq	.L9782
	ldr	ip, [r3]
	mov	lr, #512
	mov	r10, #256
	ldr	r2, [r3, #4]
	sub	r6, r3, #36
	mov	r0, r7
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L9753
.L9754:
	ldr	r3, [r5, #140]
	cmp	r3, #0
	bne	.L9783
	mov	r3, sp
	ldr	r0, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L9761
	mov	r1, r8
	mov	r2, r4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L9762
	str	r4, [r6, #4]
	ldr	r0, [r5, #96]
	mov	r2, #208
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L9784
.L9747:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9761:
	mov	r1, r4
	bl	__memzero
.L9762:
	ldr	r3, [r5, #88]
	cmp	r3, #0
	bne	.L9764
	cmp	r6, #0
	beq	.L9765
	ldr	r5, [r5, #96]
	mvn	r4, #18
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L9747
.L9782:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L9753:
	ldr	r3, [r5, #140]
	cmp	r3, #0
	bne	.L9771
	mov	r2, sp
	add	r1, sp, #24
	str	r4, [sp, #4]
	bic	r10, r2, #8128
	str	r3, [sp, #12]
	movw	r2, #:lower16:autoremove_wake_function
	bic	r10, r10, #63
	add	ip, r5, #164
	ldr	r0, [r10, #12]
	movt	r2, #:upper16:autoremove_wake_function
	mov	r4, ip
	str	ip, [sp]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L9759
.L9786:
	bl	schedule
.L9759:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r4
	mov	fp, #256
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #184]
	mov	r2, r0
	mov	lr, #512
	mov	r0, r7
	mov	r1, r2
	cmp	r9, r3
	sub	r6, r3, #36
	beq	.L9785
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L9778
.L9756:
	ldr	r3, [r5, #140]
	cmp	r3, #0
	bne	.L9772
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L9786
	add	r1, sp, #12
	mov	r4, #65024
	ldr	r0, [sp]
	movt	r4, 65535
	bl	finish_wait
	b	.L9747
.L9771:
	mov	r6, #0
	b	.L9754
.L9784:
	mov	r3, #1
	mov	r0, r7
	str	r3, [r5, #140]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #188]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #188]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	str	r0, [sp]
	cmp	r3, #0
	mvnne	r4, #4
	movne	r1, r0
	beq	.L9787
.L9767:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L9747
.L9765:
	mvn	r4, #18
	b	.L9747
.L9787:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	fp, #256
	mov	r8, #512
	b	.L9768
.L9770:
	ldr	r10, [r5, #96]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
.L9768:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #184]
	mov	r3, r0
	mov	r0, r7
	mov	r1, r3
	cmp	r9, r4
	sub	r6, r4, #36
	beq	.L9788
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	fp, [r4]
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L9770
	mvn	r4, #18
	ldr	r1, [sp]
	b	.L9767
.L9764:
	mov	r0, r7
	mvn	r4, #13
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #188]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r7
	str	r2, [r5, #188]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L9747
.L9778:
	ldr	r4, [sp, #4]
.L9757:
	add	r1, sp, #12
	ldr	r0, [sp]
	bl	finish_wait
	b	.L9754
.L9772:
	mov	r6, #0
	ldr	r4, [sp, #4]
	b	.L9757
.L9785:
	bl	_raw_spin_unlock_irqrestore
	b	.L9756
.L9788:
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #18
	ldr	r1, [sp]
	b	.L9767
.L9780:
	movw	r0, #:lower16:.LC565
	ldr	r1, .L9789
	mvn	r4, #18
	movt	r0, #:upper16:.LC565
	bl	printk
	b	.L9747
.L9783:
	movw	r0, #:lower16:.LC567
	ldr	r1, .L9789
	mvn	r4, #4
	movt	r0, #:upper16:.LC567
	bl	printk
	b	.L9747
.L9781:
	movw	r0, #:lower16:.LC566
	mov	r3, r2
	ldr	r1, .L9789
	movt	r0, #:upper16:.LC566
	movw	r2, #523
	bl	printk
	mvn	r4, #11
	b	.L9747
.L9790:
	.align	2
.L9789:
	.word	.LANCHOR3-3380
	.fnend
	.size	ccid_bulk_write, .-ccid_bulk_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_write, %function
ffs_ep0_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	add	r6, r4, #100
	.syntax divided
@ 193 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L9792:
	.syntax divided
@ 170 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	lr, [r6]
	mov	ip, #0
	teq	lr, #2
	strexeq ip, r3, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #0
	bne	.L9792
	.syntax divided
@ 195 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	lr, #2
	beq	.L9866
	ldr	r3, [r0, #32]
	add	fp, r4, #4
	mov	r10, r2
	mov	r7, r1
	mov	r0, fp
	tst	r3, #2048
	bne	.L9932
	bl	mutex_lock_interruptible
	subs	r5, r0, #0
	blt	.L9791
.L9798:
	ldr	r3, [r4, #96]
	cmp	r3, #1
	bls	.L9796
	cmp	r3, #2
	bne	.L9933
	add	r9, r4, #120
	mov	r0, r9
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L9849:
	.syntax divided
@ 170 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r6]
	mov	r8, #0
	teq	r2, #2
	strexeq r8, r3, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r8, #0
	bne	.L9849
	.syntax divided
@ 195 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L9875
	cmp	r2, #2
	moveq	r7, r8
	mvneq	r5, #42
	beq	.L9851
	ldrsb	r3, [r4, #112]
	cmp	r3, #0
	blt	.L9853
	mov	r0, r9
	bl	_raw_spin_unlock_irq
	ldrh	r3, [r4, #110]
	cmp	r3, #0
	mvneq	r5, #2
	beq	.L9795
	ldr	r3, [r4]
	mvn	r5, #50
	mov	r1, #1
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	str	r8, [r4, #100]
.L9795:
	mov	r0, fp
	bl	mutex_unlock
.L9791:
	mov	r0, r5
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9932:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L9798
	mvn	r5, #10
	b	.L9791
.L9796:
	cmp	r10, #15
	bls	.L9869
	mov	r0, r7
	mov	r1, r10
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r8, r0
	movhi	r5, r0
	bhi	.L9795
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L9800
	movw	r0, #:lower16:.LC568
	movt	r0, #:upper16:.LC568
	bl	printk
	ldr	r3, [r8]	@ unaligned
	cmp	r3, #1
	bne	.L9814
	ldr	r3, [r8, #4]	@ unaligned
	cmp	r10, r3
	bne	.L9814
	ldr	r3, [r8, #8]	@ unaligned
	add	r7, r8, #16
	sub	r6, r10, #16
	ldr	r2, [r8, #12]	@ unaligned
	cmp	r3, #0
	mov	r0, r3
	str	r2, [sp, #12]
	str	r3, [sp, #16]
	beq	.L9870
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r6
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r1, r7
	bl	ffs_do_descs.constprop.146
	subs	r5, r0, #0
	blt	.L9931
	ldr	r0, [sp, #12]
	add	r7, r7, r5
	sub	r6, r6, r5
.L9803:
	cmp	r0, #0
	beq	.L9805
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r6
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r1, r7
	bl	ffs_do_descs.constprop.146
	subs	r9, r0, #0
	blt	.L9934
	add	r3, r9, #8
	mov	r2, r9
	cmp	r6, r3
	bcc	.L9935
	ldr	r1, [r7, r9]	@ unaligned
	movw	r3, #56924
	movt	r3, 85
	cmp	r1, r3
	beq	.L9936
.L9814:
	mov	r0, r8
	mvn	r5, #21
	bl	kfree
	mov	r0, fp
	bl	mutex_unlock
	b	.L9791
.L9933:
	mov	r0, fp
	mvn	r5, #76
	bl	mutex_unlock
	b	.L9791
.L9800:
	movw	r0, #:lower16:.LC569
	movt	r0, #:upper16:.LC569
	bl	printk
	ldr	r3, [r8]	@ unaligned
	cmp	r3, #2
	bne	.L9814
	ldr	r3, [r8, #4]	@ unaligned
	cmp	r10, r3
	bne	.L9814
	ldr	r3, [r8, #12]	@ unaligned
	ldr	r7, [r8, #8]	@ unaligned
	str	r3, [sp, #16]
	clz	r3, r3
	clz	r2, r7
	lsr	r3, r3, #5
	lsr	r2, r2, #5
	cmp	r2, r3
	bne	.L9814
	ldrh	r3, [r4, #180]
	cmp	r7, r3
	str	r3, [sp, #20]
	bcc	.L9814
	cmp	r3, #0
	beq	.L9937
	ldr	r5, [sp, #16]
	mov	r1, #208
	add	r6, r5, #1
	lsl	r6, r6, #2
	mov	r0, r6
	bl	__kmalloc
	mov	r9, r0
	mov	r1, #208
	lsl	r0, r5, #3
	str	r9, [sp, #24]
	bl	__kmalloc
	ldr	r2, [sp, #20]
	str	r0, [sp, #12]
	mov	r1, #208
	add	r0, r2, #1
	lsl	r0, r0, #3
	mul	r0, r5, r0
	bl	__kmalloc
	ldr	r3, [sp, #12]
	str	r0, [sp, #28]
	cmp	r3, #0
	cmpne	r9, #0
	beq	.L9817
	cmp	r0, #0
	beq	.L9817
	mov	r2, r3
	ldr	r3, [sp, #16]
	ldr	r1, [sp, #24]
.L9818:
	subs	r3, r3, #1
	str	r2, [r1], #4
	add	r2, r2, #8
	bne	.L9818
	ldr	r2, [sp, #24]
	sub	r5, r10, #16
	cmp	r5, #2
	add	r6, r2, r6
	str	r3, [r6, #-4]
	add	r6, r8, #16
	bls	.L9819
	ldr	r3, [sp, #12]
	str	r4, [sp, #32]
	ldr	r9, [sp, #28]
	str	r10, [sp, #36]
	add	r3, r3, #8
	mov	r4, r3
.L9820:
	ldrh	r1, [r6], #2	@ unaligned
	sub	r5, r5, #2
	ldr	r10, [sp, #20]
	strh	r1, [r4, #-8]	@ movhi
	str	r9, [r4, #-4]
	b	.L9822
.L9939:
	cmp	r10, #0
	beq	.L9821
	str	r6, [r9, #4]
	sub	r10, r10, #1
	add	r9, r9, #8
.L9821:
	subs	r7, r7, #1
	add	r3, r0, #1
	mvn	r0, r0
	add	r6, r6, r3
	add	r5, r5, r0
	beq	.L9938
.L9822:
	mov	r1, r5
	mov	r0, r6
	bl	strnlen
	cmp	r5, r0
	bne	.L9939
.L9819:
	ldr	r0, [sp, #24]
	bl	kfree
	ldr	r0, [sp, #12]
	bl	kfree
	ldr	r0, [sp, #28]
	bl	kfree
	b	.L9814
.L9875:
	mov	r7, r2
	mvn	r5, #2
.L9851:
	mov	r0, r9
	bl	_raw_spin_unlock_irq
.L9857:
	mov	r0, r7
	bl	kfree
	mov	r0, fp
	bl	mutex_unlock
	b	.L9791
.L9936:
	add	r3, r7, r9
	ldr	r3, [r3, #4]	@ unaligned
	mov	r0, r3
	str	r3, [sp, #20]
.L9810:
	cmp	r0, #0
	sub	r6, r6, #8
	sub	r6, r6, r2
	beq	.L9872
	add	r2, r2, #8
	movw	r3, #:lower16:__ffs_data_do_entity
	str	r4, [sp]
	add	r1, r7, r2
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r2, r6
	bl	ffs_do_descs.constprop.146
	subs	r3, r0, #0
	blt	.L9873
.L9811:
	cmp	r6, r3
	bne	.L9814
	add	r5, r5, r9
	ldr	r2, [sp, #20]
	str	r8, [r4, #148]
	add	r3, r5, r6
	str	r3, [r4, #152]
	ldr	r3, [sp, #16]
	cmp	r2, #0
	str	r5, [r4, #156]
	addne	r5, r5, #24
	str	r6, [r4, #164]
	str	r3, [r4, #168]
	ldr	r3, [sp, #12]
	strne	r5, [r4, #160]
	mov	r5, r10
	str	r3, [r4, #172]
	mov	r3, #1
	str	r2, [r4, #176]
	str	r3, [r4, #96]
	b	.L9795
.L9817:
	ldr	r0, [sp, #24]
	mvn	r5, #11
	bl	kfree
	ldr	r0, [sp, #12]
	bl	kfree
	ldr	r0, [sp, #28]
	bl	kfree
.L9931:
	mov	r0, r8
	bl	kfree
	b	.L9795
.L9853:
	ldrh	r5, [r4, #118]
	mov	r0, r9
	cmp	r5, r10
	movcs	r5, r10
	bl	_raw_spin_unlock_irq
	mov	r1, r5
	mov	r0, r7
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r7, r0
	movhi	r5, r0
	bhi	.L9795
	mov	r0, r9
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L9855:
	.syntax divided
@ 170 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r6]
	mov	r3, #0
	teq	r2, #2
	strexeq r3, r8, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L9855
	.syntax divided
@ 195 "/home/xawlw/kernel/arg/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #2
	mvneq	r5, #42
	beq	.L9851
	ldr	r6, [r4, #32]
	mov	r0, r9
	ldrh	r3, [r4, #118]
	ldrb	r2, [r6, #26]	@ zero_extendqisi2
	cmp	r5, r3
	movcs	r3, #0
	movcc	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r6, #26]
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	str	r7, [r6]
	str	r5, [r6, #4]
	beq	.L9940
.L9858:
	ldr	r3, [r4]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r6
	str	r0, [r4, #36]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L9857
	add	r0, r4, #36
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	bne	.L9941
	ldr	r5, [r4, #52]
	str	r0, [r4, #100]
	b	.L9857
.L9869:
	mvn	r5, #21
	b	.L9795
.L9938:
	ldr	r3, [sp, #16]
	strb	r7, [r9]
	add	r9, r9, #8
	str	r7, [r9, #-4]
	subs	r3, r3, #1
	str	r3, [sp, #16]
	beq	.L9942
	cmp	r5, #2
	add	r4, r4, #8
	bhi	.L9820
	b	.L9819
.L9937:
	mov	r0, r8
	bl	kfree
.L9816:
	ldrh	r5, [r4, #184]
	movw	r1, #32976
	rsb	r0, r5, r5, lsl #4
	lsl	r0, r0, #2
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L9824
	cmp	r5, #0
	beq	.L9861
	movw	r3, #:lower16:.LC570
	add	r2, r5, #1
	movt	r3, #:upper16:.LC570
	mov	r6, r7
	mov	r5, #1
	str	r3, [sp, #16]
	add	r3, r7, #52
	str	r10, [sp, #24]
	str	r3, [sp, #12]
	str	r2, [sp, #20]
.L9860:
	ldr	r3, .L9944
	mov	r0, r6
	str	r4, [r6, #40]
	ldr	r1, [sp, #16]
	sub	r8, r3, #8
	mov	r2, r8
	bl	__mutex_init
	movw	r1, #:lower16:.LC571
	mov	r2, r8
	add	r0, r6, #24
	movt	r1, #:upper16:.LC571
	bl	__init_waitqueue_head
	ldr	r8, [sp, #12]
	movw	r1, #:lower16:.LC572
	mov	r2, r5
	movt	r1, #:upper16:.LC572
	mov	r0, r8
	bl	sprintf
	ldr	r10, [r4, #204]
	mov	r1, r8
	ldr	r0, [r10, #60]
	ldr	r8, [r10, #496]
	bl	d_alloc_name
	subs	r9, r0, #0
	beq	.L9826
	mov	r0, r10
	bl	new_inode
	subs	r10, r0, #0
	beq	.L9827
	add	r0, sp, #40
	add	r5, r5, #1
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r10, #40]
	ldrh	r2, [r8, #208]
	mov	r1, r10
	mov	r0, r9
	strh	r2, [r10]	@ movhi
	ldrd	r2, [sp, #40]
	ldr	ip, [r8, #212]
	str	ip, [r10, #4]
	ldr	ip, [r8, #216]
	strd	r2, [r10, #52]
	strd	r2, [r10, #60]
	strd	r2, [r10, #68]
	ldr	r3, .L9944+4
	str	ip, [r10, #8]
	str	r6, [r10, #348]
	str	r3, [r10, #208]
	bl	d_instantiate
	mov	r0, r9
	bl	d_rehash
	ldr	r3, [sp, #20]
	cmn	r6, #48
	add	r6, r6, #60
	strne	r9, [r6, #-12]
	cmp	r3, r5
	bne	.L9860
	ldr	r10, [sp, #24]
.L9861:
	mov	r3, #2
	mov	r0, fp
	str	r3, [r4, #96]
	str	r7, [r4, #220]
	bl	mutex_unlock
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r8, [r3, #2720]
	ldr	r5, [r3, #2736]
	cmp	r5, #0
	mvneq	r5, #18
	beq	.L9837
	add	r6, r5, #24
	mov	r0, r6
	bl	mutex_lock
	ldr	r3, [r4, #96]
	cmp	r3, #2
	beq	.L9838
.L9839:
	movw	r0, #:lower16:.LC12
	movw	r1, #1449
	movt	r0, #:upper16:.LC12
	mvn	r5, #76
	bl	warn_slowpath_null
	mov	r0, r6
	bl	mutex_unlock
.L9837:
	mov	r3, #3
	str	r3, [r4, #96]
	b	.L9791
.L9827:
	mov	r0, r9
	bl	dput
.L9826:
	subs	r5, r5, #1
	beq	.L9834
	ldr	r3, [r7]
	cmp	r3, #1
	bne	.L9830
	ldr	r2, [r7, #28]
	add	r3, r7, #28
	cmp	r2, r3
	bne	.L9830
	mov	r6, r7
	mov	r8, #0
.L9831:
	ldr	r0, [r6, #48]
	cmp	r0, #0
	beq	.L9832
	bl	d_delete
	ldr	r0, [r6, #48]
	bl	dput
	str	r8, [r6, #48]
.L9832:
	subs	r5, r5, #1
	add	r6, r6, #60
	beq	.L9834
	ldr	r3, [r6]
	cmp	r3, #1
	bne	.L9830
	ldr	r2, [r6, #28]
	add	r3, r6, #28
	cmp	r2, r3
	beq	.L9831
.L9830:
	.syntax divided
@ 1527 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_fs.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L9834:
	mov	r0, r7
	bl	kfree
.L9824:
	mov	r3, #3
	mvn	r5, #11
	str	r3, [r4, #96]
	b	.L9795
.L9866:
	mvn	r5, #42
	b	.L9791
.L9935:
	mov	r3, #0
	sub	r6, r6, r9
	str	r3, [sp, #20]
	b	.L9811
.L9870:
	mov	r5, r3
	mov	r0, r2
	b	.L9803
.L9805:
	cmp	r6, #7
	bhi	.L9943
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L9814
	ldr	r9, [sp, #12]
	mov	r3, r9
	str	r9, [sp, #20]
	b	.L9811
.L9934:
	mov	r5, r9
	b	.L9931
.L9838:
	add	r7, r4, #132
	mov	r0, #1
	ldr	r9, [r5, #8]
	mov	r1, r7
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L9839
	ldrh	r3, [r4, #180]
	ldrb	fp, [r9, #48]	@ zero_extendqisi2
	cmp	r3, #254
	bhi	.L9841
	add	r3, r3, fp
	cmp	r3, #254
	bhi	.L9841
	ldr	r2, [r9]
	strb	r3, [r9, #48]
	mov	r1, #208
	ldr	r0, [r2, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #32]
	beq	.L9842
	movw	r3, #:lower16:ffs_ep0_complete
	movt	r3, #:upper16:ffs_ep0_complete
	str	r3, [r0, #28]
	ldr	r3, [r4, #32]
	str	r4, [r3, #32]
	ldr	r0, [r4, #192]
	cmp	r0, #0
	beq	.L9843
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L9843
	add	ip, fp, #1
.L9846:
	ldr	r3, [r3, #4]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L9844
	add	r3, r3, #8
	mov	r2, ip
.L9845:
	strb	r2, [r3, #-8]
	add	r3, r3, #8
	ldr	r1, [r3, #-4]
	add	r2, r2, #1
	cmp	r1, #0
	bne	.L9845
.L9844:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L9846
.L9843:
	ldr	r2, [r9]
	mov	r3, r4
	str	r2, [r3], #88
	.syntax divided
@ 44 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	mov	r2, #1
	strb	r2, [r8]
	strd	r4, [r8, #4]
	cmp	r3, #0
	beq	.L9848
	mov	r0, r5
	bl	android_enable
.L9848:
	mov	r0, r6
	mov	r5, r10
	bl	mutex_unlock
	mov	r1, r7
	mov	r0, #0
	bl	_set_bit
	b	.L9791
.L9940:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r6]
	b	.L9858
.L9872:
	mov	r3, r0
	b	.L9811
.L9941:
	ldr	r3, [r4]
	mov	r1, r6
	mvn	r5, #3
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L9857
.L9942:
	cmp	r5, #0
	ldr	r4, [sp, #32]
	ldr	r10, [sp, #36]
	bne	.L9819
	ldr	r3, [sp, #24]
	str	r8, [r4, #188]
	str	r3, [r4, #192]
	ldr	r3, [sp, #12]
	str	r3, [r4, #196]
	ldr	r3, [sp, #28]
	str	r3, [r4, #200]
	b	.L9816
.L9873:
.L9804:
	mov	r5, r3
	b	.L9931
.L9842:
	mov	r0, r6
	mvn	r5, #11
	bl	mutex_unlock
	b	.L9837
.L9841:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L9837
.L9943:
	ldr	r2, [r7]	@ unaligned
	movw	r3, #56924
	movt	r3, 85
	cmp	r2, r3
	bne	.L9814
	ldr	r3, [r7, #4]	@ unaligned
	ldr	r2, [sp, #16]
	str	r3, [sp, #20]
	orrs	r3, r2, r3
	beq	.L9814
	ldr	r9, [sp, #12]
	ldr	r0, [sp, #20]
	mov	r2, r9
	b	.L9810
.L9945:
	.align	2
.L9944:
	.word	.LANCHOR4-3984
	.word	.LANCHOR3-3364
	.fnend
	.size	ffs_ep0_write, .-ffs_ep0_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_bind_config, %function
midi_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	cmp	r7, #0
	beq	.L9947
	mvn	r3, #0
	str	r3, [r7]
	str	r3, [r7, #4]
.L9947:
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	ldr	r0, [r5, #36]
	cmp	r0, #0
	beq	.L9959
	mov	r2, #336
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L9982
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L9983
.L9980:
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L9984
.L9953:
	mov	r5, #0
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r4
	movt	r1, #:upper16:f_midi_in_tasklet
	strd	r4, [r3]
	add	r0, r4, #292
	strb	r5, [r3, #8]
	str	r3, [r4, #224]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	str	r3, [r4, #76]
	bl	tasklet_init
	mov	r1, #208
	mov	r0, r5
	bl	kstrdup
	mov	r3, #1
	mvn	ip, #0
	mov	r1, #1024
	mov	r2, #32
	str	r3, [r4, #312]
	str	r3, [r4, #316]
	str	ip, [r4, #320]
	str	r0, [r4, #324]
	mov	r0, r4
	str	r1, [r4, #328]
	str	r2, [r4, #332]
	bl	f_midi_register_card
	subs	r8, r0, #0
	bge	.L9985
.L9951:
	ldr	r0, [r4, #224]
	bl	kfree
.L9950:
	mov	r0, r4
	bl	kfree
.L9946:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9959:
	ldr	r0, [r5, #24]
	mov	r4, #16
	cmp	r0, #0
	bne	.L9980
.L9983:
	mov	r3, #16
	b	.L9953
.L9984:
	mvn	r8, #11
	b	.L9950
.L9985:
	ldr	ip, .L9988
	movw	r1, #:lower16:.LC573
	movw	r3, #:lower16:f_midi_bind
	movt	r1, #:upper16:.LC573
	movw	r2, #:lower16:f_midi_unbind
	movw	r0, #:lower16:f_midi_set_alt
	movt	r3, #:upper16:f_midi_bind
	movt	r2, #:upper16:f_midi_unbind
	movt	r0, #:upper16:f_midi_set_alt
	stm	r4, {r1, ip}
	movw	r1, #:lower16:f_midi_disable
	movt	r1, #:upper16:f_midi_disable
	str	r6, [r4, #20]
	str	r3, [r4, #24]
	add	r3, r4, #64
	str	r2, [r4, #28]
	add	r2, r6, #36
	str	r0, [r4, #32]
	str	r1, [r4, #40]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r8, [r4, #24]
	cmp	r8, #0
	beq	.L9955
	mov	r1, r4
	mov	r0, r6
	blx	r8
	subs	r8, r0, #0
	blt	.L9986
.L9955:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9956
.L9987:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9956
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L9956:
	tst	r3, #2
	bne	.L9957
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9957
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L9957:
	tst	r3, #1
	bne	.L9958
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L9958
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L9958:
	cmp	r8, #0
	bne	.L9951
	cmp	r7, #0
	beq	.L9946
	ldr	r3, [r4, #92]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r7]
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #12]
	str	r3, [r7, #4]
	b	.L9946
.L9986:
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r4, #20]
	strd	r0, [r4, #64]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9956
	b	.L9987
.L9982:
	mvn	r8, #11
	b	.L9946
.L9989:
	.align	2
.L9988:
	.word	.LANCHOR0+2768
	.fnend
	.size	midi_function_bind_config, .-midi_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_ioctl, %function
mtp_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	add	r5, r4, #104
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L9991
	movw	r3, #19713
	mov	r8, r2
	movt	r3, 16416
	mov	r6, r1
	cmp	r1, r3
	bhi	.L9993
	mov	r3, #19712
	movt	r3, 16416
	cmp	r1, r3
	bcs	.L9994
	movw	r3, #19715
	movt	r3, 16392
	cmp	r1, r3
	bne	.L9992
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, #8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L10008
	mov	r2, #8
	mov	r1, r8
	add	r0, sp, r2
	bl	__copy_from_user
	cmp	r0, #0
	mvnne	r10, #13
	bne	.L10007
	ldr	r7, [sp, #8]
	cmp	r7, #28
	bhi	.L10029
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L10030
	add	r8, r4, #80
	add	r9, r4, #116
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	mov	r1, r0
	cmp	r9, r3
	beq	.L10048
	ldr	ip, [r3]
	mov	lr, #512
	mov	r10, #256
	ldr	r2, [r3, #4]
	sub	r6, r3, #36
	mov	r0, r8
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {r10, lr}
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L10012
.L10013:
	mov	r3, sp
	ldr	r1, [sp, #12]
	bic	r3, r3, #8128
	ldr	r0, [r6]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r7; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L10049
	cmp	r7, #0
	bne	.L10050
.L10022:
	str	r7, [r6, #4]
	ldr	r0, [r4, #92]
	mov	r2, #208
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	beq	.L10007
	mov	r0, r8
.L10047:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	add	r2, r6, #36
	mov	r1, r0
	mov	r0, r8
	str	r2, [r4, #120]
	str	r9, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	b	.L10007
.L9993:
	movw	r3, #19716
	movt	r3, 16416
	cmp	r1, r3
	beq	.L9994
.L9992:
	add	r7, r4, #80
	mvn	r10, #21
.L10006:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #3
	mvneq	r10, #124
	beq	.L10023
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #96]
.L10023:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
.L10007:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L9990:
	mov	r0, r10
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9994:
	add	r7, r4, #80
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #3
	beq	.L10051
	cmp	r3, #0
	beq	.L10052
	mov	r3, #2
	mov	r0, r7
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, #32; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L10000
	mov	r1, r8
	mov	r2, #32
	add	r0, sp, #16
	bl	__copy_from_user
	subs	r8, r0, #0
	mvnne	r10, #13
	bne	.L10006
	ldr	r0, [sp, #16]
	bl	fget
	subs	r9, r0, #0
	mvneq	r10, #8
	beq	.L10006
	str	r9, [r4, #208]
	ldrd	r2, [sp, #24]
	strd	r2, [r4, #216]
	ldrd	r2, [sp, #32]
	strd	r2, [r4, #224]
	.syntax divided
@ 1018 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #19716
	movt	r3, 16416
	cmp	r6, r3
	beq	.L10053
	mov	r3, #19712
	movt	r3, 16416
	cmp	r6, r3
	addeq	r1, r4, #176
	addne	r1, r4, #192
	streq	r8, [r4, #232]
.L10004:
	ldr	r0, [r4, #172]
	bl	queue_work
	ldr	r0, [r4, #172]
	bl	flush_workqueue
	mov	r0, r9
	bl	fput
	.syntax divided
@ 1042 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r10, [r4, #244]
	b	.L10006
.L10008:
	mov	r1, #8
	mvn	r10, #13
	add	r0, sp, r1
	bl	__memzero
	b	.L10007
.L10052:
	mov	r0, r7
	mvn	r10, #18
	bl	_raw_spin_unlock_irq
	b	.L10007
.L10051:
	mov	r3, #1
	mov	r0, r7
	mvn	r10, #124
	str	r3, [r4, #96]
	bl	_raw_spin_unlock_irq
	b	.L10007
.L10000:
	mov	r1, #32
	add	r0, sp, #16
	bl	__memzero
	mvn	r10, #13
	b	.L10006
.L10030:
	mvn	r10, #18
	b	.L10007
.L9991:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r10, #15
	b	.L9990
.L10049:
	mov	r2, r7
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L10022
.L10021:
	mov	r0, r8
	mvn	r10, #13
	b	.L10047
.L10048:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L10012:
	mov	r3, sp
	movw	r1, #:lower16:autoremove_wake_function
	str	r7, [sp, #4]
	bic	r2, r3, #8128
	movt	r1, #:upper16:autoremove_wake_function
	bic	r2, r2, #63
	add	ip, r4, #148
	ldr	r0, [r2, #12]
	mov	r3, #0
	mov	r10, r2
	mov	fp, #100
	add	r2, sp, #28
	str	ip, [sp]
	str	r3, [sp, #16]
	strd	r0, [sp, #20]
	mov	r0, ip
	str	r2, [sp, #28]
	str	r2, [sp, #32]
.L10019:
	mov	r2, #1
	add	r1, sp, #16
	bl	prepare_to_wait
	mov	r0, r8
	mov	r7, #512
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	mov	r2, r0
	mov	lr, #256
	mov	r0, r8
	mov	r1, r2
	cmp	r9, r3
	sub	r6, r3, #36
	beq	.L10054
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	lr, [r3]
	str	r7, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L10016
.L10015:
	ldr	r3, [r10, #12]
	mov	r0, fp
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L10017
	bl	schedule_timeout
	subs	fp, r0, #0
	bne	.L10055
	mov	r0, r8
	ldr	r7, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #116]
	mov	r1, r0
	cmp	r9, r3
	beq	.L10056
	ldr	ip, [r3]
	mov	lr, #512
	mov	fp, #256
	ldr	r2, [r3, #4]
	mov	r0, r8
	sub	r6, r3, #36
	str	r2, [ip, #4]
	str	ip, [r2]
	stm	r3, {fp, lr}
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #16
	ldr	r0, [sp]
	bl	finish_wait
	cmp	r6, #0
	bne	.L10013
.L10046:
	mvn	r10, #61
	b	.L10007
.L10050:
	mov	r1, r7
	bl	__memzero
	b	.L10021
.L10055:
	ldr	r0, [sp]
	b	.L10019
.L10053:
	mov	r3, #1
	add	r1, r4, #176
	str	r3, [r4, #232]
	ldrh	r3, [sp, #40]
	strh	r3, [r4, #236]	@ movhi
	ldr	r3, [sp, #44]
	str	r3, [r4, #240]
	b	.L10004
.L10017:
	add	r1, sp, #16
	ldr	r0, [sp]
	bl	finish_wait
	b	.L10046
.L10029:
	mvn	r10, #21
	b	.L10007
.L10016:
	add	r1, sp, #16
	ldm	sp, {r0, r7}
	bl	finish_wait
	b	.L10013
.L10054:
	bl	_raw_spin_unlock_irqrestore
	b	.L10015
.L10056:
	mov	r0, r8
	mvn	r10, #61
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #16
	ldr	r0, [sp]
	bl	finish_wait
	b	.L10007
	.fnend
	.size	mtp_ioctl, .-mtp_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_cmd_complete, %function
fmbim_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r7, [r1, #48]
	cmp	r5, #0
	beq	.L10065
	ldr	r2, [r1, #44]
	cmp	r2, #0
	blt	.L10066
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10063
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L10067
.L10060:
	mov	r1, #32
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	strne	r7, [r6, #4]
	beq	.L10068
.L10061:
	mov	r2, r7
	ldr	r1, [r4]
	add	r4, r5, #196
	bl	memcpy
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r5, #204]
	add	r2, r6, #8
	add	r1, r5, #200
	mov	r0, r4
	str	r2, [r5, #204]
	str	r1, [r6, #8]
	str	r3, [r6, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	add	r0, r5, #100
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L10063:
	mov	r6, #16
	b	.L10060
.L10067:
	mvn	r3, #0
	mvn	r6, #11
	ldr	r0, [r3, #-11]
	b	.L10061
.L10068:
	mov	r0, r6
	mvn	r6, #11
	bl	kfree
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L10061
.L10065:
	movw	r0, #:lower16:.LC574
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC574
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L10069
	b	printk
.L10066:
	movw	r0, #:lower16:.LC575
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC575
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L10069
	b	printk
.L10070:
	.align	2
.L10069:
	.word	.LANCHOR3-3260
	.fnend
	.size	fmbim_cmd_complete, .-fmbim_cmd_complete
	.align	2
	.global	usb_rmnet_mux_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_write, %function
usb_rmnet_mux_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L10086
	cmp	r2, #0
	mov	r5, r2
	mov	r7, r1
	beq	.L10096
	cmp	r2, #4096
	bhi	.L10097
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10087
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L10076
.L10075:
	movw	r1, #32976
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	beq	.L10098
	mov	r3, sp
	str	r5, [r6, #4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L10099
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	subs	r9, r0, #0
	bne	.L10100
	add	r7, r4, #356
	add	r8, r4, #364
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #336]
	mov	r3, r4
	add	ip, r6, #8
	mov	r1, r0
	mov	r0, r7
	add	r2, r2, #1
	str	r2, [r4, #336]
	ldr	r2, [r3, #328]!
	str	ip, [r2, #4]
	strd	r2, [r6, #8]
	str	ip, [r4, #328]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r4, #76]
	ldr	r3, [r4, #92]
	ldr	r3, [r3]
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r8]
	add	r2, r2, #1
	strex	r1, r2, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L10071
	mvn	r1, #94
	strb	r1, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r9, [r3, #2]
	strb	r9, [r3, #3]
	ldrb	r1, [r4, #348]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	r9, [r3, #6]
	strb	r9, [r3, #7]
	ldrd	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L10071
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r1, r3, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC579
	movt	r1, #:upper16:.LC579
	add	r0, r0, #32
	bl	dev_err
	b	.L10071
.L10099:
	mov	r1, r5
	bl	__memzero
.L10079:
	movw	r0, #:lower16:.LC578
	mov	r2, r5
	ldr	r1, .L10101
	movt	r0, #:upper16:.LC578
	bl	printk
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
.L10071:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10087:
	mov	r6, #16
	b	.L10075
.L10086:
	mvn	r5, #18
	b	.L10071
.L10098:
	mov	r0, r6
	bl	kfree
.L10076:
	movw	r0, #:lower16:.LC577
	ldr	r1, .L10101
	mvn	r5, #11
	movt	r0, #:upper16:.LC577
	bl	printk
	b	.L10071
.L10097:
	movw	r0, #:lower16:.LC576
	mov	r3, r2
	ldr	r1, .L10101
	movt	r0, #:upper16:.LC576
	mov	r2, #4096
	bl	printk
	mvn	r5, #11
	b	.L10071
.L10096:
	movw	r0, #:lower16:.LC565
	ldr	r1, .L10101
	mvn	r5, #18
	movt	r0, #:upper16:.LC565
	bl	printk
	b	.L10071
.L10100:
	mov	r5, r9
	b	.L10079
.L10102:
	.align	2
.L10101:
	.word	.LANCHOR3-3240
	.fnend
	.size	usb_rmnet_mux_ctrl_write, .-usb_rmnet_mux_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_bind_config, %function
audio_source_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mvn	ip, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r2, r3
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r1, r3
	str	lr, [sp, #24]
	ldr	r5, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	add	lr, sp, #8
	mov	r0, ip
	str	ip, [r5]
	str	ip, [r5, #4]
	str	lr, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L10129
.L10103:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10129:
	ldr	r3, [r7, #24]
	add	r6, sp, #12
	movw	r1, #:lower16:.LC580
	ldr	lr, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC580
	ldr	ip, [r3]
	mov	r3, #1
	mov	r0, lr
	add	ip, ip, #32
	str	ip, [lr, #500]
	stm	sp, {r4, r6}
	bl	snd_pcm_new
	subs	r4, r0, #0
	movwne	r6, #:lower16:.LANCHOR0
	movtne	r6, #:upper16:.LANCHOR0
	bne	.L10111
	ldr	r3, [sp, #12]
	movw	r6, #:lower16:.LANCHOR0
	movw	r1, #:lower16:.LC581
	ldr	r9, .L10132
	movt	r6, #:upper16:.LANCHOR0
	movt	r1, #:upper16:.LC581
	mov	r2, #80
	mov	r8, r4
	str	r4, [r3, #16]
	add	r0, r3, #88
	str	r9, [r3, #276]
	str	r3, [r6, #2856]
	bl	strlcpy
	ldr	r0, [sp, #12]
	mov	r1, r4
	add	r2, r6, #2928
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC582
	mov	r2, #16
	movt	r1, #:upper16:.LC582
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC583
	mov	r2, #80
	movt	r1, #:upper16:.LC583
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	bne	.L10111
	ldr	r3, [r6, #2808]
	cmp	r3, #0
	beq	.L10113
	ldr	r3, [r6, #2816]
	cmp	r3, #0
	beq	.L10113
	ldr	r2, [r7, #40]
	add	r1, r9, #64
	add	r3, r7, #36
	str	r7, [r6, #2796]
	str	r1, [r7, #40]
	str	r3, [r6, #2840]
	str	r2, [r6, #2844]
	str	r1, [r2]
	ldr	r3, [r6, #2800]
	cmp	r3, #0
	beq	.L10106
	mov	r1, r9
	mov	r0, r7
	blx	r3
	subs	r4, r0, #0
	blt	.L10130
.L10106:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L10107
	ldr	r2, [r6, #2784]
	cmp	r2, #0
	beq	.L10107
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L10107:
	tst	r3, #2
	bne	.L10108
	ldr	r2, [r6, #2788]
	cmp	r2, #0
	beq	.L10108
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L10108:
	tst	r3, #1
	bne	.L10109
	ldr	r3, [r6, #2792]
	cmp	r3, #0
	beq	.L10109
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L10109:
	cmp	r4, #0
	beq	.L10131
.L10105:
.L10110:
.L10111:
	ldr	r0, [r6, #2852]
	bl	snd_card_free
	b	.L10103
.L10131:
	ldr	r3, [sp, #12]
	ldr	r2, [r3]
	ldr	r2, [r2]
	str	r2, [r5]
	ldr	r2, [r3, #12]
	ldr	r3, [sp, #8]
	str	r2, [r5, #4]
	str	r3, [r6, #2852]
	b	.L10103
.L10130:
	ldr	r2, [r6, #2840]
	mov	r0, #256
	mov	r1, #512
	ldr	r3, [r6, #2844]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r8, [r6, #2796]
	str	r0, [r6, #2840]
	str	r1, [r6, #2844]
	b	.L10106
.L10113:
	mvn	r4, #21
	b	.L10111
.L10133:
	.align	2
.L10132:
	.word	.LANCHOR0+2776
	.fnend
	.size	audio_source_function_bind_config, .-audio_source_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_write, %function
mbim_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L10163
	cmp	r2, #0
	mov	r5, r2
	beq	.L10164
	cmp	r2, #4096
	bhi	.L10165
	add	r6, r4, #96
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L10139
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L10166
	movw	r3, #:lower16:kmalloc_caches
	mov	r8, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10156
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L10167
.L10142:
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r7]
	strne	r5, [r7, #4]
	beq	.L10168
.L10143:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L10169
	mov	r1, r5
	mov	r10, r5
	bl	__memzero
.L10145:
	cmp	r10, #0
	bne	.L10170
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L10171
	ldrb	r3, [r4, #156]	@ zero_extendqisi2
	cmp	r3, #3
	bne	.L10172
	add	r8, r4, #196
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #212]
	add	ip, r7, #8
	add	r3, r4, #208
	mov	r1, r0
	mov	r0, r8
	str	ip, [r4, #212]
	str	r3, [r7, #8]
	str	r2, [r7, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	ldr	r7, [r4, #152]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #80]
	mov	fp, r0
	cmp	r3, #0
	beq	.L10173
	cmp	r7, #0
	beq	.L10174
	ldr	r3, [r7]
	cmp	r3, #0
	beq	.L10175
	add	r9, r4, #160
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r9]
	add	r2, r2, #1
	strex	r3, r2, [r9]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L10153
	mov	r1, r0
	mov	r0, r8
	ldr	r3, [r4, #160]
	bl	_raw_spin_unlock_irqrestore
.L10148:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
.L10134:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10169:
	mov	r1, r8
	mov	r2, r5
	bl	__copy_from_user
	mov	r10, r0
	b	.L10145
.L10156:
	mov	r7, #16
	b	.L10142
.L10153:
	ldr	r3, [r7]
	mov	lr, #8
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r8
	str	lr, [r7, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r10, [r3, #2]
	strb	r10, [r3, #3]
	ldrb	r2, [r4, #188]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	r10, [r3, #6]
	strb	r10, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #148]
	mov	r2, #32
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L10148
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r1, r3, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC591
	ldr	r1, .L10176
	movt	r0, #:upper16:.LC591
	bl	printk
	b	.L10148
.L10167:
	mvn	r3, #0
	mvn	r7, #11
	ldr	r0, [r3, #-11]
	b	.L10143
.L10168:
	mov	r0, r7
	mvn	r7, #11
	bl	kfree
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L10143
.L10165:
	movw	r0, #:lower16:.LC584
	mov	r3, #4096
	ldr	r1, .L10176+4
	movt	r0, #:upper16:.LC584
	bl	printk
	mvn	r0, #11
	b	.L10134
.L10164:
	movw	r0, #:lower16:.LC565
	ldr	r1, .L10176+4
	movt	r0, #:upper16:.LC565
	bl	printk
	mvn	r0, #18
	b	.L10134
.L10163:
	movw	r0, #:lower16:.LC455
	ldr	r1, .L10176+4
	movt	r0, #:upper16:.LC455
	bl	printk
	mvn	r0, #18
	b	.L10134
.L10170:
	movw	r0, #:lower16:.LC578
	mov	r2, r10
	ldr	r1, .L10176+4
	movt	r0, #:upper16:.LC578
	bl	printk
	mov	r0, r7
	bl	mbim_free_ctrl_pkt.part.6
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	b	.L10134
.L10171:
	movw	r0, #:lower16:.LC586
	mov	r2, r4
	ldr	r1, .L10176+8
	movt	r0, #:upper16:.LC586
	bl	printk
	mov	r0, r7
	bl	mbim_free_ctrl_pkt.part.6
	b	.L10148
.L10172:
	movw	r0, #:lower16:.LC587
	ldr	r1, .L10176+8
	mov	r2, r4
	movt	r0, #:upper16:.LC587
	bl	printk
	mov	r0, r7
	bl	mbim_free_ctrl_pkt.part.6
	b	.L10148
.L10173:
	movw	r0, #:lower16:.LC588
	mov	r2, r4
	ldr	r1, .L10176
	movt	r0, #:upper16:.LC588
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L10148
.L10174:
	movw	r0, #:lower16:.LC589
	mov	r2, r4
	ldr	r1, .L10176
	movt	r0, #:upper16:.LC589
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L10148
.L10166:
	movw	r0, #:lower16:.LC60
	ldr	r1, .L10176+4
	movt	r0, #:upper16:.LC60
	bl	printk
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #31
	b	.L10134
.L10139:
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC585
	ldr	r1, .L10176+4
	movt	r0, #:upper16:.LC585
	bl	printk
	mvn	r0, #15
	b	.L10134
.L10175:
	movw	r0, #:lower16:.LC590
	mov	r2, r4
	ldr	r1, .L10176
	movt	r0, #:upper16:.LC590
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L10148
.L10177:
	.align	2
.L10176:
	.word	.LANCHOR3-3172
	.word	.LANCHOR3-3212
	.word	.LANCHOR3-3200
	.fnend
	.size	mbim_write, .-mbim_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	handle_exception, %function
handle_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r7, r0, #44
	strd	r8, [sp, #16]
	movw	r8, #1284
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #128
	sub	sp, sp, #128
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
	b	.L10180
.L10254:
	cmp	r5, #10
	bne	.L10253
.L10180:
	ldr	r4, [r10, #12]
	ldr	r0, [r4, #856]
	add	r0, r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, sp
	add	r1, r4, #860
	mov	r0, r4
	bl	dequeue_signal
	mov	r5, r0
	ldr	r0, [r4, #856]
	mov	r1, r9
	add	r0, r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L10254
	ldr	r3, [r6, #8]
	cmp	r3, #0
	beq	.L10186
	mov	r8, r5
.L10185:
	ldr	r4, [r6, #68]
	add	r4, r4, r8
	add	r8, r8, #32
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L10187
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #16]
	ldr	r0, [r3, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L10187:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L10188
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #24]
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L10188:
	cmp	r8, #128
	bne	.L10185
	b	.L10191
.L10255:
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10178
.L10191:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	mov	r0, r7
	ldr	r1, [r3, #20]
	ldr	r4, [r3, #28]
	ldr	ip, [r3, #52]
	ldr	r9, [r3, #60]
	ldr	r2, [r3, #84]
	ldr	r8, [r3, #92]
	add	r1, r1, r4
	ldr	r4, [r3, #116]
	ldr	lr, [r3, #124]
	add	r3, ip, r9
	add	r1, r1, r3
	add	r3, r2, r8
	add	r3, r3, r1
	add	r4, r4, lr
	add	r4, r4, r3
	bl	_raw_spin_unlock_irq
	cmp	r4, #0
	mov	r0, r6
	bne	.L10255
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #86]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L10192
	ldr	r0, [r3, #92]
	ldr	r1, [r0, #8]
	ldr	r1, [r1, #36]
	cmp	r1, #0
	beq	.L10192
	blx	r1
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #86]	@ zero_extendqisi2
.L10192:
	tst	r2, #2
	beq	.L10186
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10186
	blx	r3
.L10186:
	mov	r0, r7
	mov	r9, #0
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	str	r9, [r3, #4]
	ldr	r3, [r6, #68]
	str	r9, [r3, #36]
	ldr	r3, [r6, #68]
	str	r9, [r3, #68]
	ldr	r3, [r6, #68]
	str	r9, [r3, #100]
	ldr	r3, [r6, #68]
	ldr	r8, [r6, #112]
	str	r3, [r6, #60]
	cmp	r8, #1
	str	r3, [r6, #64]
	beq	.L10194
	ldr	r3, [r6, #92]
	ldr	r4, [r6, #116]
	cmp	r3, r9
	movne	r0, r9
	movne	r1, r0
	beq	.L10196
.L10195:
	ldr	r3, [r6, #100]
	add	r5, r5, #1
	add	r3, r3, r0
	add	r0, r0, #400
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	str	r1, [r3, #28]
	str	r1, [r3, #32]
	str	r1, [r3, #36]
	and	r2, r2, #239
	bfi	r2, r1, #6, #1
	strb	r2, [r3, #24]
	ldr	r3, [r6, #92]
	cmp	r3, r5
	bhi	.L10195
.L10196:
	mov	r3, #0
	sub	r8, r8, #2
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	cmp	r8, #5
	ldrls	pc, [pc, r8, asl #2]
	b	.L10178
.L10201:
	.word	.L10200
	.word	.L10178
	.word	.L10202
	.word	.L10178
	.word	.L10203
	.word	.L10203
.L10200:
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L10204
	add	r1, r1, #88
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L10206
	ldr	r3, [r6, #8]
	mov	r1, #0
	ldr	r0, [r3, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L10206:
	ldr	r3, [r6, #56]
	cmp	r3, r4
	bne	.L10178
	ldr	r5, [r6, #4]
	cmp	r5, #0
	beq	.L10208
	add	r7, r5, #60
	ldr	r6, [r5, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #56]
	mov	r8, r0
	cmp	r4, #0
	bne	.L10209
	movw	r2, #:lower16:.LC592
	movw	r0, #:lower16:.LC444
	ldr	r3, .L10258
	movt	r2, #:upper16:.LC592
	movt	r0, #:upper16:.LC444
	movw	r1, #1736
	bl	warn_slowpath_fmt
.L10210:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L10178:
	add	sp, sp, #128
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10253:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	ip, #6
	mov	r4, r0
	cmp	r3, ip
	bgt	.L10182
	ldr	r3, [r6, #56]
	mov	r1, #2
	mov	r0, #10
	ldr	r2, [r6, #168]
	str	ip, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L10182
	bl	send_sig_info
.L10182:
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L10180
.L10194:
	mvn	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	send_status
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #112]
	cmn	r3, #8
	beq	.L10256
.L10198:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	b	.L10178
.L10202:
	mov	r0, r6
	ldr	r1, [r6, #12]
	bl	do_set_interface
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L10178
	ldr	r4, [r6, #4]
	add	r6, r4, #60
	ldr	r7, [r4, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #56]
	mov	r8, r0
	cmp	r5, #0
	beq	.L10257
	sub	r5, r5, #1
	cmp	r5, #0
	str	r5, [r4, #56]
	bne	.L10216
	str	r5, [r7, #4]
	ldr	r3, [r4]
	mov	r2, #32
	mov	r1, r7
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r7, #44]
.L10216:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L10178
.L10203:
	mov	r1, #0
	mov	r0, r6
	bl	do_set_interface
	mov	r0, r7
	bl	_raw_spin_lock_irq
	mov	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	b	.L10178
.L10257:
	cmp	r4, #0
	beq	.L10216
	movw	r2, #:lower16:.LC592
	movw	r0, #:lower16:.LC444
	ldr	r3, .L10258
	movt	r2, #:upper16:.LC592
	movt	r0, #:upper16:.LC444
	movw	r1, #1736
	bl	warn_slowpath_fmt
	b	.L10216
.L10256:
	str	r9, [r6, #112]
	b	.L10198
.L10204:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC74
	movw	r3, #2700
	movt	r1, #:upper16:.LC74
	ldr	r2, .L10258+4
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #461
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	b	.L10178
.L10209:
	sub	r4, r4, #1
	cmp	r4, #0
	str	r4, [r5, #56]
	bne	.L10210
	str	r4, [r6, #4]
	ldr	r3, [r5]
	mov	r2, #32
	mov	r1, r6
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r6, #44]
	b	.L10210
.L10208:
	ldrd	r0, [r6, #48]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r2, [r6, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r3, r0
	str	r6, [r2]
	beq	.L10178
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC76
	ldr	r2, [r6, #48]
	movt	r1, #:upper16:.LC76
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
	b	.L10178
.L10259:
	.align	2
.L10258:
	.word	.LANCHOR3-3120
	.word	.LANCHOR3-3140
	.fnend
	.size	handle_exception, .-handle_exception
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_main_thread, %function
fsg_main_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 64
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	mov	r0, #2
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
	movw	r10, #21333
	bl	allow_signal
	mov	r0, #15
	movt	r10, 17218
	bl	allow_signal
	movw	r3, #23593
	mov	r0, #9
	mov	r4, r3
	bl	allow_signal
	mov	r0, #10
	bl	allow_signal
	bl	set_freezable
	mov	r2, r4
	mov	r3, #57344
	movt	r2, 49807
	movt	r3, 65535
	movw	r0, #21250
	mov	r1, #0
	str	r2, [sp, #8]
	mov	r2, sp
	movt	r0, 5
	and	r2, r2, r3
	mov	r9, r3
	add	r4, fp, #44
	str	r0, [sp, #12]
	str	r1, [r2, #8]
.L10261:
	ldr	r3, [fp, #112]
	cmp	r3, #7
	beq	.L10593
.L10421:
	cmp	r3, #0
	bgt	.L10262
	mov	r3, sp
	and	r3, r3, r9
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L10262
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #32
	beq	.L10594
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r5, [fp, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L10266
.L10268:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10261
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L10268
.L10266:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r2, #31
	mov	r0, fp
	str	r2, [r5, #12]
	ldr	r1, [fp, #108]
	udiv	r3, r2, r1
	mul	r3, r1, r3
	subs	r3, r2, r3
	addne	r2, r1, r2
	mov	r1, r5
	subne	r2, r2, r3
	ldr	r3, [r5, #24]
	str	r2, [r3, #4]
	bl	start_out_transfer
	cmp	r0, #0
	bne	.L10573
	b	.L10261
.L10595:
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10261
.L10573:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #4]
	mov	r0, r4
	cmp	r3, #1
	bne	.L10595
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 2446 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r6, [fp, #8]
	cmp	r6, #0
	beq	.L10273
	ldr	r3, [r5, #24]
	ldr	r7, [r6, #80]
	ldr	r8, [r3]
	ldr	r2, [r3, #44]
	cmp	r2, #0
	bne	.L10579
	ldr	r1, [r6, #88]
	tst	r1, #1
	bne	.L10276
	ldr	r3, [r3, #48]
	cmp	r3, #31
	bne	.L10277
	ldr	r3, [r8]
	cmp	r3, r10
	bne	.L10277
	ldrb	r3, [r8, #13]	@ zero_extendqisi2
	cmp	r3, #7
	bls	.L10596
.L10289:
	ldrb	r3, [r7, #144]	@ zero_extendqisi2
	ands	r7, r3, #1
	beq	.L10597
	ldr	r0, [r6, #96]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L10592
.L10599:
	cmn	r0, #11
	bne	.L10598
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L10579
.L10592:
	ldr	r0, [r6, #92]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	bne	.L10599
.L10579:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #4]
	bl	_raw_spin_unlock_irq
	b	.L10261
.L10262:
	mov	r0, fp
	bl	handle_exception
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L10421
.L10593:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r4
	str	r3, [fp, #168]
	bl	_raw_spin_unlock_irq
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L10425
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L10425
	mov	r0, fp
	blx	r3
	cmp	r0, #0
	blt	.L10425
.L10426:
	add	r0, fp, #152
	mov	r1, #0
	bl	complete_and_exit
.L10594:
	mov	r0, fp
	bl	sleep_thread
	b	.L10261
.L10425:
	ldr	r5, [fp, #92]
	add	r7, fp, #28
	mov	r0, r7
	ldr	r4, [fp, #100]
	bl	down_write
	cmp	r5, #0
	sub	r5, r5, #1
	beq	.L10424
	mov	r6, #14848
	add	r4, r4, #400
	movt	r6, 2
	mov	r8, #0
.L10428:
	ldr	r0, [r4, #-400]
	cmp	r0, #0
	beq	.L10427
	bl	fput
	str	r8, [r4, #-400]
	str	r6, [r4, #-364]
.L10427:
	sub	r5, r5, #1
	add	r4, r4, #400
	cmn	r5, #1
	bne	.L10428
.L10424:
	mov	r0, r7
	bl	up_write
	b	.L10426
.L10596:
	ldrb	r3, [r8, #12]	@ zero_extendqisi2
	tst	r3, #127
	bne	.L10289
	ldrb	r2, [r8, #14]	@ zero_extendqisi2
	sub	r3, r2, #1
	cmp	r3, #15
	bhi	.L10289
	add	r1, r8, #15
	str	r2, [r7, #72]
	add	r0, r7, #76
	bl	memcpy
	ldrsb	r3, [r8, #12]
	mov	r0, r4
	ldr	r2, [r7, #92]
	cmp	r3, #0
	movge	r3, #1
	movlt	r3, #2
	str	r3, [r7, #120]
	ldr	r3, [r8, #8]
	cmp	r3, #0
	str	r3, [r7, #124]
	moveq	r3, #3
	streq	r3, [r7, #120]
	ldrb	r3, [r8, #13]	@ zero_extendqisi2
	cmp	r3, r2
	str	r3, [r7, #96]
	ldrcc	r2, [r7, #100]
	movcc	r1, #400
	movcs	r3, #0
	mlacc	r3, r1, r3, r2
	str	r3, [r7, #104]
	ldr	r3, [r8, #4]
	str	r3, [r7, #132]
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #4]
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	cmp	r3, #0
	bgt	.L10300
	mvn	r3, #8
	str	r3, [fp, #112]
.L10300:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r5, [fp, #60]
	str	r5, [fp, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L10301
.L10302:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10261
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L10302
.L10301:
	mov	r0, r4
	add	r8, fp, #28
	bl	_raw_spin_unlock_irq
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r0, r8
	and	r3, r3, #251
	bfc	r3, #3, #1
	strb	r3, [fp, #144]
	bl	down_read
	ldrb	r2, [fp, #76]	@ zero_extendqisi2
	cmp	r2, #37
	beq	.L10304
	bhi	.L10305
	cmp	r2, #18
	beq	.L10306
	bls	.L10600
	cmp	r2, #27
	beq	.L10313
	bhi	.L10314
	cmp	r2, #21
	beq	.L10315
	cmp	r2, #26
	bne	.L10303
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #22
	mov	r2, #2
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	beq	.L10575
.L10332:
	mov	r0, r8
	bl	up_read
	cmn	r7, #4
	beq	.L10261
.L10429:
	mov	r3, sp
	and	r3, r3, r9
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L10261
	cmn	r7, #22
	beq	.L10383
	cmp	r7, #0
	ldrlt	r7, [fp, #120]
	blt	.L10384
	mov	r3, r7
.L10383:
	ldr	r7, [fp, #120]
	cmp	r7, #2
	bne	.L10384
	ldr	r2, [fp, #128]
	mov	r1, #1
	ldr	r0, [r5, #16]
	cmp	r3, r2
	movcs	r3, r2
	str	r3, [r0, #4]
	str	r1, [r5, #4]
	ldr	r7, [fp, #120]
	ldr	r2, [fp, #136]
	sub	r3, r2, r3
	str	r3, [fp, #136]
.L10384:
	cmp	r7, #1
	beq	.L10386
	bcc	.L10387
	cmp	r7, #2
	bne	.L10385
	ldr	r3, [fp, #124]
	cmp	r3, #0
	beq	.L10385
	ldr	r3, [fp, #8]
	cmp	r3, #0
	beq	.L10601
	ldr	r5, [fp, #60]
	ldr	r2, [fp, #136]
	ldr	r3, [r5, #16]
	cmp	r2, #0
	bne	.L10396
	ldrb	ip, [r3, #26]	@ zero_extendqisi2
	mov	r1, r5
	mov	r0, fp
	bfi	ip, r2, #1, #1
	strb	ip, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L10261
	ldr	r3, [r5, #8]
	str	r3, [fp, #60]
.L10385:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r4
	cmp	r3, #0
	mvnle	r3, #7
	strle	r3, [fp, #112]
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #4076]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3, #4076]
	bne	.L10261
	mov	r0, fp
	bl	send_status
	subs	r5, r0, #0
	bne	.L10261
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r4
	cmp	r3, #0
	strle	r5, [fp, #112]
	bl	_raw_spin_unlock_irq
	b	.L10261
.L10598:
	ldr	r3, [r6, #76]
	movw	r1, #:lower16:.LC594
	mov	r2, r0
	movt	r1, #:upper16:.LC594
	add	r0, r3, #32
	bl	dev_warn
	b	.L10579
.L10273:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC74
	movw	r3, #2447
	ldr	r2, .L10615
	movt	r1, #:upper16:.LC74
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #461
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	mov	r0, r4
	bl	_raw_spin_lock_irq
	mov	r0, r4
	str	r6, [r5, #4]
	bl	_raw_spin_unlock_irq
	b	.L10261
.L10597:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	mov	r0, r4
	str	r7, [r5, #4]
	bl	_raw_spin_unlock_irq
	b	.L10261
.L10305:
	cmp	r2, #67
	beq	.L10319
	bls	.L10602
	cmp	r2, #90
	beq	.L10326
	bhi	.L10327
	cmp	r2, #68
	beq	.L10328
	cmp	r2, #85
	bne	.L10303
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r1, #0
	movw	r3, #386
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
.L10590:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L10336
.L10582:
	mov	r2, #335872
	mvn	r7, #21
	str	r2, [r3, #28]
.L10334:
	mov	r0, r8
	bl	up_read
	b	.L10429
.L10386:
	ldr	r3, [fp, #136]
	cmp	r3, #0
	beq	.L10385
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	ands	r6, r3, #8
	bne	.L10603
.L10409:
	ldr	r3, [fp, #64]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	bne	.L10416
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L10385
	ldr	r7, [fp, #60]
	ldr	r2, [r7, #4]
	cmp	r2, #0
	beq	.L10431
.L10413:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	beq	.L10409
	b	.L10261
.L10416:
	cmp	r2, #1
	bne	.L10407
	.syntax divided
@ 1683 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r3, #8]
	str	r6, [r3, #4]
	str	r2, [fp, #64]
	ldr	r2, [r3, #24]
	ldr	r3, [r3, #12]
	ldr	r1, [r2, #48]
	cmp	r1, r3
	bcc	.L10408
	ldr	r3, [r2, #44]
	cmp	r3, #0
	beq	.L10409
.L10408:
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r5, r0
	cmp	r3, #1
	bgt	.L10411
	ldr	r3, [fp, #56]
	mov	r1, #1
	ldr	r2, [fp, #168]
	str	r1, [fp, #112]
	str	r3, [fp, #116]
	cmp	r2, #0
	beq	.L10411
.L10591:
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L10411:
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L10261
.L10407:
	ldr	r7, [fp, #60]
	ldr	r3, [r7, #4]
	cmp	r3, #0
	bne	.L10413
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L10413
.L10431:
	cmp	r3, #16384
	mov	r1, r7
	movcc	r5, r3
	movcs	r5, #16384
	mov	r0, fp
	str	r5, [r7, #12]
	ldr	r3, [fp, #108]
	udiv	r2, r5, r3
	mls	r2, r3, r2, r5
	cmp	r2, #0
	addne	r3, r5, r3
	moveq	r3, r5
	subne	r3, r3, r2
	ldr	r2, [r7, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L10261
	ldr	r3, [fp, #140]
	ldr	r2, [r7, #8]
	sub	r3, r3, r5
	str	r2, [fp, #60]
	str	r3, [fp, #140]
	b	.L10409
.L10387:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L10385
	ldr	r3, [fp, #8]
	cmp	r3, #0
	movweq	r1, #:lower16:.LC74
	movweq	r3, #1743
	ldreq	r0, [fp]
	beq	.L10580
	ldr	r0, [r3, #96]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r5, [fp, #8]
	mov	r1, #1
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L10391
.L10392:
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L10261
	ldr	r0, [r5, #92]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L10391:
	cmp	r0, #0
	beq	.L10385
	cmn	r0, #11
	beq	.L10392
.L10578:
	ldr	r3, [r5, #76]
	movw	r1, #:lower16:.LC594
	mov	r2, r0
	movt	r1, #:upper16:.LC594
	add	r0, r3, #32
	bl	dev_warn
	b	.L10385
.L10600:
	cmp	r2, #3
	beq	.L10308
	bls	.L10604
	cmp	r2, #8
	beq	.L10311
	cmp	r2, #10
	bne	.L10303
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10380
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10380:
	mov	r0, #1
	mov	r3, #30
	mov	r2, r0
	mov	r1, #6
.L10587:
	str	r0, [sp]
	mov	r0, fp
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	mov	r0, fp
	bl	do_write
	mov	r7, r0
	b	.L10332
.L10602:
	cmp	r2, #42
	beq	.L10321
	bls	.L10605
	cmp	r2, #47
	beq	.L10324
	cmp	r2, #53
	bne	.L10303
	mov	r1, #0
	mov	ip, #1
	mov	r3, #444
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r0, fp
	mov	r1, #10
	str	ip, [sp]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	ldr	r6, [fp, #104]
	ldr	r0, [r6]
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	cmp	r0, #0
	ubfx	r3, r3, #1, #1
	moveq	r3, #1
	cmp	r3, #0
	beq	.L10606
.L10359:
	mov	r7, #0
	b	.L10334
.L10303:
	mov	r6, #0
	movw	r1, #:lower16:.LC595
	ldr	r0, .L10615+4
	movt	r1, #:upper16:.LC595
	str	r6, [fp, #128]
	bl	sprintf
	str	r6, [sp]
	mov	r2, r6
	mvn	r3, #0
	mov	r0, fp
	ldr	r1, [fp, #72]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	ldr	r3, [fp, #104]
	b	.L10582
.L10314:
	cmp	r2, #30
	beq	.L10317
	cmp	r2, #35
	bne	.L10303
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r1, #1
	mov	r3, #384
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	ldr	r1, [fp, #104]
	mov	r2, #134217728
	mov	ip, #2
	ldr	r3, [r5]
	mov	r7, #12
	str	r2, [r3]	@ unaligned
	ldr	r2, [r1, #16]
	lsr	r0, r2, #16
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	r0, [r3, #5]
	strb	r2, [r3, #6]
	lsr	r2, r0, #8
	strb	r2, [r3, #4]
	ldr	r2, [r1, #44]
	strb	ip, [r3, #8]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #9]
	strb	r0, [r3, #10]
	strb	r2, [r3, #11]
	b	.L10334
.L10327:
	cmp	r2, #168
	beq	.L10330
	cmp	r2, #170
	bne	.L10303
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10382
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10382:
	mov	r0, #1
	movw	r3, #1022
	mov	r2, r0
	mov	r1, #12
	b	.L10587
.L10396:
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	mov	r1, r5
	mov	r0, fp
	orr	r2, r2, #2
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	bne	.L10397
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r5, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	beq	.L10261
.L10430:
	ldr	r5, [fp, #8]
	mov	r1, #1
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L10399
.L10400:
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L10261
	ldr	r0, [r5, #92]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L10399:
	cmp	r0, #0
	beq	.L10385
	cmn	r0, #11
	beq	.L10400
	b	.L10578
.L10604:
	cmp	r2, #0
	bne	.L10303
	mov	r0, #1
	str	r2, [fp, #128]
	mov	r3, r2
	mov	r1, #6
	mov	r2, #3
	str	r0, [sp]
	mov	r0, fp
	bl	check_command.constprop.143
	mov	r7, r0
	b	.L10332
.L10605:
	cmp	r2, #40
	bne	.L10303
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10342
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10342:
	mov	r0, #1
	movw	r3, #446
	mov	r2, #2
	mov	r1, #10
.L10584:
	str	r0, [sp]
	mov	r0, fp
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	mov	r0, fp
	bl	do_read
	mov	r7, r0
	b	.L10332
.L10277:
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	beq	.L10279
	blx	r2
.L10280:
	cmp	r0, #0
	beq	.L10283
	cmn	r0, #11
	bne	.L10607
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L10283
	ldr	r0, [r6, #92]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L10285
	blx	r3
	b	.L10280
.L10285:
	mov	r1, #1
	ldr	r3, [r2, #24]
	blx	r3
	b	.L10280
.L10607:
	ldr	r3, [r6, #76]
	movw	r1, #:lower16:.LC593
	mov	r2, r0
	movt	r1, #:upper16:.LC593
	add	r0, r3, #32
	bl	dev_warn
.L10283:
	add	r1, r6, #88
	mov	r0, #0
	bl	_set_bit
	b	.L10579
.L10326:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r1, #0
	movw	r3, #390
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
.L10575:
	mov	r1, r5
	mov	r0, fp
	bl	do_mode_sense
	mov	r7, r0
	b	.L10332
.L10317:
	mov	ip, #0
	mov	r3, #16
	mov	r2, #3
	mov	r1, #6
	str	ip, [fp, #128]
	mov	r0, fp
	str	ip, [sp]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	ldr	r6, [fp, #104]
	cmp	r6, #0
	beq	.L10336
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L10581
	ldrb	r2, [fp, #80]	@ zero_extendqisi2
	bics	r7, r2, #1
	str	r2, [sp, #32]
	bne	.L10354
	ldr	r2, [sp, #32]
	and	r1, r3, #144
	mvn	r2, r2
	cmp	r1, #16
	movne	r2, #0
	andeq	r2, r2, #1
	cmp	r2, #0
	bne	.L10608
.L10339:
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	ldr	r2, [sp, #32]
	bfi	r3, r2, #4, #1
	strb	r3, [r6, #24]
	b	.L10334
.L10311:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10341
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10341:
	mov	r0, #1
	mov	r3, #30
	mov	r2, #2
	mov	r1, #6
	b	.L10584
.L10321:
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10381
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10381:
	mov	r0, #1
	movw	r3, #446
	mov	r2, r0
	mov	r1, #10
	b	.L10587
.L10324:
	mov	r1, #0
	mov	ip, #1
	movw	r3, #446
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r0, fp
	mov	r1, #10
	str	ip, [sp]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	ldr	r3, [fp, #60]
	mov	r1, #0
	ldr	r6, [fp, #104]
	ldr	ip, [fp, #78]	@ unaligned
	str	r3, [sp, #56]
	ldrd	r2, [r6, #16]
	rev	ip, ip
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r7, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L10332
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	tst	r3, #239
	movne	r3, #9216
	mvnne	r7, #21
	movtne	r3, 5
	strne	r3, [r6, #28]
	bne	.L10332
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	orrs	r1, r3, r1, lsl #8
	beq	.L10437
	ldr	r0, [r6]
	ldr	r2, [r6, #40]
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	cmp	r0, #0
	sub	lr, r2, #32
	lsl	r1, r1, r2
	ubfx	r3, r3, #1, #1
	moveq	r3, #1
	str	r1, [sp, #40]
	mov	r1, #0
	cmp	r3, #0
	orr	r1, r1, ip, lsl lr
	lsl	r3, ip, r2
	str	r1, [sp, #20]
	rsb	r1, r2, #32
	ldr	lr, [sp, #20]
	str	r3, [sp, #16]
	orr	r1, lr, ip, lsr r1
	str	r1, [sp, #20]
	bne	.L10367
	mov	r1, #1
	bl	vfs_fsync
.L10367:
	mov	r3, sp
	and	r3, r3, r9
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L10369
	ldr	r3, [r6]
	mvn	r2, #0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #40]
	ldr	r0, [r3, #32]
	bl	invalidate_mapping_pages
	mov	r3, sp
	and	r3, r3, r9
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r7, [r3]
	ands	r7, r7, #1
	bne	.L10369
	mov	r3, sp
	str	r5, [sp, #32]
	and	r3, r3, r9
	str	r8, [sp, #36]
	str	r9, [sp, #44]
	ldrd	r8, [sp, #16]
	str	r10, [sp, #48]
	str	r7, [sp, #52]
	ldr	r7, [sp, #40]
	str	r4, [sp, #40]
	ldrd	r4, [sp, #24]
	str	r3, [sp, #60]
.L10370:
	cmp	r7, #0
	beq	.L10609
	ldr	r1, [r6, #8]
	cmp	r7, #16384
	mov	r3, #0
	ldr	r0, [r6, #12]
	movcc	r2, r7
	movcs	r2, #16384
	subs	r4, r1, r8
	sbc	r5, r0, r9
	cmp	r2, r4
	sbcs	r1, r3, r5
	movlt	r4, r2
	movlt	r5, r3
	cmp	r4, #0
	beq	.L10610
	ldr	r1, [sp, #56]
	add	r3, sp, #72
	mov	r2, r4
	strd	r8, [r3, #-8]!
	ldr	r0, [r6]
	ldr	r1, [r1]
	bl	vfs_read
	ldr	r3, [sp, #60]
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L10567
	cmp	r0, #0
	blt	.L10374
	cmp	r4, r0
	bls	.L10375
	ldr	r3, [r6, #44]
	rsb	r3, r3, #0
	and	r0, r0, r3
.L10375:
	cmp	r0, #0
	beq	.L10374
	adds	r8, r8, r0
	sub	r7, r7, r0
	adc	r9, r9, r0, asr #31
	b	.L10370
.L10304:
	mov	ip, #1
	mov	r6, #8
	mov	r3, #316
	mov	r2, #2
	str	r6, [fp, #128]
	mov	r1, #10
	mov	r0, fp
	str	ip, [sp]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	ldrb	r2, [fp, #84]	@ zero_extendqisi2
	ldr	r0, [fp, #78]	@ unaligned
	ldr	r3, [r5]
	ldr	r1, [fp, #104]
	cmp	r2, #1
	rev	r0, r0
	bhi	.L10344
	eor	r2, r2, #1
	cmp	r0, #0
	moveq	r2, #0
	andne	r2, r2, #1
	cmp	r2, #0
	bne	.L10344
	ldr	r2, [r1, #16]
	mov	r7, r6
	sub	r2, r2, #1
	lsr	r0, r2, #16
	ubfx	ip, r2, #8, #8
	strb	r2, [r3, #3]
	lsr	r2, r0, #8
	strb	r2, [r3]
	strb	r0, [r3, #1]
	strb	ip, [r3, #2]
	ldr	r2, [r1, #44]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #5]
	strb	r2, [r3, #7]
	lsr	r2, r1, #8
	strb	r0, [r3, #6]
	strb	r2, [r3, #4]
	b	.L10334
.L10328:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L10303
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L10303
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r1, #1
	movw	r3, #446
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldr	r7, [fp, #78]	@ unaligned
	ldr	ip, [fp, #104]
	ldr	r6, [r5]
	bics	r2, r3, #2
	and	r3, r3, #2
	rev	r7, r7
	mvnne	r7, #21
	str	r3, [sp, #32]
	movne	r3, #9216
	movtne	r3, 5
	str	r2, [sp, #36]
	strne	r3, [ip, #28]
	bne	.L10334
	ldrd	r2, [ip, #16]
	mov	r1, #0
	cmp	r7, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r7, #21
	movtge	r3, 5
	strge	r3, [ip, #28]
	bge	.L10334
	mov	r1, #8
	mov	r0, r6
	bl	__memzero
	ldr	r3, [sp, #32]
	cmp	r3, #0
	mov	r3, #1
	strb	r3, [r6]
	bne	.L10611
	lsr	r3, r7, #16
	ubfx	r1, r7, #8, #8
	strb	r3, [r6, #5]
	strb	r7, [r6, #7]
	mov	r7, #8
	lsr	r2, r3, r7
	strb	r1, [r6, #6]
	strb	r2, [r6, #4]
	b	.L10334
.L10330:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10343
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10343:
	mov	r0, #1
	movw	r3, #1022
	mov	r2, #2
	mov	r1, #12
	b	.L10584
.L10319:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L10303
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L10303
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r0, #1
	movw	r3, #450
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r1, #10
	str	r0, [sp]
	mov	r0, fp
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldrb	r0, [fp, #82]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	ldr	r6, [r5]
	and	r1, r3, #253
	and	r3, r3, #2
	cmp	r0, #1
	cmpls	r1, #0
	movne	r3, #9216
	mvnne	r7, #21
	movtne	r3, 5
	strne	r3, [r2, #28]
	bne	.L10334
	mov	r1, #20
	mov	r0, r6
	strd	r2, [sp, #32]
	bl	__memzero
	ldr	r3, [sp, #36]
	mov	r2, #1
	mov	r1, #18
	strb	r1, [r6, #1]
	strb	r2, [r6, #2]
	cmp	r3, #0
	mov	r3, #22
	strb	r2, [r6, #3]
	strb	r3, [r6, #5]
	strb	r2, [r6, #6]
	ldr	r2, [sp, #32]
	bne	.L10612
	mvn	r1, #85
	str	r7, [r6, #8]	@ unaligned
	mov	r7, #20
	strb	r3, [r6, #13]
	strb	r1, [r6, #14]
	ldr	r3, [r2, #16]
	lsr	r2, r3, #16
	ubfx	r1, r3, #8, #8
	strb	r2, [r6, #17]
	strb	r3, [r6, #19]
	lsr	r3, r2, #8
	strb	r1, [r6, #18]
	strb	r3, [r6, #16]
	b	.L10334
.L10315:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #18
	mov	r2, #1
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	b	.L10590
.L10308:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #16
	mov	r2, #2
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	ldr	r1, [fp, #104]
	ldr	r6, [r5]
	cmp	r1, #0
	beq	.L10613
	ldrb	r0, [r1, #24]	@ zero_extendqisi2
	mov	lr, #0
	ldr	r3, [r1, #28]
	ldr	r2, [r1, #32]
	str	lr, [r1, #28]
	str	lr, [r1, #32]
	mov	ip, r0
	ubfx	r0, r0, #6, #1
	lsl	r7, r0, #7
	bfi	ip, lr, #6, #1
	strb	ip, [r1, #24]
.L10352:
	mov	r1, #18
	mov	r0, r6
	str	r3, [sp, #32]
	str	r2, [sp, #36]
	bl	__memzero
	ldr	r3, [sp, #32]
	ldr	r2, [sp, #36]
	lsr	r0, r3, #16
	lsr	r1, r2, #16
	lsr	ip, r1, #8
	strb	r0, [r6, #2]
	orr	r0, r7, #112
	strb	r3, [r6, #13]
	lsr	r3, r3, #8
	mov	r7, #18
	strb	r0, [r6]
	strb	r1, [r6, #4]
	mov	r1, #10
	strb	r2, [r6, #6]
	ubfx	r2, r2, #8, #8
	strb	ip, [r6, #3]
	strb	r2, [r6, #5]
	strb	r1, [r6, #7]
	strb	r3, [r6, #12]
	b	.L10334
.L10313:
	mov	ip, #0
	mov	r3, #18
	mov	r2, #3
	mov	r1, #6
	str	ip, [fp, #128]
	mov	r0, fp
	str	ip, [sp]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	ldr	r6, [fp, #104]
	cmp	r6, #0
	beq	.L10336
	ldrb	r2, [r6, #24]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L10581
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	tst	r3, #254
	bne	.L10354
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	tst	r3, #252
	bne	.L10354
	tst	r3, #1
	beq	.L10356
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L10359
	mov	r3, #14848
	mvn	r7, #21
	movt	r3, 2
	str	r3, [r6, #28]
	b	.L10334
.L10306:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #16
	mov	r2, #2
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.143
	subs	r7, r0, #0
	bne	.L10332
	ldr	r1, [fp, #104]
	ldr	r6, [r5]
	cmp	r1, #0
	beq	.L10614
	ldrb	lr, [r1, #24]	@ zero_extendqisi2
	mov	r0, #2
	mov	ip, #31
	mov	r3, fp
	tst	lr, #8
	moveq	lr, #0
	movne	lr, #5
	strb	lr, [r6]
	ldrb	r1, [r1, #24]	@ zero_extendqisi2
	strb	r0, [r6, #2]
	strb	r0, [r6, #3]
	strb	ip, [r6, #4]
	lsl	r1, r1, #5
	strb	r7, [r6, #5]
	strb	r7, [r6, #6]
	bic	r1, r1, #127
	strb	r1, [r6, #1]
	strb	r7, [r6, #7]
	ldr	ip, [r3, #180]!	@ unaligned
	mov	r7, #36
	ldr	r0, [r3, #4]	@ unaligned
	ldr	r1, [r3, #8]	@ unaligned
	ldr	lr, [r3, #12]	@ unaligned
	str	ip, [r6, #8]	@ unaligned
	str	r0, [r6, #12]	@ unaligned
	str	r1, [r6, #16]	@ unaligned
	str	lr, [r6, #20]	@ unaligned
	ldr	ip, [r3, #16]	@ unaligned
	ldr	r0, [r3, #20]	@ unaligned
	ldr	r1, [r3, #24]	@ unaligned
	str	ip, [r6, #24]	@ unaligned
	str	r0, [r6, #28]	@ unaligned
	str	r1, [r6, #32]	@ unaligned
	ldrb	r3, [r3, #28]	@ zero_extendqisi2
	strb	r3, [r6, #36]
	b	.L10334
.L10601:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC74
	movw	r3, #1758
.L10580:
	movt	r1, #:upper16:.LC74
	ldr	r2, .L10615+8
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #461
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	b	.L10261
.L10397:
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r5, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	bne	.L10430
	b	.L10385
.L10276:
	mov	r0, r4
	str	r2, [sp, #32]
	bl	_raw_spin_lock_irq
	ldr	r2, [sp, #32]
	mov	r0, r4
	str	r2, [r5, #4]
	bl	_raw_spin_unlock_irq
	b	.L10261
.L10336:
	mvn	r7, #21
	b	.L10334
.L10279:
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	b	.L10280
.L10616:
	.align	2
.L10615:
	.word	.LANCHOR3-3088
	.word	.LANCHOR4-3992
	.word	.LANCHOR3-3068
.L10356:
	tst	r2, #16
	ldrne	r3, [sp, #12]
	mvnne	r7, #21
	strne	r3, [r6, #28]
	bne	.L10334
	tst	r3, #2
	beq	.L10359
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L10363
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L10363
	ldr	r2, [fp, #100]
	mov	r1, r6
	mov	r0, fp
	ldr	ip, [sp, #8]
	sub	r2, r6, r2
	asr	r2, r2, #4
	mul	r2, ip, r2
	blx	r3
	subs	r7, r0, #0
	blt	.L10332
	bne	.L10359
.L10363:
	mov	r0, r8
	bl	up_read
	mov	r0, r8
	bl	down_write
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L10362
	bl	fput
	mov	r3, #0
	str	r3, [r6]
.L10362:
	mov	r0, r8
	bl	up_write
	mov	r0, r8
	bl	down_read
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L10359
	ldr	r3, [r3, #8]
	cmp	r3, #0
	beq	.L10359
	ldr	r2, [fp, #100]
	mov	r1, r6
	mov	r0, fp
	ldr	ip, [sp, #8]
	sub	r2, r6, r2
	asr	r2, r2, #4
	mul	r2, ip, r2
	blx	r3
	and	r7, r0, r0, asr #31
	b	.L10332
.L10567:
	strd	r8, [sp, #16]
	ldr	r8, [sp, #36]
	strd	r4, [sp, #24]
	ldr	r5, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	r9, [sp, #44]
	ldr	r10, [sp, #48]
.L10369:
	mvn	r7, #3
	b	.L10332
.L10606:
	mov	r1, #1
	bl	vfs_fsync
	cmp	r0, #0
	beq	.L10359
	movw	r3, #3074
	movt	r3, 3
	str	r3, [r6, #28]
	b	.L10334
.L10613:
	ldrb	r1, [fp, #144]	@ zero_extendqisi2
	mov	r3, #9472
	mov	r2, r7
	movt	r3, 5
	orr	r1, r1, #16
	strb	r1, [fp, #144]
	b	.L10352
.L10609:
	strd	r8, [sp, #16]
	ldr	r8, [sp, #36]
	strd	r4, [sp, #24]
	ldr	r5, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	r9, [sp, #44]
	ldr	r10, [sp, #48]
	ldr	r7, [sp, #52]
	b	.L10332
.L10437:
	mvn	r7, #4
	b	.L10332
.L10608:
	ldr	r0, [r6]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L10339
	mov	r1, #1
	bl	vfs_fsync
	b	.L10339
.L10610:
	mov	r0, r8
	mov	r1, r9
	ldr	r3, [r6, #40]
	mov	r2, #8448
	ldr	r8, [sp, #36]
	strd	r0, [sp, #16]
	movt	r2, 5
	ldr	ip, [sp, #20]
	strd	r4, [sp, #24]
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r0, r3
	rsb	r3, r3, #32
	ldr	r5, [sp, #32]
	ldr	r4, [sp, #40]
	orr	r2, r2, ip, lsl r3
	ldr	r9, [sp, #44]
	movpl	r3, ip
	ldr	r10, [sp, #48]
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	ldr	r7, [sp, #52]
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L10332
.L10614:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r1, #36
	mov	r0, r6
	mov	r7, r1
	orr	r3, r3, #16
	strb	r3, [fp, #144]
	bl	__memzero
	mov	r2, #127
	mov	r3, #31
	strb	r2, [r6]
	strb	r3, [r6, #4]
	b	.L10334
.L10374:
	mov	r0, r8
	mov	r1, r9
	ldr	r3, [r6, #40]
	mov	r2, #4352
	ldr	r8, [sp, #36]
	mov	r7, #0
	strd	r0, [sp, #16]
	movt	r2, 3
	ldr	ip, [sp, #20]
	strd	r4, [sp, #24]
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r0, r3
	rsb	r3, r3, #32
	ldr	r5, [sp, #32]
	ldr	r4, [sp, #40]
	orr	r2, r2, ip, lsl r3
	ldr	r9, [sp, #44]
	movpl	r3, ip
	ldr	r10, [sp, #48]
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L10332
.L10603:
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r5, r0
	cmp	r3, #1
	bgt	.L10411
	ldr	r3, [fp, #56]
	str	r7, [fp, #112]
	ldr	r2, [fp, #168]
	str	r3, [fp, #116]
	cmp	r2, #0
	bne	.L10591
	b	.L10411
.L10344:
	mov	r3, #9216
	mvn	r7, #21
	movt	r3, 5
	str	r3, [r1, #28]
	b	.L10334
.L10354:
	mov	r3, #9216
	mvn	r7, #21
	movt	r3, 5
	str	r3, [r6, #28]
	b	.L10334
.L10581:
	mov	r3, #335872
	mvn	r7, #21
	str	r3, [r6, #28]
	b	.L10334
.L10611:
	lsr	r3, r7, #2
	mov	r2, #75
	ldr	r1, [sp, #36]
	mov	lr, #60
	add	r3, r3, #150
	movw	ip, #4500
	mov	r7, #8
	udiv	r0, r3, r2
	strb	r1, [r6, #4]
	udiv	ip, r3, ip
	udiv	r1, r0, lr
	mls	r3, r2, r0, r3
	strb	ip, [r6, #5]
	strb	r3, [r6, #7]
	mls	r1, lr, r1, r0
	strb	r1, [r6, #6]
	b	.L10334
.L10612:
	mov	r1, #131072
	mov	lr, #60
	movw	ip, #4500
	strb	r3, [r6, #13]
	mvn	r3, #85
	str	r1, [r6, #8]	@ unaligned
	mov	r1, #75
	strb	r3, [r6, #14]
	ldr	r3, [r2, #16]
	strb	r7, [r6, #16]
	mov	r7, #20
	lsr	r3, r3, #2
	add	r3, r3, #150
	udiv	r0, r3, r1
	udiv	ip, r3, ip
	udiv	r2, r0, lr
	mls	r3, r1, r0, r3
	strb	ip, [r6, #17]
	strb	r3, [r6, #19]
	mls	r2, lr, r2, r0
	strb	r2, [r6, #18]
	b	.L10334
	.fnend
	.size	fsg_main_thread, .-fsg_main_thread
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_write, %function
ffs_epfile_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r9, [r0, #124]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r9, #36]
	ldr	r6, [r9, #40]
	cmp	r4, #0
	bne	.L10638
	mov	r7, r2
	ldr	r2, [r6, #96]
	mov	r5, r0
	str	r1, [sp, #4]
	cmp	r2, #2
	bne	.L10619
	ldr	r8, [r9, #44]
	cmp	r8, #0
	beq	.L10640
.L10621:
	ldrb	fp, [r9, #57]	@ zero_extendqisi2
	cmp	fp, #0
	bne	.L10624
	ldrb	r2, [r9, #58]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L10653
.L10625:
	ldr	r2, [r5, #32]
	mov	r0, r9
	tst	r2, #2048
	beq	.L10626
	bl	mutex_trylock
	cmp	r0, #0
	beq	.L10645
.L10629:
	ldr	r0, [r9, #40]
	add	r0, r0, #28
	bl	_raw_spin_lock_irq
	ldr	r2, [r9, #44]
	cmp	r2, r8
	bne	.L10654
	cmp	fp, #0
	beq	.L10655
	ldr	r5, [r8, #4]
	movw	r0, #:lower16:ffs_epfile_io_complete
	mov	ip, #0
	movt	r0, #:upper16:ffs_epfile_io_complete
	mov	r2, #32
	stm	r5, {r4, r7}
	mov	r1, r5
	str	r0, [r5, #28]
	str	ip, [r6, #56]!
	str	r6, [r5, #32]
	ldr	r0, [r8]
	ldr	ip, [r0, #8]
	ldr	r7, [ip, #16]
	blx	r7
	mov	r7, r0
	ldr	r0, [r9, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	blt	.L10646
	mov	r0, r6
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r0, [r9, #40]
	add	r0, r0, #28
	bne	.L10656
	bl	_raw_spin_lock_irq
	ldr	r0, [r9, #40]
	ldr	r2, [r9, #44]
	add	r0, r0, #28
	cmp	r8, r2
	ldreq	r10, [r8, #24]
	mvnne	r10, #18
	bl	_raw_spin_unlock_irq
.L10632:
	mov	r0, r9
	bl	mutex_unlock
.L10623:
	mov	r0, r4
	bl	kfree
.L10617:
	mov	r0, r10
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10624:
	cmp	r4, #0
	bne	.L10625
	movw	r1, #32976
	mov	r0, r7
	bl	__kmalloc
	subs	r4, r0, #0
	beq	.L10643
	mov	r2, r7
	ldr	r1, [sp, #4]
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L10625
	mvn	r10, #13
	b	.L10623
.L10626:
	bl	mutex_lock_interruptible
	subs	r10, r0, #0
	bne	.L10623
	b	.L10629
.L10640:
	mov	r4, r8
.L10620:
	ldr	r3, [r5, #32]
	tst	r3, #2048
	mvnne	r10, #10
	mvneq	r10, #18
	b	.L10623
.L10654:
	ldr	r0, [r9, #40]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	mov	r0, r9
	bl	mutex_unlock
	ldr	r2, [r9, #40]
	ldr	r2, [r2, #96]
	cmp	r2, #2
	beq	.L10622
.L10619:
	movw	r0, #:lower16:.LC12
	movw	r1, #787
	movt	r0, #:upper16:.LC12
	mvn	r10, #18
	bl	warn_slowpath_null
	b	.L10623
.L10622:
	ldr	r8, [r9, #44]
	cmp	r8, #0
	bne	.L10621
	b	.L10620
.L10643:
	mvn	r10, #11
	b	.L10617
.L10646:
	mvn	r10, #4
	b	.L10632
.L10655:
	ldr	r0, [r8]
	cmp	r0, #0
	beq	.L10657
	ldr	r2, [r0, #8]
	mov	r1, #1
	ldr	r2, [r2, #24]
	blx	r2
.L10637:
	ldr	r0, [r9, #40]
	mvn	r10, #73
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	b	.L10632
.L10656:
	bl	_raw_spin_lock_irq
	ldr	r2, [r9, #44]
	cmp	r8, r2
	bne	.L10634
	ldr	r0, [r8]
	mov	r1, r5
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
.L10634:
	ldr	r0, [r9, #40]
	mvn	r10, #3
	add	r0, r0, #28
	bl	_raw_spin_unlock_irq
	b	.L10632
.L10645:
	mvn	r10, #10
	b	.L10623
.L10638:
	mvn	r10, #18
	b	.L10617
.L10653:
	mvn	r10, #21
	b	.L10623
.L10657:
	movw	r0, #:lower16:.LC12
	movw	r1, #862
	movt	r0, #:upper16:.LC12
	bl	warn_slowpath_null
	b	.L10637
	.fnend
	.size	ffs_epfile_write, .-ffs_epfile_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_ctrlrequest, %function
accessory_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r0, [r2]	@ zero_extendqisi2
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldr	r4, [r3, #2324]
	cmp	r0, #64
	beq	.L10717
	cmp	r1, #51
	cmpeq	r0, #192
	bne	.L10701
	ldr	r3, [r5, #4]
	mov	r6, #2
	mov	r1, #256
	add	r0, r4, #93
	ldr	r3, [r3]
	strh	r6, [r3]	@ movhi
	bl	__memzero
	add	r0, r4, #348
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #604
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #860
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #1104
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero
	add	r0, r4, #1360
	mov	r1, #256
	add	r0, r0, #13
	bl	__memzero
	mov	r2, #0
	mov	r3, r6
	str	r2, [r4, #1636]
	str	r2, [r4, #1640]
.L10661:
	ldr	r1, [r5, #4]
	mov	r2, #32
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfc	r0, #1, #1
	strb	r0, [r1, #26]
	ldr	r1, [r5, #4]
	str	r3, [r1, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L10718
.L10658:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10717:
	cmp	r1, #53
	beq	.L10719
	cmp	r1, #52
	ldrh	r7, [r2, #4]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	beq	.L10720
	cmp	r1, #58
	cmpeq	r7, #0
	ldrh	r8, [r2, #2]	@ unaligned
	moveq	r3, #1
	movne	r3, #0
	cmp	r6, #0
	movne	r3, #0
	cmp	r3, #0
	movne	r3, #0
	strne	r8, [r4, #1640]
	bne	.L10661
	cmp	r1, #54
	beq	.L10721
	cmp	r1, #55
	beq	.L10722
	cmp	r1, #56
	beq	.L10723
	cmp	r1, #57
	bne	.L10701
	add	r9, r4, #80
	add	r4, r4, #1744
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #12]
	add	r4, r4, #12
	cmp	r4, r7
	bne	.L10698
	b	.L10695
.L10724:
	ldr	r7, [r7]
	cmp	r4, r7
	beq	.L10695
.L10698:
	ldr	r3, [r7, #16]
	cmp	r8, r3
	bne	.L10724
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L10716
	ldr	r1, [r5, #4]
	movw	r2, #:lower16:acc_complete_send_hid_event
	mov	r3, r6
	movt	r2, #:upper16:acc_complete_send_hid_event
	str	r7, [r1, #32]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L10661
.L10718:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC471
	movt	r1, #:upper16:.LC471
	ldr	r2, .L10731
	add	r0, r0, #32
	bl	dev_err
	b	.L10658
.L10720:
	str	r7, [r4, #1632]
	ldr	r1, [r5]
	movw	r2, #:lower16:acc_complete_set_string
	movt	r2, #:upper16:acc_complete_set_string
	mov	r3, r6
	ldr	r1, [r1, #4]
	str	r4, [r1]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L10661
.L10701:
.L10666:
	mvn	r4, #94
	b	.L10658
.L10719:
	mov	r3, #1
	add	r0, r4, #1680
	mov	r1, r3
	add	r0, r0, #12
	str	r3, [r4, #1636]
	bl	schedule_delayed_work
	mov	r3, #0
	b	.L10661
.L10695:
	mov	r1, r0
	mov	r0, r9
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L10658
.L10721:
	cmp	r7, #0
	beq	.L10716
	add	r6, r4, #80
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1756]
	add	r1, r4, #1744
	mov	r9, r0
	add	r1, r1, #12
	cmp	r1, r3
	bne	.L10670
	b	.L10667
.L10725:
	ldr	r3, [r3]
	cmp	r1, r3
	beq	.L10667
.L10670:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L10725
	cmp	r3, #0
	beq	.L10667
.L10671:
	ldrd	r0, [r3]
	add	r2, r4, #1760
	add	r2, r2, #12
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r1, [r4, #1772]
	str	r3, [r1, #4]
	stm	r3, {r1, r2}
	str	r3, [r4, #1772]
.L10672:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10699
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L10677
.L10676:
	movw	r1, #32800
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r10, #20]
	beq	.L10726
	str	r4, [r10, #12]
	add	r3, r4, #1760
	mov	r1, r9
	str	r8, [r10, #16]
	add	r3, r3, #4
	mov	r0, r6
	str	r7, [r10, #24]
	ldr	r2, [r4, #1764]
	str	r10, [r2, #4]
	strd	r2, [r10]
	str	r10, [r4, #1764]
.L10715:
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1728
	add	r0, r0, #12
	bl	schedule_work
	mov	r3, #0
	b	.L10661
.L10722:
	add	r6, r4, #80
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1756]
	add	ip, r4, #1744
	mov	r1, r0
	add	ip, ip, #12
	cmp	ip, r3
	bne	.L10683
	b	.L10680
.L10727:
	ldr	r3, [r3]
	cmp	ip, r3
	beq	.L10680
.L10683:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L10727
	cmp	r3, #0
	beq	.L10680
.L10684:
	ldr	lr, [r3]
	add	r2, r4, #1760
	mov	r0, r6
	ldr	ip, [r3, #4]
	add	r2, r2, #12
	str	ip, [lr, #4]
	str	lr, [ip]
	ldr	ip, [r4, #1772]
	str	r3, [ip, #4]
	str	ip, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #1772]
	b	.L10715
.L10723:
	add	r10, r4, #80
	add	r4, r4, #1760
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #4]
	add	r4, r4, #4
	mov	r1, r0
	cmp	r4, r9
	bne	.L10693
	b	.L10690
.L10728:
	ldr	r9, [r9]
	cmp	r4, r9
	beq	.L10690
.L10693:
	ldr	r3, [r9, #16]
	cmp	r8, r3
	bne	.L10728
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L10716
	ldr	r3, [r9, #28]
	cmp	r7, r3
	bne	.L10716
	ldr	r3, [r9, #24]
	add	r7, r6, r7
	cmp	r7, r3
	bgt	.L10716
	ldr	r1, [r5, #4]
	movw	r2, #:lower16:acc_complete_set_hid_report_desc
	mov	r3, r6
	movt	r2, #:upper16:acc_complete_set_hid_report_desc
	str	r9, [r1, #32]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L10661
.L10699:
	mov	r10, #16
	b	.L10676
.L10690:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L10716:
	mvn	r4, #21
	b	.L10658
.L10667:
	ldr	r3, [r4, #1764]
	add	r1, r4, #1760
	add	r1, r1, #4
	cmp	r1, r3
	bne	.L10675
	b	.L10672
.L10729:
	ldr	r3, [r3]
	cmp	r1, r3
	beq	.L10672
.L10675:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L10729
	cmp	r3, #0
	beq	.L10672
	b	.L10671
.L10680:
	ldr	r3, [r4, #1764]
	add	ip, r4, #1760
	add	ip, ip, #4
	cmp	ip, r3
	bne	.L10688
	b	.L10685
.L10730:
	ldr	r3, [r3]
	cmp	ip, r3
	beq	.L10685
.L10688:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L10730
	cmp	r3, #0
	bne	.L10684
.L10685:
	mov	r0, r6
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L10658
.L10726:
	mov	r0, r10
	bl	kfree
.L10677:
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #11
	b	.L10658
.L10732:
	.align	2
.L10731:
	.word	.LANCHOR3-3920
	.fnend
	.size	accessory_function_ctrlrequest, .-accessory_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_read, %function
ccid_bulk_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r2
	movw	r2, #522
	cmp	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #124]
	bhi	.L10762
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L10736
	mov	r3, sp
	mov	r9, r1
	bic	r7, r3, #8128
	add	r5, r4, #84
	bic	r7, r7, #63
	b	.L10737
.L10739:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L10750
.L10766:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L10763
	ldr	r2, [r6, #48]
	cmp	r2, #0
	bne	.L10744
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L10737:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L10749
	ldr	r6, [r4, #176]
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r8, [r6, #4]
	str	r3, [r4, #180]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #100]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L10764
	ldr	r3, [r4, #180]
	cmp	r3, #0
	bne	.L10739
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L10739
	ldr	r2, [r4, #88]
	cmp	r2, #0
	beq	.L10739
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, r4, #152
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	b	.L10742
.L10765:
	bl	schedule
.L10742:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r3, [r4, #180]
	cmp	r3, #0
	bne	.L10740
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L10740
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L10740
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L10765
	add	r1, sp, #4
	mov	r0, r10
	bl	finish_wait
	ldr	r0, [r4, #100]
	mov	r3, #1
	mov	r8, #65024
	mov	r1, r6
	movt	r8, 65535
	str	r3, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L10733:
	mov	r0, r8
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10740:
	add	r1, sp, #4
	mov	r0, r10
	bl	finish_wait
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L10766
.L10750:
	mvn	r8, #4
	b	.L10733
.L10749:
	mvn	r8, #18
	b	.L10733
.L10763:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r8, #18
	b	.L10733
.L10744:
	mov	r3, #1
	cmp	r2, r8
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #148]
	movcc	r7, r2
	movcs	r7, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/xawlw/kernel/arg/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r7; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L10767
.L10745:
	cmp	r7, #0
	mov	r0, r5
	mvnne	r8, #13
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	mov	r2, #0
	mov	r6, r0
	str	r2, [r4, #148]
	cmp	r3, r2
	beq	.L10768
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L10733
.L10767:
	mov	r2, r7
	mov	r0, r9
	ldr	r1, [r6]
	bl	__copy_to_user
	mov	r7, r0
	b	.L10745
.L10768:
	ldr	r7, [r4, #176]
	cmp	r7, r2
	beq	.L10748
	ldr	r4, [r4, #100]
	ldr	r0, [r7]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L10748:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r8, #18
	b	.L10733
.L10764:
	movw	r0, #:lower16:.LC597
	ldr	r1, .L10769
	mvn	r8, #4
	movt	r0, #:upper16:.LC597
	bl	printk
	mov	r3, #1
	str	r3, [r4, #140]
	b	.L10733
.L10736:
	movw	r0, #:lower16:.LC596
	ldr	r1, .L10769
	mvn	r8, #4
	movt	r0, #:upper16:.LC596
	bl	printk
	b	.L10733
.L10762:
	movw	r0, #:lower16:.LC566
	mov	r3, r8
	ldr	r1, .L10769
	movt	r0, #:upper16:.LC566
	mvn	r8, #11
	bl	printk
	b	.L10733
.L10770:
	.align	2
.L10769:
	.word	.LANCHOR3-3052
	.fnend
	.size	ccid_bulk_read, .-ccid_bulk_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_command_complete, %function
rndis_qc_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r1]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [r1, #32]
	cmp	r4, #0
	ldrb	r3, [r8, #136]	@ zero_extendqisi2
	beq	.L10786
	cmp	r3, #0
	ldr	r2, [r4]	@ unaligned
	bne	.L10860
	sub	r3, r2, #2
	cmp	r3, #6
	ldrls	pc, [pc, r3, asl #2]
	b	.L10775
.L10777:
	.word	.L10776
	.word	.L10778
	.word	.L10779
	.word	.L10780
	.word	.L10781
	.word	.L10775
	.word	.L10782
.L10781:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	fp, r6
	ldr	r3, [fp, #3824]!
	ldr	r4, [r3]
.L10783:
	cmp	r3, fp
	beq	.L10810
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L10808
	b	.L10862
.L10811:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L10807
	mov	r4, r3
.L10808:
	cmp	r4, fp
	ldr	r3, [r4]
	bne	.L10811
.L10810:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10863
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L10786
	add	r3, r0, #20
.L10805:
	mov	r1, #16
	mov	r2, #0
	str	r3, [r0, #8]
	mov	lr, #-2147483642
	mov	ip, #1
	str	r1, [r0, #12]
	str	r2, [r0, #16]
	ldr	r3, [r6, #3828]
	str	r0, [r6, #3828]
	str	fp, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	stmib	r3, {r1, r2, ip}
.L10861:
	ldr	r3, [r6, #3816]
	ldr	r0, [r6, #3820]
	blx	r3
.L10787:
	ldr	r3, [r7]
	ldr	r2, [r3]
	cmp	r2, #2
	bne	.L10771
	ldr	r3, [r3, #20]
	str	r3, [r8, #128]
.L10771:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10776:
	movw	r6, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3800]
	str	r2, [r6, #3776]
	cmp	r3, #0
	beq	.L10860
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L10814
	mov	r2, #72
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L10786
	add	r3, r0, #20
.L10785:
	mov	r2, #0
	mov	ip, #52
	str	r3, [r0, #8]
	ldr	r1, .L10868
	mov	lr, #-2147483646
	str	ip, [r0, #12]
	str	r2, [r0, #16]
	ldr	r3, [r6, #3828]
	str	r0, [r6, #3828]
	stm	r0, {r1, r3}
	mov	r1, #1
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	lr, [r3]
	str	ip, [r3, #4]
	ldr	r0, [r4, #8]
	str	r0, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r3, #16]
	str	r2, [r3, #20]
	str	r1, [r3, #24]
	str	r2, [r3, #28]
	ldrb	r1, [r6, #3808]	@ zero_extendqisi2
	ldr	r0, [r6, #3800]
	str	r1, [r3, #32]
	ldrb	r1, [r6, #3808]	@ zero_extendqisi2
	ldr	r0, [r0, #364]
	str	r2, [r3, #44]
	str	r2, [r3, #48]
	add	r2, r0, #80
	mul	r2, r1, r2
	str	r2, [r3, #36]
	ldrb	r2, [r6, #3809]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r3, [r6, #3816]
	ldr	r0, [r6, #3820]
	blx	r3
	b	.L10787
.L10778:
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, #0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3800]
	str	r5, [r4, #3776]
	cmp	r0, r5
	beq	.L10787
	bl	netif_carrier_off
	ldr	r3, [r4, #3800]
	ldr	r1, [r3, #576]
	cmp	r1, r5
	beq	.L10864
	add	r1, r1, #80
	mov	r0, r5
	bl	_set_bit
	b	.L10787
.L10779:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3800]
	cmp	r3, #0
	beq	.L10860
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L10815
	mov	r2, #156
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L10786
	add	r2, r0, #20
.L10789:
	mov	r3, #136
	mov	r9, #0
	ldr	r1, .L10868
	strd	r2, [r0, #8]
	mov	r2, #-2147483644
	str	r9, [r0, #16]
	ldr	r3, [r6, #3828]
	str	r0, [r6, #3828]
	stm	r0, {r1, r3}
	mov	r1, r0
	str	r0, [r3]
	ldr	r5, [r0, #8]
	str	r2, [r5]
	ldr	r3, [r4, #8]
	str	r3, [r5, #8]
	ldr	r0, [r4, #12]
	bl	gen_ndis_query_resp.constprop.118
	cmp	r0, #0
	beq	.L10790
	mov	r0, #187
	mov	r3, #24
	movt	r0, 49152
	str	r3, [r5, #4]
	str	r9, [r5, #16]
	str	r9, [r5, #20]
.L10790:
	str	r0, [r5, #12]
	ldr	r3, [r6, #3816]
	ldr	r0, [r6, #3820]
	blx	r3
	b	.L10787
.L10862:
	mov	r4, r3
.L10807:
	ldr	r10, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r10, #0
	beq	.L10810
	ldr	r3, [r6, #3824]
	cmp	r3, fp
	ldr	r4, [r3]
	beq	.L10818
	mov	r5, r4
	mov	r9, #512
	b	.L10803
.L10819:
	mov	r5, r4
.L10803:
	cmp	r3, #0
	beq	.L10802
	ldr	r0, [r3, #8]
	cmp	r10, r0
	beq	.L10865
.L10802:
	cmp	r5, fp
	mov	r3, r5
	ldr	r4, [r4]
	bne	.L10819
	ldr	r3, [r6, #3824]
	ldr	r4, [r3]
	b	.L10783
.L10865:
	ldr	ip, [r3, #4]
	mov	r2, #256
	mov	r0, r3
	str	ip, [r4, #4]
	str	r4, [ip]
	stm	r3, {r2, r9}
	bl	kfree
	b	.L10802
.L10863:
	mov	r3, #36
	mov	r0, #16
	b	.L10805
.L10818:
	ldr	r3, .L10868
	b	.L10783
.L10780:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10817
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L10786
	add	r3, r0, #20
.L10791:
	mov	r2, #16
	mov	r9, #0
	str	r3, [r0, #8]
	movw	r6, #:lower16:.LANCHOR1
	mov	r1, #-2147483643
	movt	r6, #:upper16:.LANCHOR1
	str	r2, [r0, #12]
	str	r9, [r0, #16]
	ldr	r3, [r6, #3828]
	add	ip, r6, #3824
	str	r0, [r6, #3828]
	str	ip, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r5, [r0, #8]
	ldr	r3, [r4, #16]
	ldr	ip, [r4, #20]
	stm	r5, {r1, r2}
	ldr	r2, [r4, #8]
	str	r2, [r5, #8]
	ldr	r1, [r0, #8]
	ldr	r2, [r4, #12]
	cmp	r1, r9
	beq	.L10792
	movw	r1, #270
	movt	r1, 1
	cmp	r2, r1
	beq	.L10794
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	bne	.L10866
.L10795:
	mov	r3, #0
	str	r3, [r5, #12]
	b	.L10861
.L10782:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10823
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L10786
	add	r3, r0, #20
.L10812:
	str	r3, [r0, #8]
	mov	ip, #16
	mov	r1, #0
	movw	r3, #:lower16:.LANCHOR1
	mov	lr, #-2147483640
	movt	r3, #:upper16:.LANCHOR1
	str	ip, [r0, #12]
	str	r1, [r0, #16]
	ldr	r2, [r3, #3828]
	add	r5, r3, #3824
	str	r0, [r3, #3828]
	str	r5, [r0]
	str	r2, [r0, #4]
	str	r0, [r2]
	ldr	r2, [r0, #8]
	str	lr, [r2]
	str	ip, [r2, #4]
	ldr	r0, [r4, #8]
	strd	r0, [r2, #8]
	ldr	r2, [r3, #3816]
	ldr	r0, [r3, #3820]
	blx	r2
	b	.L10787
.L10814:
	mov	r3, #36
	mov	r0, #16
	b	.L10785
.L10815:
	mov	r2, #36
	mov	r0, #16
	b	.L10789
.L10866:
	movw	r0, #:lower16:.LC598
	ldr	r1, .L10868+4
	movt	r0, #:upper16:.LC598
	bl	printk
.L10792:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r5, #12]
	b	.L10861
.L10794:
	add	ip, r4, ip
	ldr	r3, [r6, #3796]
	ldr	r2, [ip, #8]	@ unaligned
	strh	r2, [r3]	@ movhi
	ldr	r3, [r6, #3796]
	ldrh	r4, [r3]
	cmp	r4, #0
	beq	.L10796
	mov	r3, #2
	ldr	r0, [r6, #3800]
	str	r3, [r6, #3776]
	bl	netif_carrier_on
	ldr	r3, [r6, #3800]
	ldr	r2, [r3, #160]
	tst	r2, #1
	beq	.L10795
	ldr	r4, [r3, #576]
	mov	r0, r9
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L10795
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	b	.L10795
.L10796:
	mov	r3, #1
	ldr	r0, [r6, #3800]
	str	r3, [r6, #3776]
	bl	netif_carrier_off
	ldr	r3, [r6, #3800]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L10867
	add	r1, r1, #80
	mov	r0, r4
	bl	_set_bit
	b	.L10795
.L10786:
	mvn	r2, #11
.L10773:
	ldr	ip, [r7, #4]
	movw	r0, #:lower16:.LC600
	ldr	r3, [r7, #48]
	movt	r0, #:upper16:.LC600
	ldr	r1, .L10868+8
	str	ip, [sp]
	bl	printk
	b	.L10787
.L10775:
	movw	r0, #:lower16:.LC599
	ldr	r3, [r4, #4]	@ unaligned
	movt	r0, #:upper16:.LC599
	ldr	r1, .L10868+12
	bl	printk
.L10860:
	movw	r2, #65012
	movt	r2, 65535
	b	.L10773
.L10817:
	mov	r3, #36
	mov	r0, #16
	b	.L10791
.L10823:
	mov	r3, #36
	mov	r0, #16
	b	.L10812
.L10864:
	movw	r0, #:lower16:.LC81
	movw	r1, #1847
	movt	r0, #:upper16:.LC81
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC82
	movt	r0, #:upper16:.LC82
	bl	printk
	b	.L10787
.L10867:
	movw	r0, #:lower16:.LC81
	movw	r1, #1847
	movt	r0, #:upper16:.LC81
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC82
	movt	r0, #:upper16:.LC82
	bl	printk
	b	.L10795
.L10869:
	.align	2
.L10868:
	.word	.LANCHOR1+3824
	.word	.LANCHOR3-3036
	.word	.LANCHOR3-2996
	.word	.LANCHOR3-3016
	.fnend
	.size	rndis_qc_command_complete, .-rndis_qc_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_send_cpkt_response, %function
gps_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L10900
	movw	r3, #:lower16:kmalloc_caches
	mov	r6, r2
	movt	r3, #:upper16:kmalloc_caches
	ldr	r4, [r3, #24]
	cmp	r4, #0
	beq	.L10873
	mov	r0, r4
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L10875
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10884
	cmn	r4, #4096
	str	r6, [r4, #4]
	bhi	.L10875
.L10877:
	mov	r1, r7
	mov	r2, r6
	bl	memcpy
	str	r6, [r4, #4]
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L10878
	ldr	r3, [r5, #116]
	cmp	r3, #0
	bne	.L10879
.L10878:
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	mov	r0, #0
.L10870:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10873:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4, #16]
	strne	r6, [r4, #20]
	movne	r4, #16
	bne	.L10877
	mov	r4, #16
.L10884:
	mov	r0, r4
	bl	kfree
.L10875:
	movw	r0, #:lower16:.LC424
	ldr	r1, .L10901
	movt	r0, #:upper16:.LC424
	bl	printk
	mvn	r0, #11
	b	.L10870
.L10879:
	add	r6, r5, #124
	add	r7, r5, #136
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #140]
	add	r2, r4, #8
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #140]
	str	r7, [r4, #8]
	str	r3, [r4, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldr	r8, [r5, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	cmp	r8, #0
	moveq	r4, #1
	clz	r3, r3
	lsr	r3, r3, #5
	movne	r4, r3
	cmp	r4, #0
	bne	.L10880
	ldr	r3, [r8]
	cmp	r3, #0
	beq	.L10880
	add	r9, r5, #144
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r9]
	add	r2, r2, #1
	strex	r3, r2, [r9]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L10882
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L10870
.L10880:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L10870
.L10882:
	ldr	r3, [r8]
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r6
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r4, [r3, #2]
	strb	r4, [r3, #3]
	ldrh	r2, [r5, #108]
	strh	r2, [r3, #4]	@ unaligned
	strb	r4, [r3, #6]
	strb	r4, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r5, #128]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L10870
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #136]
	mov	r4, r0
	cmp	r7, r3
	beq	.L10883
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r9]
	sub	r2, r2, #1
	strex	r1, r2, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldm	r3, {r1, r2}
	mov	ip, #256
	mov	r0, #512
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r5, #-8]!
	bl	kfree
	mov	r0, r5
	bl	kfree
.L10883:
	mov	r0, r6
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L10870
.L10900:
	movw	r0, #:lower16:.LC601
	mov	r3, r1
	ldr	r1, .L10901
	mov	r2, r5
	movt	r0, #:upper16:.LC601
	bl	printk
	mvn	r0, #18
	b	.L10870
.L10902:
	.align	2
.L10901:
	.word	.LANCHOR3-2968
	.fnend
	.size	gps_send_cpkt_response, .-gps_send_cpkt_response
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_send_cpkt_response, %function
frmnet_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L10934
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r2
	movt	r3, #:upper16:kmalloc_caches
	ldr	r4, [r3, #24]
	cmp	r4, #0
	beq	.L10906
	mov	r0, r4
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L10908
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10918
	cmn	r4, #4096
	str	r5, [r4, #4]
	bhi	.L10908
.L10910:
	mov	r1, r7
	mov	r2, r5
	bl	memcpy
	str	r5, [r4, #4]
	ldr	r3, [r6, #112]
	cmp	r3, #0
	beq	.L10911
	ldr	r3, [r6, #116]
	cmp	r3, #0
	bne	.L10912
.L10911:
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	mov	r0, #0
.L10903:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10906:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4, #16]
	strne	r5, [r4, #20]
	movne	r4, #16
	bne	.L10910
	mov	r4, #16
.L10918:
	mov	r0, r4
	bl	kfree
.L10908:
	movw	r0, #:lower16:.LC424
	ldr	r1, .L10935
	movt	r0, #:upper16:.LC424
	bl	printk
	mvn	r0, #11
	b	.L10903
.L10912:
	add	r5, r6, #124
	add	r7, r6, #136
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #140]
	add	r2, r4, #8
	mov	r1, r0
	mov	r0, r5
	str	r2, [r6, #140]
	str	r7, [r4, #8]
	str	r3, [r4, #12]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldr	r8, [r6, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	cmp	r8, #0
	moveq	r4, #1
	clz	r3, r3
	lsr	r3, r3, #5
	movne	r4, r3
	cmp	r4, #0
	bne	.L10913
	ldr	r3, [r8]
	cmp	r3, #0
	beq	.L10913
	ldr	r3, [r6, #144]
	add	r3, r3, #1
	cmp	r3, #1
	str	r3, [r6, #144]
	beq	.L10915
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L10903
.L10913:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L10903
.L10915:
	ldr	r2, [r8]
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	strb	ip, [r2]
	strb	r3, [r2, #1]
	strb	r4, [r2, #2]
	strb	r4, [r2, #3]
	ldrh	r3, [r6, #104]
	strh	r3, [r2, #4]	@ unaligned
	strb	r4, [r2, #6]
	strb	r4, [r2, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r6, #128]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L10903
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #136]
	mov	r8, r0
	cmp	r7, r3
	beq	.L10916
	ldr	r4, [r6, #144]
	cmp	r4, #0
	beq	.L10916
	sub	r0, r4, #1
	mov	ip, #256
	mov	r4, r3
	str	r0, [r6, #144]
	ldm	r3, {r1, r2}
	mov	r0, #512
	str	r2, [r1, #4]
	str	r1, [r2]
	str	ip, [r3]
	str	r0, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
.L10916:
	mov	r0, r5
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L10903
.L10934:
	movw	r0, #:lower16:.LC601
	mov	r3, r1
	ldr	r1, .L10935
	mov	r2, r6
	movt	r0, #:upper16:.LC601
	bl	printk
	mvn	r0, #18
	b	.L10903
.L10936:
	.align	2
.L10935:
	.word	.LANCHOR3-2944
	.fnend
	.size	frmnet_send_cpkt_response, .-frmnet_send_cpkt_response
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_send_cpkt_tomodem, %function
grmnet_ctrl_smd_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #5
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L10938
	movw	r7, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r7, #:upper16:.LANCHOR1
	mla	r3, r3, r0, r7
	ldr	r4, [r3, #528]
	cmp	r4, #0
	beq	.L10938
	movw	r3, #:lower16:kmalloc_caches
	mov	r8, r1
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r2
	ldr	r5, [r3, #24]
	cmp	r5, #0
	beq	.L10939
	mov	r0, r5
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L10942
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5]
	beq	.L10946
	cmn	r5, #4096
	str	r6, [r5, #4]
	bhi	.L10942
.L10943:
	mov	r1, r8
	mov	r2, r6
	add	r8, r4, #108
	bl	memcpy
	str	r6, [r5, #4]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r0, [r4, #8]
	ands	r6, r0, #1
	beq	.L10963
	ldr	r3, [r4, #44]
	add	r2, r5, #8
	add	ip, r4, #40
	add	r1, r4, #68
	ldr	r0, [r7, #3516]
	mov	r6, #0
	str	r2, [r4, #44]
	str	ip, [r5, #8]
	str	r3, [r5, #12]
	str	r2, [r3]
	bl	queue_work
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L10937:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10939:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #16]
	strne	r6, [r5, #20]
	movne	r5, #16
	bne	.L10943
	mov	r5, #16
.L10946:
	mov	r0, r5
	bl	kfree
.L10942:
	movw	r0, #:lower16:.LC424
	ldr	r1, .L10964
	mvn	r6, #11
	movt	r0, #:upper16:.LC424
	bl	printk
	b	.L10937
.L10963:
	ldr	r0, [r5]
	bl	kfree
	mov	r0, r5
	bl	kfree
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L10937
.L10938:
	movw	r0, #:lower16:.LC19
	mov	r2, ip
	ldr	r1, .L10964
	movt	r0, #:upper16:.LC19
	mvn	r6, #18
	bl	printk
	b	.L10937
.L10965:
	.align	2
.L10964:
	.word	.LANCHOR3-2916
	.fnend
	.size	grmnet_ctrl_smd_send_cpkt_tomodem, .-grmnet_ctrl_smd_send_cpkt_tomodem
	.align	2
	.global	usb_gadget_get_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_get_string, %function
usb_gadget_get_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L10986
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L10987
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r3, #4]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L10970
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r0, r1
	bne	.L10972
	b	.L10971
.L10988:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L10970
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r1, r0
	beq	.L10971
.L10972:
	adds	r3, r3, #8
	bne	.L10988
.L10970:
	mvn	r1, #21
	b	.L10966
.L10971:
	mov	r0, r4
	mov	r5, r2
	bl	strlen
	mov	r2, #126
	add	r3, r5, #2
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r4
	mov	r2, #1
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L10970
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r5, #1]
	uxtb	r3, r3
	mov	r1, r3
	strb	r3, [r5]
.L10966:
	mov	r0, r1
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L10986:
	mov	r3, #4
	mov	ip, #3
	mov	r1, r3
	strb	r3, [r2]
	strb	ip, [r2, #1]
	ldrh	r3, [r0]
	strb	r3, [r2, #2]
	ldrh	r3, [r0]
	lsr	r3, r3, #8
	strb	r3, [r2, #3]
.L10983:
	mov	r0, r1
	bx	lr
.L10987:
	mvn	r1, #21
	b	.L10983
	.fnend
	.size	usb_gadget_get_string, .-usb_gadget_get_string
	.align	2
	.global	usb_find_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_find_descriptor_fillbuf, %function
usb_find_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L11004
	ldr	ip, [r2]
	cmp	ip, #0
	beq	.L10997
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	bne	.L10994
.L10992:
	ldrb	r4, [ip]	@ zero_extendqisi2
	cmp	r1, r4
	bcc	.L10996
	mov	r1, ip
	mov	r2, r4
	bl	memcpy
	mov	r0, r4
.L10989:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L10994:
	ldr	ip, [r2, #4]!
	cmp	ip, #0
	beq	.L11005
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	beq	.L10992
	b	.L10994
.L10997:
	mvn	r0, #1
	bx	lr
.L11005:
	mvn	r0, #1
	b	.L10989
.L10996:
	mvn	r0, #21
	b	.L10989
.L11004:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_find_descriptor_fillbuf, .-usb_find_descriptor_fillbuf
	.align	2
	.global	usb_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_descriptor_fillbuf, %function
usb_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L11010
	mov	r5, r1
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L11013
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r5, r4
	bcc	.L11010
	mov	r7, r0
	mov	r3, r0
	b	.L11011
.L11012:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L11010
.L11011:
	mov	r0, r3
	mov	r2, r4
	bl	memcpy
	ldr	r1, [r6, #4]!
	sub	r5, r5, r4
	add	r3, r0, r4
	cmp	r1, #0
	bne	.L11012
	sub	r0, r3, r7
.L11006:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11010:
	mvn	r0, #21
	b	.L11006
.L11013:
	mov	r0, r1
	b	.L11006
	.fnend
	.size	usb_descriptor_fillbuf, .-usb_descriptor_fillbuf
	.align	2
	.global	usb_gadget_config_buf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_config_buf, %function
usb_gadget_config_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #0
	cmpne	r2, #8
	bls	.L11026
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	sub	r6, r2, #9
	strd	r8, [sp, #16]
	mov	r8, r3
	add	r9, r7, #9
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0]	@ unaligned
	ldr	r3, [r0, #4]	@ unaligned
	str	r1, [r7]	@ unaligned
	str	r3, [r7, #4]	@ unaligned
	ldrb	r3, [r0, #8]	@ zero_extendqisi2
	strb	r3, [r7, #8]
	ldr	r1, [r8]
	cmp	r1, #0
	beq	.L11022
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r6, r4
	bcc	.L11019
	mov	r5, r9
	b	.L11020
.L11021:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r6
	bhi	.L11019
.L11020:
	mov	r0, r5
	mov	r2, r4
	bl	memcpy
	ldr	r1, [r8, #4]!
	sub	r6, r6, r4
	add	r5, r5, r4
	cmp	r1, #0
	bne	.L11021
	subs	r0, r5, r9
	bmi	.L11015
	add	r0, r0, #9
	cmp	r0, #65536
	bge	.L11019
.L11018:
	ldrb	r3, [r7, #7]	@ zero_extendqisi2
	mov	r1, #9
	mov	r2, #2
	strb	r1, [r7]
	strb	r2, [r7, #1]
	mvn	r3, r3, lsl #25
	strh	r0, [r7, #2]	@ unaligned
	mvn	r3, r3, lsr #25
	strb	r3, [r7, #7]
.L11015:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11019:
	mvn	r0, #21
	b	.L11015
.L11022:
	mov	r0, #9
	b	.L11018
.L11026:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_config_buf, .-usb_gadget_config_buf
	.align	2
	.global	usb_copy_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_copy_descriptors, %function
usb_copy_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L11033
	mov	r3, #0
	mov	r1, r0
	mov	r0, r3
	b	.L11029
.L11034:
	mov	r3, lr
.L11029:
	ldrb	ip, [r2]	@ zero_extendqisi2
	add	lr, r3, #1
	ldr	r2, [r1, #4]!
	add	r0, r0, ip
	cmp	r2, #0
	bne	.L11034
	add	r3, r3, #2
	lsl	r4, r3, #2
	add	r0, r0, r4
.L11028:
	mov	r1, #208
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L11027
	ldr	r1, [r5]
	add	r3, r6, r4
	mov	r4, r6
	cmp	r1, #0
	beq	.L11031
.L11032:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r3
	bl	memcpy
	str	r0, [r4], #4
	ldr	r2, [r5]
	ldr	r1, [r5, #4]!
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r0, r2
	bne	.L11032
.L11031:
	mov	r3, #0
	str	r3, [r4]
.L11027:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11033:
	mov	r0, #4
	mov	r4, r0
	b	.L11028
	.fnend
	.size	usb_copy_descriptors, .-usb_copy_descriptors
	.align	2
	.global	usb_assign_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_assign_descriptors, %function
usb_assign_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	subs	r0, r1, #0
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r4, #20]
	ldr	r3, [ip, #24]
	ldr	r5, [r3]
	beq	.L11046
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11045
.L11046:
	cmp	r7, #0
	beq	.L11044
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L11055
.L11044:
	cmp	r6, #0
	beq	.L11048
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L11056
.L11048:
	mov	r0, #0
.L11041:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11056:
	mov	r0, r6
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L11048
.L11054:
	ldr	r0, [r4, #8]
.L11045:
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	mvn	r0, #11
	b	.L11041
.L11055:
	mov	r0, r7
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L11044
	b	.L11054
	.fnend
	.size	usb_assign_descriptors, .-usb_assign_descriptors
	.align	2
	.global	usb_free_all_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_free_all_descriptors, %function
usb_free_all_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #16]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	usb_free_all_descriptors, .-usb_free_all_descriptors
	.align	2
	.global	usb_ep_autoconfig_ss
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_ss, %function
usb_ep_autoconfig_ss:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #28]
	.pad #12
	sub	sp, sp, #12
	movw	r0, #:lower16:.LC281
	ldrb	r6, [r1, #3]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC281
	str	r2, [sp]
	mov	r1, fp
	bl	strcmp
	ldr	r9, [r5, #8]!
	cmp	r0, #0
	and	r6, r6, #3
	sub	r4, r9, #12
	mov	r10, r9
	bne	.L11060
	cmp	r6, #3
	beq	.L11169
	movw	r0, #:lower16:.LC284
	mov	r1, fp
	movt	r0, #:upper16:.LC284
	bl	strcmp
	cmp	r0, #0
	bne	.L11070
.L11071:
	cmp	r6, #2
	beq	.L11170
.L11070:
	cmp	r10, r5
	beq	.L11075
.L11069:
	movw	r9, #:lower16:_ctype
	movw	r10, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LC283
	movt	r9, #:upper16:_ctype
	movt	r10, #:upper16:.LANCHOR1
	movt	fp, #:upper16:.LC283
	b	.L11096
.L11078:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L11075
.L11096:
	ldr	r2, [r4]
	cmp	r2, #0
	bne	.L11078
	ldrb	r6, [r7, #3]	@ zero_extendqisi2
	ands	r6, r6, #3
	beq	.L11078
	ldr	r2, [r4, #4]
	ldrb	r1, [r2]	@ zero_extendqisi2
	cmp	r1, #101
	bne	.L11078
	ldrb	r1, [r2, #2]	@ zero_extendqisi2
	cmp	r1, #45
	beq	.L11079
	mov	r0, r2
	mov	r1, #45
	str	r2, [sp, #4]
	bl	strrchr
	subs	r3, r0, #0
	ldr	r2, [sp, #4]
	beq	.L11080
	cmp	r6, #2
	beq	.L11082
	cmp	r6, #3
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	bne	.L11155
	cmp	r2, #115
	str	r3, [sp, #4]
	beq	.L11078
	mov	r0, fp
	ldr	r1, [r8, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #4]
	bne	.L11084
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #105
	beq	.L11078
.L11084:
	ldrb	r2, [r3, #-1]	@ zero_extendqisi2
	ldrb	r1, [r9, r2]	@ zero_extendqisi2
	tst	r1, #4
	beq	.L11097
	ldrh	r2, [r7, #4]	@ unaligned
	cmp	r2, #0
	bne	.L11158
	str	r2, [sp, #4]
	ldrh	r2, [r4, #20]
	strh	r2, [r7, #4]	@ unaligned
.L11088:
	cmp	r6, #1
	ubfx	r1, r2, #0, #11
	beq	.L11090
	cmp	r6, #3
	bne	.L11089
.L11091:
	ldr	r3, [r8, #20]
	cmp	r3, #2
	movls	r0, #1
	movhi	r0, #0
	cmp	r1, #64
	movls	r0, #0
	cmp	r0, #0
	bne	.L11078
.L11090:
	ldrh	r0, [r4, #20]
	cmp	r0, r1
	bcc	.L11078
	ldr	r0, [r8, #20]
	cmp	r0, #2
	bhi	.L11089
	cmp	r1, #1024
	bcs	.L11078
	tst	r2, #6144
	bne	.L11078
.L11089:
	ldrb	r2, [r7, #2]	@ zero_extendqisi2
	and	r2, r2, #128
	strb	r2, [r7, #2]
	ldr	r0, [r4, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r1, [r9, r1]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L11171
	ldr	r1, [r10, #3744]
	add	r1, r1, #1
	cmp	r1, #15
	str	r1, [r10, #3744]
	bhi	.L11078
	orr	r3, r2, r1
	uxtb	r3, r3
	strb	r3, [r7, #2]
.L11094:
	ldm	sp, {r2, fp}
	cmp	r2, #0
	movne	fp, #0
	cmp	fp, #0
	beq	.L11095
	ldrh	r2, [r4, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r7, #4]	@ unaligned
.L11095:
	strb	r3, [r4, #25]
.L11066:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L11059
.L11060:
	movw	r0, #:lower16:.LC284
	mov	r1, fp
	movt	r0, #:upper16:.LC284
	bl	strcmp
	cmp	r0, #0
	bne	.L11070
	cmp	r6, #3
	bne	.L11071
	cmp	r5, r9
	movwne	r9, #:lower16:.LC604
	movne	r6, r4
	movtne	r9, #:upper16:.LC604
	bne	.L11072
	b	.L11075
.L11172:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L11069
.L11072:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11172
.L11076:
	cmp	r6, #0
	beq	.L11069
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L11069
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [sp]
	mov	r0, r8
	bl	ep_matches.part.12
	cmp	r0, #0
	bne	.L11105
	ldr	r10, [r8, #8]
	sub	r4, r10, #12
	b	.L11070
.L11169:
	cmp	r5, r9
	beq	.L11075
	movw	r9, #:lower16:.LC602
	mov	r6, r4
	movt	r9, #:upper16:.LC602
	b	.L11064
.L11173:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L11065
.L11064:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11173
	cmp	r6, #0
	beq	.L11065
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L11065
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [sp]
	mov	r0, r8
	bl	ep_matches.part.12
	cmp	r0, #0
	bne	.L11105
	ldr	r4, [r8, #8]
	cmp	r5, r4
	sub	r4, r4, #12
	bne	.L11065
.L11075:
	mov	r4, #0
.L11059:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11080:
	mov	r0, r2
	str	r2, [sp, #4]
	bl	strlen
	ldr	r2, [sp, #4]
	add	r3, r2, r0
.L11085:
	ldrb	r2, [r3, #-1]	@ zero_extendqisi2
	ldrb	r1, [r9, r2]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L11079
.L11097:
	ldrsb	r1, [r7, #2]
	cmp	r1, #0
	blt	.L11174
	cmp	r2, #116
	bne	.L11078
.L11079:
	sub	r3, r6, #2
	clz	r3, r3
	lsr	r3, r3, #5
	mov	r2, r3
	str	r3, [sp, #4]
	ldr	r3, [sp]
	cmp	r3, #0
	moveq	r2, #0
	cmp	r2, #0
	bne	.L11175
.L11087:
	ldrh	r2, [r7, #4]	@ unaligned
	cmp	r2, #0
	bne	.L11088
	ldrh	r2, [r4, #20]
	strh	r2, [r7, #4]	@ unaligned
	b	.L11088
.L11170:
	ldrsb	r3, [r7, #2]
	cmp	r3, #0
	bge	.L11070
	cmp	r5, r9
	beq	.L11075
	movw	r9, #:lower16:.LC605
	mov	r6, r4
	movt	r9, #:upper16:.LC605
	b	.L11077
.L11176:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L11069
.L11077:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11176
	b	.L11076
.L11175:
	ldr	r1, [r8, #20]
	cmp	r1, #4
	bls	.L11106
	ldrb	r1, [r3, #3]	@ zero_extendqisi2
	ldrh	r0, [r4, #22]
	and	r1, r1, #31
	cmp	r0, r1
	bcc	.L11078
.L11106:
	str	r2, [sp, #4]
	b	.L11087
.L11065:
	movw	r9, #:lower16:.LC603
	mov	r6, r4
	movt	r9, #:upper16:.LC603
	b	.L11068
.L11177:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L11069
.L11068:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11177
	b	.L11076
.L11082:
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #98
	bne	.L11078
	b	.L11085
.L11155:
	cmp	r2, #115
	bne	.L11078
	b	.L11085
.L11171:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r7, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r7, #2]
	b	.L11094
.L11174:
	cmp	r2, #110
	bne	.L11078
	b	.L11079
.L11105:
	mov	r4, r6
	b	.L11066
.L11158:
	mov	r3, #0
	ubfx	r1, r2, #0, #11
	str	r3, [sp, #4]
	b	.L11091
	.fnend
	.size	usb_ep_autoconfig_ss, .-usb_ep_autoconfig_ss
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_func_bind_do_descs, %function
__ffs_func_bind_do_descs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bne	.L11193
	ldr	r0, [r3, #68]
	cmp	r0, #0
	beq	.L11181
	str	r2, [r0, r1, lsl #2]
	mov	r0, #2
.L11182:
	cmp	r2, #0
	beq	.L11193
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L11196
.L11193:
	mov	r0, #0
	bx	lr
.L11181:
	ldr	r0, [r3, #64]
	cmp	r0, #0
	ldreq	ip, [r3, #60]
	strne	r2, [r0, r1, lsl #2]
	movne	r0, #1
	streq	r2, [ip, r1, lsl #2]
	b	.L11182
.L11196:
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r7, [r2, #2]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r3, #12]
	and	r7, r7, #15
	sub	r5, r7, #1
	rsb	r5, r5, r5, lsl #3
	lsl	r5, r5, #2
	add	r6, r8, r5
	add	r0, r6, r0, lsl #2
	ldr	r1, [r0, #8]
	cmp	r1, #0
	bne	.L11186
	str	r2, [r0, #8]
	ldr	r4, [r8, r5]
	cmp	r4, #0
	beq	.L11185
	ldr	r3, [r6, #8]
	ldrh	r0, [r2, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r0, #0
	movne	r0, #0
	strb	r3, [r2, #2]
	bne	.L11178
	ldr	r3, [r6, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
.L11178:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11185:
	mov	r10, r2
	ldr	r0, [r3, #4]
	mov	r2, r4
	mov	r1, r10
	mov	r9, r3
	bl	usb_ep_autoconfig_ss
	subs	fp, r0, #0
	beq	.L11187
	ldr	r3, [r9, #12]
	mov	r1, #208
	ldr	r2, [fp, #8]
	add	r3, r3, r5
	str	r3, [fp]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r3, r0, #0
	beq	.L11188
	str	fp, [r8, r5]
	mov	r0, r4
	str	r3, [r6, #4]
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r9, r3
	strb	r7, [r3, #16]
	b	.L11178
.L11186:
	mvn	r0, #21
	b	.L11178
.L11187:
	movw	r0, #65012
	movt	r0, 65535
	b	.L11178
.L11188:
	mvn	r0, #11
	b	.L11178
	.fnend
	.size	__ffs_func_bind_do_descs, .-__ffs_func_bind_do_descs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind, %function
diag_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	movhi	r3, #237
	bhi	.L11198
	add	r1, r3, #12
	add	r2, r3, #1
	str	r4, [r0, r1, lsl #2]
	strb	r2, [r0, #44]
.L11198:
	movw	r5, #:lower16:.LANCHOR0
	mov	r2, #0
	ldr	r1, .L11254
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r5, #2994]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11199
	str	r0, [r4, #80]
	mov	r2, #0
	ldr	r1, .L11254+4
	str	r4, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11199
	str	r3, [r4, #76]
	ldr	r0, .L11254+8
	str	r4, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11216
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11251
.L11201:
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L11219
	ldrb	r2, [r5, #2994]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L11219
	ldr	r2, [r4, #108]
	ldrb	r1, [r2, #33]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L11207
.L11249:
	ldrh	r0, [r2, #27]	@ unaligned
	mov	r5, #0
	blx	r3
	b	.L11197
.L11199:
	mvn	r5, #18
.L11200:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L11206
.L11214:
	bl	kfree
.L11206:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L11211
	bl	kfree
.L11211:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L11212
	bl	kfree
.L11212:
	ldr	r3, [r4, #76]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L11197
	mov	r2, #0
	str	r2, [r3]
.L11197:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11251:
	ldrb	r2, [r5, #3006]	@ zero_extendqisi2
	ldrb	r3, [r5, #3018]	@ zero_extendqisi2
	ldr	r0, .L11254+12
	strb	r2, [r5, #3046]
	strb	r3, [r5, #3058]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11202
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L11201
	ldrb	r2, [r5, #3006]	@ zero_extendqisi2
	ldrb	r3, [r5, #3018]	@ zero_extendqisi2
	ldr	r0, .L11254+16
	strb	r2, [r5, #3086]
	strb	r3, [r5, #3098]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L11201
	mvn	r5, #11
	b	.L11206
.L11207:
	ldr	r0, [r2, #44]
	ldr	r0, [r0, #16]
	ldr	r0, [r0]
	ldr	r5, [r0, #4]
	cmp	r5, #0
	bne	.L11250
	b	.L11197
.L11253:
	ldrb	ip, [r5]	@ zero_extendqisi2
	cmp	ip, r1
	beq	.L11252
	adds	r5, r5, #8
	beq	.L11197
.L11250:
	ldr	r0, [r5, #4]
	cmp	r0, #0
	bne	.L11253
.L11219:
	mov	r5, #0
	b	.L11197
.L11216:
	mvn	r5, #11
	b	.L11200
.L11202:
	ldr	r0, [r4, #16]
	mvn	r5, #11
	cmp	r0, #0
	bne	.L11214
	b	.L11211
.L11252:
	mov	r1, r0
	b	.L11249
.L11255:
	.align	2
.L11254:
	.word	.LANCHOR0+3004
	.word	.LANCHOR0+3016
	.word	.LANCHOR0+3028
	.word	.LANCHOR0+3068
	.word	.LANCHOR0+3108
	.fnend
	.size	diag_function_bind, .-diag_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind, %function
rmnet_smd_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r8, [r0, #24]
	str	r8, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11259
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	ldr	r1, .L11317
	mov	r7, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r7, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r7, #44]
	strb	r3, [r5, #3134]
	strb	r3, [r4, #96]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11259
	str	r8, [r0]
	mov	r2, #0
	ldr	r1, .L11317+4
	str	r0, [r4, #84]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11259
	str	r8, [r0]
	mov	r2, #0
	add	r1, r5, #3168
	str	r0, [r4, #80]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L11259
	str	r8, [r6]
	str	r6, [r4, #88]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11315
.L11260:
	ldr	r3, [r6, #8]
	mov	r1, #208
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L11261
	mov	r2, #8
	movw	r7, #:lower16:kmalloc_caches
	movt	r7, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r7, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L11263
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L11263
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L11261:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #92]
.L11256:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11315:
	ldrb	r1, [r5, #3146]	@ zero_extendqisi2
	ldrb	r2, [r5, #3158]	@ zero_extendqisi2
	ldrb	r3, [r5, #3170]	@ zero_extendqisi2
	strb	r1, [r5, #3182]
	strb	r2, [r5, #3194]
	strb	r3, [r5, #3206]
	b	.L11260
.L11263:
	cmn	r5, #4096
	str	r5, [r4, #92]
	bhi	.L11256
	movw	r3, #:lower16:rmnet_smd_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_smd_notify_complete
	mov	r6, #4
	mov	r8, #16
	str	r3, [r5, #28]
	ldr	r3, [r4, #92]
	str	r4, [r3, #32]
	ldr	r3, [r4, #92]
	str	r2, [r3, #4]
.L11269:
	ldr	r3, [r7, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r5, r2
	subs	r0, r3, #0
	beq	.L11264
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L11295
.L11264:
	ldr	r3, [r7, #44]
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	r8, [r5]
	beq	.L11267
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L11314
.L11267:
	cmn	r5, #4096
	add	r2, r5, #8
	add	r1, r4, #100
	bhi	.L11268
	ldr	r3, [r4, #104]
	subs	r6, r6, #1
	str	r2, [r4, #104]
	str	r1, [r5, #8]
	str	r3, [r5, #12]
	str	r2, [r3]
	bne	.L11269
	mov	r6, #8
	mov	r8, #16
.L11274:
	ldr	r3, [r7, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r5, r2
	subs	r0, r3, #0
	beq	.L11270
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L11295
.L11270:
	ldr	r3, [r7, #44]
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	r8, [r5]
	beq	.L11273
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L11314
.L11273:
	cmn	r5, #4096
	add	r2, r5, #8
	add	r1, r4, #108
	bhi	.L11268
	ldr	r3, [r4, #112]
	subs	r6, r6, #1
	str	r2, [r4, #112]
	str	r1, [r5, #8]
	str	r3, [r5, #12]
	str	r2, [r3]
	bne	.L11274
	movw	r9, #:lower16:rmnet_smd_complete_epout
	mov	r8, #8
	movt	r9, #:upper16:rmnet_smd_complete_epout
	mov	r10, #2048
.L11278:
	ldr	r6, [r4, #80]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L11295
	str	r10, [r5, #4]
	ldr	r3, [r7, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L11277
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L11277
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L11268
.L11295:
	mvn	r5, #11
.L11268:
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	b	.L11256
.L11314:
	mov	r0, r5
	mvn	r5, #11
	bl	kfree
	b	.L11268
.L11277:
	cmn	r5, #4096
	add	r2, r5, #36
	add	r1, r4, #140
	bhi	.L11268
	str	r10, [r5, #4]
	subs	r8, r8, #1
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	ldr	r3, [r4, #144]
	str	r2, [r4, #144]
	str	r1, [r5, #36]
	str	r3, [r5, #40]
	str	r2, [r3]
	bne	.L11278
	movw	r9, #:lower16:rmnet_smd_complete_epin
	mov	r5, #8
	movt	r9, #:upper16:rmnet_smd_complete_epin
	mov	r10, #2048
.L11282:
	ldr	r8, [r4, #84]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L11295
	str	r10, [r6, #4]
	ldr	r3, [r7, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r6]
	beq	.L11281
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	bne	.L11281
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r0, r8
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L11268
.L11259:
	mvn	r5, #18
	b	.L11256
.L11281:
	cmn	r6, #4096
	add	r2, r6, #36
	add	r1, r4, #132
	bhi	.L11316
	str	r9, [r6, #28]
	subs	r5, r5, #1
	str	r4, [r6, #32]
	ldr	r3, [r4, #136]
	str	r2, [r4, #136]
	str	r1, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bne	.L11282
	b	.L11256
.L11316:
	mov	r5, r6
	b	.L11268
.L11318:
	.align	2
.L11317:
	.word	.LANCHOR0+3144
	.word	.LANCHOR0+3156
	.fnend
	.size	rmnet_smd_bind, .-rmnet_smd_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_bind, %function
rmnet_sdio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11326
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	ldr	r1, .L11346
	mov	r6, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	strb	r3, [r5, #3218]
	strb	r3, [r4, #96]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11322
	str	r7, [r0]
	mov	r2, #0
	ldr	r1, .L11346+4
	str	r0, [r4, #84]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11322
	str	r7, [r0]
	mov	r2, #0
	ldr	r1, .L11346+8
	str	r0, [r4, #80]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11322
	str	r7, [r0]
	str	r0, [r4, #88]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L11323
	ldrb	r1, [r5, #3230]	@ zero_extendqisi2
	ldrb	r2, [r5, #3242]	@ zero_extendqisi2
	ldrb	r3, [r5, #3254]	@ zero_extendqisi2
	strb	r1, [r5, #3266]
	strb	r2, [r5, #3278]
	strb	r3, [r5, #3290]
.L11323:
	mov	r2, #0
	add	r1, r4, #244
	ldr	r0, [r4, #192]
	bl	queue_delayed_work
	mov	r0, #0
	b	.L11319
.L11322:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L11326
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L11319:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11326:
	mvn	r0, #18
	b	.L11319
.L11347:
	.align	2
.L11346:
	.word	.LANCHOR0+3228
	.word	.LANCHOR0+3240
	.word	.LANCHOR0+3252
	.fnend
	.size	rmnet_sdio_bind, .-rmnet_sdio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind, %function
audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r5, .L11365
	movw	r4, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR0
	movw	ip, #44100
	strd	r8, [sp, #16]
	mov	r3, #2
	mov	r6, #0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	movw	lr, #3320
	.pad #8
	sub	sp, sp, #8
	strh	ip, [r4, lr]	@ movhi
	ldr	lr, [r0, #24]
	strb	r3, [r4, #3307]
	cmp	r2, #15
	strb	r3, [r4, #3316]
	strb	r6, [r5, #2]
	str	ip, [sp, #4]
	bhi	.L11349
	add	r3, r2, #1
	add	ip, r2, #12
	strb	r2, [r4, #3326]
	uxtb	r3, r3
	str	r1, [r0, ip, lsl #2]
	cmp	r3, #15
	strb	r3, [r0, #44]
	bhi	.L11349
	mov	r6, r0
	mov	r5, r1
	strb	r3, [r4, #3338]
	add	r0, r2, #2
	add	r1, r3, #12
	strb	r3, [r4, #3350]
	mov	r2, #0
	str	r5, [r6, r1, lsl #2]
	add	r1, r4, #3360
	strb	r0, [r6, #44]
	ldr	r0, [lr]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L11349
	str	r7, [r5, #96]
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:audio_data_complete
	str	r5, [r7]
	ldr	r3, [r6, #24]
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:audio_data_complete
	mov	r8, #4
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	ldrbhi	r3, [r4, #3362]	@ zero_extendqisi2
	strbhi	r3, [r4, #3374]
.L11354:
	ldr	r3, [r7, #8]
	mov	r1, #208
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r2, #256
	mov	r1, #208
	mov	r3, #16
	beq	.L11351
	ldr	ip, [r10, #32]
	subs	r0, ip, #0
	streq	r3, [r4]
	beq	.L11353
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L11364
.L11353:
	mov	r3, #256
	add	r6, r5, #100
	mov	r0, r6
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r5, [r4, #32]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #92]
	add	ip, r4, #36
	add	r3, r5, #88
	mov	r1, r0
	mov	r0, r6
	str	ip, [r5, #92]
	str	r3, [r4, #36]
	str	r2, [r4, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	bne	.L11354
	mov	r0, r8
	b	.L11348
.L11364:
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L11351:
	mvn	r0, #11
.L11348:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11349:
.L11355:
	mvn	r0, #18
	b	.L11348
.L11366:
	.align	2
.L11365:
	.word	.LANCHOR0+3320
	.fnend
	.size	audio_bind, .-audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind, %function
ecm_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r2, #15
	bhi	.L11368
	add	r3, r2, #1
	add	r1, r2, #12
	movw	r5, #:lower16:.LANCHOR0
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r0, #44]
	strb	r2, [r4, #112]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	strb	r2, [r5, #3386]
	strb	r2, [r5, #3399]
	cmp	r3, #15
	bhi	.L11368
	add	r1, r3, #12
	add	r0, r3, #1
	strb	r3, [r5, #3400]
	strb	r3, [r5, #3406]
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	ldr	r1, .L11431
	strb	r0, [r6, #44]
	strb	r3, [r5, #3418]
	strb	r3, [r4, #113]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11368
	str	r0, [r4, #80]
	mov	r2, #0
	add	r1, r5, #3440
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11368
	str	r0, [r4, #84]
	mov	r2, #0
	ldr	r1, .L11431+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11368
	str	r3, [r4, #136]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #140]
	beq	.L11372
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L11371
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L11371:
	str	r0, [r7]
	ldr	r3, [r4, #140]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L11372
	str	r4, [r3, #32]
	ldr	r2, [r4, #140]
	movw	r3, #:lower16:ecm_qc_notify_complete
	movt	r3, #:upper16:ecm_qc_notify_complete
	ldr	r0, .L11431+8
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11372
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11430
.L11373:
	movw	r2, #:lower16:ecm_qc_open
	movw	r3, #:lower16:ecm_qc_close
	movt	r2, #:upper16:ecm_qc_open
	movt	r3, #:upper16:ecm_qc_close
	mov	r5, #0
	strd	r2, [r4, #104]
.L11367:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11430:
	ldrb	r1, [r5, #3430]	@ zero_extendqisi2
	ldrb	r2, [r5, #3442]	@ zero_extendqisi2
	ldrb	r3, [r5, #3454]	@ zero_extendqisi2
	ldr	r0, .L11431+12
	strb	r1, [r5, #3506]
	strb	r2, [r5, #3518]
	strb	r3, [r5, #3530]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11374
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L11373
	ldrb	r3, [r5, #3454]	@ zero_extendqisi2
	ldrb	r1, [r5, #3430]	@ zero_extendqisi2
	ldrb	r2, [r5, #3442]	@ zero_extendqisi2
	ldr	r0, .L11431+16
	strb	r1, [r5, #3582]
	strb	r2, [r5, #3594]
	strb	r3, [r5, #3606]
	bl	usb_copy_descriptors
	ldr	r3, [r4, #12]
	str	r0, [r4, #16]
	cmp	r3, #0
	bne	.L11373
.L11374:
	ldr	r0, [r4, #16]
	mvn	r5, #11
	cmp	r0, #0
	beq	.L11378
.L11384:
	bl	kfree
.L11377:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L11378
	bl	kfree
.L11378:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L11379
	bl	kfree
.L11379:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L11380
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L11380:
	ldr	r3, [r4, #136]
	movw	r0, #:lower16:.LC606
	ldr	r1, .L11431+20
	movt	r0, #:upper16:.LC606
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L11367
.L11368:
	mvn	r5, #18
.L11370:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	bne	.L11384
	b	.L11377
.L11372:
	mvn	r5, #11
	b	.L11370
.L11432:
	.align	2
.L11431:
	.word	.LANCHOR0+3428
	.word	.LANCHOR0+3452
	.word	.LANCHOR0+3464
	.word	.LANCHOR0+3540
	.word	.LANCHOR0+3616
	.word	.LANCHOR3-2880
	.fnend
	.size	ecm_qc_bind, .-ecm_qc_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind, %function
mbim_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	ldr	r9, .L11493
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r0, #24]
	movw	r0, #:lower16:.LC236
	.pad #20
	sub	sp, sp, #20
	movt	r0, #:upper16:.LC236
	sub	r8, r9, #4
	mov	r1, r8
	bl	printk
	str	r7, [r4, #76]
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11434
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r6, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r6, #44]
	strb	r3, [r4, #188]
	ldrb	r0, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r5, #2518]
	strb	r3, [r5, #3670]
	strb	r3, [r5, #3679]
	cmp	r0, #15
	bhi	.L11434
	add	r2, r0, #12
	add	r3, r0, #1
	strb	r0, [r5, #2530]
	mov	r10, #0
	strb	r0, [r5, #2542]
	ldr	r1, .L11493+4
	str	r4, [r6, r2, lsl #2]
	mov	r2, r10
	strb	r3, [r6, #44]
	strb	r0, [r5, #3680]
	str	r7, [r4, #132]
	str	r4, [r4, #136]
	strb	r0, [r4, #189]
	strb	r10, [r4, #190]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	fp, r0, #0
	beq	.L11488
	movw	r0, #:lower16:.LC610
	mov	r1, r8
	movt	r0, #:upper16:.LC610
	bl	printk
	str	r7, [fp]
	mov	r2, r10
	add	r1, r5, #3696
	str	fp, [r4, #140]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	fp, r0, #0
	beq	.L11489
	movw	r0, #:lower16:.LC612
	mov	r1, r8
	movt	r0, #:upper16:.LC612
	bl	printk
	str	r7, [fp]
	mov	r2, r10
	ldr	r1, .L11493+8
	str	fp, [r4, #144]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r10, r0, #0
	beq	.L11490
	movw	r0, #:lower16:.LC614
	mov	r1, r8
	movt	r0, #:upper16:.LC614
	bl	printk
	str	r10, [r4, #148]
	ldr	r3, [r10, #8]
	mov	r1, #208
	str	r7, [r10]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	streq	r7, [r4, #152]
	beq	.L11440
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r7]
	beq	.L11442
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r7]
	beq	.L11491
.L11442:
	mov	r3, #16
	movw	r0, #:lower16:.LC615
	sub	r1, r9, #4
	movt	r0, #:upper16:.LC615
	str	r3, [r7, #4]
	str	r7, [r4, #152]
	ldr	r7, .L11493+12
	bl	printk
	ldr	r2, [r4, #152]
	movw	r3, #:lower16:mbim_notify_complete
	movt	r3, #:upper16:mbim_notify_complete
	add	r0, r7, #12
	str	r4, [r2, #32]
	ldr	r2, [r4, #152]
	str	r3, [r2, #28]
	ldr	r3, [r4, #124]
	cmp	r3, #7
	movne	r3, #4064
	moveq	r3, #2048
	strh	r3, [r7, #9]	@ unaligned
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11446
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11492
.L11445:
	ldrb	r3, [r6, #20]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC607
	sub	r1, r9, #4
	ldr	lr, [r4, #144]
	movt	r0, #:upper16:.LC607
	sub	r2, r3, #2
	cmp	r2, #2
	ldr	r2, [r4, #148]
	addls	r3, r3, #48
	strbls	r3, [r5, #190]
	ldr	ip, [r6, #24]
	movw	r3, #:lower16:.LC608
	ldr	r5, [r2, #4]
	movt	r3, #:upper16:.LC608
	ldrb	r2, [r4, #128]	@ zero_extendqisi2
	ldr	r6, [ip]
	ldr	ip, [r4, #140]
	ldr	r4, [r6, #20]
	str	r5, [sp, #8]
	mov	r5, #0
	ldr	lr, [lr, #4]
	cmp	r4, #2
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	movhi	r3, r0
	movw	r0, #:lower16:.LC617
	movt	r0, #:upper16:.LC617
	str	ip, [sp]
	bl	printk
	b	.L11433
.L11489:
	movw	r0, #:lower16:.LC611
	mov	r1, r8
	movt	r0, #:upper16:.LC611
	mvn	r5, #18
	bl	printk
.L11436:
	movw	r0, #:lower16:.LC618
	sub	r1, r9, #4
	ldr	r2, [r4]
	movt	r0, #:upper16:.LC618
	mov	r3, r5
	bl	printk
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L11452
	bl	kfree
.L11452:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L11453
	bl	kfree
.L11453:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L11454
	bl	kfree
.L11454:
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L11455
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L11455:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #144]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #140]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L11433:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11488:
	movw	r0, #:lower16:.LC609
	mov	r1, r8
	movt	r0, #:upper16:.LC609
	mvn	r5, #18
	bl	printk
	b	.L11436
.L11492:
	ldrb	r1, [r5, #3686]	@ zero_extendqisi2
	add	r0, r7, #96
	ldrb	r2, [r5, #3698]	@ zero_extendqisi2
	ldrb	r3, [r5, #3710]	@ zero_extendqisi2
	strb	r1, [r5, #3782]
	strb	r2, [r5, #3794]
	strb	r3, [r5, #3806]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11446
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L11445
	ldrb	r1, [r5, #3686]	@ zero_extendqisi2
	add	r0, r7, #180
	ldrb	r2, [r5, #3698]	@ zero_extendqisi2
	ldrb	r3, [r5, #3710]	@ zero_extendqisi2
	strb	r1, [r5, #3866]
	strb	r2, [r5, #3878]
	strb	r3, [r5, #3890]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L11445
.L11446:
	mvn	r5, #11
	b	.L11436
.L11490:
	movw	r0, #:lower16:.LC613
	mov	r1, r8
	movt	r0, #:upper16:.LC613
	mvn	r5, #18
	bl	printk
	b	.L11436
.L11491:
	ldr	r3, [r10, #8]
	mov	r1, r7
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	str	r8, [r4, #152]
.L11440:
	movw	r0, #:lower16:.LC616
	sub	r1, r9, #4
	movt	r0, #:upper16:.LC616
	mvn	r5, #11
	bl	printk
	b	.L11436
.L11434:
	mvn	r5, #18
	b	.L11436
.L11494:
	.align	2
.L11493:
	.word	.LANCHOR3-2864
	.word	.LANCHOR0+3684
	.word	.LANCHOR0+3708
	.word	.LANCHOR0+3720
	.fnend
	.size	mbim_bind, .-mbim_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind, %function
ecm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L11496
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r0, #44]
	strb	r3, [r4, #140]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #3962]
	strb	r3, [r5, #3970]
	strb	r3, [r5, #3983]
	cmp	ip, #15
	bls	.L11497
.L11496:
	ldr	r3, [r4, #160]
	mvn	r5, #18
.L11498:
	cmp	r3, #0
	beq	.L11502
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L11502:
	ldr	r3, [r4, #156]
	movw	r1, #:lower16:.LC619
	movt	r1, #:upper16:.LC619
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L11495:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11497:
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #3984]
	strb	ip, [r5, #3990]
	ldr	r1, .L11535
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r5, #4002]
	strb	ip, [r4, #141]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11496
	str	r0, [r4, #80]
	mov	r2, #0
	ldr	r1, .L11535+4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11496
	str	r0, [r4, #84]
	mov	r2, #0
	ldr	r1, .L11535+8
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11496
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r6, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #160]
	beq	.L11511
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L11503
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L11503:
	str	r0, [r7]
	ldr	r3, [r4, #160]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L11513
	str	r4, [r3, #32]
	ldr	r0, [r4, #160]
	movw	r2, #:lower16:ecm_notify_complete
	movt	r2, #:upper16:ecm_notify_complete
	ldrb	ip, [r5, #4026]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR5
	ldrb	r1, [r5, #4038]	@ zero_extendqisi2
	movt	r3, #:upper16:.LANCHOR5
	str	r2, [r0, #28]
	ldr	lr, [r4, #20]
	sub	r0, r3, #4064
	ldrb	r2, [r5, #4014]	@ zero_extendqisi2
	strb	ip, [r3, #-4086]
	strb	r1, [r3, #-4074]
	ldr	r3, [lr, #24]
	strb	r2, [r5, #4050]
	strb	ip, [r5, #4062]
	strb	r1, [r5, #4074]
	strb	r2, [r5, #4086]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11506
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L11534
.L11505:
	movw	r2, #:lower16:ecm_open
	movw	r3, #:lower16:ecm_close
	movt	r2, #:upper16:ecm_open
	movt	r3, #:upper16:ecm_close
	mov	r5, #0
	strd	r2, [r4, #128]
	b	.L11495
.L11513:
	mvn	r5, #11
	b	.L11498
.L11511:
	mvn	r5, #11
	b	.L11502
.L11534:
	ldr	r0, .L11535+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11506
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L11505
	ldr	r0, .L11535+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L11505
.L11506:
	ldr	r0, [r4, #8]
	mvn	r5, #11
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	b	.L11498
.L11536:
	.align	2
.L11535:
	.word	.LANCHOR0+4012
	.word	.LANCHOR0+4024
	.word	.LANCHOR0+4036
	.word	.LANCHOR5-4020
	.word	.LANCHOR5-3976
	.fnend
	.size	ecm_bind, .-ecm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_bind, %function
f_audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	movw	r4, #:lower16:.LANCHOR5
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR5
	strd	r8, [sp, #16]
	sub	ip, r4, #3904
	sub	r6, r4, #3872
	str	lr, [sp, #24]
	ldrb	lr, [r1, #128]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1, #132]
	ldr	r3, [r5, #160]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	strb	lr, [r4, #-3917]
	strh	r1, [ip]	@ movhi
	ldrb	ip, [r5, #156]	@ zero_extendqisi2
	ubfx	r1, r1, #16, #8
	strh	r3, [r6, #-8]	@ movhi
	ldr	r6, [r0, #24]
	str	r3, [sp, #4]
	cmp	r2, #15
	ubfx	r3, r3, #16, #8
	strb	lr, [r4, #-3908]
	strb	r1, [r4, #-3902]
	strb	ip, [r4, #-3893]
	strb	ip, [r4, #-3884]
	strb	r3, [r4, #-3878]
	bhi	.L11551
	add	r3, r2, #1
	add	r1, r2, #12
	strb	r2, [r4, #-3874]
	uxtb	r3, r3
	str	r5, [r0, r1, lsl #2]
	cmp	r3, #15
	strb	r3, [r0, #44]
	bhi	.L11541
	add	r2, r2, #2
	add	ip, r3, #12
	strb	r3, [r4, #-3862]
	mov	r7, #0
	movw	r1, #:lower16:.LANCHOR0
	strb	r3, [r4, #-3850]
	str	r5, [r0, ip, lsl #2]
	movt	r1, #:upper16:.LANCHOR0
	strb	r2, [r0, #44]
	strb	r7, [r5, #240]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r1, #16]
	cmp	r2, #15
	bhi	.L11541
	ldr	r8, .L11554
	add	ip, r2, #12
	add	r3, r2, #1
	strb	r2, [r1, #17]
	str	r5, [r0, ip, lsl #2]
	strb	r2, [r4, #-3838]
	strb	r3, [r0, #44]
	mov	r1, r8
	strb	r2, [r4, #-3826]
	mov	r2, r7
	strb	r7, [r5, #241]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11552
	ldr	r9, .L11554+4
	str	r0, [r5, #168]
	mov	r2, r7
	str	r6, [r0]
	str	r8, [r0, #28]
	ldr	r0, [r6]
	mov	r1, r9
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L11553
	str	r7, [r5, #164]
	sub	r0, r4, #3728
	str	r6, [r7]
	ldrb	r2, [r4, #-3814]	@ zero_extendqisi2
	str	r9, [r7, #28]
	ldr	r1, [r5, #20]
	ldrb	r3, [r4, #-3802]	@ zero_extendqisi2
	and	r2, r2, #127
	ldr	r1, [r1, #24]
	and	r3, r3, #127
	strb	r2, [r4, #-3776]
	strb	r3, [r4, #-3744]
	ldr	r6, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L11544
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bhi	.L11545
.L11546:
	mov	r0, #0
.L11537:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L11545:
	sub	r0, r4, #3728
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #12]
	bne	.L11546
	ldr	r0, [r5, #8]
.L11544:
	bl	kfree
	ldr	r0, [r5, #12]
	bl	kfree
	ldr	r0, [r5, #16]
	bl	kfree
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r7]
	b	.L11537
.L11541:
	ldr	r2, .L11554+8
	movw	r0, #:lower16:.LC621
	movt	r0, #:upper16:.LC621
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L11537
.L11552:
	ldr	r2, .L11554+8
	movw	r0, #:lower16:.LC622
	movt	r0, #:upper16:.LC622
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L11537
.L11553:
	ldr	r2, .L11554+8
	movw	r0, #:lower16:.LC623
	movt	r0, #:upper16:.LC623
	mov	r1, r2
	bl	printk
	mvn	r0, #11
	b	.L11537
.L11551:
	ldr	r2, .L11554+8
	movw	r0, #:lower16:.LC620
	movt	r0, #:upper16:.LC620
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L11537
.L11555:
	.align	2
.L11554:
	.word	.LANCHOR5-3816
	.word	.LANCHOR5-3804
	.word	.LANCHOR3-2856
	.fnend
	.size	f_audio_bind, .-f_audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind, %function
ncm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L11557
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR5
	strb	r2, [r0, #44]
	strb	r3, [r4, #140]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-3650]
	strb	r3, [r5, #-3642]
	strb	r3, [r5, #-3629]
	cmp	ip, #15
	bls	.L11601
.L11557:
	mvn	r5, #18
.L11559:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L11568
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L11568:
	ldr	r3, [r4, #156]
	movw	r1, #:lower16:.LC619
	movt	r1, #:upper16:.LC619
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L11556:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11601:
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #-3628]
	strb	ip, [r5, #-3622]
	sub	r1, r5, #3600
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r5, #-3610]
	strb	ip, [r4, #141]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11557
	str	r0, [r4, #80]
	mov	r2, #0
	ldr	r1, .L11603
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11557
	str	r0, [r4, #84]
	mov	r2, #0
	ldr	r1, .L11603+4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11557
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r6, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #160]
	beq	.L11561
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L11560
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L11560:
	str	r0, [r7]
	ldr	r3, [r4, #160]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L11561
	str	r4, [r3, #32]
	ldr	r2, [r4, #160]
	movw	r3, #:lower16:ncm_notify_complete
	movt	r3, #:upper16:ncm_notify_complete
	ldrb	r0, [r5, #-3598]	@ zero_extendqisi2
	ldrb	r1, [r5, #-3586]	@ zero_extendqisi2
	str	r3, [r2, #28]
	ldr	r3, [r4, #20]
	ldrb	r2, [r5, #-3574]	@ zero_extendqisi2
	strb	r0, [r5, #-3562]
	ldr	r0, .L11603+8
	strb	r1, [r5, #-3550]
	ldr	r3, [r3, #24]
	strb	r2, [r5, #-3538]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11565
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L11602
.L11563:
	movw	r2, #:lower16:ncm_open
	movw	r3, #:lower16:ncm_close
	movt	r2, #:upper16:ncm_open
	movt	r3, #:upper16:ncm_close
	mov	r5, #0
	strd	r2, [r4, #128]
	b	.L11556
.L11561:
	mvn	r5, #11
	b	.L11559
.L11602:
	ldr	r0, .L11603+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L11563
.L11565:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	b	.L11563
.L11604:
	.align	2
.L11603:
	.word	.LANCHOR5-3588
	.word	.LANCHOR5-3576
	.word	.LANCHOR5-3528
	.word	.LANCHOR5-3480
	.fnend
	.size	ncm_bind, .-ncm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_bind, %function
fsg_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	str	r6, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11614
	add	ip, r3, #12
	mov	r5, r1
	movw	r4, #:lower16:.LANCHOR5
	add	r2, r3, #1
	str	r5, [r0, ip, lsl #2]
	movt	r4, #:upper16:.LANCHOR5
	movw	ip, #:lower16:.LANCHOR0
	movt	ip, #:upper16:.LANCHOR0
	sub	r1, r4, #3424
	strb	r2, [r0, #44]
	sub	r1, r1, #8
	strh	r3, [r5, #84]	@ movhi
	mov	r2, #0
	mov	r0, r6
	strb	r3, [ip, #2578]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11608
	ldr	ip, [r5, #80]
	mov	r0, r6
	mov	r2, #0
	ldr	r1, .L11624
	str	ip, [r3]
	str	r3, [r5, #92]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11608
	ldr	r2, [r5, #80]
	mov	r1, #15
	sub	r0, r4, #3344
	str	r2, [r3]
	ldr	ip, [r5, #20]
	str	r3, [r5, #96]
	ldrb	r2, [r4, #-3430]	@ zero_extendqisi2
	ldrb	r3, [r4, #-3418]	@ zero_extendqisi2
	strb	r1, [r4, #-3370]
	strb	r1, [r4, #-3350]
	ldr	r1, [ip, #24]
	strb	r2, [r4, #-3406]
	strb	r3, [r4, #-3394]
	strb	r2, [r4, #-3382]
	strb	r3, [r4, #-3362]
	ldr	r6, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L11610
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bhi	.L11623
.L11611:
	mov	r0, #0
.L11605:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11623:
	sub	r0, r4, #3328
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #12]
	beq	.L11622
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bls	.L11611
	sub	r0, r4, #3312
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #16]
	bne	.L11611
.L11622:
	ldr	r0, [r5, #8]
.L11610:
	bl	kfree
	ldr	r0, [r5, #12]
	bl	kfree
	ldr	r0, [r5, #16]
	bl	kfree
.L11608:
	ldr	r0, [r5, #76]
	movw	r1, #:lower16:.LC624
	movt	r1, #:upper16:.LC624
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #65012
	movt	r0, 65535
	b	.L11605
.L11614:
	mvn	r0, #18
	b	.L11605
.L11625:
	.align	2
.L11624:
	.word	.LANCHOR5-3420
	.fnend
	.size	fsg_bind, .-fsg_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind, %function
ccid_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r5, [r0, #24]
	cmp	r3, #15
	bls	.L11627
	mvn	r3, #18
	movw	r0, #:lower16:.LC625
	ldr	r1, .L11645
	mov	r2, r3
	movt	r0, #:upper16:.LC625
	str	r3, [r4, #80]
	bl	printk
	ldr	r0, [r4, #80]
.L11626:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11627:
	movw	r6, #:lower16:.LANCHOR5
	add	r2, r3, #12
	add	r1, r3, #1
	movt	r6, #:upper16:.LANCHOR5
	sub	r7, r6, #3264
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r1, [r0, #44]
	sub	r1, r7, #12
	str	r3, [r4, #80]
	strb	r3, [r6, #-3286]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11642
	str	r0, [r4, #92]
	mov	r1, r7
	mov	r2, #0
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11643
	str	r0, [r4, #96]
	mov	r2, #0
	ldr	r1, .L11645+4
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11644
	str	r3, [r4, #100]
	ldr	r0, .L11645+8
	str	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11633
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11635
.L11637:
	mov	r0, #0
	b	.L11626
.L11635:
	ldrb	r1, [r6, #-3262]	@ zero_extendqisi2
	ldrb	r2, [r6, #-3250]	@ zero_extendqisi2
	ldrb	r3, [r6, #-3274]	@ zero_extendqisi2
	ldr	r0, .L11645+12
	strb	r1, [r6, #-3238]
	strb	r2, [r6, #-3226]
	strb	r3, [r6, #-3214]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L11637
.L11633:
	ldr	r2, [r4, #100]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #100]
.L11631:
	ldr	r2, [r4, #96]
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r2]
	str	r3, [r4, #96]
	b	.L11626
.L11644:
	movw	r0, #:lower16:.LC611
	ldr	r1, .L11645
	movt	r0, #:upper16:.LC611
	bl	printk
	b	.L11633
.L11643:
	movw	r0, #:lower16:.LC609
	ldr	r1, .L11645
	movt	r0, #:upper16:.LC609
	bl	printk
	b	.L11631
.L11642:
	movw	r0, #:lower16:.LC626
	ldr	r1, .L11645
	movt	r0, #:upper16:.LC626
	bl	printk
	mvn	r0, #18
	b	.L11626
.L11646:
	.align	2
.L11645:
	.word	.LANCHOR3-2840
	.word	.LANCHOR5-3252
	.word	.LANCHOR0+1988
	.word	.LANCHOR0+2012
	.fnend
	.size	ccid_function_bind, .-ccid_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_bind, %function
qdss_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bls	.L11687
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11651
	mov	r4, r1
	add	ip, r3, #12
	add	r1, r3, #1
	movw	r2, #:lower16:.LANCHOR0
	str	r4, [r0, ip, lsl #2]
	movt	r2, #:upper16:.LANCHOR0
	strb	r1, [r0, #44]
	strb	r3, [r4, #81]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r2, #2438]
	cmp	ip, #15
	bhi	.L11651
	movw	r5, #:lower16:.LANCHOR5
	add	r1, ip, #12
	strb	ip, [r2, #2450]
	movt	r5, #:upper16:.LANCHOR5
	add	r3, ip, #1
	sub	r7, r5, #3184
	sub	r2, r5, #3200
	str	r4, [r0, r1, lsl #2]
	sub	r2, r2, #4
	strb	r3, [r0, #44]
	sub	r1, r7, #12
	strb	ip, [r4, #80]
	mov	r0, r6
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11654
	str	r0, [r4, #100]
	mov	r2, r7
	add	r1, r7, #8
	str	r4, [r0]
	mov	r0, r6
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11654
	ldr	r2, .L11690
	str	r3, [r4, #96]
	mov	r0, r6
	str	r4, [r3]
	add	r1, r2, #8
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11654
	str	r3, [r4, #92]
	ldr	r0, .L11690+4
	str	r4, [r3]
	ldrb	r1, [r5, #-3194]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3174]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3154]	@ zero_extendqisi2
	strb	r1, [r5, #-3142]
	strb	r2, [r5, #-3130]
	strb	r3, [r5, #-3118]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11657
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bhi	.L11688
.L11656:
	movw	r0, #:lower16:.LC305
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC305
	bl	strcmp
	subs	r5, r0, #0
	movne	r5, #0
	beq	.L11689
.L11647:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11688:
	ldr	r0, .L11690+8
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L11656
.L11657:
	movw	r0, #:lower16:.LC630
	movt	r0, #:upper16:.LC630
	bl	printk
.L11653:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bls	.L11661
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L11661
	bl	kfree
	ldr	r3, [r6, #20]
.L11661:
	cmp	r3, #2
	movwls	r5, #65012
	movtls	r5, 65535
	bls	.L11647
	ldr	r0, [r4, #12]
	movw	r5, #65012
	cmp	r0, #0
	movteq	r5, 65535
	beq	.L11647
	bl	kfree
	movt	r5, 65535
	b	.L11647
.L11689:
	mov	r1, #1
	ldr	r0, [r4, #100]
	bl	dwc3_tx_fifo_resize_request
	b	.L11647
.L11654:
	movw	r0, #:lower16:.LC629
	movt	r0, #:upper16:.LC629
	bl	printk
	b	.L11653
.L11651:
	movw	r0, #:lower16:.LC628
	mvn	r5, #18
	movt	r0, #:upper16:.LC628
	bl	printk
	b	.L11647
.L11687:
	movw	r0, #:lower16:.LC627
	movw	r5, #65012
	movt	r0, #:upper16:.LC627
	movt	r5, 65535
	bl	printk
	b	.L11647
.L11691:
	.align	2
.L11690:
	.word	.LANCHOR5-3164
	.word	.LANCHOR0+2460
	.word	.LANCHOR5-3108
	.fnend
	.size	qdss_bind, .-qdss_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_bind, %function
rmnet_mux_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11699
	movw	r5, #:lower16:.LANCHOR5
	mov	r4, r1
	mov	r6, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r5, #:upper16:.LANCHOR5
	sub	r1, r5, #3056
	str	r4, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	sub	r1, r1, #4
	strb	r3, [r5, #-3070]
	strb	r3, [r4, #348]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11695
	str	r7, [r0]
	mov	r2, #0
	ldr	r1, .L11719
	str	r0, [r4, #84]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11695
	str	r7, [r0]
	mov	r2, #0
	ldr	r1, .L11719+4
	str	r0, [r4, #80]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11695
	str	r7, [r0]
	str	r0, [r4, #88]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L11696
	ldrb	r1, [r5, #-3058]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3046]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3034]	@ zero_extendqisi2
	strb	r1, [r5, #-3022]
	strb	r2, [r5, #-3010]
	strb	r3, [r5, #-2998]
.L11696:
	mov	r2, #0
	add	r1, r4, #248
	ldr	r0, [r4, #368]
	bl	queue_delayed_work
	mov	r0, #0
	b	.L11692
.L11695:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L11699
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L11692:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11699:
	mvn	r0, #18
	b	.L11692
.L11720:
	.align	2
.L11719:
	.word	.LANCHOR5-3048
	.word	.LANCHOR5-3036
	.fnend
	.size	rmnet_mux_bind, .-rmnet_mux_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind, %function
f_midi_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 512
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR5
	mov	r4, r1
	movt	r5, #:upper16:.LANCHOR5
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r5, #-2988]	@ zero_extendqisi2
	.pad #516
	sub	sp, sp, #516
	ldr	r7, [r0, #24]
	cmp	r3, #0
	bne	.L11722
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L11723
.L11725:
	mvn	r5, #18
.L11724:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L11727
.L11737:
	mov	r2, #0
	str	r2, [r3]
.L11727:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L11736:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC619
	mov	r3, r5
	movt	r1, #:upper16:.LC619
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L11721:
	mov	r0, r5
	add	sp, sp, #516
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11723:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #-2988]
	strb	r3, [r7, #48]
.L11722:
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11725
	add	r1, r3, #1
	add	r2, r3, #12
	strb	r3, [r5, #-2970]
	uxtb	r1, r1
	str	r4, [r6, r2, lsl #2]
	cmp	r1, #15
	strb	r1, [r6, #44]
	bhi	.L11725
	ldr	r8, .L11755
	add	r0, r1, #12
	add	r3, r3, #2
	strb	r1, [r5, #-2958]
	mov	r2, #0
	str	r4, [r6, r0, lsl #2]
	strb	r1, [r5, #-2940]
	strb	r3, [r6, #44]
	sub	r1, r8, #8
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #80]
	beq	.L11726
	str	r7, [r0]
	mov	r2, #0
	add	r1, r8, #4
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #84]
	beq	.L11738
	str	r7, [r0]
	movw	r1, #32976
	mov	r0, #292
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [sp, #8]
	beq	.L11739
	sub	r1, r8, #44
	sub	r3, r8, #32
	sub	r2, r8, #20
	mov	lr, r8
	stm	r0, {r1, r2, r3}
	add	r1, r8, #16
	ldr	r3, [r4, #312]
	ldr	r2, [r4, #316]
	str	r1, [r0, #12]
	ldr	r10, [r4, #312]
	add	r3, r3, r2
	rsb	r3, r3, r3, lsl #4
	cmp	r10, #0
	add	r3, r3, #7
	strh	r3, [r1, #5]	@ unaligned
	beq	.L11740
	add	r2, sp, #368
	movw	r10, #9222
	mov	r3, #1
	mov	ip, #0
	movw	fp, #9225
	movt	r10, 514
	str	r2, [sp, #4]
	str	r7, [sp, #16]
	add	r2, lr, #32
	mov	r9, r3
	mov	r8, ip
	movt	fp, 259
	add	r1, sp, #32
	add	lr, lr, #27
	str	r2, [sp, #12]
	mov	r7, r10
	ldr	r2, [sp, #4]
	str	r6, [sp, #4]
	str	r5, [sp, #20]
.L11729:
	str	r7, [r1]	@ unaligned
	add	ip, ip, #1
	add	r0, r0, #8
	strb	r3, [r1, #4]
	add	r3, r3, #2
	strb	r8, [r1, #5]
	sub	r6, r3, #1
	add	r10, r3, #3
	str	r1, [r0, #8]
	ldrb	r5, [r1, #4]	@ zero_extendqisi2
	add	r1, r1, #6
	str	fp, [r2]	@ unaligned
	strb	r6, [r2, #4]
	strb	r9, [r2, #5]
	strb	r5, [r2, #6]
	strb	r9, [r2, #7]
	strb	r8, [r2, #8]
	str	r2, [r0, #12]
	ldrb	r5, [r2, #4]	@ zero_extendqisi2
	add	r2, r2, #9
	strb	r5, [lr, #1]!
	ldr	r5, [r4, #312]
	cmp	r5, ip
	bhi	.L11729
	mov	r2, r10
	mov	lr, r10
	ldr	r6, [sp, #4]
	lsl	r2, r2, #2
	mov	r10, r5
	ldr	r7, [sp, #16]
	ldr	r5, [sp, #20]
	add	ip, r2, #4
	add	fp, r2, #8
.L11728:
	ldr	r0, [r4, #316]
	cmp	r0, #0
	beq	.L11741
	ldr	r2, .L11755+4
	mov	r1, lr
	movw	lr, #9222
	ldr	r0, [sp, #8]
	movt	lr, 258
	movw	r10, #9225
	mov	ip, #0
	movt	r10, 515
	sub	fp, r1, r3
	str	lr, [sp, #4]
	mov	r9, ip
	sub	r8, r2, #1
	str	r2, [sp, #16]
	mov	lr, #1
	add	r0, r0, r1, lsl #2
	str	r7, [sp, #20]
	add	r1, sp, #128
	add	r2, sp, #224
	str	r6, [sp, #24]
	mov	r7, r10
	str	r5, [sp, #28]
.L11731:
	ldr	r5, [sp, #4]
	add	ip, ip, #1
	add	r0, r0, #8
	str	r5, [r1]	@ unaligned
	strb	r3, [r1, #4]
	add	r3, r3, #2
	strb	r9, [r1, #5]
	sub	r6, r3, #1
	add	r10, fp, r3
	str	r1, [r0, #-8]
	ldrb	r5, [r1, #4]	@ zero_extendqisi2
	add	r1, r1, #6
	str	r7, [r2]	@ unaligned
	strb	r6, [r2, #4]
	strb	lr, [r2, #5]
	strb	r5, [r2, #6]
	strb	lr, [r2, #7]
	strb	r9, [r2, #8]
	str	r2, [r0, #-4]
	ldrb	r5, [r1, #-2]	@ zero_extendqisi2
	add	r2, r2, #9
	strb	r5, [r8, #1]!
	ldr	r5, [r4, #316]
	cmp	r5, ip
	bhi	.L11731
	uxtb	r0, r5
	mov	r3, r10
	ldr	r7, [sp, #20]
	lsl	r2, r3, #2
	ldr	r6, [sp, #24]
	mov	lr, r10
	ldr	r5, [sp, #28]
	add	r1, r0, #4
	ldr	r10, [r4, #312]
	add	ip, r2, #4
	uxtb	r1, r1
	add	fp, r2, #8
.L11730:
	add	r3, lr, #3
	ldr	lr, .L11755+8
	strb	r1, [r5, #-2904]
	uxtb	r10, r10
	ldr	r1, [sp, #8]
	strb	r0, [r5, #-2901]
	add	r0, r10, #4
	sub	r8, lr, #12
	ldr	lr, [sp, #16]
	strb	r0, [r5, #-2884]
	ldr	r0, [sp, #8]
	add	r1, r1, r3, lsl #2
	strb	r10, [r5, #-2881]
	sub	r9, r8, #12
	mov	r5, #0
	sub	lr, lr, #4
	str	r8, [r0, r2]
	str	lr, [sp, #4]
	ldr	lr, [sp, #12]
	ldr	r10, [sp, #4]
	sub	lr, lr, #8
	str	r10, [r0, ip]
	str	r9, [r0, fp]
	str	lr, [r0, r3, lsl #2]
	str	r5, [r1, #4]
	bl	usb_copy_descriptors
	cmp	r0, r5
	str	r0, [r4, #8]
	beq	.L11732
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L11735
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	mov	r2, #512
	ldr	r0, [sp, #8]
	strh	r2, [r8, #4]	@ movhi
	strh	r2, [r9, #4]	@ movhi
	orr	r3, r3, #2
	strb	r3, [r6, #45]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11732
.L11735:
	ldr	r0, [sp, #8]
	mov	r5, #0
	bl	kfree
	b	.L11721
.L11726:
	ldr	r3, [r4, #84]
	mvn	r5, #18
	cmp	r3, #0
	bne	.L11737
	b	.L11736
.L11738:
	mvn	r5, #18
	b	.L11727
.L11739:
	mvn	r5, #11
	b	.L11724
.L11732:
	ldr	r0, [sp, #8]
	mvn	r5, #18
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L11724
.L11740:
	ldr	r1, .L11755
	mov	r3, #4
	mov	fp, #24
	mov	lr, r3
	mov	ip, #20
	mov	r2, #16
	mov	r3, #1
	add	r1, r1, #32
	str	r1, [sp, #12]
	b	.L11728
.L11741:
	ldr	r3, .L11755+4
	mov	r1, #4
	str	r3, [sp, #16]
	b	.L11730
.L11756:
	.align	2
.L11755:
	.word	.LANCHOR5-2928
	.word	.LANCHOR5-2880
	.word	.LANCHOR5-2912
	.fnend
	.size	f_midi_bind, .-f_midi_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_bind, %function
frmnet_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r5, [r0, #24]
	cmp	r3, #15
	bls	.L11758
	mvn	r3, #18
	movw	r0, #:lower16:.LC625
	ldr	r1, .L11799
	mov	r2, r3
	movt	r0, #:upper16:.LC625
	str	r3, [r4, #104]
	bl	printk
	ldr	r0, [r4, #104]
.L11757:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11758:
	add	r1, r3, #12
	movw	r6, #:lower16:.LANCHOR5
	add	r2, r3, #1
	movt	r6, #:upper16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	sub	r1, r6, #2848
	strb	r2, [r0, #44]
	sub	r1, r1, #4
	mov	r2, #0
	str	r3, [r4, #104]
	strb	r3, [r6, #-2862]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11795
	str	r0, [r4, #76]
	mov	r2, #0
	ldr	r1, .L11799+4
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11796
	str	r0, [r4, #80]
	mov	r2, #0
	ldr	r1, .L11799+8
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L11797
	str	r7, [r4, #128]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r5, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r8, r0, #0
	beq	.L11765
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r8]
	beq	.L11767
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r8]
	bne	.L11767
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L11765:
	mvn	r3, #11
	str	r3, [r4, #132]
.L11779:
	movw	r0, #:lower16:.LC631
	ldr	r1, .L11799
	movt	r0, #:upper16:.LC631
	bl	printk
	ldr	r5, [r4, #128]
.L11769:
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r5]
	str	r3, [r4, #128]
.L11764:
	ldr	r2, [r4, #80]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #80]
.L11762:
	ldr	r2, [r4, #76]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #76]
	b	.L11757
.L11767:
	mov	r3, #8
	cmn	r8, #4096
	str	r3, [r8, #4]
	str	r8, [r4, #132]
	bhi	.L11779
	movw	r3, #:lower16:frmnet_notify_complete
	ldr	r0, .L11799+12
	movt	r3, #:upper16:frmnet_notify_complete
	str	r3, [r8, #28]
	ldr	r3, [r4, #132]
	str	r4, [r3, #32]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11770
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11798
.L11771:
	mov	r0, #0
	b	.L11757
.L11770:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L11774
.L11780:
	bl	kfree
.L11774:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L11777
	bl	kfree
.L11777:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L11778
	bl	kfree
.L11778:
	ldr	r5, [r4, #128]
	ldr	r6, [r4, #132]
	cmp	r6, #0
	beq	.L11769
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #128]
	b	.L11769
.L11798:
	ldrb	r1, [r6, #-2850]	@ zero_extendqisi2
	ldrb	r2, [r6, #-2838]	@ zero_extendqisi2
	ldrb	r3, [r6, #-2826]	@ zero_extendqisi2
	ldr	r0, .L11799+16
	strb	r1, [r6, #-2794]
	strb	r2, [r6, #-2782]
	strb	r3, [r6, #-2770]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11772
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L11771
	ldrb	r1, [r6, #-2850]	@ zero_extendqisi2
	ldrb	r2, [r6, #-2838]	@ zero_extendqisi2
	ldrb	r3, [r6, #-2826]	@ zero_extendqisi2
	ldr	r0, .L11799+20
	strb	r1, [r6, #-2738]
	strb	r2, [r6, #-2726]
	strb	r3, [r6, #-2714]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L11771
	b	.L11774
.L11772:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	bne	.L11780
	b	.L11777
.L11797:
	movw	r0, #:lower16:.LC626
	ldr	r1, .L11799
	movt	r0, #:upper16:.LC626
	bl	printk
	mvn	r0, #18
	b	.L11764
.L11796:
	movw	r0, #:lower16:.LC611
	ldr	r1, .L11799
	movt	r0, #:upper16:.LC611
	bl	printk
	mvn	r0, #18
	b	.L11762
.L11795:
	movw	r0, #:lower16:.LC609
	ldr	r1, .L11799
	movt	r0, #:upper16:.LC609
	bl	printk
	mvn	r0, #18
	b	.L11757
.L11800:
	.align	2
.L11799:
	.word	.LANCHOR3-2820
	.word	.LANCHOR5-2840
	.word	.LANCHOR5-2828
	.word	.LANCHOR5-2816
	.word	.LANCHOR5-2760
	.word	.LANCHOR5-2704
	.fnend
	.size	frmnet_bind, .-frmnet_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_bind, %function
gps_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bls	.L11802
	mvn	r3, #18
	movw	r0, #:lower16:.LC625
	ldr	r1, .L11841
	mov	r2, r3
	movt	r0, #:upper16:.LC625
	str	r3, [r4, #108]
	bl	printk
	ldr	r0, [r4, #108]
.L11801:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11802:
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR5
	mov	ip, #0
	add	r2, r3, #1
	movt	r5, #:upper16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	sub	r1, r5, #2656
	strb	r2, [r0, #44]
	mov	r2, ip
	str	ip, [r4, #76]
	sub	r1, r1, #4
	str	ip, [r4, #80]
	str	r3, [r4, #108]
	strb	r3, [r5, #-2670]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L11839
	str	r6, [r4, #128]
	ldr	r3, [r6, #8]
	mov	r1, #208
	str	r7, [r6]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r8, r0, #0
	beq	.L11805
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r8]
	beq	.L11807
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r8]
	bne	.L11807
	ldr	r3, [r6, #8]
	mov	r1, r8
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L11805:
	mvn	r3, #11
	str	r3, [r4, #132]
.L11822:
	movw	r0, #:lower16:.LC631
	ldr	r1, .L11841
	movt	r0, #:upper16:.LC631
	bl	printk
	ldr	r5, [r4, #128]
.L11809:
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r5]
	str	r3, [r4, #128]
	b	.L11801
.L11807:
	mov	r3, #8
	cmn	r8, #4096
	str	r3, [r8, #4]
	str	r8, [r4, #132]
	bhi	.L11822
	movw	r3, #:lower16:gps_notify_complete
	ldr	r0, .L11841+4
	movt	r3, #:upper16:gps_notify_complete
	str	r3, [r8, #28]
	ldr	r3, [r4, #132]
	str	r4, [r3, #32]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11810
	ldr	r3, [r7]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11840
	ldrb	r2, [r4, #104]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC608
	movt	r3, #:upper16:.LC608
.L11815:
	movw	r0, #:lower16:.LC632
	ldr	r1, .L11841
	movt	r0, #:upper16:.LC632
	bl	printk
	mov	r0, #0
	b	.L11801
.L11840:
	ldrb	r3, [r5, #-2658]	@ zero_extendqisi2
	ldr	r0, .L11841+8
	strb	r3, [r5, #-2634]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11812
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L11816
	ldrb	r3, [r5, #-2658]	@ zero_extendqisi2
	ldr	r0, .L11841+12
	strb	r3, [r5, #-2610]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	ldrne	r3, [r7]
	bne	.L11816
.L11817:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L11820
	bl	kfree
.L11820:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L11821
	bl	kfree
.L11821:
	ldr	r5, [r4, #128]
	ldr	r6, [r4, #132]
	cmp	r6, #0
	beq	.L11809
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #128]
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r5]
	str	r3, [r4, #128]
	b	.L11801
.L11810:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L11817
.L11823:
	bl	kfree
	b	.L11817
.L11812:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	bne	.L11823
	b	.L11820
.L11839:
	movw	r0, #:lower16:.LC626
	ldr	r1, .L11841
	movt	r0, #:upper16:.LC626
	bl	printk
	mvn	r0, #18
	b	.L11801
.L11816:
	ldr	r0, [r3, #20]
	movw	r1, #:lower16:.LC608
	movw	r3, #:lower16:.LC607
	movt	r1, #:upper16:.LC608
	movt	r3, #:upper16:.LC607
	ldrb	r2, [r4, #104]	@ zero_extendqisi2
	cmp	r0, #2
	movls	r3, r1
	b	.L11815
.L11842:
	.align	2
.L11841:
	.word	.LANCHOR3-2808
	.word	.LANCHOR5-2648
	.word	.LANCHOR5-2624
	.word	.LANCHOR5-2600
	.fnend
	.size	gps_bind, .-gps_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_bind, %function
gser_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r8, [r0, #24]
	cmp	r3, #15
	bls	.L11844
.L11846:
	mvn	r6, #18
.L11845:
	ldr	r5, [r4, #152]
	ldr	r7, [r4, #156]
	cmp	r7, #0
	beq	.L11857
	ldr	r0, [r7]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #152]
.L11857:
	cmp	r5, #0
	movw	r1, #:lower16:.LC619
	movne	r3, #0
	movt	r1, #:upper16:.LC619
	strne	r3, [r5]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r8]
	mov	r3, r6
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L11843:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11844:
	movw	r6, #:lower16:.LANCHOR5
	mov	r5, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r6, #:upper16:.LANCHOR5
	sub	r7, r6, #2560
	str	r1, [r5, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r5, #44]
	sub	r1, r7, #12
	strb	r3, [r6, #-2582]
	strb	r3, [r4, #136]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11846
	str	r0, [r4, #80]
	mov	r1, r7
	mov	r2, #0
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11846
	str	r0, [r4, #84]
	add	r1, r7, #12
	mov	r2, #0
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L11846
	str	r7, [r4, #152]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r8, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	beq	.L11847
	mov	r2, #10
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r9, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r9]
	beq	.L11849
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r10, r0
	str	r0, [r9]
	bne	.L11849
	ldr	r3, [r7, #8]
	mov	r1, r9
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r4, #156]
.L11850:
	mvn	r6, #18
	ldr	r5, [r4, #152]
	b	.L11857
.L11847:
	str	r9, [r4, #156]
	b	.L11850
.L11849:
	movw	r3, #:lower16:gser_notify_complete
	str	r9, [r4, #156]
	ldrb	r2, [r6, #-2558]	@ zero_extendqisi2
	movt	r3, #:upper16:gser_notify_complete
	ldrb	r1, [r6, #-2570]	@ zero_extendqisi2
	str	r3, [r9, #28]
	ldr	r3, [r4, #156]
	strb	r1, [r6, #-2390]
	strb	r2, [r6, #-2378]
	str	r4, [r3, #32]
	ldr	r3, [r5, #24]
	strb	r1, [r6, #-2366]
	strb	r2, [r6, #-2354]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L11851
	ldrb	r2, [r6, #-2546]	@ zero_extendqisi2
	strb	r2, [r6, #-2534]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	strbhi	r2, [r6, #-2522]
.L11851:
	ldr	r3, [r4, #20]
	ldr	r0, .L11891
	ldr	r3, [r3, #24]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11854
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L11890
.L11853:
	mov	r6, #0
	b	.L11843
.L11890:
	ldr	r0, .L11891+4
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11854
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L11853
	ldr	r0, .L11891+8
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L11853
.L11854:
	ldr	r0, [r4, #8]
	mvn	r6, #11
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	b	.L11845
.L11892:
	.align	2
.L11891:
	.word	.LANCHOR5-2512
	.word	.LANCHOR5-2476
	.word	.LANCHOR5-2440
	.fnend
	.size	gser_bind, .-gser_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind, %function
acm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r0, #24]
	cmp	r3, #15
	bhi	.L11935
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR5
	strb	r2, [r0, #44]
	strb	r3, [r4, #136]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-2342]
	strb	r3, [r5, #-2334]
	strb	r3, [r5, #-2321]
	cmp	ip, #15
	bls	.L11936
.L11935:
	mvn	r7, #18
.L11895:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L11900
	bl	kfree
.L11900:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L11901
	bl	kfree
.L11901:
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	cmp	r6, #0
	beq	.L11902
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #152]
.L11902:
	cmp	r5, #0
	movw	r1, #:lower16:.LC633
	movne	r3, #0
	movt	r1, #:upper16:.LC633
	strne	r3, [r5]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r8]
	mov	r3, r4
	str	r7, [sp]
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L11893:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11936:
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #-2320]
	strb	ip, [r5, #-2314]
	ldr	r1, .L11937
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r5, #-2300]
	strb	ip, [r4, #137]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11935
	str	r0, [r4, #80]
	mov	r2, #0
	ldr	r1, .L11937+4
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11935
	str	r0, [r4, #84]
	mov	r2, #0
	sub	r1, r5, #2272
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L11935
	str	r6, [r4, #152]
	ldr	r3, [r6, #8]
	mov	r1, #208
	str	r8, [r6]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	beq	.L11897
	mov	r2, #10
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r9, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r9]
	beq	.L11899
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r10, r0
	str	r0, [r9]
	bne	.L11899
	ldr	r3, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	mvn	r7, #18
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r4, #156]
	b	.L11895
.L11899:
	movw	r3, #:lower16:acm_cdc_notify_complete
	str	r9, [r4, #156]
	ldr	r1, .L11937+8
	movt	r3, #:upper16:acm_cdc_notify_complete
	ldrb	lr, [r5, #-2294]	@ zero_extendqisi2
	mov	r0, r4
	ldrb	ip, [r5, #-2282]	@ zero_extendqisi2
	str	r3, [r9, #28]
	ldr	r7, [r4, #156]
	ldrb	r6, [r5, #-2270]	@ zero_extendqisi2
	add	r2, r1, #48
	sub	r3, r1, #8
	add	r1, r1, #92
	strb	lr, [r5, #-2258]
	strb	ip, [r5, #-2246]
	str	r4, [r7, #32]
	strb	r6, [r5, #-2234]
	strb	lr, [r5, #-2222]
	strb	ip, [r5, #-2210]
	bl	usb_assign_descriptors
	subs	r7, r0, #0
	bne	.L11895
	b	.L11893
.L11897:
	str	r9, [r4, #156]
	b	.L11935
.L11938:
	.align	2
.L11937:
	.word	.LANCHOR5-2296
	.word	.LANCHOR5-2284
	.word	.LANCHOR5-2192
	.fnend
	.size	acm_bind, .-acm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind, %function
rndis_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L11940
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR5
	strb	r2, [r0, #44]
	strb	r3, [r4, #140]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-2054]
	strb	r3, [r5, #-2046]
	strb	r3, [r5, #-2033]
	cmp	ip, #15
	bls	.L11987
.L11940:
	mvn	r5, #18
.L11942:
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #164]
	cmp	r3, #0
	beq	.L11949
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L11949:
	ldr	r3, [r4, #160]
	movw	r1, #:lower16:.LC619
	movt	r1, #:upper16:.LC619
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L11939:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11987:
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #-2032]
	strb	ip, [r5, #-2026]
	sub	r1, r5, #2016
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r4, #141]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11940
	str	r0, [r4, #80]
	mov	r2, #0
	ldr	r1, .L11989
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L11940
	str	r0, [r4, #84]
	mov	r2, #0
	ldr	r1, .L11989+4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L11940
	str	r3, [r4, #160]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r6, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #164]
	beq	.L11944
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L11943
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L11943:
	str	r0, [r7]
	ldr	r3, [r4, #164]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L11944
	mov	r1, #8
	movw	r2, #:lower16:rndis_response_complete
	movt	r2, #:upper16:rndis_response_complete
	str	r1, [r3, #4]
	ldr	r0, [r4, #164]
	ldrb	r3, [r5, #-2014]	@ zero_extendqisi2
	ldrb	r1, [r5, #-2002]	@ zero_extendqisi2
	str	r4, [r0, #32]
	ldr	r0, [r4, #164]
	strb	r3, [r5, #-1978]
	strb	r1, [r5, #-1966]
	strb	r3, [r5, #-1942]
	ldrb	r3, [r5, #-1990]	@ zero_extendqisi2
	str	r2, [r0, #28]
	ldr	r2, [r4, #20]
	ldr	r0, .L11989+8
	strb	r3, [r5, #-1954]
	ldr	r2, [r2, #24]
	strb	r1, [r5, #-1930]
	strb	r3, [r5, #-1918]
	ldr	r7, [r2]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11947
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bhi	.L11988
.L11946:
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_open
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_close
	ldrb	r0, [r3, #3773]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_open
	movt	r2, #:upper16:rndis_close
	str	r1, [r4, #128]
	str	r2, [r4, #132]
	cmp	r0, #0
	bne	.L11940
	ldr	r1, [r4, #152]
	movw	r2, #:lower16:rndis_response_available
	add	lr, r4, #142
	ldr	ip, [r5, #-1764]
	movt	r2, #:upper16:rndis_response_available
	mov	r5, #1
	str	r0, [r4, #156]
	strb	r5, [r3, #3773]
	cmp	r1, #0
	str	r0, [r3, #3780]
	str	r0, [r3, #3784]
	moveq	r5, r1
	str	lr, [r3, #3792]
	strb	ip, [r3, #3808]
	strb	r0, [r3, #3809]
	str	r2, [r3, #3816]
	str	r4, [r3, #3820]
	beq	.L11939
	ldr	r5, [r4, #148]
	cmp	r5, #0
	beq	.L11939
	str	r5, [r3, #3804]
	mov	r5, r0
	str	r1, [r3, #3812]
	b	.L11939
.L11944:
	mvn	r5, #11
	b	.L11942
.L11988:
	ldr	r0, .L11989+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11947
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L11946
	ldr	r0, .L11989+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L11946
.L11947:
	ldr	r0, [r4, #8]
	mvn	r5, #11
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r0, [r4, #16]
	bl	kfree
	b	.L11942
.L11990:
	.align	2
.L11989:
	.word	.LANCHOR5-2004
	.word	.LANCHOR5-1992
	.word	.LANCHOR5-1908
	.word	.LANCHOR5-1864
	.word	.LANCHOR5-1820
	.fnend
	.size	rndis_bind, .-rndis_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind, %function
rndis_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L11992
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR5
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR5
	strb	r2, [r0, #44]
	strb	r3, [r4, #112]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-1758]
	strb	r3, [r5, #-1750]
	strb	r3, [r5, #-1737]
	cmp	r0, #15
	bhi	.L12054
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r5, #-1736]
	strb	r0, [r5, #-1730]
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	ldr	r1, .L12057
	strb	r3, [r6, #44]
	strb	r0, [r4, #113]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12054
	str	r0, [r4, #80]
	mov	r2, #0
	ldr	r1, .L12057+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12054
	str	r0, [r4, #84]
	mov	r2, #0
	sub	r1, r5, #1696
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12054
	str	r3, [r4, #148]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #152]
	beq	.L11996
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L11995
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L11995:
	str	r0, [r7]
	ldr	r2, [r4, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L11996
	mov	r1, #8
	movw	r3, #:lower16:rndis_qc_response_complete
	ldr	r0, .L12057+8
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r1, [r2, #4]
	ldr	r2, [r4, #152]
	str	r4, [r2, #32]
	ldr	r2, [r4, #152]
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11996
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12055
.L11997:
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_qc_open
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_qc_close
	ldrb	r0, [r3, #3773]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_qc_open
	movt	r2, #:upper16:rndis_qc_close
	str	r1, [r4, #104]
	str	r2, [r4, #108]
	cmp	r0, #0
	beq	.L11999
.L12054:
	ldr	r7, [r6, #24]
.L11992:
	mvn	r5, #18
.L11994:
	ldr	r3, [r7]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L12056
.L12002:
	cmp	r3, #2
	bhi	.L12003
.L12004:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12005
	bl	kfree
.L12005:
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L12006
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12006:
	ldr	r3, [r4, #148]
	movw	r0, #:lower16:.LC606
	ldr	r1, .L12057+12
	movt	r0, #:upper16:.LC606
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L11991
.L11999:
	ldr	r5, [r4, #132]
	movw	r2, #:lower16:rndis_qc_response_available
	mov	r1, #1
	ldr	ip, .L12057+16
	movt	r2, #:upper16:rndis_qc_response_available
	add	lr, r4, #114
	strb	r1, [r3, #3773]
	str	r0, [r3, #3780]
	cmp	r5, #0
	str	r0, [r3, #3784]
	str	lr, [r3, #3792]
	str	r2, [r3, #3816]
	ldr	r2, [r4, #120]
	str	r4, [r3, #3820]
	str	r0, [r4, #136]
	strh	r1, [ip, #36]	@ movhi
	beq	.L12011
	ldrb	r1, [r4, #124]	@ zero_extendqisi2
	mov	ip, #2
	str	r2, [r3, #3804]
	str	r5, [r3, #3812]
	mov	r5, r0
	strb	r1, [r3, #3808]
	strb	ip, [r3, #3809]
.L11991:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12055:
	ldrb	r1, [r5, #-1718]	@ zero_extendqisi2
	ldrb	r2, [r5, #-1706]	@ zero_extendqisi2
	ldrb	r3, [r5, #-1694]	@ zero_extendqisi2
	ldr	r0, .L12057+20
	strb	r1, [r5, #-1638]
	strb	r2, [r5, #-1626]
	strb	r3, [r5, #-1614]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L11996
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L11997
	ldrb	r1, [r5, #-1718]	@ zero_extendqisi2
	ldrb	r2, [r5, #-1706]	@ zero_extendqisi2
	ldrb	r3, [r5, #-1694]	@ zero_extendqisi2
	ldr	r0, .L12057+24
	strb	r1, [r5, #-1558]
	strb	r2, [r5, #-1546]
	strb	r3, [r5, #-1534]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L11997
	ldr	r3, [r6, #24]
	mvn	r5, #11
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L12002
.L12056:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12003
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L12002
.L12003:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12004
	bl	kfree
	b	.L12004
.L11996:
	mvn	r5, #11
	ldr	r7, [r6, #24]
	b	.L11994
.L12011:
	ldr	r7, [r6, #24]
	b	.L11994
.L12058:
	.align	2
.L12057:
	.word	.LANCHOR5-1720
	.word	.LANCHOR5-1708
	.word	.LANCHOR5-1684
	.word	.LANCHOR3-2796
	.word	.LANCHOR1+3772
	.word	.LANCHOR5-1604
	.word	.LANCHOR5-1524
	.fnend
	.size	rndis_qc_bind, .-rndis_qc_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_bind, %function
acc_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC634
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	movt	r2, #:upper16:.LC634
	mov	r1, #0
	strd	r8, [sp, #16]
	mov	r9, r0
	ldr	r0, .L12107
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	__hid_register_driver
	subs	r7, r0, #0
	bne	.L12059
	str	r7, [r4, #1636]
	ldrb	r3, [r9, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12062
	movw	r5, #:lower16:.LANCHOR0
	add	r0, r3, #1
	ldr	r1, .L12107+4
	movt	r5, #:upper16:.LANCHOR0
	add	ip, r3, #12
	mov	r2, r7
	str	r4, [r9, ip, lsl #2]
	strb	r3, [r5, #2110]
	strb	r0, [r9, #44]
	ldr	r5, [r4, #76]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12062
	str	r4, [r0]
	mov	r2, r7
	ldr	r1, .L12107+8
	str	r0, [r4, #84]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12062
	str	r4, [r0]
	mov	r2, r7
	ldr	r1, .L12107+8
	str	r0, [r4, #88]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12062
	movw	fp, #:lower16:acc_complete_in
	add	r3, r4, #1648
	str	r4, [r0]
	movt	fp, #:upper16:acc_complete_in
	add	r5, r4, #80
	str	r0, [r4, #88]
	mov	r8, #4
	str	r3, [sp]
.L12066:
	ldr	r10, [r4, #84]
	mov	r1, #208
	ldr	r2, [r10, #8]
	mov	r0, r10
	ldr	r2, [r2, #8]
	blx	r2
	subs	r6, r0, #0
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	beq	.L12065
	bl	kmalloc_order_trace
	mov	r2, r0
	mov	r0, r5
	cmp	r2, #0
	str	r2, [r6]
	beq	.L12104
	str	fp, [r6, #28]
	bl	_raw_spin_lock_irqsave
	ldr	ip, [sp]
	add	r2, r6, #36
	mov	r1, r0
	ldr	r3, [r4, #1652]
	mov	r0, r5
	str	r2, [r4, #1652]
	str	ip, [r6, #36]
	str	r3, [r6, #40]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	bne	.L12066
	add	r10, r4, #1680
	movw	r3, #:lower16:acc_complete_out
	movt	r3, #:upper16:acc_complete_out
	add	r10, r10, #8
	add	r8, r4, #1680
	str	r3, [sp, #4]
.L12068:
	ldr	fp, [r4, #88]
	mov	r1, #208
	ldr	r2, [fp, #8]
	mov	r0, fp
	ldr	r2, [r2, #8]
	blx	r2
	subs	r6, r0, #0
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	beq	.L12065
	bl	kmalloc_order_trace
	cmp	r0, #0
	str	r0, [r6]
	beq	.L12105
	ldr	r3, [sp, #4]
	str	r3, [r6, #28]
	str	r6, [r8], #4
	cmp	r8, r10
	bne	.L12068
	ldr	r2, [r9, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L12059
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldrb	r0, [r3, #-1466]	@ zero_extendqisi2
	ldrb	r1, [r3, #-1454]	@ zero_extendqisi2
	strb	r0, [r3, #-1442]
	strb	r1, [r3, #-1430]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L12059
	strb	r0, [r3, #-1418]
	strb	r1, [r3, #-1406]
.L12059:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12104:
	ldr	r2, [r10, #8]
	mov	r1, r6
	mov	r0, r10
	ldr	r3, [r2, #12]
	blx	r3
.L12065:
	movw	r0, #:lower16:.LC635
	mov	r9, #256
	movt	r0, #:upper16:.LC635
	mov	r8, #512
	bl	printk
	ldr	r10, [sp]
	b	.L12070
.L12105:
	ldr	r2, [fp, #8]
	mov	r1, r6
	mov	r0, fp
	ldr	r3, [r2, #12]
	blx	r3
	b	.L12065
.L12073:
	ldr	fp, [r4, #84]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L12070:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #1648]
	mov	r3, r0
	mov	r0, r5
	mov	r1, r3
	cmp	r10, r6
	sub	r7, r6, #36
	beq	.L12106
	ldrd	r2, [r6]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r6]
	str	r8, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L12073
.L12072:
	ldr	r5, [r4, #1680]
	cmp	r5, #0
	beq	.L12074
	ldr	r6, [r4, #88]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L12074:
	ldr	r5, [r4, #1684]
	cmp	r5, #0
	beq	.L12075
	ldr	r4, [r4, #88]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L12075:
	mvn	r7, #0
	b	.L12059
.L12062:
	mvn	r7, #18
	b	.L12059
.L12106:
	bl	_raw_spin_unlock_irqrestore
	b	.L12072
.L12108:
	.align	2
.L12107:
	.word	.LANCHOR0+1788
	.word	.LANCHOR5-1468
	.word	.LANCHOR5-1456
	.fnend
	.size	acc_function_bind, .-acc_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind, %function
mtp_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #24]
	str	r3, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12174
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r2, r3, #1
	mov	r4, r1
	add	r1, r3, #12
	strd	r6, [sp, #8]
	movw	r5, #:lower16:.LANCHOR0
	strd	r8, [sp, #16]
	movw	r6, #:lower16:.LANCHOR5
	movt	r5, #:upper16:.LANCHOR0
	strd	r10, [sp, #24]
	movt	r6, #:upper16:.LANCHOR5
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r4, [r0, r1, lsl #2]
	sub	r1, r6, #1392
	strb	r2, [r0, #44]
	ldr	r7, [r4, #76]
	sub	r1, r1, #4
	strb	r3, [r5, #2250]
	mov	r2, #0
	str	r0, [sp, #8]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12112
	str	r4, [r0]
	mov	r2, #0
	ldr	r1, .L12180
	str	r0, [r4, #84]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12112
	str	r4, [r0]
	mov	r2, #0
	ldr	r1, .L12180+4
	str	r0, [r4, #88]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12112
	str	r4, [r0]
	ldr	r10, [r5, #1920]
	str	r0, [r4, #92]
	cmp	r10, #16384
	bls	.L12113
	mov	r2, #4
	str	r2, [r6, #-1360]
.L12114:
	movw	r3, #:lower16:mtp_complete_in
	mov	r8, #0
	movt	r3, #:upper16:mtp_complete_in
	add	r9, r4, #80
	str	r3, [sp, #4]
	b	.L12134
.L12117:
	ldr	r3, [sp, #4]
	str	r3, [r7, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #112]
	add	ip, r7, #36
	add	r3, r4, #108
	mov	r1, r0
	mov	r0, r9
	str	ip, [r4, #112]
	str	r3, [r7, #36]
	str	r2, [r7, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6, #-1360]
	cmp	r8, r3
	bcs	.L12115
	ldr	r10, [r5, #1920]
.L12134:
	ldr	fp, [r4, #84]
	mov	r1, #208
	add	r8, r8, #1
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	mov	r1, #208
	mov	r0, r10
	beq	.L12116
	bl	__kmalloc
	mov	r3, r0
	mov	r0, r9
	cmp	r3, #0
	str	r3, [r7]
	bne	.L12117
	ldr	r3, [fp, #8]
	mov	r1, r7
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L12116:
	ldr	r3, [r5, #1920]
	cmp	r3, #16384
	bls	.L12119
	add	r9, r4, #108
	add	r8, r4, #80
	b	.L12120
.L12123:
	ldr	fp, [r4, #84]
	ldr	r0, [r7, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L12120:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #108]
	mov	r2, r0
	mov	r0, r8
	mov	r1, r2
	cmp	r7, r9
	sub	r10, r7, #36
	beq	.L12175
	ldrd	r2, [r7]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #512
	strd	r2, [r7]
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	bne	.L12123
.L12122:
	mov	r2, #16384
	mov	r1, #8
	mov	r10, r2
	str	r2, [r5, #1920]
	str	r1, [r6, #-1360]
.L12113:
	ldr	r2, [r6, #-1360]
	cmp	r2, #0
	bne	.L12114
.L12115:
	ldr	r3, [r5, #580]
	ubfx	r2, r3, #0, #10
	cmp	r2, #0
	bne	.L12176
.L12124:
	ldr	fp, [r4, #88]
	add	r2, r4, #160
	movw	r9, #:lower16:mtp_complete_out
	movt	r9, #:upper16:mtp_complete_out
	mov	r10, r2
	str	r2, [sp, #4]
	str	r6, [sp, #12]
	mov	r6, r3
.L12131:
	mov	r8, #0
.L12136:
	ldr	r3, [fp, #8]
	mov	r1, #208
	mov	r0, fp
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	mov	r1, #208
	mov	r0, r6
	beq	.L12125
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r7]
	beq	.L12177
	cmp	r8, #1
	str	r9, [r7, #28]
	mov	r8, #1
	str	r7, [r10], #4
	bne	.L12178
	ldr	r6, [sp, #12]
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:mtp_complete_intr
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:mtp_complete_intr
	mov	r8, #5
.L12135:
	ldr	r7, [r4, #92]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #28
	mov	r1, #208
	mov	r3, #16
	beq	.L12119
	ldr	ip, [r10, #24]
	subs	r0, ip, #0
	streq	r3, [r5]
	beq	.L12133
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L12179
.L12133:
	add	r7, r4, #80
	str	r9, [r5, #28]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #120]
	add	ip, r5, #36
	add	r3, r4, #116
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #120]
	str	r3, [r5, #36]
	str	r2, [r5, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	bne	.L12135
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L12139
	ldrb	r1, [r6, #-1394]	@ zero_extendqisi2
	ldrb	r2, [r6, #-1382]	@ zero_extendqisi2
	strb	r1, [r6, #-1354]
	strb	r2, [r6, #-1342]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12139
	mov	r0, r8
	strb	r1, [r6, #-1330]
	strb	r2, [r6, #-1318]
.L12109:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12179:
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L12119:
	movw	r0, #:lower16:.LC636
	movt	r0, #:upper16:.LC636
	bl	printk
	mvn	r0, #0
	b	.L12109
.L12178:
	ldr	fp, [r4, #88]
	ldr	r6, [r5, #580]
	b	.L12136
.L12176:
	mov	r2, #16384
	mov	r3, r2
	str	r2, [r5, #580]
	b	.L12124
.L12139:
	mov	r0, r8
	b	.L12109
.L12177:
	ldr	r3, [fp, #8]
	mov	r1, r7
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L12125:
	ldr	r3, [r5, #580]
	cmp	r3, #16384
	bls	.L12119
	cmp	r8, #1
	ldr	fp, [r4, #88]
	bne	.L12129
	ldr	r7, [r4, #164]
	cmp	r7, #0
	beq	.L12129
	ldr	r0, [r7]
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #88]
.L12129:
	mov	r2, #16384
	ldr	r10, [sp, #4]
	mov	r6, r2
	str	r2, [r5, #580]
	b	.L12131
.L12175:
	bl	_raw_spin_unlock_irqrestore
	b	.L12122
.L12112:
	mvn	r0, #18
	b	.L12109
.L12174:
	mvn	r0, #18
	bx	lr
.L12181:
	.align	2
.L12180:
	.word	.LANCHOR5-1384
	.word	.LANCHOR5-1372
	.fnend
	.size	mtp_function_bind, .-mtp_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind, %function
adb_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #24]
	str	r3, [r1, #76]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12211
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	add	r1, r3, #1
	strd	r6, [sp, #8]
	mov	r2, #0
	strd	r8, [sp, #16]
	mov	r8, r0
	add	r0, r3, #12
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LANCHOR5
	str	lr, [sp, #32]
	movt	r10, #:upper16:.LANCHOR5
	.pad #4
	sub	sp, sp, #4
	str	r4, [r8, r0, lsl #2]
	strb	r1, [r8, #44]
	ldr	r5, [r4, #76]
	sub	r1, r10, #1296
	strb	r3, [r10, #-1306]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12185
	str	r4, [r0]
	mov	r2, #0
	ldr	r1, .L12214
	str	r0, [r4, #84]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r5, r0, #0
	beq	.L12185
	str	r4, [r5]
	mov	r1, #208
	str	r5, [r4, #88]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L12187
	movw	fp, #:lower16:kmalloc_caches
	movt	fp, #:upper16:kmalloc_caches
	ldr	r0, [fp, #48]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r6]
	beq	.L12189
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	beq	.L12212
.L12189:
	movw	r3, #:lower16:adb_complete_out
	movw	r9, #:lower16:adb_complete_in
	movt	r3, #:upper16:adb_complete_out
	movt	r9, #:upper16:adb_complete_in
	mov	r7, #4
	str	r3, [r6, #28]
	str	r6, [r4, #144]
.L12193:
	ldr	r6, [r4, #84]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #4096
	mov	r1, #208
	mov	r3, #16
	beq	.L12187
	ldr	ip, [fp, #48]
	subs	r0, ip, #0
	streq	r3, [r5]
	beq	.L12192
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L12213
.L12192:
	add	r6, r4, #80
	str	r9, [r5, #28]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #116]
	add	ip, r5, #36
	add	r3, r4, #112
	mov	r1, r0
	mov	r0, r6
	str	ip, [r4, #116]
	str	r3, [r5, #36]
	str	r2, [r5, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	bne	.L12193
	ldr	r3, [r8, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L12196
	ldrb	r1, [r10, #-1294]	@ zero_extendqisi2
	ldrb	r2, [r10, #-1282]	@ zero_extendqisi2
	strb	r1, [r10, #-1270]
	strb	r2, [r10, #-1258]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12196
	mov	r0, r7
	strb	r1, [r10, #-1246]
	strb	r2, [r10, #-1234]
.L12182:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12213:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L12187:
	movw	r0, #:lower16:.LC637
	movt	r0, #:upper16:.LC637
	bl	printk
	mvn	r0, #0
	b	.L12182
.L12196:
	mov	r0, r7
	b	.L12182
.L12212:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12187
.L12185:
	mvn	r0, #18
	b	.L12182
.L12211:
	mvn	r0, #18
	bx	lr
.L12215:
	.align	2
.L12214:
	.word	.LANCHOR5-1284
	.fnend
	.size	adb_function_bind, .-adb_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs.constprop.147, %function
ffs_do_descs.constprop.147:
	.fnstart
	@ args = 4, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, #0
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [sp, #56]
	str	r2, [sp, #4]
.L12234:
	ldr	r3, [r7, #68]
	cmp	r5, fp
	lsl	r1, r5, #2
	moveq	r4, #0
	cmp	r3, #0
	beq	.L12218
	cmp	r4, #0
	str	r4, [r3, r5, lsl #2]
	mov	r2, #2
	beq	.L12221
.L12246:
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #5
	beq	.L12245
.L12225:
	cmp	r6, #1
	bls	.L12239
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r6, r2
	bcc	.L12239
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r3, r3, #4
	cmp	r3, #44
	ldrls	pc, [pc, r3, asl #2]
	b	.L12239
.L12228:
	.word	.L12227
	.word	.L12229
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12230
	.word	.L12239
	.word	.L12231
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12239
	.word	.L12232
.L12229:
	sub	r3, r2, #7
	tst	r3, #253
	bne	.L12239
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L12233
.L12239:
	mvn	r0, #21
.L12216:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12230:
	cmp	r2, #5
	bne	.L12239
.L12233:
	sub	r6, r6, r2
	add	r4, r4, r2
	add	r5, r5, #1
	b	.L12234
.L12232:
	cmp	r2, #6
	beq	.L12233
	b	.L12239
.L12227:
	cmp	r2, #9
	beq	.L12233
	b	.L12239
.L12231:
	cmp	r2, #8
	beq	.L12233
	b	.L12239
.L12218:
	ldr	r2, [r7, #64]
	cmp	r2, #0
	ldreq	r3, [r7, #60]
	strne	r4, [r2, r1]
	movne	r2, #1
	streq	r4, [r3, r1]
	cmp	r4, #0
	bne	.L12246
.L12221:
	ldr	r3, [sp, #4]
	sub	r0, r3, r6
	b	.L12216
.L12245:
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	ldr	r10, [r7, #12]
	and	r3, r3, #15
	sub	r8, r3, #1
	rsb	r8, r8, r8, lsl #3
	str	r3, [sp, #8]
	lsl	r3, r8, #2
	add	r9, r10, r3
	add	r2, r9, r2, lsl #2
	ldr	r1, [r2, #8]
	cmp	r1, #0
	bne	.L12239
	str	r4, [r2, #8]
	ldr	r2, [r10, r8, lsl #2]
	cmp	r2, #0
	beq	.L12224
	ldr	r3, [r9, #8]
	ldrh	r2, [r4, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r2, #0
	strb	r3, [r4, #2]
	bne	.L12225
	ldr	r3, [r9, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r4, #4]	@ unaligned
	b	.L12225
.L12224:
	mov	r1, r4
	ldr	r0, [r7, #4]
	str	r3, [sp, #12]
	bl	usb_ep_autoconfig_ss
	subs	r2, r0, #0
	beq	.L12237
	ldr	lr, [r7, #12]
	mov	r1, #208
	ldr	r3, [sp, #12]
	str	r2, [sp, #12]
	ldr	ip, [r2, #8]
	add	r3, lr, r3
	str	r3, [r2]
	ldr	r3, [ip, #8]
	blx	r3
	cmp	r0, #0
	beq	.L12238
	ldr	r2, [sp, #12]
	str	r2, [r10, r8, lsl #2]
	ldr	r2, [sp, #8]
	str	r0, [r9, #4]
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r7, r3
	strb	r2, [r3, #16]
	b	.L12225
.L12237:
	movw	r0, #65012
	movt	r0, 65535
	b	.L12216
.L12238:
	mvn	r0, #11
	b	.L12216
	.fnend
	.size	ffs_do_descs.constprop.147, .-ffs_do_descs.constprop.147
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_bind, %function
ffs_func_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r1, #-48]
	.pad #44
	sub	sp, sp, #44
	ldr	r6, [r1, #-44]
	ldr	r3, [r3, #20]
	ldr	r4, [r6, #168]
	cmp	r3, #2
	bls	.L12248
	ldr	r5, [r6, #172]
	cmp	r5, #0
	bne	.L12249
	adds	r2, r4, #0
	movne	r2, #1
	cmp	r3, #4
	bls	.L12250
	ldr	r3, [r6, #176]
	cmp	r3, #0
	beq	.L12250
	ldrh	r8, [r6, #184]
	mov	r1, #208
	rsb	r8, r8, r8, lsl #3
	lsl	r3, r8, #2
	mov	r0, r3
	str	r3, [sp, #32]
	bl	__kmalloc
	cmp	r4, #0
	mov	r8, r0
	bne	.L12303
	mov	r3, #16
	mov	r9, r4
	mov	fp, r3
	str	r3, [sp, #24]
	mov	r3, #1
	str	r3, [sp, #20]
	str	r4, [sp, #36]
.L12293:
	ldr	r0, [r6, #176]
	mov	r1, #208
	add	r0, r0, #1
	lsl	r0, r0, #2
	bl	__kmalloc
	str	r0, [sp, #12]
	b	.L12255
.L12248:
	adds	r2, r4, #0
	movne	r2, #1
.L12250:
	cmp	r2, #0
	movweq	r0, #65012
	movteq	r0, 65535
	beq	.L12247
	ldrh	r8, [r6, #184]
	mov	r3, #0
	mov	r1, #208
	mov	r5, r3
	str	r3, [sp, #20]
	rsb	r8, r8, r8, lsl #3
	lsl	r3, r8, #2
	mov	r0, r3
	str	r3, [sp, #32]
	bl	__kmalloc
	mov	r8, r0
.L12291:
	ldr	r0, [r6, #168]
	mov	r1, #208
	add	r0, r0, #1
	lsl	r0, r0, #2
	bl	__kmalloc
	cmp	r5, #0
	clz	r9, r0
	str	r0, [sp, #24]
	lsr	r9, r9, #5
	moveq	fp, #16
	streq	r5, [sp, #36]
	bne	.L12292
.L12254:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	moveq	r3, #16
	streq	r3, [sp, #12]
	bne	.L12293
.L12255:
	ldrh	r2, [r6, #182]
	mov	r1, #208
	lsl	r3, r2, #1
	mov	r0, r3
	str	r3, [sp, #28]
	bl	__kmalloc
	ldr	r10, [r6, #152]
	str	r0, [sp, #16]
	mov	r1, #208
	mov	r0, r10
	bl	__kmalloc
	cmp	r8, #0
	mov	r5, r0
	moveq	r9, #1
	cmp	r9, #0
	bne	.L12256
	ldr	r2, [sp, #12]
	cmp	r2, #0
	cmpne	fp, #0
	beq	.L12256
	ldr	r3, [sp, #16]
	cmp	r0, #0
	cmpne	r3, #0
	beq	.L12256
	ldr	r3, [sp, #32]
	cmp	r3, #0
	bne	.L12331
.L12258:
	ldr	r1, [r6, #148]
	mov	r0, r5
	ldr	r2, [r6, #156]
	add	r1, r1, #16
	bl	memcpy
	ldr	r2, [r7, #-44]
	ldr	r2, [r2, #176]
	cmp	r2, #0
	bne	.L12332
.L12259:
	ldr	r3, [sp, #28]
	cmp	r3, #0
	bne	.L12333
.L12260:
	ldrh	r2, [r6, #184]
	cmp	r2, #0
	beq	.L12261
	rsb	r2, r2, r2, lsl #3
	mvn	r1, #0
	add	r2, r8, r2, lsl #2
.L12262:
	strb	r1, [r2, #20]
	sub	r2, r2, #28
	cmp	r8, r2
	bne	.L12262
.L12261:
	ldr	r2, [sp, #12]
	cmp	r4, #0
	str	r8, [r7, #-40]
	ldr	r3, [sp, #24]
	sub	r8, r7, #52
	str	r5, [r7, #-4]
	str	r2, [r7, #-12]
	ldr	r2, [sp, #16]
	str	r3, [r7, #-20]
	str	fp, [r7, #-16]
	str	r2, [r7, #-8]
	beq	.L12297
	str	r3, [r7, #8]
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	ldr	r0, [r6, #168]
	mov	r2, r10
	mov	r1, r5
	str	r8, [sp]
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	bl	ffs_do_descs.constprop.147
	cmp	r0, #0
	blt	.L12247
.L12263:
	ldr	r3, [sp, #36]
	cmp	r3, #0
	beq	.L12264
	str	fp, [r7, #12]
	ldr	ip, [r6, #172]
	sub	fp, r10, r0
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	add	r1, r5, r0
	str	r8, [sp]
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	mov	r9, r0
	mov	r2, fp
	mov	r0, ip
	bl	ffs_do_descs.constprop.147
	cmp	r0, #0
	blt	.L12247
	ldr	r3, [sp, #20]
	cmp	r3, #0
	beq	.L12265
	ldr	r3, [sp, #12]
	add	r1, r9, r0
	sub	r2, fp, r0
	add	r1, r5, r1
	str	r3, [r7, #16]
	ldr	ip, [r6, #176]
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	r8, [sp]
	mov	r0, ip
	bl	ffs_do_descs.constprop.147
	cmp	r0, #0
	bge	.L12334
.L12247:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12249:
	cmp	r3, #4
	movls	r3, #0
	strls	r3, [sp, #20]
	bhi	.L12335
.L12287:
	ldrh	r8, [r6, #184]
	mov	r1, #208
	rsb	r8, r8, r8, lsl #3
	lsl	r3, r8, #2
	mov	r0, r3
	str	r3, [sp, #32]
	bl	__kmalloc
	cmp	r4, #0
	mov	r8, r0
	bne	.L12302
	mov	r3, #16
	mov	r9, r4
	str	r3, [sp, #24]
.L12292:
	ldr	r0, [r6, #172]
	mov	r3, #1
	mov	r1, #208
	str	r3, [sp, #36]
	add	r0, r0, r3
	lsl	r0, r0, #2
	bl	__kmalloc
	mov	fp, r0
	b	.L12254
.L12256:
	mov	r0, r8
	bl	kfree
	ldr	r0, [sp, #24]
	bl	kfree
	mov	r0, fp
	bl	kfree
	ldr	r0, [sp, #12]
	bl	kfree
	ldr	r0, [sp, #16]
	bl	kfree
	mov	r0, r5
	bl	kfree
	mvn	r0, #11
	b	.L12247
.L12331:
	mov	r1, r3
	mov	r0, r8
	bl	__memzero
	b	.L12258
.L12333:
	mov	r2, r3
	mov	r1, #255
	ldr	r0, [sp, #16]
	bl	memset
	b	.L12260
.L12332:
	ldr	ip, [r6, #148]
	ldrd	r0, [r6, #156]
	ldr	r2, [r6, #164]
	add	r0, r5, r0
	add	r1, ip, r1
	bl	memcpy
	b	.L12259
.L12334:
	ldrd	r2, [r6, #168]
	add	r2, r2, r3
.L12294:
	ldr	r3, [r6, #176]
.L12288:
	adds	lr, r3, r2
	beq	.L12267
	cmp	r10, #1
	bls	.L12298
	ldrb	r3, [r5]	@ zero_extendqisi2
	cmp	r10, r3
	bcc	.L12298
	mov	r0, r10
	mov	ip, #0
.L12270:
	ldrb	r2, [r5, #1]	@ zero_extendqisi2
	sub	r2, r2, #4
	cmp	r2, #44
	ldrls	pc, [pc, r2, asl #2]
	b	.L12298
.L12272:
	.word	.L12271
	.word	.L12273
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12274
	.word	.L12298
	.word	.L12275
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12298
	.word	.L12276
.L12273:
	sub	r2, r3, #7
	tst	r2, #253
	bne	.L12298
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L12279
.L12298:
	mvn	r0, #21
	b	.L12247
.L12274:
	cmp	r3, #5
	bne	.L12298
.L12279:
	adds	r5, r5, r3
	add	ip, ip, #1
	moveq	r2, #1
	movne	r2, #0
	sub	r0, r0, r3
	cmp	lr, ip
	movne	r3, r2
	orreq	r3, r2, #1
	cmp	r3, #0
	bne	.L12336
	cmp	r0, #1
	bls	.L12298
	ldrb	r3, [r5]	@ zero_extendqisi2
	cmp	r0, r3
	bcs	.L12270
	b	.L12298
.L12276:
	cmp	r3, #6
	beq	.L12279
	b	.L12298
.L12271:
	cmp	r3, #9
	bne	.L12298
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	ldr	r1, [r7, #-8]
	lsl	r2, r2, #1
	ldrsh	r1, [r1, r2]
	cmp	r1, #0
	blt	.L12337
.L12277:
	ldrb	r2, [r5, #8]	@ zero_extendqisi2
	strb	r1, [r5, #2]
	cmp	r2, #0
	beq	.L12279
	ldr	r1, [r7, #-44]
	sub	r2, r2, #-536870911
	ldr	r1, [r1, #192]
	ldr	r1, [r1]
	ldr	r1, [r1, #4]
	ldrb	r2, [r1, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r5, #8]
	b	.L12279
.L12275:
	cmp	r3, #8
	bne	.L12298
	ldrb	r2, [r5, #7]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L12279
	ldr	r1, [r7, #-44]
	sub	r2, r2, #-536870911
	ldr	r1, [r1, #192]
	ldr	r1, [r1]
	ldr	r1, [r1, #4]
	ldrb	r2, [r1, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r5, #7]
	b	.L12279
.L12335:
	ldr	r3, [r6, #176]
	adds	r3, r3, #0
	movne	r3, #1
	str	r3, [sp, #20]
	b	.L12287
.L12336:
	subs	r0, r10, r0
	bmi	.L12247
.L12267:
	add	r5, r6, #120
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #100]
	mov	r7, r0
	add	r0, r6, #104
	ldrh	r2, [r6, #108]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #100]
	cmp	r2, #0
	beq	.L12300
	add	r2, r2, r0
	mov	r3, r0
.L12286:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r3, r2
	bne	.L12286
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L12284:
	add	r3, r6, r2
	strh	r1, [r6, #108]	@ movhi
	mov	r4, #0
	mov	r2, #1
	mov	r0, r5
	mov	r1, #3
	strb	r4, [r3, #104]
	bl	__wake_up_locked
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L12247
.L12337:
	ldr	r4, [r7, #-52]
	ldrb	r1, [r4, #44]	@ zero_extendqisi2
	cmp	r1, #15
	bls	.L12338
	mvn	r0, #18
	b	.L12247
.L12338:
	add	r9, r1, #12
	add	r8, r1, #1
	str	r7, [r4, r9, lsl #2]
	strb	r8, [r4, #44]
	ldr	r4, [r7, #-8]
	strh	r1, [r4, r2]	@ movhi
	ldr	r1, [r7, #-8]
	ldrsh	r1, [r1, r2]
	b	.L12277
.L12300:
	mov	r1, #1
	b	.L12284
.L12297:
	mov	r0, r4
	b	.L12263
.L12264:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	beq	.L12289
	ldr	r3, [sp, #12]
	sub	r2, r10, r0
	add	r1, r5, r0
	str	r3, [r7, #16]
	ldr	ip, [r6, #176]
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	r8, [sp]
	mov	r0, ip
	bl	ffs_do_descs.constprop.147
	cmp	r0, #0
	ldrge	r2, [r6, #168]
	bge	.L12294
	b	.L12247
.L12265:
	ldr	r1, [r6, #168]
	ldr	r2, [r6, #172]
	add	r2, r2, r1
	b	.L12288
.L12303:
	mov	r3, #1
	str	r3, [sp, #20]
	b	.L12291
.L12302:
	mov	r5, #1
	b	.L12291
.L12289:
	ldr	r2, [r6, #168]
	ldr	r3, [sp, #20]
	b	.L12288
	.fnend
	.size	ffs_func_bind, .-ffs_func_bind
	.align	2
	.global	usb_ep_autoconfig
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig, %function
usb_ep_autoconfig:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	b	usb_ep_autoconfig_ss
	.fnend
	.size	usb_ep_autoconfig, .-usb_ep_autoconfig
	.align	2
	.global	usb_ep_autoconfig_reset
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_reset, %function
usb_ep_autoconfig_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L12341
	mov	r1, #0
.L12342:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L12342
.L12341:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #3744]
	bx	lr
	.fnend
	.size	usb_ep_autoconfig_reset, .-usb_ep_autoconfig_reset
	.align	2
	.global	config_ep_by_speed
	.syntax unified
	.arm
	.fpu softvfp
	.type	config_ep_by_speed, %function
config_ep_by_speed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	add	r0, r0, #32
	mov	r6, r1
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r6, #0
	clz	r3, r5
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r4, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L12352
	ldr	r3, [r4, #16]
	cmp	r3, #3
	beq	.L12348
	cmp	r3, #5
	beq	.L12394
.L12347:
	ldr	ip, [r6, #8]
	mov	r6, #0
.L12351:
	ldr	r3, [ip]
	cmp	r3, #0
	beq	.L12352
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #5
	bne	.L12354
	b	.L12353
.L12355:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L12353
.L12354:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	bne	.L12355
.L12352:
	mvn	r0, #4
.L12344:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12394:
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bhi	.L12395
.L12350:
	cmp	r3, #2
	bls	.L12347
	ldr	ip, [r6, #12]
	mov	r6, #0
	b	.L12351
.L12353:
	cmp	ip, #0
	beq	.L12352
	ldrb	lr, [r5, #25]	@ zero_extendqisi2
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	cmp	r2, lr
	beq	.L12356
.L12361:
	ldr	r3, [ip, #4]
	add	r1, ip, #4
	cmp	r3, #0
	bne	.L12360
	b	.L12352
.L12358:
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	beq	.L12352
.L12360:
	ldrb	ip, [r3, #1]	@ zero_extendqisi2
	cmp	ip, #5
	bne	.L12358
	subs	ip, r1, #0
	beq	.L12352
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	cmp	r1, lr
	bne	.L12361
.L12356:
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	mov	r1, #0
	ldrh	lr, [r3, #4]	@ unaligned
	cmp	r6, r1
	and	r2, r2, #131
	bfi	r2, r1, #0, #2
	strh	lr, [r5, #20]	@ movhi
	str	r1, [r5, #32]
	strb	r2, [r5, #24]
	str	r3, [r5, #28]
	beq	.L12363
	ldr	r2, [ip, #4]
	cmp	r2, #0
	beq	.L12352
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #48
	bne	.L12352
	str	r2, [r5, #32]
	ldr	r1, [r4, #16]
	cmp	r1, #5
	beq	.L12396
.L12363:
	mov	r0, #0
	b	.L12344
.L12348:
	ldr	r3, [r4, #20]
	b	.L12350
.L12395:
	ldr	ip, [r6, #16]
	mov	r6, #1
	b	.L12351
.L12396:
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
	and	r3, r3, #3
	cmp	r3, #1
	beq	.L12365
	bcc	.L12397
.L12366:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	mov	r0, #0
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	add	r3, r3, #1
	bfi	r2, r3, #2, #5
	strb	r2, [r5, #24]
	b	.L12344
.L12365:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	ldrb	r1, [r2, #3]	@ zero_extendqisi2
	bfi	r3, r1, #0, #2
	strb	r3, [r5, #24]
	b	.L12366
.L12397:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12367
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC638
	movt	r1, #:upper16:.LC638
	add	r0, r0, #32
	bl	dev_err
.L12367:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, #0
	bfi	r3, r2, #2, #5
	strb	r3, [r5, #24]
	b	.L12344
	.fnend
	.size	config_ep_by_speed, .-config_ep_by_speed
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_set_alt, %function
diag_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #80]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12401
	mov	r1, r4
	ldr	r2, [r4, #76]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12401
	ldr	r3, [r4, #116]
	cmp	r3, #0
	beq	.L12404
	str	r4, [r3, #20]
	ldr	r3, [r4, #80]
	str	r4, [r3]
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12409
	ldr	r3, [r4, #76]
	str	r4, [r3]
	ldr	r3, [r4, #76]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12410
	add	r6, r4, #100
	str	r5, [r4, #120]
	mov	r0, r6
	str	r5, [r4, #124]
	str	r5, [r4, #128]
	bl	_raw_spin_lock_irqsave
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #116]
	ldr	r3, [r2, #12]
	cmp	r3, #0
	beq	.L12398
	ldr	r0, [r2, #16]
	mov	r1, r5
	mov	r2, r5
	blx	r3
.L12398:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12410:
	ldr	r2, [r4, #76]
	movw	r1, #:lower16:.LC639
	mov	r3, r5
	ldr	r0, [r4, #108]
	movt	r1, #:upper16:.LC639
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12398
.L12409:
	ldr	r2, [r4, #80]
	movw	r1, #:lower16:.LC639
	mov	r3, r5
	ldr	r0, [r4, #108]
	movt	r1, #:upper16:.LC639
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	b	.L12398
.L12401:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #76]
	str	r3, [r2, #28]
	b	.L12398
.L12404:
	mvn	r5, #18
	b	.L12398
	.fnend
	.size	diag_function_set_alt, .-diag_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_set_alt, %function
rmnet_smd_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #76]
	ldr	r2, [r0, #84]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12422
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12423
	mov	r1, r4
	ldr	r2, [r4, #80]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12424
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12425
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12426
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12427
	add	r1, r4, #384
	ldr	r0, [r4, #380]
	bl	queue_work
	b	.L12411
.L12423:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC639
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC639
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
.L12411:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12425:
	ldr	r2, [r4, #80]
	movw	r1, #:lower16:.LC639
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC639
.L12421:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12411
.L12427:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC639
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC639
.L12420:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12411
.L12422:
	ldr	r2, [r4, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC640
	movt	r1, #:upper16:.LC640
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #84]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12411
.L12424:
	ldr	r2, [r4, #80]
	mov	r0, #0
	movw	r1, #:lower16:.LC640
	movt	r1, #:upper16:.LC640
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #80]
	ldr	r0, [r6]
	b	.L12421
.L12426:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC640
	movt	r1, #:upper16:.LC640
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L12420
	.fnend
	.size	rmnet_smd_set_alt, .-rmnet_smd_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_alt, %function
rmnet_sdio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #76]
	ldr	r3, [r0, #84]
	str	r0, [r3]
	ldr	r2, [r0, #84]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12449
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12450
	ldr	r3, [r4, #80]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #80]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12451
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12452
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12453
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12454
	ldr	r6, [r4, #88]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L12455
.L12436:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #92]
.L12441:
	movw	r0, #:lower16:.LC642
	ldr	r1, .L12456
	movt	r0, #:upper16:.LC642
	bl	printk
	b	.L12428
.L12450:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC639
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC639
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
.L12428:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12452:
	ldr	r2, [r4, #80]
	movw	r1, #:lower16:.LC639
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC639
.L12448:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12428
.L12454:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC639
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC639
.L12447:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12428
.L12455:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L12438
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L12438
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12436
.L12438:
	cmn	r5, #4096
	str	r5, [r4, #92]
	bhi	.L12441
	movw	r3, #:lower16:rmnet_sdio_notify_complete
	mov	r1, #8
	movt	r3, #:upper16:rmnet_sdio_notify_complete
	mov	r2, #1
	mov	r0, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #92]
	str	r4, [r3, #32]
	ldr	r3, [r4, #92]
	str	r1, [r3, #4]
	str	r2, [r4, #184]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rmnet_sdio_start_io
.L12449:
	ldr	r2, [r4, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #84]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12428
.L12451:
	ldr	r2, [r4, #80]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #80]
	ldr	r0, [r6]
	b	.L12448
.L12453:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L12447
.L12457:
	.align	2
.L12456:
	.word	.LANCHOR3-2780
	.fnend
	.size	rmnet_sdio_set_alt, .-rmnet_sdio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_alt, %function
audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r3, #3350]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L12467
.L12464:
	mov	r5, #0
.L12458:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12467:
	cmp	r2, #0
	mov	r4, r2
	ldrb	r7, [r0, #144]	@ zero_extendqisi2
	mov	r6, r0
	beq	.L12460
	cmp	r7, #0
	bne	.L12464
	ldr	r3, [r0, #20]
	mov	r1, r0
	ldr	r2, [r0, #96]
	ldr	r4, [r3, #24]
	ldr	r0, [r4]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12468
	ldr	r3, [r6, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	strbeq	r3, [r6, #144]
	beq	.L12458
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC644
	mov	r3, r5
	ldr	r2, [r6, #96]
	movt	r1, #:upper16:.LC644
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L12458
.L12460:
	cmp	r7, #0
	beq	.L12465
	ldr	r0, [r0, #96]
	mov	r5, r2
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	strb	r4, [r6, #144]
	b	.L12458
.L12465:
	mov	r5, r7
	b	.L12458
.L12468:
	ldr	r2, [r6, #96]
	movw	r1, #:lower16:.LC643
	mov	r3, r5
	movt	r1, #:upper16:.LC643
	str	r7, [r2, #28]
	ldr	r0, [r4]
	ldr	r2, [r6, #96]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L12458
	.fnend
	.size	audio_set_alt, .-audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_stop, %function
eth_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0, #576]
	cmp	r1, #0
	beq	.L12483
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L12478:
	add	r6, r5, #1216
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1220]
	mov	r7, r0
	cmp	r4, #0
	beq	.L12472
	ldr	r3, [r4, #132]
	cmp	r3, #0
	beq	.L12473
	mov	r0, r4
	blx	r3
.L12473:
	ldr	r3, [r4, #80]
	ldr	r1, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r9, [r3, #28]
	ldr	r8, [r1, #28]
	ldr	r3, [r2, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #160]
	tst	r3, #4
	beq	.L12484
.L12472:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L12469:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12484:
	mov	r1, r4
	ldr	r2, [r4, #80]
	ldr	r0, [r5, #1228]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12477
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r5, #1228]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12477
	ldr	r3, [r4, #80]
	str	r9, [r3, #28]
	ldr	r3, [r4, #84]
	str	r8, [r3, #28]
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	b	.L12472
.L12483:
	movw	r0, #:lower16:.LC81
	movw	r1, #1847
	movt	r0, #:upper16:.LC81
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC82
	movt	r0, #:upper16:.LC82
	bl	printk
	b	.L12478
.L12477:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L12469
	.fnend
	.size	eth_stop, .-eth_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_set_alt, %function
acc_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #84]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12493
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12494
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12495
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12496
	ldrb	ip, [r4, #92]	@ zero_extendqisi2
	mov	r2, #1
	add	r0, r4, #1648
	mov	r3, r5
	add	r0, r0, #8
	mov	r1, #3
	orr	ip, ip, r2
	strb	ip, [r4, #92]
	bl	__wake_up
.L12485:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12494:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC645
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC645
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12485
.L12496:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC645
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC645
.L12492:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12485
.L12493:
	ldr	r2, [r4, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #84]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12485
.L12495:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L12492
	.fnend
	.size	acc_function_set_alt, .-acc_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_set_alt, %function
fsg_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #80]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12497
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L12507
.L12497:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12507:
	ldr	r3, [r4, #92]
	mov	r1, r4
	str	r6, [r3]
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	ldr	r2, [r4, #96]
	orr	r3, r3, #1
	strb	r3, [r4, #86]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	beq	.L12508
.L12499:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #86]
	b	.L12497
.L12508:
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12499
	ldr	r3, [r4, #96]
	add	r1, r4, #88
	str	r6, [r3]
	ldrb	r3, [r4, #86]	@ zero_extendqisi2
	ldr	r2, [r4, #96]
	orr	r3, r3, #2
	strb	r3, [r4, #86]
	ldr	r3, [r2, #28]
	ldrh	r3, [r3, #4]	@ unaligned
	str	r3, [r6, #108]
	bl	_clear_bit
	ldr	r2, [r4, #80]
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r5, [r3, #4072]
	str	r4, [r2, #12]
	ldr	r4, [r4, #80]
	str	r5, [r3, #4076]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L12501
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L12501
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L12501:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r5, #32767
	b	.L12497
	.fnend
	.size	fsg_set_alt, .-fsg_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_set_alt, %function
mtp_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #84]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12518
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12519
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12520
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12521
	ldr	r3, [r4, #92]
	ldr	r2, .L12522
	str	r2, [r3, #28]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L12515
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L12509:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12519:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC645
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC645
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12509
.L12518:
	ldr	r2, [r4, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #84]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12509
.L12520:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
.L12517:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12509
.L12515:
	mov	r1, #1
	add	r0, r4, #124
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #96]
	mov	r1, #3
	bl	__wake_up
	b	.L12509
.L12521:
	movw	r1, #:lower16:.LC645
	mov	r3, r5
	ldr	r2, [r4, #88]
	movt	r1, #:upper16:.LC645
	ldr	r0, [r6]
	b	.L12517
.L12523:
	.align	2
.L12522:
	.word	.LANCHOR5-1372
	.fnend
	.size	mtp_function_set_alt, .-mtp_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_set_alt, %function
ccid_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [r0, #76]
	ldr	r7, [r0, #92]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L12525
	mov	r2, #4
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	str	r2, [r6, #4]
	ldr	r0, [r5, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r6]
	beq	.L12527
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	bne	.L12527
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L12525:
	mvn	r3, #11
	str	r3, [r4, #104]
.L12550:
	movw	r0, #:lower16:.LC631
	ldr	r1, .L12574
	movt	r0, #:upper16:.LC631
	bl	printk
	ldr	r5, [r4, #104]
.L12524:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12527:
	cmn	r6, #4096
	str	r6, [r4, #104]
	bhi	.L12550
	movw	r3, #:lower16:ccid_notify_complete
	mov	r1, #32
	movt	r3, #:upper16:ccid_notify_complete
	str	r3, [r6, #28]
	ldr	r3, [r4, #104]
	str	r4, [r3, #32]
	ldr	r6, [r4, #100]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	beq	.L12554
	movw	r2, #522
	str	r2, [r9, #4]
	ldr	r0, [r5, #40]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r9]
	beq	.L12531
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r9]
	bne	.L12531
	ldr	r3, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
.L12529:
	movw	r0, #:lower16:.LC646
	ldr	r1, .L12574
	movt	r0, #:upper16:.LC646
	bl	printk
.L12532:
	ldr	r6, [r4, #104]
	cmp	r6, #0
	beq	.L12524
	ldr	r4, [r4, #92]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12524
.L12531:
	cmn	r9, #4096
	movhi	r5, r9
	bhi	.L12529
	movw	r3, #:lower16:ccid_bulk_complete_out
	movw	r7, #:lower16:ccid_bulk_complete_in
	str	r4, [r9, #32]
	movt	r3, #:upper16:ccid_bulk_complete_out
	movt	r7, #:upper16:ccid_bulk_complete_in
	mov	r6, #4
	movw	r10, #523
	str	r3, [r9, #28]
	str	r9, [r4, #176]
.L12537:
	ldr	r9, [r4, #96]
	mov	r1, #32
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	beq	.L12555
	str	r10, [fp, #4]
	ldr	ip, [r5, #40]
	mov	lr, #16
	movw	r2, #523
	mov	r1, #32
	subs	r0, ip, #0
	streq	lr, [fp]
	beq	.L12535
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [fp]
	bne	.L12535
	ldr	r2, [r9, #8]
	mov	r1, fp
	mov	r0, r9
	mvn	r5, #11
	ldr	r3, [r2, #12]
	blx	r3
.L12533:
	movw	r0, #:lower16:.LC647
	ldr	r1, .L12574
	movt	r0, #:upper16:.LC647
	bl	printk
.L12536:
	ldr	r6, [r4, #176]
	cmp	r6, #0
	beq	.L12532
	ldr	r7, [r4, #100]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12532
.L12535:
	add	r3, r4, #184
	cmn	fp, #4096
	add	r9, r4, #84
	mov	r0, r9
	str	r3, [sp, #4]
	bhi	.L12568
	str	r7, [fp, #28]
	str	r4, [fp, #32]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #188]
	add	ip, fp, #36
	add	r3, r4, #184
	mov	r1, r0
	mov	r0, r9
	str	ip, [r4, #188]
	str	r3, [fp, #36]
	str	r2, [fp, #40]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	subs	r6, r6, #1
	bne	.L12537
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12569
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12570
	ldr	r3, [r4, #92]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #96]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12571
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12572
	mov	r1, r4
	ldr	r2, [r4, #100]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12573
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	streq	r3, [r4, #88]
	streq	r3, [r4, #192]
	beq	.L12524
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC649
	mov	r3, r5
	movt	r0, #:upper16:.LC649
	ldr	r1, .L12574
	ldr	r2, [r2, #4]
	bl	printk
.L12545:
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L12542:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #92]
	mov	r2, #0
	str	r2, [r3]
.L12539:
	mov	r10, #256
	mov	r8, #512
	b	.L12547
.L12548:
	ldrd	r2, [r6]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r6]
	str	r8, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L12536
	ldr	fp, [r4, #96]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r2, [fp, #8]
	mov	r0, fp
	ldr	r3, [r2, #12]
	blx	r3
.L12547:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #4]
	mov	r3, r0
	mov	r0, r9
	ldr	r6, [r4, #184]
	mov	r1, r3
	cmp	r2, r6
	sub	r7, r6, #36
	bne	.L12548
	bl	_raw_spin_unlock_irqrestore
	b	.L12536
.L12555:
	mvn	r5, #11
	b	.L12533
.L12554:
	mvn	r5, #11
	b	.L12529
.L12571:
	ldr	r2, [r4, #96]
	movw	r0, #:lower16:.LC648
	mov	r3, r5
	ldr	r1, .L12574
	movt	r0, #:upper16:.LC648
	str	r6, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12542
.L12572:
	ldr	r2, [r4, #96]
	movw	r0, #:lower16:.LC649
	mov	r3, r5
	ldr	r1, .L12574
	movt	r0, #:upper16:.LC649
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12542
.L12570:
	ldr	r2, [r4, #92]
	movw	r0, #:lower16:.LC649
	mov	r3, r5
	ldr	r1, .L12574
	movt	r0, #:upper16:.LC649
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12539
.L12573:
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC648
	mov	r3, r5
	ldr	r1, .L12574
	movt	r0, #:upper16:.LC648
	str	r6, [r2, #28]
	ldr	r2, [r4, #100]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12545
.L12569:
	ldr	r2, [r4, #92]
	movw	r0, #:lower16:.LC648
	mov	r3, r5
	ldr	r1, .L12574
	movt	r0, #:upper16:.LC648
	str	r6, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12539
.L12568:
	mov	r5, fp
	b	.L12533
.L12575:
	.align	2
.L12574:
	.word	.LANCHOR3-2760
	.fnend
	.size	ccid_function_set_alt, .-ccid_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_set_alt, %function
adb_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #84]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12584
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12585
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12586
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12587
	mov	r1, #1
	add	r0, r4, #120
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #92]
	mov	r1, #3
	bl	__wake_up
.L12576:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12585:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC645
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC645
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12576
.L12587:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC645
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC645
.L12583:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12576
.L12584:
	ldr	r2, [r4, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #84]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12576
.L12586:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L12583
	.fnend
	.size	adb_function_set_alt, .-adb_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_set_alt, %function
qdss_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	cmp	r2, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #24]
	ldr	r5, [r3]
	bne	.L12601
	ldr	r3, [r5, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L12615
	ldrb	r3, [r0, #81]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L12616
	ldrb	r3, [r0, #80]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L12617
.L12594:
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	and	r3, r3, #7
	cmp	r3, #7
	moveq	r3, #1
	streq	r3, [r4, #84]
	beq	.L12597
	ldr	r3, [r4, #84]
	cmp	r3, #0
	bne	.L12597
.L12598:
	mov	r6, #0
.L12588:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12597:
	ldr	r3, [r4, #128]
	cmp	r3, #0
	beq	.L12598
	add	r1, r4, #148
	ldr	r0, [r4, #188]
	mov	r6, #0
	bl	queue_work
	b	.L12588
.L12616:
	mov	r0, r5
	mov	r1, r4
	ldr	r2, [r4, #100]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12595
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L12589
	ldr	r3, [r4, #100]
	str	r4, [r3]
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #184]
	b	.L12594
.L12617:
	mov	r1, r0
	ldr	r2, [r4, #96]
	mov	r0, r5
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12595
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L12589
	ldr	r3, [r4, #96]
	mov	r0, r5
	mov	r1, r4
	str	r4, [r3]
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	orr	r3, r3, #2
	strb	r3, [r4, #184]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12595
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L12589
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	orr	r3, r3, #4
	strb	r3, [r4, #184]
	b	.L12594
.L12595:
	mvn	r6, #21
	b	.L12588
.L12601:
	mov	r6, #0
.L12589:
	movw	r0, #:lower16:.LC651
	movt	r0, #:upper16:.LC651
	bl	printk
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L12599
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #184]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #184]
.L12599:
	tst	r3, #4
	beq	.L12600
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #184]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #184]
.L12600:
	tst	r3, #1
	beq	.L12588
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #184]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #184]
	b	.L12588
.L12615:
	movw	r0, #:lower16:.LC650
	mvn	r6, #21
	movt	r0, #:upper16:.LC650
	bl	printk
	b	.L12589
	.fnend
	.size	qdss_set_alt, .-qdss_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_set_alt, %function
rmnet_mux_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #76]
	ldr	r6, [r0, #88]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L12639
.L12619:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #92]
.L12618:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12639:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L12621
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L12621
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12619
.L12621:
	cmn	r5, #4096
	str	r5, [r4, #92]
	bhi	.L12618
	movw	r3, #:lower16:rmnet_mux_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_mux_notify_complete
	mov	r1, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #92]
	str	r4, [r3, #32]
	ldr	r3, [r4, #92]
	str	r2, [r3, #4]
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r2, [r4, #84]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12640
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12641
	ldr	r3, [r4, #80]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #80]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12642
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12643
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L12644
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12645
	mov	r3, #1
	str	r5, [r4, #300]
	str	r3, [r4, #360]
	str	r5, [r4, #388]
	str	r5, [r4, #392]
	str	r5, [r4, #396]
	str	r5, [r4, #400]
	str	r5, [r4, #404]
	str	r5, [r4, #408]
	str	r5, [r4, #412]
	b	.L12618
.L12641:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC639
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC639
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12618
.L12643:
	ldr	r2, [r4, #80]
	movw	r1, #:lower16:.LC639
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC639
.L12637:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12618
.L12645:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC639
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC639
.L12638:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12618
.L12640:
	ldr	r2, [r4, #84]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #84]
	ldr	r0, [r7]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12618
.L12642:
	ldr	r2, [r4, #80]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #80]
	ldr	r0, [r7]
	b	.L12637
.L12644:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r7]
	b	.L12638
	.fnend
	.size	rmnet_mux_set_alt, .-rmnet_mux_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_set_alt, %function
gps_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #120]
	ldr	r2, [r0, #128]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12647
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #128]
.L12647:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r9, r0, #0
	bne	.L12674
	ldr	r3, [r4, #128]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r9, r0, #0
	bne	.L12675
	ldr	r3, [r4, #128]
	str	r4, [r3]
	ldrb	r2, [r4, #104]	@ zero_extendqisi2
	cmp	r2, #5
	bhi	.L12651
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r5, #:upper16:.LANCHOR1
	mla	r3, r3, r2, r5
	ldr	r6, [r3, #528]
	cmp	r6, #0
	beq	.L12651
	cmp	r4, #0
	beq	.L12676
	add	r7, r6, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r4, [r6, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r4, #88]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r9
	add	r1, r6, #112
	ldr	r0, [r5, #3516]
	bl	queue_delayed_work
.L12654:
	mov	r3, #1
	mov	r7, r4
	str	r3, [r4, #112]
	ldr	r5, [r7, #136]!
	cmp	r5, r7
	beq	.L12646
	add	r6, r4, #124
	add	r8, r4, #144
	mvn	r10, #94
.L12660:
	mov	r0, r6
	ldr	fp, [r4, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r2, r0
	mov	r0, r6
	mov	r1, r2
	cmp	fp, #0
	clz	r3, r3
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r3, #0
	bne	.L12673
	ldr	ip, [fp]
	cmp	ip, #0
	beq	.L12673
	.syntax divided
@ 60 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 62 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	lr, [r8]
	add	lr, lr, #1
	strex	r1, lr, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 72 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	lr, #1
	mov	r1, r2
	beq	.L12658
.L12673:
	bl	_raw_spin_unlock_irqrestore
.L12657:
	ldr	r5, [r5]
	cmp	r5, r7
	bne	.L12660
.L12646:
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12658:
	ldr	ip, [fp]
	strb	r10, [ip]
	strb	lr, [ip, #1]
	strb	r3, [ip, #2]
	strb	r3, [ip, #3]
	ldrh	r2, [r4, #108]
	strh	r2, [ip, #4]	@ unaligned
	strb	r3, [ip, #6]
	strb	r3, [ip, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #128]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L12657
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	r1, r0
	cmp	r7, r3
	beq	.L12659
	str	r0, [sp, #4]
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r8]
	sub	r2, r2, #1
	strex	r0, r2, [r8]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldm	r3, {r0, r2}
	mov	lr, #256
	mov	ip, #512
	mov	fp, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	lr, [r3]
	str	ip, [r3, #4]
	ldr	r0, [fp, #-8]!
	bl	kfree
	mov	r0, fp
	bl	kfree
	ldr	r1, [sp, #4]
.L12659:
	mov	r0, r6
	b	.L12673
.L12674:
	ldr	r2, [r4, #128]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r9
	str	r0, [r2, #28]
	ldr	r2, [r4, #128]
	ldr	r0, [r5]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12646
.L12675:
	ldr	r2, [r4, #128]
	movw	r0, #:lower16:.LC649
	mov	r3, r9
	ldr	r1, .L12677
	movt	r0, #:upper16:.LC649
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12646
.L12676:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L12677+4
	mvn	r9, #18
	movt	r0, #:upper16:.LC653
	bl	printk
	b	.L12654
.L12651:
	movw	r0, #:lower16:.LC652
	ldr	r1, .L12677+4
	mvn	r9, #18
	movt	r0, #:upper16:.LC652
	bl	printk
	b	.L12654
.L12678:
	.align	2
.L12677:
	.word	.LANCHOR3-2736
	.word	.LANCHOR3-2724
	.fnend
	.size	gps_set_alt, .-gps_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_set_alt, %function
f_midi_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	ldr	r5, [r0, #80]
	ldr	r7, [r2, #24]
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L12680
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L12680:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r4, #76]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	ldrne	r0, [r7]
	bne	.L12708
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L12710
	str	r4, [r5]
	ldr	r2, [r4, #20]
	ldr	r5, [r4, #84]
	ldr	r8, [r2, #24]
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L12684
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L12684:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r4, #76]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L12711
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L12712
	str	r4, [r5]
	ldr	r2, [r4, #84]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12687
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #84]
.L12687:
	mov	r1, r4
	ldr	r0, [r4, #76]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L12713
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L12714
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r3, [r4, #332]
	cmp	r3, #0
	beq	.L12679
	movw	r7, #:lower16:f_midi_complete
	mov	r5, r6
	movt	r7, #:upper16:f_midi_complete
.L12692:
	ldr	r0, [r4, #84]
	add	r5, r5, #1
	ldr	r1, [r4, #328]
	bl	midi_alloc_ep_req
	cmp	r0, #0
	mov	r2, #32
	mov	r1, r0
	beq	.L12693
	str	r7, [r0, #28]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	bne	.L12715
	ldr	r3, [r4, #332]
	cmp	r3, r5
	bhi	.L12692
	b	.L12679
.L12710:
	ldr	r0, [r7]
.L12709:
	movw	r1, #:lower16:.LC655
	mov	r3, r6
	ldr	r2, [r5, #4]
	movt	r1, #:upper16:.LC655
	add	r0, r0, #32
	bl	dev_err
.L12679:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12715:
	ldr	r0, [r4, #76]
	movw	r1, #:lower16:.LC656
	ldr	r2, [r4, #84]
	movt	r1, #:upper16:.LC656
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L12679
.L12712:
	ldr	r0, [r8]
	b	.L12709
.L12711:
	ldr	r0, [r8]
.L12708:
	movw	r1, #:lower16:.LC654
	mov	r3, r6
	ldr	r2, [r5, #4]
	movt	r1, #:upper16:.LC654
	add	r0, r0, #32
	bl	dev_err
	b	.L12679
.L12714:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC655
	mov	r3, r6
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC655
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12679
.L12693:
	mvn	r6, #11
	b	.L12679
.L12713:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC654
	mov	r3, r6
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC654
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12679
	.fnend
	.size	f_midi_set_alt, .-f_midi_set_alt
	.align	2
	.global	usb_add_function
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_function, %function
usb_add_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #32]
	cmp	r3, #0
	beq	.L12721
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #40]
	cmp	r3, #0
	beq	.L12722
	str	r0, [r4, #20]
	ldr	r3, [r0, #40]
	add	r2, r1, #64
	add	ip, r0, #36
	mov	r5, r0
	str	r2, [r0, #40]
	str	ip, [r1, #64]
	str	r3, [r1, #68]
	str	r2, [r3]
	ldr	r3, [r1, #24]
	cmp	r3, #0
	beq	.L12723
	blx	r3
	cmp	r0, #0
	bge	.L12718
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
.L12718:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12719
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12719
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12719:
	tst	r3, #2
	bne	.L12720
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L12720
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12720:
	tst	r3, #1
	bne	.L12716
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L12716
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12716:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12723:
	mov	r0, r3
	b	.L12718
.L12721:
	mvn	r0, #21
	bx	lr
.L12722:
.L12717:
	mvn	r0, #21
	b	.L12716
	.fnend
	.size	usb_add_function, .-usb_add_function
	.align	2
	.global	usb_function_deactivate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_deactivate, %function
usb_function_deactivate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #52]
	mov	r7, r0
	cmp	r1, #0
	bne	.L12738
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L12740
	blx	r3
	subs	r6, r0, #0
	bne	.L12739
	ldr	r1, [r4, #52]
.L12738:
	add	r1, r1, #1
	mov	r6, #0
	str	r1, [r4, #52]
.L12739:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12740:
	mvn	r6, #94
	b	.L12739
	.fnend
	.size	usb_function_deactivate, .-usb_function_deactivate
	.align	2
	.global	usb_function_activate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_activate, %function
usb_function_activate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L12749
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #52]
	bne	.L12750
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L12746
	mov	r1, #1
	blx	r3
	mov	r4, r0
.L12744:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12750:
	mov	r4, #0
	b	.L12744
.L12749:
	movw	r0, #:lower16:.LC444
	movw	r1, #307
	movt	r0, #:upper16:.LC444
	mvn	r4, #21
	bl	warn_slowpath_null
	b	.L12744
.L12746:
	mvn	r4, #94
	b	.L12744
	.fnend
	.size	usb_function_activate, .-usb_function_activate
	.align	2
	.global	usb_interface_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_interface_id, %function
usb_interface_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12753
	add	ip, r3, #12
	add	r2, r3, #1
	str	r1, [r0, ip, lsl #2]
	strb	r2, [r0, #44]
.L12751:
	mov	r0, r3
	bx	lr
.L12753:
	mvn	r3, #18
	b	.L12751
	.fnend
	.size	usb_interface_id, .-usb_interface_id
	.align	2
	.global	usb_add_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_config, %function
usb_add_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r5, [r1, #20]	@ zero_extendqisi2
	cmp	r5, #0
	cmpne	r2, #0
	beq	.L12762
	mov	lr, r0
	ldr	r3, [lr, #36]!
	cmp	lr, r3
	sub	ip, r3, #28
	bne	.L12758
	b	.L12756
.L12768:
	ldr	r3, [ip, #28]
	cmp	lr, r3
	sub	ip, r3, #28
	beq	.L12756
.L12758:
	ldrb	r3, [r3, #-8]	@ zero_extendqisi2
	cmp	r3, r5
	bne	.L12768
.L12755:
	mvn	r0, #15
	b	.L12754
.L12756:
	mov	r4, r1
	mov	r6, r0
	mov	r5, r2
	add	r3, r1, #36
	str	r6, [r4, #24]
	ldr	r2, [r6, #40]
	add	r0, r1, #28
	mov	r7, #0
	mov	r1, #64
	str	r0, [r6, #40]
	str	lr, [r4, #28]
	str	r2, [r4, #32]
	str	r0, [r2]
	add	r0, r4, #48
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	strb	r7, [r4, #44]
	bl	__memzero
	mov	r0, r4
	blx	r5
	cmp	r0, #0
	blt	.L12769
.L12759:
	ldr	r1, [r6]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L12760
	mov	ip, #0
.L12761:
	ldr	r2, [r3, #12]
	str	ip, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L12761
.L12760:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #3744]
.L12754:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12769:
	ldrd	r2, [r4, #28]
	mov	ip, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4, #24]
	str	ip, [r4, #28]
	str	r1, [r4, #32]
	b	.L12759
.L12762:
	mvn	r0, #21
	b	.L12754
	.fnend
	.size	usb_add_config, .-usb_add_config
	.align	2
	.global	usb_remove_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_remove_config, %function
usb_remove_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	ldr	r1, .L12793
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC657
	strd	r8, [sp, #16]
	mov	r3, r4
	movt	r0, #:upper16:.LC657
	str	r10, [sp, #24]
	add	r8, r7, #60
	str	lr, [sp, #28]
	ldr	r2, [r7, #12]
	bl	printk
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #24]
	mov	r9, r0
	cmp	r3, #0
	beq	.L12790
	ldr	r3, [r7, #12]
	cmp	r3, r4
	addne	r5, r4, #36
	beq	.L12791
.L12781:
	ldr	lr, [r4, #28]
	mov	r2, #256
	mov	r3, #512
	ldr	ip, [r4, #32]
	mov	r1, r9
	mov	r0, r8
	mov	r7, r2
	mov	r6, r3
	str	ip, [lr, #4]
	str	lr, [ip]
	strd	r2, [r4, #28]
	bl	_raw_spin_unlock_irqrestore
	b	.L12778
.L12779:
	ldrd	r2, [r1]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r3, [r1, #-36]
	str	r7, [r1]
	str	r6, [r1, #4]
	cmp	r3, #0
	bne	.L12792
.L12778:
	ldr	r1, [r4, #36]
	cmp	r5, r1
	bne	.L12779
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12785
	mov	r0, r4
	blx	r3
.L12785:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12792:
	sub	r1, r1, #64
	mov	r0, r4
	blx	r3
	b	.L12778
.L12791:
	mov	r5, r4
	ldr	r6, [r5, #36]!
	cmp	r5, r6
	sub	r6, r6, #64
	beq	.L12774
	mov	r10, #0
.L12773:
	ldr	r3, [r6, #40]
	mov	r0, r6
	cmp	r3, #0
	beq	.L12775
	blx	r3
	str	r10, [r6, #72]
	ldr	r3, [r7, #12]
	ldr	r6, [r6, #64]
	add	r3, r3, #36
	cmp	r3, r6
	sub	r6, r6, #64
	bne	.L12773
.L12774:
	mov	r3, #0
	str	r3, [r7, #12]
	str	r3, [r7, #56]
	b	.L12781
.L12775:
	str	r3, [r6, #72]
	ldr	r3, [r7, #12]
	ldr	r6, [r6, #64]
	add	r3, r3, #36
	cmp	r6, r3
	sub	r6, r6, #64
	bne	.L12773
	b	.L12774
.L12790:
	movw	r0, #:lower16:.LC444
	movw	r1, #845
	movt	r0, #:upper16:.LC444
	bl	warn_slowpath_null
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L12785
.L12794:
	.align	2
.L12793:
	.word	.LANCHOR3-2704
	.fnend
	.size	usb_remove_config, .-usb_remove_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_store, %function
enable_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #4]
	bl	dev_get_drvdata
	ldr	r5, [r0, #8]
	mov	r3, #0
	str	r3, [sp, #12]
	cmp	r5, r3
	beq	.L12818
	add	r10, r0, #24
	mov	r8, r0
	mov	r0, r10
	bl	mutex_lock
	movw	r1, #:lower16:.LC264
	mov	r0, r4
	movt	r1, #:upper16:.LC264
	add	r2, sp, #12
	bl	sscanf
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L12797
	ldrb	r4, [r8, #16]	@ zero_extendqisi2
	cmp	r4, #0
	bne	.L12798
	movw	r3, #:lower16:.LANCHOR0
	mov	fp, r8
	movt	r3, #:upper16:.LANCHOR0
	ldr	r2, [r3, #232]
	ldrb	r0, [r3, #228]	@ zero_extendqisi2
	ldrb	r1, [r3, #229]	@ zero_extendqisi2
	str	r2, [r5, #25]	@ unaligned
	ldrh	r2, [r3, #236]
	ldrb	r3, [r3, #230]	@ zero_extendqisi2
	strb	r0, [r5, #21]
	strb	r1, [r5, #22]
	strb	r3, [r5, #23]
	strh	r2, [r5, #29]	@ unaligned
	ldr	r6, [fp, #196]!
	cmp	fp, r6
	sub	r6, r6, #120
	beq	.L12800
	movw	r7, #:lower16:.LC582
	movt	r7, #:upper16:.LC582
.L12799:
	mov	r5, r6
	ldr	r3, [r5, #112]!
	cmp	r5, r3
	sub	r9, r3, #4
	beq	.L12801
.L12804:
	ldr	ip, [r9]
	ldr	r2, [ip, #32]
	mov	r0, ip
	cmp	r2, #0
	beq	.L12802
	blx	r2
	ldr	ip, [r9]
.L12802:
	mov	r2, #12
	mov	r1, r7
	ldr	r0, [ip]
	bl	strncmp
	ldr	r3, [r9, #4]
	cmp	r0, #0
	moveq	r4, #1
	cmp	r5, r3
	sub	r9, r3, #4
	bne	.L12804
.L12801:
	ldr	r6, [r6, #120]
	cmp	fp, r6
	sub	r6, r6, #120
	bne	.L12799
	cmp	r4, #0
	bne	.L12843
.L12800:
	mov	r0, r8
	ldr	r9, [sp, #4]
	bl	android_enable
	cmp	r0, #0
	movge	r3, #1
	strbge	r3, [r8, #16]
	bge	.L12807
	ldr	r2, .L12846
	movw	r0, #:lower16:.LC660
	movt	r0, #:upper16:.LC660
	mov	r1, r2
	bl	printk
	mov	r3, #0
	mov	r0, r10
	strb	r3, [r8, #16]
	strb	r3, [r8, #52]
	bl	mutex_unlock
	b	.L12795
.L12797:
	ldrb	r3, [r8, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L12844
.L12798:
	ldr	r4, .L12846+4
	ldr	r0, .L12846+8
	ldr	r9, [sp, #4]
	sub	r1, r4, #12
	bl	___ratelimit
	cmp	r0, #0
	bne	.L12845
.L12807:
	mov	r0, r10
	bl	mutex_unlock
.L12795:
	mov	r0, r9
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12843:
	mov	r0, #100
	bl	msleep
	b	.L12800
.L12844:
	add	r7, r8, #196
	ldr	r5, [r8, #8]
	ldr	r1, [r8, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r8, #20]
	bne	.L12808
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L12809
	blx	r3
	ldr	r0, [r5]
.L12809:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r8, #196]
	cmp	r7, r4
	sub	r4, r4, #120
	beq	.L12810
.L12811:
	mov	r1, r4
	mov	r0, r5
	bl	usb_remove_config
	ldr	r4, [r4, #120]
	cmp	r7, r4
	sub	r4, r4, #120
	bne	.L12811
.L12808:
	ldr	r6, [r8, #196]
	cmp	r7, r6
	sub	r6, r6, #120
	beq	.L12810
.L12816:
	mov	r5, r6
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L12813
.L12812:
	ldr	r3, [r4]
	mov	r0, r3
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L12814
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L12812
.L12813:
	ldr	r6, [r6, #120]
	cmp	r7, r6
	sub	r6, r6, #120
	bne	.L12816
.L12810:
	mov	r3, #0
	ldr	r9, [sp, #4]
	strb	r3, [r8, #16]
	b	.L12807
.L12814:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L12812
	b	.L12813
.L12818:
	mvn	r9, #18
	b	.L12795
.L12845:
	ldrb	ip, [r8, #16]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC658
	movw	r2, #:lower16:.LC659
	movt	r3, #:upper16:.LC658
	movw	r0, #:lower16:.LC661
	movt	r2, #:upper16:.LC659
	sub	r1, r4, #12
	movt	r0, #:upper16:.LC661
	cmp	ip, #0
	movne	r2, r3
	bl	printk
	b	.L12807
.L12847:
	.align	2
.L12846:
	.word	.LANCHOR3-2684
	.word	.LANCHOR3-2672
	.word	.LANCHOR5-1224
	.fnend
	.size	enable_store, .-enable_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_enable, %function
adb_android_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r5, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L12857
.L12848:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12857:
	ldr	r6, [r5, #8]
	ldr	r1, [r5, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L12848
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L12850
	blx	r3
	ldr	r0, [r6]
.L12850:
	ldr	r0, [r0, #4]
	ldr	r1, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #196]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L12848
.L12851:
	mov	r1, r4
	mov	r0, r6
	bl	usb_remove_config
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L12851
	b	.L12848
	.fnend
	.size	adb_android_function_enable, .-adb_android_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_enable, %function
ffs_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r5, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L12867
.L12858:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12867:
	ldr	r6, [r5, #8]
	ldr	r1, [r5, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L12858
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L12860
	blx	r3
	ldr	r0, [r6]
.L12860:
	ldr	r0, [r0, #4]
	ldr	r1, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #196]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L12858
.L12861:
	mov	r1, r4
	mov	r0, r6
	bl	usb_remove_config
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L12861
	b	.L12858
	.fnend
	.size	ffs_function_enable, .-ffs_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_release, %function
adb_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r1, .L12898
	ldr	r0, .L12898+4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L12894
.L12869:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3520]
	ldrb	r2, [r3, #152]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L12895
.L12870:
	add	r2, r3, #108
	.syntax divided
@ 82 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12895:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r7, [r3, #1356]
	ldr	r5, [r3, #1372]
	cmp	r5, #0
	beq	.L12896
.L12871:
	add	r8, r5, #24
	mov	r0, r8
	bl	mutex_lock
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	mov	r2, #0
	strb	r2, [r7]
	cmp	r3, r2
	beq	.L12897
	ldr	r9, [r5, #8]
	ldr	r1, [r5, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L12874
	ldr	r0, [r9]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L12875
	blx	r3
	ldr	r0, [r9]
.L12875:
	ldr	r0, [r0, #4]
	ldr	r1, [r9, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r6, [r5, #196]!
	cmp	r5, r6
	sub	r6, r6, #120
	beq	.L12874
.L12876:
	mov	r1, r6
	mov	r0, r9
	bl	usb_remove_config
	ldr	r6, [r6, #120]
	cmp	r5, r6
	sub	r6, r6, #120
	bne	.L12876
.L12874:
	mov	r3, #0
	str	r3, [r7, #4]
.L12878:
	mov	r0, r8
	bl	mutex_unlock
.L12877:
	ldr	r3, [r4, #3520]
	mov	r2, #1
	strb	r2, [r3, #153]
	b	.L12870
.L12896:
	ldr	r5, [r7, #4]
	cmp	r5, #0
	bne	.L12871
	movw	r0, #:lower16:.LC663
	ldr	r1, .L12898+8
	movt	r0, #:upper16:.LC663
	bl	printk
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	strb	r5, [r7]
	cmp	r3, #0
	moveq	r5, r3
	str	r5, [r7, #4]
	b	.L12877
.L12897:
	str	r3, [r7, #4]
	b	.L12878
.L12894:
	movw	r0, #:lower16:.LC662
	movt	r0, #:upper16:.LC662
	bl	printk
	b	.L12869
.L12899:
	.align	2
.L12898:
	.word	.LANCHOR3-2668
	.word	.LANCHOR5-1200
	.word	.LANCHOR3-2656
	.fnend
	.size	adb_release, .-adb_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_clear, %function
ffs_data_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	mov	r0, #0
	add	r4, r5, #132
	strd	r6, [sp, #8]
	mov	r1, r4
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L12939
.L12902:
	ldr	r7, [r5]
	cmp	r7, #0
	bne	.L12915
	ldr	r8, [r5, #220]
	cmp	r8, #0
	beq	.L12913
	ldrh	r6, [r5, #184]
	cmp	r6, #0
	beq	.L12919
	ldr	r3, [r8]
	cmp	r3, #1
	bne	.L12915
	ldr	r2, [r8, #28]
	add	r3, r8, #28
	cmp	r2, r3
	bne	.L12915
	mov	r4, r8
.L12916:
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L12917
	bl	d_delete
	ldr	r0, [r4, #48]
	bl	dput
	str	r7, [r4, #48]
.L12917:
	subs	r6, r6, #1
	add	r4, r4, #60
	beq	.L12919
	ldr	r3, [r4]
	cmp	r3, #1
	bne	.L12915
	ldr	r2, [r4, #28]
	add	r3, r4, #28
	cmp	r2, r3
	beq	.L12916
.L12915:
	.syntax divided
@ 1527 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_fs.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L12919:
	mov	r0, r8
	bl	kfree
.L12913:
	ldr	r0, [r5, #148]
	bl	kfree
	ldr	r0, [r5, #188]
	bl	kfree
	ldr	r0, [r5, #192]
	bl	kfree
	ldr	r0, [r5, #196]
	bl	kfree
	ldrd	r6, [sp, #8]
	ldr	r0, [r5, #200]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L12939:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r10, [r3, #2720]
	ldr	r6, [r3, #2736]
	cmp	r6, #0
	beq	.L12940
.L12903:
	add	r0, r6, #24
	bl	mutex_lock
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12904
	ldr	r8, [r6, #8]
	ldr	r1, [r6, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r6, #20]
	bne	.L12904
	ldr	r0, [r8]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L12905
	blx	r3
	ldr	r0, [r8]
.L12905:
	ldr	r0, [r0, #4]
	mov	r9, r6
	ldr	r1, [r8, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r7, [r9, #196]!
	cmp	r9, r7
	sub	r7, r7, #120
	beq	.L12904
.L12906:
	mov	r1, r7
	mov	r0, r8
	bl	usb_remove_config
	ldr	r7, [r7, #120]
	cmp	r9, r7
	sub	r7, r7, #120
	bne	.L12906
.L12904:
	mov	r7, #0
	strb	r7, [r10]
	str	r7, [r10, #4]
	str	r7, [r10, #8]
	ldr	r3, [r5]
	cmp	r3, r7
	beq	.L12941
	ldr	r0, [r3, #4]
	ldr	r1, [r5, #32]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, r5
	str	r7, [r5, #32]
	str	r7, [r3], #88
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12942
.L12922:
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit
.L12908:
	cmp	r6, #0
	beq	.L12902
	add	r0, r6, #24
	bl	mutex_unlock
	b	.L12902
.L12940:
	ldr	r6, [r10, #8]
	cmp	r6, #0
	bne	.L12903
	movw	r0, #:lower16:.LC664
	ldr	r1, .L12943
	movt	r0, #:upper16:.LC664
	bl	printk
	b	.L12904
.L12941:
	movw	r0, #:lower16:.LC12
	movw	r1, #1481
	movt	r0, #:upper16:.LC12
	bl	warn_slowpath_null
	b	.L12908
.L12942:
	movw	r0, #:lower16:.LC665
	ldr	r1, .L12943+4
	movt	r0, #:upper16:.LC665
	bl	printk
	mov	r0, r5
	bl	ffs_data_clear
	ldr	r2, [r5, #124]
	add	r3, r5, #124
	cmp	r2, r3
	bne	.L12915
	ldr	r2, [r5, #44]
	add	r3, r5, #44
	cmp	r2, r3
	bne	.L12915
	mov	r0, r5
	bl	kfree
	b	.L12922
.L12944:
	.align	2
.L12943:
	.word	.LANCHOR3-2636
	.word	.LANCHOR3-2608
	.fnend
	.size	ffs_data_clear, .-ffs_data_clear
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_release, %function
ffs_ep0_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r3, r4, #92
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	bne	.L12946
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #96]
	bl	ffs_data_clear
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	strh	r5, [r4, #108]	@ movhi
	str	r5, [r4, #132]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	str	r5, [r4, #180]
	strh	r5, [r4, #184]	@ movhi
	str	r5, [r4, #188]
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #220]
.L12946:
	add	r3, r4, #88
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12951
.L12947:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12951:
	movw	r0, #:lower16:.LC665
	ldr	r1, .L12952
	movt	r0, #:upper16:.LC665
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L12948
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L12948
	mov	r0, r4
	bl	kfree
	b	.L12947
.L12948:
	.syntax divided
@ 1347 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_fs.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L12953:
	.align	2
.L12952:
	.word	.LANCHOR3-2608
	.fnend
	.size	ffs_ep0_release, .-ffs_ep0_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_release, %function
ffs_epfile_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r0, #348]
	ldr	r4, [r3, #40]
	str	r2, [r3, #36]
	add	r3, r4, #92
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	bne	.L12955
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #96]
	bl	ffs_data_clear
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	strh	r5, [r4, #108]	@ movhi
	str	r5, [r4, #132]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	str	r5, [r4, #180]
	strh	r5, [r4, #184]	@ movhi
	str	r5, [r4, #188]
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #220]
.L12955:
	add	r3, r4, #88
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12960
.L12956:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #124]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12960:
	movw	r0, #:lower16:.LC665
	ldr	r1, .L12961
	movt	r0, #:upper16:.LC665
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L12957
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L12957
	mov	r0, r4
	bl	kfree
	b	.L12956
.L12957:
	.syntax divided
@ 1347 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_fs.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L12962:
	.align	2
.L12961:
	.word	.LANCHOR3-2608
	.fnend
	.size	ffs_epfile_release, .-ffs_epfile_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_kill_sb, %function
ffs_fs_kill_sb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	kill_litter_super
	ldr	r4, [r4, #496]
	cmp	r4, #0
	beq	.L12963
	add	r3, r4, #88
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12970
.L12963:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12970:
	movw	r0, #:lower16:.LC665
	ldr	r1, .L12971
	movt	r0, #:upper16:.LC665
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L12967
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L12967
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L12967:
	.syntax divided
@ 1347 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_fs.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L12972:
	.align	2
.L12971:
	.word	.LANCHOR3-2608
	.fnend
	.size	ffs_fs_kill_sb, .-ffs_fs_kill_sb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_free, %function
ffs_func_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r4, [r0, #12]
	add	r0, r3, #28
	ldrh	r5, [r3, #184]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	mov	r8, r0
.L12975:
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L12974
	ldr	r1, [r4, #-24]
	cmp	r1, #0
	beq	.L12974
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12974:
	subs	r5, r5, #1
	str	r6, [r4, #-28]
	add	r4, r4, #28
	str	r6, [r4, #-52]
	bne	.L12975
	ldr	r0, [r7, #8]
	mov	r1, r8
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	ldr	r4, [r7, #8]
	add	r3, r4, #88
	.syntax divided
@ 98 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 100 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 110 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12987
.L12976:
	ldr	r0, [r7, #12]
	bl	kfree
	ldr	r0, [r7, #32]
	bl	kfree
	ldr	r0, [r7, #36]
	bl	kfree
	ldr	r0, [r7, #40]
	bl	kfree
	ldr	r0, [r7, #44]
	bl	kfree
	ldr	r0, [r7, #48]
	bl	kfree
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	kfree
.L12987:
	movw	r0, #:lower16:.LC665
	ldr	r1, .L12988
	movt	r0, #:upper16:.LC665
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #124]
	add	r3, r4, #124
	cmp	r2, r3
	bne	.L12977
	ldr	r2, [r4, #44]
	add	r3, r4, #44
	cmp	r2, r3
	bne	.L12977
	mov	r0, r4
	bl	kfree
	b	.L12976
.L12977:
	.syntax divided
@ 1347 "/home/xawlw/kernel/arg/drivers/usb/gadget/f_fs.c" 1
	.word 0xe7f001f2
@ 0 "" 2
	.arm
	.syntax unified
.L12989:
	.align	2
.L12988:
	.word	.LANCHOR3-2608
	.fnend
	.size	ffs_func_free, .-ffs_func_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_bind_config, %function
ffs_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #4]
	ldr	r0, [r3, #28]
	ldr	r7, [r1, #24]
	ldr	r6, [r2, #4]
	cmp	r0, #0
	beq	.L12998
	mov	r2, #128
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r6, #11
	bne	.L12991
.L12990:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12998:
	mov	r4, #16
.L12991:
	movw	r3, #:lower16:.LC666
	movw	r1, #:lower16:ffs_func_bind
	movt	r3, #:upper16:.LC666
	movw	r2, #:lower16:ffs_func_set_alt
	movt	r1, #:upper16:ffs_func_bind
	movt	r2, #:upper16:ffs_func_set_alt
	str	r3, [r4, #52]
	movw	r3, #:lower16:ffs_func_unbind
	ldr	ip, [r6, #192]
	movt	r3, #:upper16:ffs_func_unbind
	movw	r0, #:lower16:ffs_func_disable
	str	r5, [r4]
	str	r1, [r4, #76]
	movw	r1, #:lower16:ffs_func_setup
	movt	r0, #:upper16:ffs_func_disable
	str	r2, [r4, #84]
	movw	r2, #:lower16:ffs_func_resume
	movt	r1, #:upper16:ffs_func_setup
	str	r3, [r4, #80]
	movw	r3, #:lower16:ffs_func_suspend
	movt	r2, #:upper16:ffs_func_resume
	movt	r3, #:upper16:ffs_func_suspend
	str	ip, [r4, #56]
	str	r0, [r4, #92]
	str	r1, [r4, #96]
	str	r3, [r4, #100]
	add	r3, r6, #88
	str	r2, [r4, #104]
	ldr	r2, [r7]
	stmib	r4, {r2, r6}
	.syntax divided
@ 44 "/home/xawlw/kernel/arg/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #84]
	add	r1, r4, #52
	cmp	r3, #0
	beq	.L13001
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L13001
	str	r5, [r4, #72]
	ldr	r0, [r5, #40]
	add	r3, r4, #116
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #116]
	str	r0, [r4, #120]
	str	r3, [r0]
	ldr	r6, [r4, #76]
	cmp	r6, #0
	beq	.L12994
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L12994
	ldrd	r2, [r4, #116]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #72]
	strd	r0, [r4, #116]
.L12994:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12995
	ldr	r2, [r4, #60]
	cmp	r2, #0
	beq	.L12995
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12995:
	tst	r3, #2
	bne	.L12996
	ldr	r2, [r4, #64]
	cmp	r2, #0
	beq	.L12996
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12996:
	tst	r3, #1
	bne	.L12997
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L12997
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12997:
	cmp	r6, #0
	beq	.L12990
.L12993:
	mov	r0, r4
	bl	ffs_func_free
	b	.L12990
.L13001:
	mvn	r6, #21
	b	.L12993
	.fnend
	.size	ffs_function_bind_config, .-ffs_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_unbind, %function
ffs_func_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r1, #52
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r1, #-44]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r7, #136]
	cmp	r3, r5
	beq	.L13029
.L13017:
	add	r4, r7, #120
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #100]
	mov	r6, r0
	add	r0, r7, #104
	ldrh	r2, [r7, #108]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r7, #100]
	cmp	r2, #0
	beq	.L13026
	add	r2, r2, r0
	mov	r3, r0
.L13025:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L13025
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L13023:
	add	r3, r7, r2
	strh	r1, [r7, #108]	@ movhi
	mov	r0, #1
	mov	r1, #3
	mov	r2, r0
	strb	r0, [r3, #104]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	ffs_func_free
.L13029:
	ldr	r4, [r1, #-40]
	add	r0, r7, #28
	mov	r9, #1
	mov	r8, #0
	mov	r10, r1
	ldrh	fp, [r7, #184]
	ldr	r6, [r7, #220]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	str	r0, [sp, #4]
.L13018:
	str	r9, [r6, #36]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L13019
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	r6, r6, #60
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	fp, fp, #1
	str	r8, [r3]
	str	r8, [r6, #-16]
	bne	.L13018
.L13021:
	ldr	r0, [r10, #-44]
	ldr	r1, [sp, #4]
	add	r0, r0, #28
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r7, #136]
	b	.L13017
.L13026:
	mov	r1, #1
	b	.L13023
.L13019:
	subs	fp, fp, #1
	str	r3, [r6, #44]
	add	r4, r4, #28
	add	r6, r6, #60
	bne	.L13018
	b	.L13021
	.fnend
	.size	ffs_func_unbind, .-ffs_func_unbind
	.align	2
	.global	usb_string_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_id, %function
usb_string_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	mov	r2, r0
	cmp	r3, #253
	bhi	.L13032
	add	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2, #48]
	bx	lr
.L13032:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_id, .-usb_string_id
	.align	2
	.global	usb_string_ids_tab
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_tab, %function
usb_string_ids_tab:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #4]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #0
	mov	r2, r3
	beq	.L13034
	cmp	r3, #253
	bgt	.L13035
	add	r1, r1, #8
.L13036:
	ldr	ip, [r1, #4]
	add	r3, r3, #1
	add	r1, r1, #8
	uxtb	r2, r3
	cmp	ip, #0
	strb	r2, [r1, #-16]
	beq	.L13034
	cmp	r3, #254
	bne	.L13036
.L13035:
	mvn	r3, #18
	mov	r0, r3
	bx	lr
.L13034:
	mov	r3, #0
	strb	r2, [r0, #48]
	mov	r0, r3
	bx	lr
	.fnend
	.size	usb_string_ids_tab, .-usb_string_ids_tab
	.align	2
	.global	usb_string_ids_n
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_n, %function
usb_string_ids_n:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #254
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	bhi	.L13049
	add	r1, r3, r1
	cmp	r1, #254
	bhi	.L13049
	strb	r1, [r0, #48]
	add	r0, r3, #1
	bx	lr
.L13049:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_ids_n, .-usb_string_ids_n
	.align	2
	.global	usb_composite_probe
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_probe, %function
usb_composite_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L13055
	ldr	r3, [r0, #12]
	cmp	r1, #0
	cmpne	r3, #0
	beq	.L13055
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	ip, [r0]
	cmp	ip, #0
	beq	.L13063
.L13052:
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LANCHOR0
	movw	r4, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR1
	str	ip, [r2, #1040]
	cmp	r3, #0
	mov	r3, r0
	streq	ip, [r0, #4]
	ldr	ip, [r3]
	movw	r0, #:lower16:.LANCHOR4
	str	r3, [r4, #2316]
	movt	r0, #:upper16:.LANCHOR4
	str	r1, [r0, #-4088]
	movw	r1, #:lower16:composite_bind
	add	r0, r2, #1040
	str	ip, [r2, #1068]
	ldr	r3, [r3, #20]
	movt	r1, #:upper16:composite_bind
	str	r3, [r2, #1044]
	bl	usb_gadget_probe_driver
	cmp	r0, #0
	movne	r3, #0
	strne	r3, [r4, #2316]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13063:
	movw	r3, #:lower16:.LC667
	movt	r3, #:upper16:.LC667
	mov	ip, r3
	str	r3, [r0]
	b	.L13052
.L13055:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_composite_probe, .-usb_composite_probe
	.section	.devinit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_probe, %function
android_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r9, #:lower16:__stack_chk_guard
	ldr	r2, [r0, #300]
	movt	r9, #:upper16:__stack_chk_guard
	.pad #32
	sub	sp, sp, #32
	ldr	r3, [r9]
	mov	r6, r0
	cmp	r2, #0
	str	r3, [sp, #28]
	beq	.L13065
	mov	r2, #208
	mov	r1, #52
	add	r0, r0, #8
	bl	devm_kzalloc
	subs	r8, r0, #0
	bne	.L13066
	movw	r0, #:lower16:.LC668
	ldr	r1, .L13107
	mvn	r5, #11
	movt	r0, #:upper16:.LC668
	bl	printk
	b	.L13064
.L13066:
	movw	r1, #:lower16:.LC669
	mov	r3, #1
	ldr	r0, [r6, #300]
	movt	r1, #:upper16:.LC669
	add	r2, r8, #4
	bl	of_property_read_u32_array
	movw	r1, #:lower16:.LC670
	mov	r2, #0
	ldr	r0, [r6, #300]
	movt	r1, #:upper16:.LC670
	mov	r4, r2
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC671
	movne	r0, #1
	movt	r1, #:upper16:.LC671
	mov	r2, r4
	strb	r0, [r8, #9]
	ldr	r0, [r6, #300]
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC672
	movne	r0, #1
	mov	r3, r4
	mov	r2, r4
	movt	r1, #:upper16:.LC672
	strb	r0, [r8, #10]
	ldr	r0, [r6, #300]
	str	r4, [sp]
	bl	of_property_read_string_helper
	cmp	r0, #3
	mov	r5, r0
	movwle	r7, #:lower16:.LC672
	movle	r10, r4
	movtle	r7, #:upper16:.LC672
	ble	.L13068
	movw	r0, #:lower16:.LC673
	ldr	r1, .L13107
	mvn	r5, #21
	movt	r0, #:upper16:.LC673
	bl	printk
	b	.L13064
.L13071:
	mov	r1, r7
	str	r4, [sp]
	mov	r3, #1
	add	r2, sp, #12
	ldr	r0, [r6, #300]
	str	r10, [sp, #12]
	bl	of_property_read_string_helper
	ldr	r1, [sp, #12]
	cmp	r1, #0
	beq	.L13070
	add	r0, r8, #11
	mov	r2, #10
	mla	r0, r2, r4, r0
	bl	strlcpy
.L13070:
	add	r4, r4, #1
.L13068:
	cmp	r4, r5
	blt	.L13071
	movw	r1, #:lower16:.LC674
	str	r5, [r8, #44]
	mov	r3, #1
	movt	r1, #:upper16:.LC674
	add	r2, r8, #48
	ldr	r0, [r6, #300]
	bl	of_property_read_u32_array
	b	.L13072
.L13065:
	ldr	r8, [r0, #92]
.L13072:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3732]
	mov	r7, r4
	cmp	r0, #0
	bne	.L13073
	movw	r1, #:lower16:.LC675
	ldr	r2, .L13107+4
	movt	r1, #:upper16:.LC675
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r4, #3732]
	movhi	r5, r0
	bhi	.L13064
.L13073:
	movw	r3, #:lower16:kmalloc_caches
	ldr	r10, .L13107+8
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L13092
	mov	r2, #472
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L13074
	ldr	r2, .L13107
	movw	r0, #:lower16:.LC676
	mvn	r5, #11
	movt	r0, #:upper16:.LC676
	mov	r1, r2
	bl	printk
	b	.L13075
.L13092:
	mov	r4, #16
.L13074:
	ldr	r1, .L13107+12
	movw	r3, #:lower16:android_work
	mov	r2, #1
	ldr	lr, [r6]
	movt	r3, #:upper16:android_work
	mov	ip, #0
	add	r0, r4, #196
	str	r3, [r4, #192]
	add	r3, r4, #184
	str	r2, [r4, #20]
	mov	r2, #2560
	str	lr, [r4]
	str	r1, [r4, #4]
	movw	r1, #:lower16:.LC677
	strd	r2, [r4, #180]
	movt	r1, #:upper16:.LC677
	ldr	r2, .L13107+4
	str	r3, [r4, #188]
	str	r0, [r4, #196]
	str	r0, [r4, #200]
	add	r0, r4, #24
	str	ip, [r4, #204]
	bl	__mutex_init
	ldr	r1, [r7, #2232]
	add	r3, r4, #208
	cmp	r8, #0
	ldr	r2, [r7, #3728]
	str	r8, [r4, #48]
	moveq	ip, r8
	str	r10, [r4, #208]
	mov	r0, r6
	str	r3, [r7, #2232]
	str	r1, [r4, #212]
	str	r3, [r1]
	ldrbne	ip, [r8, #8]	@ zero_extendqisi2
	add	r2, r2, #1
	movw	r3, #:lower16:.LANCHOR0
	mov	r1, #512
	movt	r3, #:upper16:.LANCHOR0
	str	r2, [r7, #3728]
	mov	r2, #0
	mov	r5, r3
	strb	ip, [r3, #1124]
	bl	platform_get_resource
	cmp	r0, #0
	beq	.L13077
	ldm	r0, {r1, r2}
	add	r6, r6, #8
	mov	r0, r6
	add	r2, r2, #1
	sub	r2, r2, r1
	bl	devm_ioremap
	cmp	r0, #0
	str	r0, [r7, #3640]
	bne	.L13077
	movw	r1, #:lower16:.LC678
	mov	r0, r6
	movt	r1, #:upper16:.LC678
	mvn	r5, #11
	bl	dev_err
	b	.L13078
.L13077:
	add	r6, sp, #17
	movw	r2, #:lower16:.LC679
	ldrb	r3, [r5, #1124]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC679
	mov	r1, #11
	mov	r0, r6
	bl	snprintf
	mov	r3, #0
	str	r6, [sp]
	ldr	r0, [r7, #3732]
	mov	r2, r3
	mov	r1, r3
	bl	device_create
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #12]
	bls	.L13079
	cmp	r0, #0
	beq	.L13081
	b	.L13083
.L13079:
	mov	r1, r4
	ldr	r6, .L13107+16
	bl	dev_set_drvdata
.L13082:
	ldr	r1, [r6, #4]!
	cmp	r1, #0
	beq	.L13081
	ldr	r0, [r4, #12]
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L13082
	ldr	r3, [r4, #12]
	ldr	r0, [r7, #3732]
	ldr	r1, [r3, #296]
	bl	device_destroy
.L13083:
	ldr	r2, .L13107
	movw	r0, #:lower16:.LC680
	movt	r0, #:upper16:.LC680
	mov	r1, r2
	bl	printk
	b	.L13078
.L13081:
	movw	r1, #:lower16:android_bind
	ldr	r0, .L13107+20
	movt	r1, #:upper16:android_bind
	bl	usb_composite_probe
	subs	r5, r0, #0
	beq	.L13086
	ldr	r2, .L13107
	movw	r0, #:lower16:.LC681
	movt	r0, #:upper16:.LC681
	ldr	r6, .L13107+16
	mov	r1, r2
	bl	printk
.L13087:
	ldr	r1, [r6, #4]!
	ldr	r0, [r4, #12]
	cmp	r1, #0
	beq	.L13106
	bl	device_remove_file
	b	.L13087
.L13106:
	ldr	r1, [r0, #296]
	ldr	r0, [r7, #3732]
	bl	device_destroy
	b	.L13078
.L13086:
	cmp	r8, #0
	beq	.L13089
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L13089
	mvn	r2, #0
	mov	r1, #1
	add	r0, r4, #64
	bl	pm_qos_add_request
.L13089:
	movw	r1, #:lower16:.LC682
	add	r0, r4, #56
	movt	r1, #:upper16:.LC682
	mov	r2, #5
	bl	strlcpy
	b	.L13064
.L13078:
	ldr	r3, [r7, #3728]
	mov	lr, #256
	mov	ip, #512
	ldr	r1, [r4, #208]
	mov	r0, r4
	ldr	r2, [r4, #212]
	sub	r3, r3, #1
	str	r2, [r1, #4]
	str	r1, [r2]
	str	lr, [r4, #208]
	str	ip, [r4, #212]
	str	r3, [r7, #3728]
	bl	kfree
.L13075:
	ldr	r3, [r7, #2228]
	cmp	r3, r10
	bne	.L13064
	ldr	r0, [r7, #3732]
	bl	class_destroy
	mov	r3, #0
	str	r3, [r7, #3732]
.L13064:
	ldr	r2, [sp, #28]
	mov	r0, r5
	ldr	r3, [r9]
	cmp	r2, r3
	beq	.L13090
	bl	__stack_chk_fail
.L13090:
	add	sp, sp, #32
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L13108:
	.align	2
.L13107:
	.word	.LANCHOR3-2592
	.word	.LANCHOR4-3976
	.word	.LANCHOR1+2228
	.word	.LANCHOR5-1176
	.word	.LANCHOR0+1440
	.word	.LANCHOR0+1504
	.fnend
	.size	android_probe, .-android_probe
	.text
	.align	2
	.global	usb_composite_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_unregister, %function
usb_composite_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2316]
	cmp	r3, r0
	beq	.L13111
	bx	lr
.L13111:
	ldr	r0, .L13112
	b	usb_gadget_unregister_driver
.L13113:
	.align	2
.L13112:
	.word	.LANCHOR0+1040
	.fnend
	.size	usb_composite_unregister, .-usb_composite_unregister
	.align	2
	.global	usb_composite_setup_continue
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_setup_continue, %function
usb_composite_setup_continue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #60
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #56]
	mov	r8, r0
	cmp	r3, #0
	bne	.L13115
	cmp	r4, #0
	bne	.L13120
.L13117:
	mov	r1, r8
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L13115:
	sub	r5, r3, #1
	cmp	r5, #0
	str	r5, [r4, #56]
	bne	.L13117
	str	r5, [r7, #4]
	ldr	r3, [r4]
	mov	r2, #32
	mov	r1, r7
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r7, #44]
	b	.L13117
.L13120:
	movw	r2, #:lower16:.LC592
	movw	r0, #:lower16:.LC444
	ldr	r3, .L13121
	movt	r2, #:upper16:.LC592
	movt	r0, #:upper16:.LC444
	movw	r1, #1736
	bl	warn_slowpath_fmt
	b	.L13117
.L13122:
	.align	2
.L13121:
	.word	.LANCHOR3-3120
	.fnend
	.size	usb_composite_setup_continue, .-usb_composite_setup_continue
	.align	2
	.global	f_midi_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind_config, %function
f_midi_bind_config:
	.fnstart
	@ args = 16, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [sp, #60]
	cmp	r9, #0
	beq	.L13124
	mvn	ip, #0
	str	ip, [r9]
	str	ip, [r9, #4]
.L13124:
	ldr	ip, [sp, #48]
	cmp	ip, #16
	cmpls	r3, #16
	bhi	.L13138
	movw	r10, #:lower16:kmalloc_caches
	mov	r8, r0
	str	r1, [sp, #4]
	movt	r10, #:upper16:kmalloc_caches
	mov	r7, r3
	ldr	r0, [r10, #36]
	mov	fp, r2
	cmp	r0, #0
	beq	.L13139
	mov	r2, #336
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L13165
.L13126:
	cmp	r7, #0
	addne	r6, r5, #220
	movne	r4, #0
	beq	.L13166
.L13129:
	ldr	ip, [r10, #24]
	mov	r2, #12
	movw	r1, #32976
	mov	r3, #16
	subs	r0, ip, #0
	beq	.L13127
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L13142
.L13127:
	mov	r2, #0
	str	r5, [r3]
	strb	r4, [r3, #8]
	add	r4, r4, #1
	cmp	r4, r7
	str	r2, [r3, #4]
	str	r3, [r6, #4]!
	bne	.L13129
.L13130:
	ldr	r3, [r8, #24]
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r5
	movt	r1, #:upper16:f_midi_in_tasklet
	add	r0, r5, #292
	ldr	r3, [r3]
	str	r3, [r5, #76]
	bl	tasklet_init
	mov	r1, #208
	mov	r0, fp
	bl	kstrdup
	ldr	r3, [sp, #48]
	str	r7, [r5, #312]
	str	r3, [r5, #316]
	ldr	r3, [sp, #4]
	str	r0, [r5, #324]
	mov	r0, r5
	str	r3, [r5, #320]
	ldr	r3, [sp, #52]
	str	r3, [r5, #328]
	ldr	r3, [sp, #56]
	str	r3, [r5, #332]
	bl	f_midi_register_card
	subs	r7, r0, #0
	bge	.L13167
.L13128:
	cmp	r4, #0
	beq	.L13136
	add	r4, r5, r4, lsl #2
	add	r6, r5, #224
	add	r4, r4, #224
.L13137:
	ldr	r0, [r4, #-4]!
	bl	kfree
	cmp	r6, r4
	bne	.L13137
.L13136:
	mov	r0, r5
	bl	kfree
.L13123:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13167:
	ldr	ip, .L13170
	movw	r1, #:lower16:.LC573
	movw	r3, #:lower16:f_midi_bind
	movt	r1, #:upper16:.LC573
	movw	r2, #:lower16:f_midi_unbind
	movw	r0, #:lower16:f_midi_set_alt
	movt	r3, #:upper16:f_midi_bind
	movt	r2, #:upper16:f_midi_unbind
	movt	r0, #:upper16:f_midi_set_alt
	stm	r5, {r1, ip}
	movw	r1, #:lower16:f_midi_disable
	movt	r1, #:upper16:f_midi_disable
	str	r8, [r5, #20]
	str	r3, [r5, #24]
	add	r3, r5, #64
	str	r2, [r5, #28]
	add	r2, r8, #36
	str	r0, [r5, #32]
	str	r1, [r5, #40]
	ldr	r1, [r8, #40]
	str	r3, [r8, #40]
	str	r2, [r5, #64]
	str	r1, [r5, #68]
	str	r3, [r1]
	ldr	r7, [r5, #24]
	cmp	r7, #0
	beq	.L13132
	mov	r1, r5
	mov	r0, r8
	blx	r7
	subs	r7, r0, #0
	blt	.L13168
.L13132:
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13133
.L13169:
	ldr	r2, [r5, #8]
	cmp	r2, #0
	beq	.L13133
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r8, #45]
.L13133:
	tst	r3, #2
	bne	.L13134
	ldr	r2, [r5, #12]
	cmp	r2, #0
	beq	.L13134
	ldrb	r2, [r8, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r8, #45]
.L13134:
	tst	r3, #1
	bne	.L13135
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L13135
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r8, #45]
.L13135:
	cmp	r7, #0
	bne	.L13128
	cmp	r9, #0
	beq	.L13123
	ldr	r3, [r5, #92]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r9]
	ldr	r3, [r5, #92]
	ldr	r3, [r3, #12]
	str	r3, [r9, #4]
	b	.L13123
.L13139:
	mov	r5, #16
	b	.L13126
.L13142:
	mvn	r7, #11
	b	.L13128
.L13168:
	ldrd	r2, [r5, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5, #20]
	strd	r0, [r5, #64]
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13133
	b	.L13169
.L13166:
	mov	r4, r7
	b	.L13130
.L13138:
	mvn	r7, #21
	b	.L13123
.L13165:
	mvn	r7, #11
	b	.L13123
.L13171:
	.align	2
.L13170:
	.word	.LANCHOR0+2768
	.fnend
	.size	f_midi_bind_config, .-f_midi_bind_config
	.align	2
	.global	usb_diag_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_open, %function
usb_diag_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR0
	mov	r6, r0
	ldr	r0, .L13186
	strd	r8, [sp, #16]
	mov	r7, r1
	str	r10, [sp, #24]
	mov	r8, r2
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r9, r0
	cmp	r5, r4
	beq	.L13173
	sub	r4, r4, #4
	b	.L13175
.L13184:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L13173
.L13175:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13184
	mov	r1, r9
	ldr	r0, .L13186
	bl	_raw_spin_unlock_irqrestore
.L13177:
	ldr	r0, .L13186
	str	r6, [r4]
	str	r8, [r4, #12]
	str	r7, [r4, #16]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #4]
	add	r3, r4, #4
	mov	r1, r0
	ldr	r0, .L13186
	str	r3, [r5, #4]
	str	r5, [r4, #4]
	str	r2, [r4, #8]
	str	r3, [r2]
	bl	_raw_spin_unlock_irqrestore
.L13172:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13173:
	ldr	r0, .L13186
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13185
	mov	r2, #24
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L13177
	mvn	r4, #11
	b	.L13172
.L13185:
	mov	r4, #16
	b	.L13177
.L13187:
	.align	2
.L13186:
	.word	.LANCHOR1+3472
	.fnend
	.size	usb_diag_open, .-usb_diag_open
	.align	2
	.global	usb_diag_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_close, %function
usb_diag_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, r0
	movt	r5, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	add	r0, r5, #3472
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldmib	r4, {r1, r3}
	mov	r2, #0
	mov	r6, r0
	ldr	r0, .L13196
	mov	ip, #256
	str	r2, [r4, #12]
	str	r2, [r4, #16]
	str	r3, [r1, #4]
	str	r1, [r3]
	ldr	r3, [r5, #3556]
	mov	r1, #512
	str	ip, [r4, #4]
	str	r1, [r4, #8]
	cmp	r3, r0
	beq	.L13190
	sub	r3, r3, #132
	mov	ip, r2
.L13189:
	ldr	r2, [r3, #116]
	cmp	r2, r4
	beq	.L13195
	ldr	r3, [r3, #132]
	cmp	r3, r0
	sub	r3, r3, #132
	bne	.L13189
.L13190:
	mov	r0, r4
	bl	kfree
	ldrd	r4, [sp]
	mov	r1, r6
	ldr	r0, .L13196+4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L13195:
	ldr	r2, [r3, #132]
	str	ip, [r3, #116]
	cmp	r2, r0
	sub	r3, r2, #132
	bne	.L13189
	b	.L13190
.L13197:
	.align	2
.L13196:
	.word	.LANCHOR1+3556
	.word	.LANCHOR1+3472
	.fnend
	.size	usb_diag_close, .-usb_diag_close
	.align	2
	.global	usb_diag_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_alloc_req, %function
usb_diag_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L13213
	add	r3, r4, #100
	mov	r5, r4
	mov	r0, r3
	mov	r8, r2
	str	r3, [sp, #4]
	mov	r7, r1
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]!
	str	r0, [sp]
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L13200
	mov	r10, r2
	mov	r9, #256
	mov	r6, #512
	b	.L13201
.L13214:
	mov	r10, r2
.L13201:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r9, [r3]
	str	r6, [r3, #4]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r10
	mov	r3, r10
	ldr	r2, [r10]
	bne	.L13214
.L13200:
	mov	r6, r4
	ldr	r2, [r6, #84]!
	cmp	r2, r6
	ldr	r0, [r2]
	beq	.L13202
	mov	fp, r0
	mov	r10, #256
	mov	r9, #512
	b	.L13203
.L13215:
	mov	fp, r0
.L13203:
	ldr	r3, [r2, #4]
	sub	r1, r2, #36
	str	r3, [r0, #4]
	str	r0, [r3]
	str	r10, [r2]
	str	r9, [r2, #4]
	ldr	r0, [r4, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, fp
	mov	r2, fp
	ldr	r0, [fp]
	bne	.L13215
.L13202:
	cmp	r7, #0
	ble	.L13204
	movw	r9, #:lower16:diag_write_complete
	mov	r10, #0
	movt	r9, #:upper16:diag_write_complete
	b	.L13206
.L13229:
	str	r9, [r0, #28]
	ldr	r2, [r4, #96]
	cmp	r7, r10
	str	r3, [r4, #96]
	str	r5, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	beq	.L13204
.L13206:
	ldr	r0, [r4, #80]
	mov	r1, #32
	add	r10, r10, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L13229
.L13205:
	ldr	r3, [r4, #92]
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L13209
	mov	r9, r2
	mov	r8, #256
	mov	r7, #512
	b	.L13210
.L13216:
	mov	r9, r2
.L13210:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r9
	mov	r3, r9
	ldr	r2, [r9]
	bne	.L13216
.L13209:
	ldr	r3, [r4, #84]
	cmp	r3, r6
	ldr	r2, [r3]
	beq	.L13211
	mov	r8, r2
	mov	r7, #256
	mov	r5, #512
	b	.L13212
.L13217:
	mov	r8, r2
.L13212:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r7, [r3]
	str	r5, [r3, #4]
	ldr	r0, [r4, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r8
	mov	r3, r8
	ldr	r2, [r8]
	bne	.L13217
.L13211:
	ldr	r1, [sp]
	ldr	r0, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
.L13198:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13204:
	cmp	r8, #0
	ble	.L13207
	movw	r7, #:lower16:diag_read_complete
	mov	r9, #0
	movt	r7, #:upper16:diag_read_complete
	b	.L13208
.L13230:
	str	r7, [r0, #28]
	ldr	r2, [r4, #88]
	cmp	r8, r9
	str	r3, [r4, #88]
	str	r6, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	beq	.L13207
.L13208:
	ldr	r0, [r4, #76]
	mov	r1, #32
	add	r9, r9, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L13230
	b	.L13205
.L13207:
	ldr	r1, [sp]
	ldr	r0, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L13198
.L13213:
	mvn	r0, #18
	b	.L13198
	.fnend
	.size	usb_diag_alloc_req, .-usb_diag_alloc_req
	.align	2
	.global	usb_diag_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_read, %function
usb_diag_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L13235
	add	r7, r5, #100
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L13241
	ldr	r4, [r5, #84]
	add	r8, r5, #84
	cmp	r8, r4
	beq	.L13242
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r1, r0
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r4, #36
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r4, #-32]
	str	r6, [r4, #-4]
	ldr	r0, [r5, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L13243
.L13231:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13243:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	str	r4, [r5, #88]
	mov	r0, r7
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, .L13244
	ldr	r0, .L13244+4
	bl	___ratelimit
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L13231
	ldr	r3, [r5, #108]
	movw	r1, #:lower16:.LC684
	movt	r1, #:upper16:.LC684
	ldr	r2, .L13244
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #4
	b	.L13231
.L13235:
	mvn	r0, #18
	b	.L13231
.L13241:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L13231
.L13242:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #108]
	movw	r1, #:lower16:.LC683
	movt	r1, #:upper16:.LC683
	ldr	r2, .L13244
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L13231
.L13245:
	.align	2
.L13244:
	.word	.LANCHOR3-2576
	.word	.LANCHOR5-1064
	.fnend
	.size	usb_diag_read, .-usb_diag_read
	.align	2
	.global	usb_diag_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_write, %function
usb_diag_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L13252
	add	r7, r4, #100
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L13257
	ldr	r5, [r4, #92]
	add	r8, r4, #92
	cmp	r8, r5
	beq	.L13258
	ldrd	r2, [r5]
	mov	lr, #256
	mov	ip, #512
	mov	r1, r0
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r5]
	str	ip, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r5, #36
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L13259
	ldr	r2, [r4, #120]
	ldr	r3, [r4, #128]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #120]
	str	r3, [r4, #128]
.L13246:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13252:
	mvn	r0, #18
	b	.L13246
.L13257:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L13246
.L13259:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r6, r0
	str	r5, [r4, #96]
	ldr	r0, .L13260
	str	r8, [r5]
	ldr	r1, .L13260+4
	str	r3, [r5, #4]
	str	r5, [r3]
	bl	___ratelimit
	cmp	r0, #0
	beq	.L13251
	ldr	r3, [r4, #108]
	movw	r1, #:lower16:.LC684
	movt	r1, #:upper16:.LC684
	ldr	r2, .L13260+4
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L13251:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L13246
.L13258:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #108]
	movw	r1, #:lower16:.LC683
	movt	r1, #:upper16:.LC683
	ldr	r2, .L13260+4
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L13246
.L13261:
	.align	2
.L13260:
	.word	.LANCHOR5-1040
	.word	.LANCHOR3-2560
	.fnend
	.size	usb_diag_write, .-usb_diag_write
	.align	2
	.global	diag_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_add, %function
diag_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r5]
	cmp	r5, r4
	beq	.L13263
	mov	r8, r1
	mov	r9, r2
	sub	r4, r4, #4
	b	.L13265
.L13293:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L13263
.L13265:
	mov	r0, r8
	ldr	r1, [r4]
	bl	strcmp
	subs	r7, r0, #0
	bne	.L13293
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13294
	mov	r2, #140
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L13295
.L13271:
	movw	r2, #:lower16:.LANCHOR1
	ldr	r0, .L13296
	add	r3, r5, #132
	movt	r2, #:upper16:.LANCHOR1
	ldr	ip, .L13296+4
	ldr	r1, [r2, #3560]
	str	r3, [r2, #3560]
	movw	r2, #:lower16:diag_function_set_alt
	movt	r2, #:upper16:diag_function_set_alt
	strd	r0, [r5, #132]
	movw	r0, #:lower16:diag_function_bind
	str	r3, [r1]
	movw	r3, #:lower16:diag_function_unbind
	movw	r1, #:lower16:diag_function_disable
	str	r9, [r5, #112]
	movt	r3, #:upper16:diag_function_unbind
	movt	r1, #:upper16:diag_function_disable
	str	r4, [r5, #116]
	ldr	lr, [r6, #24]
	add	r9, ip, #40
	movt	r0, #:upper16:diag_function_bind
	str	lr, [r5, #108]
	ldr	r8, [r4]
	add	lr, r5, #84
	mov	r4, #0
	str	ip, [r5, #8]
	add	ip, r5, #92
	str	r8, [r5]
	str	r9, [r5, #12]
	str	r6, [r5, #20]
	str	r0, [r5, #24]
	str	r3, [r5, #28]
	add	r3, r5, #64
	str	r2, [r5, #32]
	add	r2, r6, #36
	str	r1, [r5, #40]
	str	lr, [r5, #84]
	str	lr, [r5, #88]
	str	ip, [r5, #92]
	str	ip, [r5, #96]
	str	r4, [r5, #100]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r5, #64]
	str	r1, [r5, #68]
	str	r3, [r1]
	ldr	r3, [r5, #24]
	cmp	r3, r4
	beq	.L13267
	mov	r1, r5
	mov	r0, r6
	blx	r3
	subs	r7, r0, #0
	bge	.L13267
	ldrd	r2, [r5, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r4, [r5, #20]
	strd	r0, [r5, #64]
.L13267:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13268
	ldr	r2, [r5, #8]
	cmp	r2, #0
	beq	.L13268
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L13268:
	tst	r3, #2
	bne	.L13269
	ldr	r2, [r5, #12]
	cmp	r2, #0
	beq	.L13269
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L13269:
	tst	r3, #1
	bne	.L13270
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L13270
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L13270:
	cmp	r7, #0
	beq	.L13262
	ldr	r3, [r6, #24]
	movw	r1, #:lower16:.LC685
	movt	r1, #:upper16:.LC685
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	ldrd	r2, [r5, #132]
	mov	ip, #256
	mov	r1, #512
	mov	r0, r5
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r5, #132]
	str	r1, [r5, #136]
	bl	kfree
.L13262:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13263:
	ldr	r3, [r6, #24]
	movw	r1, #:lower16:.LC686
	mvn	r7, #18
	movt	r1, #:upper16:.LC686
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L13262
.L13294:
	mov	r5, #16
	b	.L13271
.L13295:
	mvn	r7, #11
	b	.L13262
.L13297:
	.align	2
.L13296:
	.word	.LANCHOR1+3556
	.word	.LANCHOR0+3028
	.fnend
	.size	diag_function_add, .-diag_function_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind_config, %function
diag_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r2, .L13320
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:__stack_chk_guard
	mov	r8, r1
	strd	r10, [sp, #24]
	movt	r9, #:upper16:__stack_chk_guard
	str	lr, [sp, #32]
	ldr	r3, [r3, #2228]
	.pad #44
	sub	sp, sp, #44
	ldr	r0, [r9]
	ldr	r1, [r1, #24]
	cmp	r3, r2
	sub	r5, r3, #208
	str	r0, [sp, #36]
	bne	.L13301
	b	.L13299
.L13317:
	ldr	r3, [r5, #208]
	cmp	r3, r2
	sub	r5, r3, #208
	beq	.L13299
.L13301:
	ldr	r3, [r3, #-200]
	cmp	r1, r3
	bne	.L13317
.L13299:
	mov	r2, #32
	ldr	r1, .L13320+4
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	movw	r6, #:lower16:.LC270
	bl	strim
	movw	r10, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r6, #:upper16:.LC270
	str	r0, [sp]
	movt	r10, #:upper16:usb_diag_update_pid_and_serial_num
	mov	r4, #0
	mvn	r7, #0
	b	.L13302
.L13305:
	mov	r1, r6
	mov	r0, sp
	bl	strsep
	cmp	r4, #0
	mov	fp, r0
	movne	r2, #0
	bne	.L13303
	ldr	r2, [r5, #48]
	cmp	r2, #0
	beq	.L13308
	ldr	r2, [r2]
	cmp	r2, #0
	moveq	r2, r10
.L13303:
	cmp	fp, #0
	beq	.L13304
	mov	r1, fp
	mov	r0, r8
	bl	diag_function_add
	subs	r7, r0, #0
	bne	.L13318
.L13304:
	ldr	r0, [sp]
	add	r4, r4, #1
.L13302:
	cmp	r0, #0
	bne	.L13305
	ldr	r2, [sp, #36]
	mov	r0, r7
	ldr	r3, [r9]
	cmp	r2, r3
	bne	.L13319
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13308:
	movw	r2, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r2, #:upper16:usb_diag_update_pid_and_serial_num
	b	.L13303
.L13318:
	movw	r0, #:lower16:.LC687
	mov	r2, fp
	ldr	r1, .L13320+8
	movt	r0, #:upper16:.LC687
	bl	printk
	b	.L13304
.L13319:
	bl	__stack_chk_fail
.L13321:
	.align	2
.L13320:
	.word	.LANCHOR1+2228
	.word	.LANCHOR1+3644
	.word	.LANCHOR3-2544
	.fnend
	.size	diag_function_bind_config, .-diag_function_bind_config
	.align	2
	.global	send_sps_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_sps_req, %function
send_sps_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r3, [r0, #8]
	ldr	r2, [r6, #76]
	ldr	r3, [r3, #8]
	ldr	r7, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L13331
	movw	r0, #:lower16:.LC305
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC305
	bl	strcmp
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	moveq	r2, #32768
	ldr	r3, [r3, #4080]
	orreq	r3, r3, #1312
	bne	.L13332
.L13326:
	str	r2, [r5, #4]
	mov	r1, r5
	mov	r0, r4
	str	r3, [r5, #52]
	mov	r2, #32
	str	r5, [r6, #88]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L13333
.L13322:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13332:
	bic	r3, r3, #65536
	mov	r2, #0
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	b	.L13326
.L13331:
	movw	r0, #:lower16:.LC688
	movt	r0, #:upper16:.LC688
	bl	printk
	mvn	r0, #11
	b	.L13322
.L13333:
	movw	r0, #:lower16:.LC689
	movt	r0, #:upper16:.LC689
	bl	printk
	mvn	r0, #4
	b	.L13322
	.fnend
	.size	send_sps_req, .-send_sps_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_connect_work, %function
usb_qdss_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC305
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC305
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r7, [r4, #-48]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r7]
	ldr	r3, [r3, #76]
	ldr	r3, [r3]
	ldr	r1, [r3, #28]
	bl	strcmp
	cmp	r0, #0
	beq	.L13349
.L13335:
	ldr	r0, [r4, #-72]
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r6, [r0]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx
	uxtb	r8, r0
	add	r1, r5, #4080
	mov	r0, r8
	bl	usb_bam_connect
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4092]
	beq	.L13338
	mov	r2, #4
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4092]
	beq	.L13350
.L13338:
	ldr	r0, [r6, #28]
	bl	usb_bam_set_qdss_core
	ldr	r3, .L13353
	mov	r1, #0
	mov	r0, r8
	ldr	r2, [r5, #4092]
	stm	sp, {r1, r2}
	add	r1, r3, #4
	sub	r2, r3, #4
	bl	get_bam2bam_connection_info
	movw	r0, #:lower16:.LC305
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC305
	bl	strcmp
	cmp	r0, #0
	beq	.L13351
.L13340:
	cmp	r9, #0
	bne	.L13339
	ldr	r5, [r4, #-32]
	cmp	r5, #0
	beq	.L13342
	sub	r3, r4, #44
	mov	r2, r9
	ldr	r0, [r4, #-28]
	mov	r1, r9
	blx	r5
.L13342:
	ldr	r0, [r4, #-48]
	bl	send_sps_req
	cmp	r0, #0
	bne	.L13352
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L13349:
	mov	r0, r7
	bl	msm_ep_config
	cmp	r0, #0
	bne	.L13336
	ldr	r7, [r4, #-48]
	b	.L13335
.L13351:
	ldr	r2, [r5, #4092]
	mov	r0, r7
	ldrb	r3, [r5, #4080]	@ zero_extendqisi2
	ldmib	r2, {r1, r2}
	bl	msm_data_fifo_config
	b	.L13340
.L13336:
	movw	r0, #:lower16:.LC690
	movt	r0, #:upper16:.LC690
	bl	printk
	movw	r0, #:lower16:.LC691
	movt	r0, #:upper16:.LC691
.L13348:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L13350:
	movw	r0, #:lower16:.LC692
	movt	r0, #:upper16:.LC692
	bl	printk
.L13339:
	movw	r0, #:lower16:.LC693
	movt	r0, #:upper16:.LC693
	b	.L13348
.L13352:
	movw	r0, #:lower16:.LC694
	movt	r0, #:upper16:.LC694
	b	.L13348
.L13354:
	.align	2
.L13353:
	.word	.LANCHOR1+4084
	.fnend
	.size	usb_qdss_connect_work, .-usb_qdss_connect_work
	.align	2
	.global	init_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	init_data, %function
init_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC305
	str	lr, [sp, #4]
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC305
	ldr	r3, [r3, #76]
	ldr	r3, [r3]
	ldr	r1, [r3, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	beq	.L13362
.L13355:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13362:
	mov	r0, r4
	bl	msm_ep_config
	subs	r4, r0, #0
	beq	.L13355
	movw	r0, #:lower16:.LC690
	movt	r0, #:upper16:.LC690
	bl	printk
	b	.L13355
	.fnend
	.size	init_data, .-init_data
	.align	2
	.global	uninit_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	uninit_data, %function
uninit_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC450
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC450
	str	lr, [sp, #12]
	ldr	r3, [r4]
	ldr	r3, [r3, #76]
	ldr	r5, [r3]
	bl	printk
	movw	r0, #:lower16:.LC305
	movt	r0, #:upper16:.LC305
	ldr	r1, [r5, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	beq	.L13370
.L13363:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13370:
	mov	r0, r4
	bl	msm_ep_unconfig
	subs	r4, r0, #0
	beq	.L13363
	movw	r0, #:lower16:.LC451
	movt	r0, #:upper16:.LC451
	bl	printk
	b	.L13363
	.fnend
	.size	uninit_data, .-uninit_data
	.align	2
	.global	usb_qdss_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_free_req, %function
usb_qdss_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L13380
	mov	r6, r5
	ldr	r3, [r6, #140]!
	cmp	r3, r6
	ldr	r2, [r3]
	beq	.L13373
	mov	r4, r2
	mov	r8, #256
	mov	r7, #512
	b	.L13374
.L13377:
	mov	r4, r2
.L13374:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	mov	r3, r4
	ldr	r2, [r4]
	bne	.L13377
.L13373:
	mov	r6, r5
	ldr	r3, [r6, #132]!
	cmp	r3, r6
	ldr	r2, [r3]
	beq	.L13371
	mov	r4, r2
	mov	r8, #256
	mov	r7, #512
	b	.L13376
.L13378:
	mov	r4, r2
.L13376:
	ldr	r0, [r3, #4]
	sub	r1, r3, #36
	str	r0, [r2, #4]
	str	r2, [r0]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r4
	mov	r3, r4
	ldr	r2, [r4]
	bne	.L13378
.L13371:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13380:
	movw	r0, #:lower16:.LC695
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC695
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
	.fnend
	.size	usb_qdss_free_req, .-usb_qdss_free_req
	.align	2
	.global	usb_qdss_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_alloc_req, %function
usb_qdss_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r2, #0
	cmpgt	r1, #0
	strd	r6, [sp, #8]
	movle	r5, #1
	movgt	r5, #0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	moveq	r5, #1
	cmp	r5, #0
	bne	.L13392
	movw	r6, #:lower16:qdss_ctrl_write_complete
	mov	r8, r0
	mov	r10, r1
	mov	r7, r2
	movt	r6, #:upper16:qdss_ctrl_write_complete
	add	r9, r4, #140
.L13382:
	ldr	r0, [r4, #96]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r3, r0, #36
	beq	.L13393
	str	r6, [r0, #28]
	ldr	r2, [r4, #144]
	cmp	r10, r5
	str	r3, [r4, #144]
	str	r9, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	bgt	.L13382
	movw	r6, #:lower16:qdss_ctrl_read_complete
	mov	r5, #0
	movt	r6, #:upper16:qdss_ctrl_read_complete
	add	r9, r4, #132
.L13387:
	ldr	r0, [r4, #92]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	add	r2, r0, #36
	beq	.L13394
	str	r6, [r0, #28]
	ldr	r3, [r4, #136]
	cmp	r7, r5
	str	r2, [r4, #136]
	str	r9, [r0, #36]
	str	r3, [r0, #40]
	str	r2, [r3]
	bgt	.L13387
	mov	r0, #0
.L13381:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13393:
	movw	r0, #:lower16:.LC697
	movt	r0, #:upper16:.LC697
	bl	printk
.L13385:
	mov	r0, r8
	bl	usb_qdss_free_req
	mvn	r0, #11
	b	.L13381
.L13394:
	movw	r0, #:lower16:.LC698
	movt	r0, #:upper16:.LC698
	bl	printk
	b	.L13385
.L13392:
	movw	r0, #:lower16:.LC696
	movt	r0, #:upper16:.LC696
	bl	printk
	mvn	r0, #18
	b	.L13381
	.fnend
	.size	usb_qdss_alloc_req, .-usb_qdss_alloc_req
	.align	2
	.global	usb_qdss_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_read, %function
usb_qdss_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L13399
	add	r7, r5, #180
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	cmp	r3, #0
	beq	.L13404
	ldr	r4, [r5, #132]
	add	r8, r5, #132
	cmp	r8, r4
	beq	.L13405
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r4, #36
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r4, #-32]
	str	r6, [r4, #-4]
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L13406
.L13395:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13399:
	mvn	r0, #18
	b	.L13395
.L13404:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L13395
.L13406:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #136]
	mov	r1, r0
	str	r4, [r5, #136]
	mov	r0, r7
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC700
	movt	r0, #:upper16:.LC700
	bl	printk
	mvn	r0, #4
	b	.L13395
.L13405:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC699
	movt	r0, #:upper16:.LC699
	bl	printk
	mvn	r0, #10
	b	.L13395
	.fnend
	.size	usb_qdss_ctrl_read, .-usb_qdss_ctrl_read
	.align	2
	.global	usb_qdss_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_write, %function
usb_qdss_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	cmp	r5, #0
	beq	.L13411
	add	r7, r5, #180
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	cmp	r3, #0
	beq	.L13416
	ldr	r4, [r5, #140]
	add	r8, r5, #140
	cmp	r8, r4
	beq	.L13417
	ldrd	r2, [r4]
	mov	lr, #256
	mov	ip, #512
	mov	r0, r7
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4]
	str	ip, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r2, #32
	sub	r1, r4, #36
	str	r3, [r4, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r4, #-32]
	str	r6, [r4, #-4]
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L13418
.L13407:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13411:
	mvn	r0, #18
	b	.L13407
.L13416:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L13407
.L13418:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #144]
	mov	r1, r0
	str	r4, [r5, #144]
	mov	r0, r7
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC700
	movt	r0, #:upper16:.LC700
	bl	printk
	mvn	r0, #4
	b	.L13407
.L13417:
	movw	r0, #:lower16:.LC701
	str	r1, [sp, #4]
	movt	r0, #:upper16:.LC701
	bl	printk
	ldr	r1, [sp, #4]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #10
	b	.L13407
	.fnend
	.size	usb_qdss_ctrl_write, .-usb_qdss_ctrl_write
	.align	2
	.global	usb_qdss_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_open, %function
usb_qdss_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r2, #0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L13433
	movw	r7, #:lower16:.LANCHOR0
	mov	r6, r0
	ldr	r0, .L13439
	movt	r7, #:upper16:.LANCHOR0
	mov	r10, r1
	mov	r5, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #312]!
	mov	r8, r0
	cmp	r4, r5
	sub	r4, r4, #4
	bne	.L13424
	b	.L13422
.L13434:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L13422
.L13424:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13434
	sub	fp, r4, #104
	str	fp, [r4, #20]
.L13427:
	mov	r3, #1
	mov	r1, r8
	ldr	r0, .L13439
	str	r6, [r4]
	str	r9, [r4, #12]
	str	r10, [r4, #16]
	str	r3, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #84]
	cmp	r3, #1
	beq	.L13435
.L13419:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13422:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13436
	mov	r2, #192
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	fp, r0, #0
	beq	.L13437
.L13425:
	mov	r1, r8
	ldr	r0, .L13439
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	mov	r2, #1
	mov	r3, r0
	mov	r1, #10
	str	r0, [sp]
	mov	r0, r6
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [fp, #188]
	beq	.L13438
	ldr	r0, .L13439
	add	r4, fp, #104
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #316]
	add	r2, fp, #108
	str	r5, [fp, #108]
	mov	r8, r0
	str	r2, [r7, #316]
	str	r3, [fp, #112]
	str	r2, [r3]
	b	.L13427
.L13436:
	mov	fp, #16
	b	.L13425
.L13435:
	add	r1, fp, #148
	ldr	r0, [fp, #188]
	bl	queue_work
	b	.L13419
.L13438:
	mov	r0, fp
	mvn	r4, #11
	bl	kfree
	b	.L13419
.L13437:
	mov	r1, r8
	ldr	r0, .L13439
	mvn	r4, #11
	bl	_raw_spin_unlock_irqrestore
	b	.L13419
.L13433:
	movw	r0, #:lower16:.LC702
	mov	r4, r9
	movt	r0, #:upper16:.LC702
	bl	printk
	b	.L13419
.L13440:
	.align	2
.L13439:
	.word	.LANCHOR1+3452
	.fnend
	.size	usb_qdss_open, .-usb_qdss_open
	.align	2
	.global	usb_qdss_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_close, %function
usb_qdss_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	ldr	r0, .L13445
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r5, #20]
	ldr	r3, [r4, #76]
	ldr	r6, [r3]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r4, #88]
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r1, [r4, #88]
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, #0
	mov	r1, r7
	ldr	r0, .L13445
	str	r3, [r4, #88]
	str	r3, [r5, #24]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC305
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC305
	bl	strcmp
	cmp	r0, #0
	beq	.L13444
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13444:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	msm_dwc3_restart_usb_session
.L13446:
	.align	2
.L13445:
	.word	.LANCHOR1+3452
	.fnend
	.size	usb_qdss_close, .-usb_qdss_close
	.align	2
	.global	rmnet_smd_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind_config, %function
rmnet_smd_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L13459
	mov	r2, #448
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13476
.L13448:
	mov	r5, #0
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC544
	mov	r3, r5
	movt	r0, #:upper16:.LC544
	str	r5, [sp]
	mov	r2, #1
	mov	r1, #10
	str	r4, [r8, #3424]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #380]
	beq	.L13461
	add	r1, r4, #388
	movw	r2, #:lower16:rmnet_smd_connect_work
	str	r5, [r4, #156]
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	mov	ip, #2560
	str	r5, [r4, #160]
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	add	r0, r4, #404
	str	r5, [r4, #164]
	movt	r2, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #388]
	movw	r9, #:lower16:rmnet_smd_setup
	str	r1, [r4, #392]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	add	r7, r4, #116
	str	r5, [r4, #300]
	movt	r1, #:upper16:rmnet_control_rx_tlet
	movt	r9, #:upper16:rmnet_smd_setup
	str	r5, [r4, #364]
	str	ip, [r4, #384]
	str	r2, [r4, #396]
	mov	r2, r4
	str	ip, [r4, #400]
	str	r0, [r4, #404]
	str	r0, [r4, #408]
	add	r0, r4, #276
	str	r3, [r4, #412]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	add	r0, r4, #256
	movt	r1, #:upper16:rmnet_control_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	add	r0, r4, #340
	movt	r1, #:upper16:rmnet_data_rx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #320
	movt	r1, #:upper16:rmnet_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC561
	ldr	r2, .L13480
	add	r0, r4, #304
	movt	r1, #:upper16:.LC561
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC562
	ldr	r2, .L13480
	add	r0, r4, #368
	movt	r1, #:upper16:.LC562
	bl	__init_waitqueue_head
	ldr	r3, .L13480+4
	movw	r0, #:lower16:rmnet_smd_ch_probe
	movw	r2, #:lower16:.LC563
	movt	r0, #:upper16:rmnet_smd_ch_probe
	movt	r2, #:upper16:.LC563
	movw	ip, #:lower16:rmnet_smd_bind
	movw	r1, #:lower16:.LC502
	movt	ip, #:upper16:rmnet_smd_bind
	movt	r1, #:upper16:.LC502
	strd	r2, [r4]
	add	lr, r3, #8
	add	r3, r3, #28
	str	r0, [r4, #168]
	movw	r0, #:lower16:rmnet_smd_unbind
	movw	r2, #:lower16:rmnet_smd_set_alt
	movt	r0, #:upper16:rmnet_smd_unbind
	movt	r2, #:upper16:rmnet_smd_set_alt
	str	lr, [r4, #8]
	str	r3, [r4, #12]
	movw	r3, #:lower16:rmnet_smd_disable
	add	lr, r4, #108
	movt	r3, #:upper16:rmnet_smd_disable
	str	r6, [r4, #20]
	str	r0, [r4, #28]
	add	r0, r4, #100
	str	ip, [r4, #24]
	add	ip, r4, #124
	str	r2, [r4, #32]
	add	r2, r4, #140
	str	r3, [r4, #40]
	add	r3, r4, #132
	str	r9, [r4, #44]
	str	r0, [r4, #100]
	str	r0, [r4, #104]
	add	r0, r4, #148
	str	lr, [r4, #108]
	str	lr, [r4, #112]
	str	r7, [r4, #116]
	str	r7, [r4, #120]
	str	ip, [r4, #124]
	str	ip, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	add	r3, r4, #64
	str	r2, [r4, #140]
	str	r2, [r4, #144]
	add	r2, r6, #36
	str	r0, [r4, #148]
	str	r0, [r4, #152]
	str	r1, [r4, #188]
	str	r5, [r4, #196]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r7, [r4, #24]
	cmp	r7, r5
	beq	.L13451
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L13477
.L13451:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13452
.L13479:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L13452
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L13452:
	tst	r3, #2
	bne	.L13453
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L13453
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L13453:
	tst	r3, #1
	bne	.L13454
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L13454
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L13454:
	cmp	r7, #0
	beq	.L13478
.L13455:
	ldr	r0, [r4, #380]
	bl	destroy_workqueue
.L13450:
	mov	r0, r4
	bl	kfree
.L13447:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L13478:
	movw	r0, #:lower16:.LC564
	mov	r1, r7
	movt	r0, #:upper16:.LC564
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r8, #3456]
	beq	.L13447
	cmn	r0, #4096
	bhi	.L13447
	ldr	ip, .L13480+8
	movw	r0, #:lower16:.LC154
	mov	r3, r4
	movt	r0, #:upper16:.LC154
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L13458
	cmn	r0, #4096
	bls	.L13447
.L13458:
	ldr	r0, [r8, #3456]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r8, #3456]
	b	.L13447
.L13477:
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r4, #20]
	strd	r0, [r4, #64]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13452
	b	.L13479
.L13459:
	mov	r4, #16
	b	.L13448
.L13461:
	mvn	r7, #11
	b	.L13450
.L13476:
	mvn	r7, #11
	b	.L13447
.L13481:
	.align	2
.L13480:
	.word	.LANCHOR4-3992
	.word	.LANCHOR0+2668
	.word	.LANCHOR3-3484
	.fnend
	.size	rmnet_smd_bind_config, .-rmnet_smd_bind_config
	.align	2
	.global	rmnet_sdio_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_add, %function
rmnet_sdio_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L13491
	mov	r2, #364
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13505
.L13483:
	mov	r5, #0
	movw	r0, #:lower16:.LC544
	mov	r3, r5
	movt	r0, #:upper16:.LC544
	mov	r2, #1
	mov	r1, #10
	str	r5, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #192]
	beq	.L13493
	movw	ip, #:lower16:rmnet_sdio_disconnect_work
	movw	r0, #:lower16:rmnet_sdio_control_rx_work
	str	r5, [r4, #180]
	movw	r2, #:lower16:rmnet_sdio_data_rx_work
	movt	ip, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #184]
	movt	r0, #:upper16:rmnet_sdio_control_rx_work
	movt	r2, #:upper16:rmnet_sdio_data_rx_work
	str	r5, [r4, #188]
	movw	r3, #:lower16:rmnet_sdio_set_modem_cbits_w
	movw	r1, #:lower16:rmnet_open_sdio_work
	str	ip, [r4, #208]
	mov	r7, #2560
	add	lr, r4, #216
	add	ip, r4, #232
	movt	r3, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #200
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r7, [r4, #196]
	str	r0, [r4, #224]
	add	r0, r4, #328
	str	r2, [r4, #240]
	add	r2, r4, #248
	str	r8, [r4, #200]
	str	r8, [r4, #204]
	movw	r8, #:lower16:rmnet_sdio_suspend
	str	r7, [r4, #212]
	movt	r8, #:upper16:rmnet_sdio_suspend
	str	lr, [r4, #216]
	str	lr, [r4, #220]
	str	r7, [r4, #228]
	str	ip, [r4, #232]
	str	ip, [r4, #236]
	str	r7, [r4, #244]
	str	r2, [r4, #248]
	str	r2, [r4, #252]
	mov	r2, r5
	str	r1, [r4, #256]
	mov	r1, r5
	str	r7, [r4, #324]
	str	r0, [r4, #328]
	str	r0, [r4, #332]
	add	r0, r4, #260
	str	r3, [r4, #336]
	bl	init_timer_key
	movw	ip, #:lower16:rmnet_sdio_bind
	ldr	r3, .L13509
	movw	lr, #:lower16:.LC545
	movt	ip, #:upper16:rmnet_sdio_bind
	movw	r0, #:lower16:rmnet_sdio_unbind
	movt	lr, #:upper16:.LC545
	movt	r0, #:upper16:rmnet_sdio_unbind
	movw	r2, #:lower16:delayed_work_timer_fn
	movw	r1, #:lower16:rmnet_close_sdio_work
	str	ip, [r4, #24]
	movw	ip, #:lower16:rmnet_sdio_set_alt
	movt	r2, #:upper16:delayed_work_timer_fn
	movt	ip, #:upper16:rmnet_sdio_set_alt
	str	lr, [r4]
	movw	lr, #:lower16:rmnet_sdio_setup
	str	r3, [r4, #4]
	movt	lr, #:upper16:rmnet_sdio_setup
	movt	r1, #:upper16:rmnet_close_sdio_work
	str	r0, [r4, #28]
	movw	r0, #:lower16:rmnet_sdio_disable
	str	ip, [r4, #32]
	add	ip, r3, #8
	add	r3, r3, #28
	movt	r0, #:upper16:rmnet_sdio_disable
	str	ip, [r4, #8]
	add	ip, r4, #112
	str	r3, [r4, #12]
	add	r3, r4, #100
	str	r0, [r4, #40]
	add	r0, r4, #296
	str	ip, [r4, #112]
	str	r3, [r4, #100]
	str	r3, [r4, #104]
	add	r3, r4, #152
	str	ip, [r4, #116]
	add	ip, r4, #124
	str	lr, [r4, #44]
	add	lr, r4, #244
	str	r8, [r4, #48]
	str	ip, [r4, #124]
	str	ip, [r4, #128]
	add	ip, r4, #136
	str	r3, [r4, #152]
	str	r3, [r4, #156]
	add	r3, r4, #164
	str	ip, [r4, #136]
	str	ip, [r4, #140]
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r3, [r4, #164]
	str	r3, [r4, #168]
	add	r3, r4, #64
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	str	r2, [r4, #276]
	add	r2, r6, #36
	str	lr, [r4, #280]
	str	r7, [r4, #292]
	str	r0, [r4, #296]
	str	r0, [r4, #300]
	str	r1, [r4, #304]
	str	r6, [r4, #20]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r7, [r4, #24]
	cmp	r7, r5
	beq	.L13486
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L13506
.L13486:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13487
.L13508:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L13487
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L13487:
	tst	r3, #2
	bne	.L13488
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L13488
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L13488:
	tst	r3, #1
	bne	.L13489
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L13489
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L13489:
	cmp	r7, #0
	beq	.L13507
.L13490:
	ldr	r0, [r4, #192]
	bl	destroy_workqueue
.L13485:
	mov	r0, r4
	bl	kfree
.L13482:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13507:
	movw	r0, #:lower16:.LC546
	mov	r1, r7
	movt	r0, #:upper16:.LC546
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #340]
	bhi	.L13482
	ldr	ip, .L13509+4
	movw	r0, #:lower16:.LC154
	mov	r3, r4
	mov	r1, #292
	movt	r0, #:upper16:.LC154
	str	ip, [sp]
	bl	debugfs_create_file
	b	.L13482
.L13506:
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r5, [r4, #20]
	strd	r0, [r4, #64]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13487
	b	.L13508
.L13491:
	mov	r4, #16
	b	.L13483
.L13493:
	mvn	r7, #11
	b	.L13485
.L13505:
	mvn	r7, #11
	b	.L13482
.L13510:
	.align	2
.L13509:
	.word	.LANCHOR0+2596
	.word	.LANCHOR3-3664
	.fnend
	.size	rmnet_sdio_function_add, .-rmnet_sdio_function_add
	.align	2
	.global	frmnet_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_free_req, %function
frmnet_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	frmnet_free_req, .-frmnet_free_req
	.align	2
	.global	gps_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_free_req, %function
gps_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gps_free_req, .-gps_free_req
	.align	2
	.global	audio_source_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_bind_config, %function
audio_source_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mvn	r2, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r5, r1
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r0, r2
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	add	ip, sp, #8
	str	r2, [r1]
	str	r2, [r1, #4]
	mov	r2, r3
	mov	r1, r3
	str	ip, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L13541
.L13515:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L13541:
	ldr	r3, [r7, #24]
	add	r6, sp, #12
	movw	r1, #:lower16:.LC580
	ldr	lr, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC580
	ldr	ip, [r3]
	mov	r3, #1
	mov	r0, lr
	add	ip, ip, #32
	str	ip, [lr, #500]
	stm	sp, {r4, r6}
	bl	snd_pcm_new
	subs	r4, r0, #0
	movwne	r6, #:lower16:.LANCHOR0
	movtne	r6, #:upper16:.LANCHOR0
	bne	.L13523
	ldr	r3, [sp, #12]
	movw	r6, #:lower16:.LANCHOR0
	movw	r1, #:lower16:.LC581
	ldr	r9, .L13544
	movt	r6, #:upper16:.LANCHOR0
	movt	r1, #:upper16:.LC581
	mov	r2, #80
	mov	r8, r4
	str	r4, [r3, #16]
	add	r0, r3, #88
	str	r9, [r3, #276]
	str	r3, [r6, #2856]
	bl	strlcpy
	ldr	r0, [sp, #12]
	mov	r1, r4
	add	r2, r6, #2928
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC582
	mov	r2, #16
	movt	r1, #:upper16:.LC582
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC583
	mov	r2, #80
	movt	r1, #:upper16:.LC583
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	bne	.L13523
	ldr	r3, [r6, #2808]
	cmp	r3, #0
	beq	.L13525
	ldr	r3, [r6, #2816]
	cmp	r3, #0
	beq	.L13525
	ldr	r2, [r7, #40]
	add	r1, r9, #64
	add	r3, r7, #36
	str	r7, [r6, #2796]
	str	r1, [r7, #40]
	str	r3, [r6, #2840]
	str	r2, [r6, #2844]
	str	r1, [r2]
	ldr	r3, [r6, #2800]
	cmp	r3, #0
	beq	.L13518
	mov	r1, r9
	mov	r0, r7
	blx	r3
	subs	r4, r0, #0
	blt	.L13542
.L13518:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13519
	ldr	r2, [r6, #2784]
	cmp	r2, #0
	beq	.L13519
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L13519:
	tst	r3, #2
	bne	.L13520
	ldr	r2, [r6, #2788]
	cmp	r2, #0
	beq	.L13520
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L13520:
	tst	r3, #1
	bne	.L13521
	ldr	r3, [r6, #2792]
	cmp	r3, #0
	beq	.L13521
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L13521:
	cmp	r4, #0
	beq	.L13543
.L13517:
.L13522:
.L13523:
	ldr	r0, [r6, #2852]
	bl	snd_card_free
	b	.L13515
.L13543:
	ldrd	r2, [sp, #8]
	ldr	r1, [r3]
	ldr	r1, [r1]
	str	r1, [r5]
	ldr	r3, [r3, #12]
	str	r3, [r5, #4]
	str	r2, [r6, #2852]
	b	.L13515
.L13542:
	ldr	r2, [r6, #2840]
	mov	r0, #256
	mov	r1, #512
	ldr	r3, [r6, #2844]
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r8, [r6, #2796]
	str	r0, [r6, #2840]
	str	r1, [r6, #2844]
	b	.L13518
.L13525:
	mvn	r4, #21
	b	.L13523
.L13545:
	.align	2
.L13544:
	.word	.LANCHOR0+2776
	.fnend
	.size	audio_source_bind_config, .-audio_source_bind_config
	.align	2
	.global	gs_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_alloc_req, %function
gs_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L13546
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L13552
.L13546:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13552:
	ldr	r2, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L13546
	.fnend
	.size	gs_alloc_req, .-gs_alloc_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_io, %function
gs_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	adds	r2, r0, #44
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #32
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	str	r2, [sp]
	ldr	r5, [r3, #84]
	beq	.L13591
	ldr	r8, [r0, #44]
	rsb	r8, r8, #8
	cmp	r8, #0
	ble	.L13556
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:gs_read_complete
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:gs_read_complete
	mov	fp, #0
.L13555:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	mov	r2, #4096
	beq	.L13563
	str	r2, [r7, #4]
	ldr	r3, [r10, #48]
	mov	ip, #16
	mov	r1, #32
	subs	r0, r3, #0
	streq	ip, [r7]
	beq	.L13565
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r7]
	bne	.L13565
.L13559:
	ldr	r3, [r5, #8]
	mov	r1, r7
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L13563:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	beq	.L13566
.L13561:
	ldr	r3, [r4, #4]
.L13556:
	adds	r2, r4, #88
	add	r7, r4, #76
	ldr	r8, [r3, #80]
	str	r2, [sp, #4]
	beq	.L13593
	ldr	r9, [r4, #88]
	rsb	r9, r9, #8
	cmp	r9, #0
	movwgt	r10, #:lower16:gs_write_complete
	movgt	fp, #0
	movtgt	r10, #:upper16:gs_write_complete
	bgt	.L13569
	b	.L13570
.L13573:
	str	r10, [r0, #28]
	ldr	r2, [r4, #80]
	cmp	r9, fp
	str	r3, [r4, #80]
	str	r7, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	ldr	r3, [r4, #88]
	add	r3, r3, #1
	str	r3, [r4, #88]
	ble	.L13570
.L13569:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r8
	add	fp, fp, #1
	bl	gs_alloc_req
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L13573
.L13571:
	ldr	r3, [r4, #76]
	cmp	r7, r3
	beq	.L13617
.L13570:
	mov	r8, #0
	mov	r0, r4
	str	r8, [r4, #56]
	bl	gs_start_rx
	ldr	r3, [r4, #4]
	cmp	r3, r8
	beq	.L13590
	cmp	r0, #0
	moveq	r10, #256
	moveq	r9, #512
	beq	.L13580
	ldr	r0, [r4, #8]
	bl	tty_wakeup
	mov	r0, r8
.L13553:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13565:
	str	r9, [r7, #28]
	ldr	r3, [r4, #36]
	add	r2, r7, #36
	add	fp, fp, #1
	str	r2, [r4, #36]
	cmp	r8, fp
	str	r6, [r7, #36]
	str	r3, [r7, #40]
	str	r2, [r3]
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bgt	.L13555
	b	.L13561
.L13591:
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:gs_read_complete
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:gs_read_complete
	adds	r8, r0, #44
	b	.L13554
.L13618:
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r7]
	beq	.L13559
.L13560:
	str	r9, [r7, #28]
	ldr	r3, [r4, #36]
	add	r8, r8, #1
	add	r2, r7, #36
	cmp	r8, #8
	str	r2, [r4, #36]
	str	r6, [r7, #36]
	str	r3, [r7, #40]
	str	r2, [r3]
	beq	.L13561
.L13554:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	mov	r2, #4096
	beq	.L13563
	str	r2, [r7, #4]
	ldr	r3, [r10, #48]
	mov	r1, #32
	mov	ip, #16
	subs	r0, r3, #0
	bne	.L13618
	str	ip, [r7]
	b	.L13560
.L13593:
	movw	r9, #:lower16:gs_write_complete
	adds	r10, r4, #88
	movt	r9, #:upper16:gs_write_complete
	b	.L13568
.L13619:
	str	r9, [r0, #28]
	ldr	r2, [r4, #80]
	cmp	r10, #8
	str	r3, [r4, #80]
	str	r7, [r0, #36]
	str	r2, [r0, #40]
	str	r3, [r2]
	beq	.L13570
.L13568:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r8
	add	r10, r10, #1
	bl	gs_alloc_req
	cmp	r0, #0
	add	r3, r0, #36
	bne	.L13619
	b	.L13571
.L13617:
	ldr	r10, [sp]
	mov	r9, #256
	mov	r8, #512
.L13574:
	cmp	r10, #0
	bne	.L13575
	mov	r9, #256
	mov	r8, #512
	b	.L13577
.L13620:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
.L13577:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	mov	r7, r3
	bne	.L13620
.L13566:
	mvn	r0, #11
	b	.L13553
.L13581:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	mov	r8, r3
	beq	.L13582
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r8, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	sub	r3, r3, #1
	str	r3, [r4, #44]
.L13580:
	ldr	r3, [sp]
	cmp	r3, #0
	bne	.L13581
	mov	r9, #256
	mov	r8, #512
	b	.L13583
.L13621:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
.L13583:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	mov	r10, r3
	bne	.L13621
.L13582:
	ldr	r3, [r4, #4]
	mov	r9, #256
	mov	r8, #512
	ldr	r6, [r3, #80]
.L13585:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	bne	.L13586
	mov	r9, #256
	mov	r8, #512
	b	.L13588
.L13622:
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
.L13588:
	ldr	r3, [r4, #76]
	cmp	r7, r3
	mov	r5, r3
	bne	.L13622
.L13590:
	mvn	r0, #4
	b	.L13553
.L13575:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	mov	r7, r3
	beq	.L13566
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r7, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	sub	r3, r3, #1
	str	r3, [r4, #44]
	b	.L13574
.L13586:
	ldr	r3, [r4, #76]
	cmp	r7, r3
	mov	r5, r3
	beq	.L13590
	ldm	r3, {r1, r2}
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #88]
	sub	r3, r3, #1
	str	r3, [r4, #88]
	b	.L13585
	.fnend
	.size	gs_start_io, .-gs_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_open, %function
gs_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L13644
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	add	r3, r6, #24
	rsb	r5, r5, r5, lsl #3
	lsl	r5, r5, #2
	add	r6, r6, r5
	add	r5, r5, r3
.L13630:
	mov	r0, r6
	bl	mutex_lock
	ldr	r4, [r5]
	subs	r0, r4, #0
	beq	.L13641
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L13626
	add	r3, r3, #1
	mov	r0, r4
	mov	r5, #0
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
.L13623:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13641:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L13623
.L13626:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r3, #0
	bne	.L13627
	mov	r3, #1
	strb	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L13642
.L13629:
	str	r4, [r7, #280]
	ldr	r6, [r4, #4]
	mov	r5, #0
	mov	r3, #1
	str	r7, [r4, #8]
	str	r3, [r4, #12]
	cmp	r6, r5
	strb	r5, [r4, #16]
	beq	.L13636
	mov	r0, r4
	bl	gs_start_io
	ldr	r3, [r6, #108]
	cmp	r3, #0
	beq	.L13636
	mov	r0, r6
	blx	r3
.L13634:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	b	.L13623
.L13627:
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, #1
	bl	msleep
	b	.L13630
.L13636:
	mov	r5, #0
	b	.L13634
.L13642:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #52]
	cmp	r0, #0
	beq	.L13643
	mov	r2, #8192
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r6, r0
	str	r0, [r4, #96]
	beq	.L13633
.L13632:
	mov	r3, #8192
	mov	r0, r4
	str	r3, [r4, #92]
	str	r6, [r4, #100]
	str	r6, [r4, #104]
	bl	_raw_spin_lock_irq
	b	.L13629
.L13643:
	mov	r3, #16
	mov	r6, r3
	str	r3, [r4, #96]
	b	.L13632
.L13633:
	mov	r0, r4
	mvn	r5, #11
	bl	_raw_spin_lock_irq
	strb	r6, [r4, #16]
	b	.L13634
.L13645:
	.align	2
.L13644:
	.word	.LANCHOR1+3844
	.fnend
	.size	gs_open, .-gs_open
	.align	2
	.global	gs_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_free_req, %function
gs_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gs_free_req, .-gs_free_req
	.align	2
	.global	gserial_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_setup, %function
gserial_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 96
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:__stack_chk_guard
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r9, r1, #1
	strd	r10, [sp, #24]
	cmp	r9, #7
	str	lr, [sp, #32]
	.pad #108
	sub	sp, sp, #108
	str	r3, [sp, #28]
	ldr	r3, [r3]
	str	r0, [sp, #36]
	str	r3, [sp, #100]
	bhi	.L13664
	mov	r10, r1
	mov	r1, #0
	mov	r0, r10
	movw	r8, #:lower16:.LANCHOR1
	bl	__alloc_tty_driver
	movt	r8, #:upper16:.LANCHOR1
	cmp	r0, #0
	str	r0, [r8, #3840]
	beq	.L13665
	movw	r3, #:lower16:tty_std_termios
	movw	r2, #:lower16:.LC703
	ldr	r1, .L13687
	movt	r3, #:upper16:tty_std_termios
	movt	r2, #:upper16:.LC703
	ldrd	r6, [r3]
	mov	lr, #3
	str	r2, [r0, #72]
	ldrd	r4, [r3, #32]
	movw	r2, #:lower16:.LC704
	movt	r2, #:upper16:.LC704
	movt	lr, 1
	str	r2, [r0, #76]
	strd	r6, [r0, #100]
	ldrd	r6, [r3, #16]
	strd	r4, [sp, #8]
	ldrd	r4, [r3, #8]
	ldrd	r2, [r3, #24]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r6, [r0, #116]
	ldrd	r6, [sp, #8]
	strd	r4, [r0, #108]
	movw	r5, #3261
	str	lr, [r0, #144]
	strd	r2, [r0, #124]
	mov	r3, #9600
	str	r5, [r0, #108]
	strd	r6, [r0, #132]
	mov	r6, #0
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	bl	tty_set_operations
	movw	r0, #:lower16:.LC705
	mov	r3, r6
	str	r6, [sp]
	movt	r0, #:upper16:.LC705
	mov	r2, #1
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, r6
	str	r0, [r8, #3428]
	beq	.L13666
	movw	r2, #:lower16:kmalloc_caches
	ldr	r3, .L13687+4
	movw	r1, #:lower16:.LC706
	movt	r2, #:upper16:kmalloc_caches
	movw	r0, #:lower16:.LC707
	ldr	r9, .L13687+8
	movw	ip, #:lower16:.LC708
	movt	r0, #:upper16:.LC707
	movt	ip, #:upper16:.LC708
	str	r2, [sp, #8]
	mov	r2, r1
	movt	r2, #:upper16:.LC706
	mov	r5, r3
	str	r0, [sp, #20]
	str	ip, [sp, #24]
	str	r3, [sp, #32]
	str	r8, [sp, #40]
	mov	r8, r2
	str	r3, [sp, #44]
	b	.L13653
.L13683:
	mov	r2, #144
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13681
.L13651:
	mov	fp, #0
	mov	r0, r4
	ldr	r1, [sp, #20]
	sub	r7, r9, #8
	add	r5, r5, #28
	str	fp, [r0], #20
	mov	r2, r7
	bl	__init_waitqueue_head
	ldr	r1, [sp, #24]
	mov	r2, r7
	add	r0, r4, #108
	bl	__init_waitqueue_head
	mov	r2, #2560
	add	r7, r6, #1
	strb	r6, [r4, #17]
	movw	r3, #:lower16:gs_rx_push
	add	r1, r4, #64
	add	ip, r4, #32
	add	r0, r4, #48
	strb	fp, [r4, #126]
	movt	r3, #:upper16:gs_rx_push
	mov	lr, #8
	mov	fp, #9600
	cmp	r10, r7
	str	ip, [r4, #32]
	str	r2, [r4, #60]
	add	r2, r4, #76
	str	ip, [r4, #36]
	str	r0, [r4, #48]
	str	r0, [r4, #52]
	str	r1, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r4, #72]
	str	r2, [r4, #76]
	str	r2, [r4, #80]
	str	fp, [r4, #120]
	strh	lr, [r4, #124]	@ movhi
	str	r4, [r5, #-4]
	beq	.L13682
	mov	r6, r7
.L13653:
	mov	r0, r5
	sub	r2, r9, #8
	mov	r1, r8
	bl	__mutex_init
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	bne	.L13683
	mov	r4, #16
	b	.L13651
.L13682:
	ldr	r8, [sp, #40]
	ldr	r0, [r8, #3840]
	str	r10, [r8, #3836]
	bl	tty_register_driver
	subs	r5, r0, #0
	bne	.L13684
	ldr	r3, [sp, #36]
	movw	r9, #:lower16:.LC710
	mov	r4, r5
	ldr	r10, .L13687+12
	movt	r9, #:upper16:.LC710
	add	r6, r3, #32
.L13656:
	mov	r2, r6
	mov	r1, r4
	ldr	r0, [r8, #3840]
	bl	tty_register_device
	cmn	r0, #4096
	bhi	.L13685
.L13655:
	add	r4, r4, #1
	cmp	r4, r7
	bne	.L13656
	ldr	r10, .L13687+16
	movw	r9, #:lower16:.LC711
	mov	r4, #0
	ldr	r6, [sp, #44]
	movt	r9, #:upper16:.LC711
.L13659:
	mov	r2, r9
	mov	r3, r4
	ldr	fp, [r6, #24]
	mov	r1, #48
	add	r0, sp, #52
	bl	snprintf
	add	r0, sp, #52
	mov	r1, #0
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r8, #4068]
	beq	.L13658
	cmn	r0, #4096
	bhi	.L13658
	movw	r0, #:lower16:.LC712
	mov	r3, fp
	str	r10, [sp]
	mov	r1, #292
	movt	r0, #:upper16:.LC712
	bl	debugfs_create_file
	ldr	ip, .L13687+20
	movw	r0, #:lower16:.LC713
	mov	r3, fp
	ldr	r2, [r8, #4068]
	movt	r0, #:upper16:.LC713
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
.L13658:
	add	r4, r4, #1
	add	r6, r6, #28
	cmp	r4, r7
	bne	.L13659
.L13648:
	ldr	r3, [sp, #28]
	mov	r0, r5
	ldr	r2, [sp, #100]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L13686
	add	sp, sp, #108
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13666:
	ldr	r3, .L13687+4
	mvn	r5, #11
	str	r3, [sp, #32]
.L13650:
	rsb	r6, r9, r9, lsl #3
	sub	r4, r3, #28
	add	r6, r3, r6, lsl #2
.L13660:
	ldr	r0, [r6, #24]
	sub	r6, r6, #28
	bl	kfree
	cmp	r4, r6
	bne	.L13660
.L13661:
	ldr	r0, [r8, #3428]
	cmp	r0, #0
	beq	.L13662
	bl	destroy_workqueue
.L13662:
	ldr	r0, [r8, #3840]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r8, #3840]
	b	.L13648
.L13685:
	mov	r3, r0
	mov	r2, r4
	mov	r1, r10
	mov	r0, r9
	bl	printk
	b	.L13655
.L13664:
	mvn	r5, #21
	b	.L13648
.L13681:
.L13652:
	cmp	r6, #0
	mvn	r5, #11
	ldr	r8, [sp, #40]
	sub	r9, r6, #1
	beq	.L13661
	ldr	r3, [sp, #32]
	b	.L13650
.L13665:
	mvn	r5, #11
	b	.L13648
.L13686:
	bl	__stack_chk_fail
.L13684:
	movw	r0, #:lower16:.LC709
	mov	r2, r5
	ldr	r1, .L13687+12
	movt	r0, #:upper16:.LC709
	mov	r9, r6
	bl	printk
	ldr	r3, [sp, #32]
	b	.L13650
.L13688:
	.align	2
.L13687:
	.word	.LANCHOR3-2516
	.word	.LANCHOR1+3844
	.word	.LANCHOR4-3968
	.word	.LANCHOR3-2392
	.word	.LANCHOR3-2376
	.word	.LANCHOR3-2272
	.fnend
	.size	gserial_setup, .-gserial_setup
	.align	2
	.global	gserial_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup, %function
gserial_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3840]
	cmp	r3, #0
	beq	.L13689
	b	gserial_cleanup.part.73
.L13689:
	bx	lr
	.fnend
	.size	gserial_cleanup, .-gserial_cleanup
	.align	2
	.global	gserial_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_connect, %function
gserial_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #3840]
	cmp	r2, #0
	beq	.L13699
	ldr	r2, [r3, #3836]
	cmp	r1, r2
	bcs	.L13699
	ldr	r2, [r0, #80]
	rsb	r1, r1, r1, lsl #3
	mov	r4, r0
	add	r3, r3, r1, lsl #2
	ldr	ip, [r2, #8]
	mov	r0, r2
	ldr	r6, [r3, #3868]
	ldr	r1, [r2, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r5, r0, #0
	blt	.L13691
	ldr	r3, [r4, #80]
	str	r6, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bge	.L13705
.L13693:
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #80]
	mov	r2, #0
	str	r2, [r3]
.L13691:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13705:
	ldr	r3, [r4, #84]
	mov	r0, r6
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	str	r6, [r4, #76]
	ldr	r1, [r6, #120]
	mov	r7, r0
	str	r4, [r6, #4]
	str	r1, [r4, #88]
	ldrh	r1, [r6, #124]
	strh	r1, [r4, #92]	@ movhi
	ldrb	r2, [r6, #126]	@ zero_extendqisi2
	strb	r2, [r4, #94]
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L13706
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L13696
.L13704:
	mov	r0, r4
	blx	r3
.L13696:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L13691
.L13706:
	mov	r0, r6
	bl	gs_start_io
	ldr	r3, [r4, #108]
	cmp	r3, #0
	bne	.L13704
	b	.L13696
.L13699:
	mvn	r5, #5
	b	.L13691
	.fnend
	.size	gserial_connect, .-gserial_connect
	.align	2
	.global	gserial_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_disconnect, %function
gserial_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #76]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L13707
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r6, #88]
	mov	r2, #0
	str	r0, [r4, #120]
	ldrh	r0, [r6, #92]
	strh	r0, [r4, #124]	@ movhi
	ldrb	r1, [r6, #94]	@ zero_extendqisi2
	str	r2, [r4, #4]
	strb	r1, [r4, #126]
	str	r2, [r6, #76]
	ldr	r3, [r4, #12]
	cmp	r3, r2
	bne	.L13709
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L13710
.L13709:
	mov	r2, #1
	add	r0, r4, #108
	mov	r3, #0
	mov	r1, r2
	bl	__wake_up
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13710
	bl	tty_hangup
.L13710:
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #84]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #84]
	str	r5, [r3]
	ldr	r0, [r6, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #80]
	mov	r0, r4
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, r5
	bne	.L13712
	ldrb	r5, [r4, #16]	@ zero_extendqisi2
	cmp	r5, #0
	beq	.L13726
.L13712:
	ldr	r3, [r4, #32]
	add	r8, r4, #32
	ldr	r5, [r6, #84]
	cmp	r8, r3
	beq	.L13713
	mov	r10, #256
	mov	r9, #512
.L13714:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #32]
	cmp	r8, r3
	bne	.L13714
	ldr	r5, [r6, #84]
.L13713:
	ldr	r3, [r4, #48]
	add	r8, r4, #48
	cmp	r8, r3
	beq	.L13715
	mov	r10, #256
	mov	r9, #512
.L13716:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #48]
	cmp	r8, r3
	bne	.L13716
.L13715:
	ldr	r3, [r4, #76]
	add	r8, r4, #76
	ldr	r6, [r6, #80]
	cmp	r8, r3
	beq	.L13717
	mov	r10, #256
	mov	r9, #512
.L13718:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #76]
	cmp	r8, r3
	bne	.L13718
.L13717:
	mov	r3, #0
	mov	r1, r7
	mov	r0, r4
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L13707:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13726:
	ldr	r0, [r4, #96]
	bl	kfree
	str	r5, [r4, #96]
	b	.L13712
	.fnend
	.size	gserial_disconnect, .-gserial_disconnect
	.align	2
	.global	gsdio_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_req, %function
gsdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gsdio_free_req, .-gsdio_free_req
	.align	2
	.global	gsdio_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_req, %function
gsdio_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L13733
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L13734
.L13729:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13733:
	movw	r0, #:lower16:.LC714
	ldr	r1, .L13735
	movt	r0, #:upper16:.LC714
	bl	printk
	b	.L13729
.L13734:
	movw	r0, #:lower16:.LC715
	ldr	r1, .L13735
	movt	r0, #:upper16:.LC715
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13729
.L13736:
	.align	2
.L13735:
	.word	.LANCHOR3-2168
	.fnend
	.size	gsdio_alloc_req, .-gsdio_alloc_req
	.align	2
	.global	gsdio_free_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_requests, %function
gsdio_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1]
	cmp	r1, r3
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, #512
	str	r8, [sp, #16]
	mov	r8, #256
	str	lr, [sp, #20]
.L13739:
	ldr	ip, [r3]
	mov	r4, r3
	ldr	r2, [r3, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r5]
	cmp	r5, r3
	bne	.L13739
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_free_requests, .-gsdio_free_requests
	.set	gsmd_free_requests,gsdio_free_requests
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify, %function
gsmd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r1, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #72]
	cmp	r1, #3
	ldrls	pc, [pc, r1, asl #2]
	b	.L13745
.L13748:
	.word	.L13747
	.word	.L13749
	.word	.L13750
	.word	.L13751
.L13751:
	ldr	r0, [r5]
	bl	smd_tiocmget
	ands	r1, r0, #128
	movne	r1, #8
	movne	r3, #9
	moveq	r3, #1
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	ldr	r0, [r4, #68]
	orrne	r1, r1, #2
	str	r1, [r4, #160]
	cmp	r0, #0
	beq	.L13745
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L13745
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3
.L13750:
	add	r1, r5, #8
	mov	r0, #0
	add	r7, r4, #4
	bl	_clear_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L13822
	ldr	r6, [r3, #80]
	mov	r1, r0
	mov	r0, r7
	ldr	r5, [r3, #84]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L13766
	mov	r0, r6
	blx	r3
.L13766:
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L13767
	mov	r0, r5
	blx	r3
.L13767:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r4, #68]
	cmp	r0, #0
	beq	.L13768
	ldr	r3, [r4, #12]
	add	r8, r4, #12
	cmp	r3, r8
	beq	.L13769
	mov	r10, #256
	mov	r9, #512
.L13770:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r8, r3
	bne	.L13770
.L13769:
	ldr	r3, [r4, #20]
	add	r8, r4, #20
	cmp	r3, r8
	beq	.L13771
	mov	r10, #256
	mov	r9, #512
.L13772:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r8, r3
	bne	.L13772
.L13771:
	ldr	r3, [r4, #44]
	add	r8, r4, #44
	cmp	r3, r8
	beq	.L13773
	mov	r10, #256
	mov	r9, #512
.L13774:
	ldm	r3, {r1, r2}
	mov	r5, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	ldr	r0, [r5, #-36]!
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	cmp	r8, r3
	bne	.L13774
.L13773:
	ldr	r0, [r4, #68]
	mov	r3, #0
	str	r3, [r4, #8]
	str	r3, [r4, #160]
.L13768:
	ldr	r3, [r0, #128]
	cmp	r3, #0
	beq	.L13775
	ldr	r1, [r4, #160]
	blx	r3
.L13775:
	mov	r0, r7
.L13821:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock
.L13749:
	add	r1, r5, #8
	add	r5, r4, #4
	mov	r0, #0
	str	r5, [sp, #4]
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #68]
	cmp	r3, #0
	moveq	r0, r5
	beq	.L13821
	ldr	r3, [r4, #72]
	movw	r9, #:lower16:kmalloc_caches
	movw	r10, #:lower16:gsmd_read_complete
	ldr	r1, [r4, #156]
	movt	r9, #:upper16:kmalloc_caches
	movt	r10, #:upper16:gsmd_read_complete
	add	r7, r4, #12
	mov	r6, #8
	ldr	r0, [r3]
	mvn	r2, r1
	bl	smd_tiocmset_from_cb
	ldr	r3, [r4, #68]
	ldr	fp, [r3, #84]
.L13780:
	ldr	r3, [fp, #8]
	mov	r1, #32
	mov	r0, fp
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r3, #2048
	mov	r1, #32
	mov	r2, r3
	mov	ip, #16
	beq	.L13823
	str	r3, [r5, #4]
	ldr	r3, [r9, #44]
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L13758
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L13824
.L13758:
	str	r10, [r5, #28]
	ldr	r2, [r4, #12]
	add	r3, r5, #36
	subs	r6, r6, #1
	str	r3, [r2, #4]
	str	r2, [r5, #36]
	str	r7, [r5, #40]
	str	r3, [r4, #12]
	bne	.L13780
.L13759:
	ldr	r3, [r4, #68]
	movw	r9, #:lower16:kmalloc_caches
	movw	r10, #:lower16:gsmd_write_complete
	movt	r9, #:upper16:kmalloc_caches
	movt	r10, #:upper16:gsmd_write_complete
	add	fp, r4, #44
	mov	r6, #8
	ldr	r8, [r3, #80]
.L13781:
	ldr	r2, [r8, #8]
	mov	r1, #32
	mov	r0, r8
	ldr	r2, [r2, #8]
	blx	r2
	subs	r5, r0, #0
	mov	ip, #2048
	mov	r1, #32
	mov	r2, ip
	mov	lr, #16
	beq	.L13825
	str	ip, [r5, #4]
	ldr	ip, [r9, #44]
	subs	r0, ip, #0
	streq	lr, [r5]
	beq	.L13764
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L13826
.L13764:
	str	r10, [r5, #28]
	ldr	r1, [r4, #44]
	add	r2, r5, #36
	subs	r6, r6, #1
	str	r2, [r1, #4]
	str	r1, [r5, #36]
	str	fp, [r5, #40]
	str	r2, [r4, #44]
	bne	.L13781
.L13819:
	ldr	r0, [sp, #4]
	bl	_raw_spin_unlock
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L13747:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	bne	.L13827
.L13752:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	bne	.L13828
.L13745:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13827:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3436]
	bl	queue_work
	b	.L13752
.L13828:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #28
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3436]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L13822:
	mov	r1, r0
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L13823:
	movw	r0, #:lower16:.LC714
	ldr	r1, .L13829
	movt	r0, #:upper16:.LC714
	bl	printk
.L13756:
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L13759
	movw	r0, #:lower16:.LC716
	ldr	r1, .L13829+4
	movt	r0, #:upper16:.LC716
	bl	printk
.L13760:
	ldr	r0, [sp, #4]
	b	.L13821
.L13826:
	movw	r0, #:lower16:.LC715
	ldr	r1, .L13829
	movt	r0, #:upper16:.LC715
	bl	printk
	ldr	r2, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r2, #12]
	blx	r3
.L13762:
	ldr	r3, [r4, #44]
	cmp	fp, r3
	bne	.L13819
	ldr	r3, [r4, #68]
	mov	r1, r7
	ldr	r0, [r3, #84]
	bl	gsmd_free_requests
	movw	r0, #:lower16:.LC717
	ldr	r1, .L13829+4
	movt	r0, #:upper16:.LC717
	bl	printk
	b	.L13760
.L13825:
	movw	r0, #:lower16:.LC714
	ldr	r1, .L13829
	movt	r0, #:upper16:.LC714
	bl	printk
	b	.L13762
.L13824:
	movw	r0, #:lower16:.LC715
	ldr	r1, .L13829
	movt	r0, #:upper16:.LC715
	bl	printk
	ldr	r3, [fp, #8]
	mov	r1, r5
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13756
.L13830:
	.align	2
.L13829:
	.word	.LANCHOR3-2152
	.word	.LANCHOR3-2136
	.fnend
	.size	gsmd_notify, .-gsmd_notify
	.align	2
	.global	gsdio_alloc_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_requests, %function
gsdio_alloc_requests:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r2, #0
	str	r10, [sp, #24]
	ldr	r10, [sp, #32]
	str	lr, [sp, #28]
	ble	.L13832
	mov	r8, r3
	mov	r5, r1
	mov	r7, r0
	mov	r6, #0
.L13837:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	add	r6, r6, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r1, #32
	mov	r0, r8
	beq	.L13841
	str	r8, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	add	r1, r4, #36
	str	r0, [r4]
	beq	.L13842
	str	r10, [r4, #28]
	ldr	r3, [r5]
	cmp	r9, r6
	str	r1, [r3, #4]
	str	r3, [r4, #36]
	str	r5, [r4, #40]
	str	r1, [r5]
	bne	.L13837
.L13832:
	mov	r0, #0
.L13831:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13841:
	movw	r0, #:lower16:.LC714
	ldr	r1, .L13843
	movt	r0, #:upper16:.LC714
	bl	printk
.L13834:
	ldr	r3, [r5]
	cmp	r5, r3
	bne	.L13832
	mvn	r0, #11
	b	.L13831
.L13842:
	movw	r0, #:lower16:.LC715
	ldr	r1, .L13843
	movt	r0, #:upper16:.LC715
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13834
.L13844:
	.align	2
.L13843:
	.word	.LANCHOR3-2168
	.fnend
	.size	gsdio_alloc_requests, .-gsdio_alloc_requests
	.align	2
	.global	gsdio_start_rx
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_rx, %function
gsdio_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L13860
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L13848
	ldr	r2, [r5, #108]
	cmp	r2, #0
	beq	.L13848
	add	r8, r5, #12
	mov	fp, #256
	ldr	r7, [r3, #84]
	mov	r10, #512
	b	.L13850
.L13852:
	ldrd	r2, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r3, #2048
	str	r3, [r4, #-32]
	str	fp, [r4]
	str	r10, [r4, #4]
	ldr	r3, [r5, #44]
	sub	r3, r3, #1
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r7, #8]
	mov	r2, #32
	sub	r1, r4, #36
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r9, #0
	bne	.L13861
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L13848
.L13850:
	ldr	r4, [r5, #12]
	mov	r0, r6
	cmp	r8, r4
	bne	.L13852
.L13848:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L13861:
	movw	r0, #:lower16:.LC16
	ldr	r3, [r5]
	mov	r2, r5
	movt	r0, #:upper16:.LC16
	ldr	r1, .L13862
	bl	printk
	ldr	r3, [r5, #16]
	str	r4, [r5, #16]
	str	r8, [r4]
	str	r3, [r4, #4]
	str	r4, [r3]
	ldr	r3, [r5, #44]
	add	r3, r3, #1
	str	r3, [r5, #44]
	b	.L13848
.L13860:
	ldr	r1, .L13862
	movw	r0, #:lower16:.LC15
	movt	r0, #:upper16:.LC15
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L13863:
	.align	2
.L13862:
	.word	.LANCHOR3-2120
	.fnend
	.size	gsdio_start_rx, .-gsdio_start_rx
	.align	2
	.global	gsdio_rx_push
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_rx_push, %function
gsdio_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #24
	sub	r7, r0, #28
	strd	r8, [sp, #16]
	mov	r0, r6
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L13885
	ldr	r5, [r4, #-8]
	sub	r8, r4, #8
	ldr	r9, [r3, #84]
	cmp	r8, r5
	beq	.L13866
	ldr	r3, [r5, #8]
	cmn	r3, #108
	beq	.L13866
	cmp	r3, #0
	bne	.L13886
.L13868:
	ldr	r3, [r4, #80]
	sub	r10, r5, #36
	cmp	r3, #0
	beq	.L13887
	ldrd	r2, [r5]
	mov	r0, #256
	mov	r1, #512
	cmp	r7, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	strd	r0, [r5]
	ldr	r3, [r4, #20]
	sub	r3, r3, #1
	str	r3, [r4, #20]
	beq	.L13888
	cmp	r10, #0
	beq	.L13889
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L13871
	ldr	r3, [r5, #12]
	cmp	r3, #0
	bne	.L13873
	str	r3, [r4, #-20]
.L13871:
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L13890
	ldr	r3, [r4, #-8]
	str	r5, [r3, #4]
	stm	r5, {r3, r8}
	ldr	r3, [r4, #20]
	str	r5, [r4, #-8]
	add	r3, r3, #1
	str	r3, [r4, #20]
.L13866:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsdio_start_rx
.L13890:
	str	r3, [r4, #-20]
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
.L13885:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L13886:
	movw	r0, #:lower16:.LC131
	mov	r2, r7
	ldr	r1, .L13891
	str	r3, [sp]
	movt	r0, #:upper16:.LC131
	ldr	r3, [r4, #-28]
	bl	printk
	b	.L13868
.L13888:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L13891+4
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L13871
.L13887:
	movw	r0, #:lower16:.LC718
	ldr	r1, .L13891
	movt	r0, #:upper16:.LC718
	bl	printk
	ldm	r5, {r1, r2}
	mov	r3, r4
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r2, [r3, #-16]!
	str	r5, [r2, #4]
	strd	r2, [r5]
	ldrd	r2, [r4, #16]
	str	r5, [r4, #-16]
	add	r2, r2, #1
	sub	r3, r3, #1
	strd	r2, [r4, #16]
	b	.L13866
.L13889:
	movw	r0, #:lower16:.LC719
	ldr	r1, .L13891+4
	ldr	r2, [r4, #-28]
	movt	r0, #:upper16:.LC719
	bl	printk
	b	.L13871
.L13873:
	mov	r0, r7
	bl	gsdio_write.part.74
	b	.L13871
.L13892:
	.align	2
.L13891:
	.word	.LANCHOR3-2104
	.word	.LANCHOR2+3100
	.fnend
	.size	gsdio_rx_push, .-gsdio_rx_push
	.align	2
	.global	gsdio_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write, %function
gsdio_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L13902
	cmp	r1, #0
	beq	.L13903
	ldr	r2, [r3, #108]
	cmp	r2, #0
	beq	.L13895
	ldr	r2, [r1, #48]
	cmp	r2, #0
	bne	.L13897
	str	r2, [r3, #8]
.L13895:
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L13902:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L13904
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L13895
.L13903:
	movw	r0, #:lower16:.LC719
	ldr	r1, .L13904
	ldr	r2, [r3]
	movt	r0, #:upper16:.LC719
	bl	printk
	b	.L13895
.L13897:
	bl	gsdio_write.part.74
	b	.L13895
.L13905:
	.align	2
.L13904:
	.word	.LANCHOR2+3100
	.fnend
	.size	gsdio_write, .-gsdio_write
	.align	2
	.global	gsdio_read_pending
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_pending, %function
gsdio_read_pending:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L13910
	ldr	r3, [r0, #120]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L13906
.L13909:
	b	.L13909
.L13906:
	bx	lr
.L13910:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L13911
	movt	r0, #:upper16:.LC15
	b	printk
.L13912:
	.align	2
.L13911:
	.word	.LANCHOR2+476
	.fnend
	.size	gsdio_read_pending, .-gsdio_read_pending
	.align	2
	.global	gsdio_start_io
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_io, %function
gsdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #4
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r0, r3
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #96]
	str	r0, [sp, #4]
	cmp	r3, #0
	beq	.L13931
	ldr	r9, [r3, #84]
	movw	r7, #:lower16:kmalloc_caches
	movw	r8, #:lower16:gsdio_read_complete
	movt	r7, #:upper16:kmalloc_caches
	movt	r8, #:upper16:gsdio_read_complete
	add	r10, r5, #12
	mov	r6, #8
.L13926:
	ldr	r3, [r9, #8]
	mov	r1, #32
	mov	r0, r9
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r3, #2048
	mov	r1, #32
	mov	r2, r3
	mov	ip, #16
	beq	.L13932
	str	r3, [r4, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	streq	ip, [r4]
	beq	.L13919
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L13933
.L13919:
	str	r8, [r4, #28]
	ldr	r2, [r5, #12]
	add	r3, r4, #36
	subs	r6, r6, #1
	str	r3, [r2, #4]
	str	r2, [r4, #36]
	str	r10, [r4, #40]
	str	r3, [r5, #12]
	bne	.L13926
.L13920:
	ldr	r2, [r5, #96]
	mov	r3, #8
	movw	r7, #:lower16:kmalloc_caches
	movw	r8, #:lower16:gsdio_write_complete
	mov	r6, r3
	str	r3, [r5, #44]
	movt	r7, #:upper16:kmalloc_caches
	movt	r8, #:upper16:gsdio_write_complete
	add	r9, r5, #52
	ldr	fp, [r2, #80]
.L13927:
	ldr	r3, [fp, #8]
	mov	r1, #32
	mov	r0, fp
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r3, #2048
	mov	r1, #32
	mov	r2, r3
	mov	ip, #16
	beq	.L13934
	str	r3, [r4, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	streq	ip, [r4]
	beq	.L13924
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L13935
.L13924:
	str	r8, [r4, #28]
	ldr	r2, [r5, #52]
	add	r3, r4, #36
	subs	r6, r6, #1
	str	r3, [r2, #4]
	str	r2, [r4, #36]
	str	r9, [r4, #40]
	str	r3, [r5, #52]
	bne	.L13927
.L13925:
	mov	r3, #8
	ldrd	r0, [sp]
	str	r3, [r5, #76]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	gsdio_start_rx
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r5, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3432]
	bl	queue_work
	mov	r0, #0
.L13913:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13931:
	mov	r1, r0
	ldr	r0, [sp]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L13913
.L13935:
	movw	r0, #:lower16:.LC715
	ldr	r1, .L13936
	movt	r0, #:upper16:.LC715
	bl	printk
	ldr	r2, [fp, #8]
	mov	r1, r4
	mov	r0, fp
	ldr	r3, [r2, #12]
	blx	r3
.L13922:
	ldr	r3, [r5, #52]
	cmp	r9, r3
	bne	.L13925
	ldr	r3, [r5, #96]
	mov	r1, r10
	ldr	r0, [r3, #84]
	bl	gsdio_free_requests
	mov	r3, #0
	ldrd	r0, [sp]
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC721
	ldr	r1, .L13936+4
	movt	r0, #:upper16:.LC721
	bl	printk
	mvn	r0, #11
	b	.L13913
.L13934:
	movw	r0, #:lower16:.LC714
	ldr	r1, .L13936
	movt	r0, #:upper16:.LC714
	bl	printk
	b	.L13922
.L13933:
	movw	r0, #:lower16:.LC715
	ldr	r1, .L13936
	movt	r0, #:upper16:.LC715
	bl	printk
	ldr	r3, [r9, #8]
	mov	r1, r4
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
.L13917:
	ldr	r3, [r5, #12]
	cmp	r10, r3
	bne	.L13920
	ldrd	r0, [sp]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC720
	ldr	r1, .L13936+4
	movt	r0, #:upper16:.LC720
	bl	printk
	mvn	r0, #11
	b	.L13913
.L13932:
	movw	r0, #:lower16:.LC714
	ldr	r1, .L13936
	movt	r0, #:upper16:.LC714
	bl	printk
	b	.L13917
.L13937:
	.align	2
.L13936:
	.word	.LANCHOR3-2168
	.word	.LANCHOR3-2088
	.fnend
	.size	gsdio_start_io, .-gsdio_start_io
	.align	2
	.global	gsdio_port_free
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_free, %function
gsdio_port_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r0
	mov	r3, #108
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	mul	r3, r3, r2
	movt	r0, #:upper16:.LANCHOR1
	add	r1, r0, r3
	ldr	r4, [r1, #28]
	cmp	r4, #0
	beq	.L13941
	add	r0, r1, #32
	bl	platform_driver_unregister
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L13941:
	movw	r0, #:lower16:.LC94
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC94
	add	sp, sp, #8
	ldr	r1, .L13942
	b	printk
.L13943:
	.align	2
.L13942:
	.word	.LANCHOR3-2072
	.fnend
	.size	gsdio_port_free, .-gsdio_port_free
	.align	2
	.global	gsdio_ctrl_modem_status
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_modem_status, %function
gsdio_ctrl_modem_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ands	r3, r0, #128
	moveq	r2, #1
	streq	r3, [r1, #172]
	beq	.L13946
	mov	ip, #8
	mov	r2, #9
	mov	r3, ip
	str	ip, [r1, #172]
.L13946:
	tst	r0, #64
	movne	r3, r2
	strne	r2, [r1, #172]
	tst	r0, #256
	ldr	r0, [r1, #96]
	orrne	r3, r3, #2
	strne	r3, [r1, #172]
	cmp	r0, #0
	beq	.L13944
	ldr	r2, [r0, #128]
	cmp	r2, #0
	beq	.L13944
	mov	r1, r3
	bx	r2
.L13944:
	bx	lr
	.fnend
	.size	gsdio_ctrl_modem_status, .-gsdio_ctrl_modem_status
	.align	2
	.global	gsdio_ch_notify
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_notify, %function
gsdio_ch_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #2
	beq	.L13965
	cmp	r1, #1
	beq	.L13966
	bx	lr
.L13966:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r0, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3432]
	b	queue_work
.L13965:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r0, #28
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3432]
	b	queue_work
	.fnend
	.size	gsdio_ch_notify, .-gsdio_ch_notify
	.align	2
	.global	gsdio_port_alloc
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_alloc, %function
gsdio_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r6, r2
	mov	r8, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13970
	mov	r2, #188
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13972
.L13968:
	mov	r5, #0
	str	r7, [r4]
	add	lr, r4, #20
	movw	r0, #:lower16:gsdio_rx_push
	movw	r1, #:lower16:gsdio_tx_pull
	str	r5, [r4, #4]
	ldr	r3, [r8]	@ unaligned
	movt	r0, #:upper16:gsdio_rx_push
	movw	r2, #:lower16:gsdio_ctrl_wq
	movw	ip, #:lower16:gsdio_open_work
	movt	ip, #:upper16:gsdio_open_work
	movt	r1, #:upper16:gsdio_tx_pull
	movt	r2, #:upper16:gsdio_ctrl_wq
	str	r3, [r4, #100]
	ldrh	r3, [r8, #4]	@ unaligned
	strh	r3, [r4, #104]	@ movhi
	ldrb	r10, [r8, #6]	@ zero_extendqisi2
	mov	r3, #2560
	str	lr, [r4, #20]
	add	r8, r4, #12
	str	lr, [r4, #24]
	add	lr, r4, #32
	str	r0, [r4, #40]
	add	r0, r4, #64
	str	r8, [r4, #12]
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	add	lr, r4, #52
	str	r8, [r4, #16]
	str	r0, [r4, #64]
	str	lr, [r4, #52]
	str	lr, [r4, #56]
	add	lr, r4, #84
	str	r0, [r4, #68]
	add	r0, r4, #128
	str	r3, [r4, #28]
	str	r3, [r4, #60]
	str	r1, [r4, #72]
	mov	r1, r5
	str	r3, [r4, #80]
	str	lr, [r4, #84]
	str	lr, [r4, #88]
	str	r2, [r4, #92]
	mov	r2, r5
	strb	r10, [r4, #106]
	str	r3, [r4, #124]
	str	r0, [r4, #128]
	str	r0, [r4, #132]
	add	r0, r4, #140
	str	ip, [r4, #136]
	bl	init_timer_key
	mov	r2, #108
	movw	r3, #:lower16:delayed_work_timer_fn
	movt	r3, #:upper16:delayed_work_timer_fn
	movw	r0, #:lower16:.LANCHOR1
	mul	r2, r2, r7
	movt	r0, #:upper16:.LANCHOR1
	movw	ip, #:lower16:gsdio_ch_probe
	movw	r1, #:lower16:gsdio_ch_remove
	str	r3, [r4, #156]
	movt	ip, #:upper16:gsdio_ch_probe
	movt	r1, #:upper16:gsdio_ch_remove
	add	lr, r4, #124
	add	r3, r0, r2
	str	lr, [r4, #160]
	add	r0, r3, #32
	str	r4, [r3, #28]
	str	r6, [r4, #120]
	str	ip, [r3, #32]
	str	r1, [r3, #36]
	ldr	r2, [r6]
	str	r2, [r3, #52]
	str	r5, [r3, #60]
	bl	platform_driver_register
	mov	r0, r5
.L13967:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13970:
	mov	r4, #16
	b	.L13968
.L13972:
	movw	r0, #:lower16:.LC722
	ldr	r1, .L13973
	movt	r0, #:upper16:.LC722
	bl	printk
	mvn	r0, #11
	b	.L13967
.L13974:
	.align	2
.L13973:
	.word	.LANCHOR3-2056
	.fnend
	.size	gsdio_port_alloc, .-gsdio_port_alloc
	.align	2
	.global	gsdio_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_connect, %function
gsdio_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L13987
	cmp	r0, #0
	mov	r4, r0
	beq	.L13988
	mov	r2, #108
	mla	r1, r2, r1, r3
	ldr	r5, [r1, #28]
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsdio_ctrl_notify_modem
	mov	r1, r0
	str	r4, [r5, #96]
	movt	r3, #:upper16:gsdio_ctrl_notify_modem
	mov	r0, r6
	str	r3, [r4, #132]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L13989
	ldr	r3, [r4, #80]
	str	r5, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L13990
	ldr	r3, [r4, #84]
	str	r5, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	bne	.L13991
.L13975:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13991:
	mov	r0, r5
	bl	gsdio_start_io
	ldr	r3, [r4, #128]
	cmp	r3, #0
	beq	.L13975
	mov	r0, r4
	ldr	r1, [r5, #172]
	blx	r3
	b	.L13975
.L13990:
	movw	r0, #:lower16:.LC723
	mov	r2, r6
	ldr	r1, .L13992
	movt	r0, #:upper16:.LC723
	bl	printk
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	str	r3, [r5, #96]
	ldr	r2, [r4, #80]
	str	r3, [r2]
	b	.L13975
.L13989:
	movw	r0, #:lower16:.LC723
	mov	r2, r6
	ldr	r1, .L13992
	movt	r0, #:upper16:.LC723
	bl	printk
	mov	r3, #0
	str	r3, [r5, #96]
	b	.L13975
.L13988:
	movw	r0, #:lower16:.LC95
	ldr	r1, .L13992
	mvn	r6, #21
	movt	r0, #:upper16:.LC95
	bl	printk
	b	.L13975
.L13987:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldr	r1, .L13992
	movt	r0, #:upper16:.LC94
	mvn	r6, #21
	bl	printk
	b	.L13975
.L13993:
	.align	2
.L13992:
	.word	.LANCHOR3-2036
	.fnend
	.size	gsdio_connect, .-gsdio_connect
	.align	2
	.global	gsdio_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_disconnect, %function
gsdio_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L14008
	cmp	r0, #0
	beq	.L14009
	mov	r2, #108
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, #0
	strd	r6, [sp, #8]
	mov	r6, r0
	mla	r1, r2, r1, r3
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r3, #3432]
	ldr	r4, [r1, #28]
	add	r1, r4, #80
	add	r9, r4, #4
	str	r5, [r4, #176]
	bl	queue_work
	mov	r0, r9
	add	r7, r4, #12
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #96]
	mov	r0, r9
	str	r5, [r4, #180]
	str	r5, [r4, #184]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #84]
	str	r5, [r3]
	ldr	r0, [r6, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #80]
	mov	r0, r9
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	str	r0, [sp, #4]
	ldr	r5, [r6, #84]
	cmp	r7, r3
	beq	.L13997
	mov	fp, #256
	mov	r8, #512
.L13998:
	ldm	r3, {r0, r2}
	mov	r10, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	fp, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L13998
	ldr	r5, [r6, #84]
.L13997:
	ldr	r3, [r4, #20]
	add	r7, r4, #20
	cmp	r7, r3
	beq	.L13999
	mov	fp, #256
	mov	r8, #512
.L14000:
	ldm	r3, {r0, r2}
	mov	r10, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	fp, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r7, r3
	bne	.L14000
.L13999:
	ldr	r3, [r4, #52]
	add	r7, r4, #52
	ldr	r5, [r6, #80]
	cmp	r7, r3
	beq	.L14001
	mov	r8, #256
	mov	r6, #512
.L14002:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r6, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #52]
	cmp	r7, r3
	bne	.L14002
.L14001:
	ldr	r1, [sp, #4]
	mov	r3, #0
	mov	r0, r9
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L14008:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldr	r1, .L14010
	movt	r0, #:upper16:.LC94
	b	printk
.L14009:
	movw	r0, #:lower16:.LC95
	ldr	r1, .L14010
	movt	r0, #:upper16:.LC95
	b	printk
.L14011:
	.align	2
.L14010:
	.word	.LANCHOR3-2020
	.fnend
	.size	gsdio_disconnect, .-gsdio_disconnect
	.align	2
	.global	gsdio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_setup, %function
gsdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r3, #1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	str	r1, [sp, #12]
	bhi	.L14028
	mov	r7, #0
	movw	r0, #:lower16:.LC705
	mov	r3, r7
	movt	r0, #:upper16:.LC705
	mov	r2, #1
	mov	r1, #10
	str	r7, [sp]
	bl	__alloc_workqueue_key
	movw	r9, #:lower16:.LANCHOR1
	cmp	r0, r7
	movt	r9, #:upper16:.LANCHOR1
	str	r0, [r9, #3432]
	beq	.L14029
	movw	r3, #:lower16:gsdio_rx_push
	movw	r2, #:lower16:gsdio_tx_pull
	ldr	r8, .L14034
	movt	r3, #:upper16:gsdio_rx_push
	movt	r2, #:upper16:gsdio_tx_pull
	movw	fp, #:lower16:kmalloc_caches
	movw	r10, #:lower16:.LC726
	movt	fp, #:upper16:kmalloc_caches
	movt	r10, #:upper16:.LC726
	str	r3, [sp, #16]
	add	r5, r9, #4
	str	r2, [sp, #20]
	b	.L14019
.L14032:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14030
.L14016:
	ldr	r3, [sp, #16]
	movw	r0, #:lower16:gsdio_ctrl_wq
	movw	ip, #:lower16:gsdio_open_work
	ldr	r2, [sp, #20]
	movt	r0, #:upper16:gsdio_ctrl_wq
	movt	ip, #:upper16:gsdio_open_work
	mov	lr, #9600
	mov	r1, #8
	str	r7, [r4]
	str	r6, [r4, #4]
	add	r7, r7, #1
	str	r3, [r4, #40]
	add	r3, r4, #12
	str	r0, [r4, #92]
	add	r0, r4, #128
	str	r2, [r4, #72]
	add	r2, r4, #20
	str	r3, [r4, #12]
	str	r3, [r4, #16]
	mov	r3, #2560
	str	r2, [r4, #20]
	str	r2, [r4, #24]
	add	r2, r4, #32
	str	r3, [r4, #28]
	str	r2, [r4, #32]
	str	r2, [r4, #36]
	add	r2, r4, #52
	str	r2, [r4, #52]
	str	r2, [r4, #56]
	add	r2, r4, #64
	str	r3, [r4, #60]
	str	r2, [r4, #64]
	str	r2, [r4, #68]
	add	r2, r4, #84
	str	r3, [r4, #80]
	str	r2, [r4, #84]
	str	r2, [r4, #88]
	mov	r2, r6
	str	lr, [r4, #100]
	strh	r1, [r4, #104]	@ movhi
	mov	r1, r6
	strb	r6, [r4, #106]
	str	r3, [r4, #124]
	str	r0, [r4, #128]
	str	r0, [r4, #132]
	add	r0, r4, #140
	str	ip, [r4, #136]
	bl	init_timer_key
	movw	r1, #:lower16:delayed_work_timer_fn
	add	r3, r4, #124
	movt	r1, #:upper16:delayed_work_timer_fn
	movw	r2, #:lower16:gsdio_ch_probe
	movt	r2, #:upper16:gsdio_ch_probe
	add	r0, r5, #28
	str	r1, [r4, #156]
	add	r5, r5, #108
	str	r3, [r4, #160]
	movw	r3, #:lower16:gsdio_ch_remove
	str	r4, [r5, #-84]
	movt	r3, #:upper16:gsdio_ch_remove
	str	r8, [r4, #120]
	ldr	r1, [r8], #12
	str	r2, [r5, #-80]
	str	r3, [r5, #-76]
	str	r1, [r5, #-60]
	str	r6, [r5, #-52]
	bl	platform_driver_register
	ldr	r2, [sp, #12]
	ldr	r3, [r9]
	cmp	r7, r2
	add	r3, r3, #1
	str	r3, [r9]
	beq	.L14031
.L14019:
	ldr	r3, .L14034+4
	mov	r1, r10
	mov	r0, r5
	mov	r6, #0
	sub	r2, r3, #8
	bl	__mutex_init
	ldr	r3, [fp, #8]
	mov	r2, #188
	movw	r1, #32976
	cmp	r3, r6
	mov	r0, r3
	bne	.L14032
	mov	r4, #16
	b	.L14016
.L14031:
	movw	r0, #:lower16:.LC728
	mov	r1, r6
	movt	r0, #:upper16:.LC728
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L14025
	ldr	ip, .L14034+8
	movw	r0, #:lower16:.LC154
	mov	r3, r6
	movt	r0, #:upper16:.LC154
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	mov	r0, r6
.L14012:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14025:
	mov	r0, r6
	b	.L14012
.L14030:
	movw	r0, #:lower16:.LC722
	ldr	r1, .L14034+12
	movt	r0, #:upper16:.LC722
	bl	printk
	movw	r0, #:lower16:.LC727
	ldr	r1, .L14034+16
	movt	r0, #:upper16:.LC727
	bl	printk
	ldr	r3, [r9]
	cmp	r3, r6
	beq	.L14018
	ldr	r4, [r9, #28]
	cmp	r4, #0
	beq	.L14020
	ldr	r0, .L14034+20
	bl	platform_driver_unregister
	mov	r0, r4
	bl	kfree
.L14021:
	ldr	r3, [r9]
	cmp	r3, #1
	bls	.L14018
	ldr	r4, [r9, #136]
	cmp	r4, #0
	beq	.L14033
	ldr	r0, .L14034+24
	bl	platform_driver_unregister
	mov	r0, r4
	bl	kfree
.L14018:
	ldr	r0, [r9, #3432]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L14012
.L14029:
	movw	r0, #:lower16:.LC725
	ldr	r1, .L14034+16
	movt	r0, #:upper16:.LC725
	bl	printk
	mvn	r0, #11
	b	.L14012
.L14028:
	movw	r0, #:lower16:.LC724
	mov	r2, r1
	ldr	r1, .L14034+16
	movt	r0, #:upper16:.LC724
	mov	r3, #2
	bl	printk
	mvn	r0, #21
	b	.L14012
.L14033:
	movw	r0, #:lower16:.LC94
	mov	r2, #1
	ldr	r1, .L14034+28
	movt	r0, #:upper16:.LC94
	bl	printk
	b	.L14018
.L14020:
	movw	r0, #:lower16:.LC94
	mov	r2, r4
	ldr	r1, .L14034+28
	movt	r0, #:upper16:.LC94
	bl	printk
	b	.L14021
.L14035:
	.align	2
.L14034:
	.word	.LANCHOR5-1016
	.word	.LANCHOR4-3968
	.word	.LANCHOR3-1988
	.word	.LANCHOR3-2056
	.word	.LANCHOR3-2000
	.word	.LANCHOR1+32
	.word	.LANCHOR1+140
	.word	.LANCHOR3-2072
	.fnend
	.size	gsdio_setup, .-gsdio_setup
	.align	2
	.global	gsmd_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect, %function
gsmd_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	ldr	r3, [r6, #220]
	str	lr, [sp, #20]
	cmp	r1, r3
	bcs	.L14043
	cmp	r0, #0
	mov	r4, r0
	beq	.L14044
	mov	r2, #108
	mov	r8, #0
	mla	r1, r2, r1, r6
	ldr	r5, [r1, #248]
	add	r7, r5, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsmd_notify_modem
	mov	r1, r0
	str	r4, [r5, #68]
	movt	r3, #:upper16:gsmd_notify_modem
	mov	r0, r7
	str	r3, [r4, #132]
	str	r8, [r5, #164]
	str	r8, [r5, #168]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	bne	.L14045
	ldr	r3, [r4, #80]
	str	r5, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	bne	.L14046
	ldr	r3, [r4, #84]
	add	r1, r5, #76
	mov	r2, r7
	ldr	r0, [r6, #3436]
	str	r5, [r3]
	bl	queue_delayed_work
.L14036:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14043:
	movw	r0, #:lower16:.LC729
	mov	r2, r1
	ldr	r1, .L14047
	movt	r0, #:upper16:.LC729
	mvn	r7, #21
	bl	printk
	b	.L14036
.L14046:
	movw	r0, #:lower16:.LC493
	ldr	r1, .L14047
	movt	r0, #:upper16:.LC493
	ldr	r2, [r4, #84]
	bl	printk
	str	r8, [r5, #68]
	ldr	r3, [r4, #80]
	str	r8, [r3]
	b	.L14036
.L14045:
	movw	r0, #:lower16:.LC492
	ldr	r1, .L14047
	movt	r0, #:upper16:.LC492
	ldr	r2, [r4, #80]
	bl	printk
	str	r8, [r5, #68]
	b	.L14036
.L14044:
	movw	r0, #:lower16:.LC95
	ldr	r1, .L14047
	mvn	r7, #21
	movt	r0, #:upper16:.LC95
	bl	printk
	b	.L14036
.L14048:
	.align	2
.L14047:
	.word	.LANCHOR3-1884
	.fnend
	.size	gsmd_connect, .-gsmd_connect
	.align	2
	.global	gsmd_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect, %function
gsmd_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r3, [r9, #220]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r1, r3
	bcs	.L14067
	cmp	r0, #0
	beq	.L14068
	mov	r3, #108
	mov	r6, r0
	mov	r5, #0
	mla	r1, r3, r1, r9
	ldr	r4, [r1, #248]
	add	r8, r4, #4
	add	r7, r4, #12
	mov	r0, r8
	str	r8, [sp, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #68]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #84]
	str	r5, [r3]
	ldr	r0, [r6, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #80]
	mov	r0, r8
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	str	r0, [sp]
	ldr	r5, [r6, #84]
	cmp	r7, r3
	beq	.L14052
	mov	fp, #256
	mov	r8, #512
.L14053:
	ldm	r3, {r0, r2}
	mov	r10, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	fp, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L14053
	ldr	r5, [r6, #84]
.L14052:
	ldr	r3, [r4, #20]
	add	r7, r4, #20
	cmp	r7, r3
	beq	.L14054
	mov	fp, #256
	mov	r8, #512
.L14055:
	ldm	r3, {r0, r2}
	mov	r10, r3
	str	r2, [r0, #4]
	str	r0, [r2]
	str	fp, [r3]
	str	r8, [r3, #4]
	ldr	r0, [r10, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #20]
	cmp	r7, r3
	bne	.L14055
.L14054:
	ldr	r3, [r4, #44]
	add	r7, r4, #44
	ldr	r5, [r6, #80]
	cmp	r7, r3
	beq	.L14056
	mov	r8, #256
	mov	r6, #512
.L14057:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r6, [r3, #4]
	ldr	r0, [fp, #-36]!
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	cmp	r7, r3
	bne	.L14057
.L14056:
	mov	r5, #0
	ldr	r1, [sp]
	ldr	r0, [sp, #4]
	str	r5, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #72]
	mov	r0, r5
	add	r1, r1, #8
	bl	_test_and_clear_bit
	cmp	r0, r5
	bne	.L14069
.L14058:
	ldr	r3, [r4, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L14049
	ldr	r0, [r9, #3436]
	add	r1, r4, #124
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L14049:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14069:
	ldr	r3, [r4, #72]
	str	r5, [r4, #156]
	mov	r1, r5
	mvn	r2, #0
	ldr	r0, [r3]
	bl	smd_tiocmset
	b	.L14058
.L14068:
	ldr	r1, .L14070
	movw	r0, #:lower16:.LC95
	movt	r0, #:upper16:.LC95
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14067:
	mov	r2, r1
	ldr	r1, .L14070
	movw	r0, #:lower16:.LC94
	movt	r0, #:upper16:.LC94
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14071:
	.align	2
.L14070:
	.word	.LANCHOR3-1868
	.fnend
	.size	gsmd_disconnect, .-gsmd_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_set_alt, %function
acm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #136]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L14105
	ldrb	r3, [r0, #137]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L14077
	ldr	r2, [r0, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14078
	ldr	r3, [r0, #140]
	sub	ip, r3, #1
	cmp	ip, #9
	bhi	.L14093
	ldrb	lr, [r0, #138]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR1
	movw	r2, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, ip, lsl #2
	cmp	r3, #2
	add	lr, lr, lr, lsl #1
	ldr	r2, [r2, #676]
	add	r1, r1, lr, lsl #2
	ldr	r1, [r1, #2288]
	beq	.L14080
	cmp	r3, #3
	beq	.L14081
	cmp	r3, #1
	bne	.L14079
	bl	gserial_disconnect
	ldr	r2, [r4, #80]
.L14078:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14083
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L14083
.L14084:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14088
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L14088
	ldr	r3, [r4, #140]
	sub	ip, r3, #1
	cmp	ip, #9
	bls	.L14106
	movw	r2, #:lower16:.LC102
	movt	r2, #:upper16:.LC102
.L14089:
	movw	r0, #:lower16:.LC375
	ldr	r1, .L14107
	movt	r0, #:upper16:.LC375
	bl	printk
.L14072:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14106:
	ldrb	r0, [r4, #138]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR1
	movw	r2, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, ip, lsl #2
	cmp	r3, #2
	add	r0, r0, r0, lsl #1
	ldr	r2, [r2, #676]
	add	r1, r1, r0, lsl #2
	ldr	r1, [r1, #2288]
	beq	.L14090
	cmp	r3, #3
	beq	.L14091
	cmp	r3, #1
	bne	.L14089
	uxtb	r1, r1
	mov	r0, r4
	bl	gserial_connect
	b	.L14072
.L14083:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14088
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14088
	ldr	r2, [r4, #80]
	b	.L14084
.L14105:
	ldr	r2, [r0, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14074
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
.L14074:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L14077
	ldr	r3, [r4, #152]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #152]
	str	r4, [r3]
	b	.L14072
.L14093:
	movw	r2, #:lower16:.LC102
	movt	r2, #:upper16:.LC102
.L14079:
	movw	r0, #:lower16:.LC730
	ldr	r1, .L14107+4
	movt	r0, #:upper16:.LC730
	bl	printk
	ldr	r2, [r4, #80]
	b	.L14078
.L14090:
	uxtb	r1, r1
	mov	r0, r4
	bl	gsdio_connect
	b	.L14072
.L14091:
	uxtb	r1, r1
	mov	r0, r4
	bl	gsmd_connect
	b	.L14072
.L14081:
	uxtb	r1, r1
	bl	gsmd_disconnect
	ldr	r2, [r4, #80]
	b	.L14078
.L14080:
	uxtb	r1, r1
	bl	gsdio_disconnect
	ldr	r2, [r4, #80]
	b	.L14078
.L14088:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L14072
.L14077:
	mvn	r5, #21
	b	.L14072
.L14108:
	.align	2
.L14107:
	.word	.LANCHOR3-1832
	.word	.LANCHOR3-1852
	.fnend
	.size	acm_set_alt, .-acm_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disable, %function
acm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #140]
	sub	ip, r3, #1
	cmp	ip, #9
	bhi	.L14115
	ldrb	lr, [r0, #138]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR1
	movw	r2, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, ip, lsl #2
	cmp	r3, #2
	add	lr, lr, lr, lsl #1
	ldr	r2, [r2, #676]
	add	r1, r1, lr, lsl #2
	ldr	r1, [r1, #2288]
	beq	.L14111
	cmp	r3, #3
	beq	.L14112
	cmp	r3, #1
	bne	.L14110
	bl	gserial_disconnect
	b	.L14114
.L14115:
	movw	r2, #:lower16:.LC102
	movt	r2, #:upper16:.LC102
.L14110:
	movw	r0, #:lower16:.LC730
	ldr	r1, .L14117
	movt	r0, #:upper16:.LC730
	bl	printk
.L14114:
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #152]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14112:
	uxtb	r1, r1
	bl	gsmd_disconnect
	b	.L14114
.L14111:
	uxtb	r1, r1
	bl	gsdio_disconnect
	b	.L14114
.L14118:
	.align	2
.L14117:
	.word	.LANCHOR3-1852
	.fnend
	.size	acm_disable, .-acm_disable
	.align	2
	.global	gsmd_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_setup, %function
gsmd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	str	r1, [sp, #8]
	bhi	.L14133
	mov	r8, #0
	movw	r0, #:lower16:.LC732
	mov	r3, r8
	movt	r0, #:upper16:.LC732
	mov	r2, #1
	mov	r1, #10
	str	r8, [sp]
	bl	__alloc_workqueue_key
	movw	r10, #:lower16:.LANCHOR1
	cmp	r0, r8
	movt	r10, #:upper16:.LANCHOR1
	str	r0, [r10, #3436]
	beq	.L14134
	movw	r3, #:lower16:.LC734
	movw	r2, #:lower16:gsmd_rx_push
	ldr	r9, .L14140
	movw	r1, #:lower16:gsmd_tx_pull
	movt	r3, #:upper16:.LC734
	movt	r2, #:upper16:gsmd_rx_push
	movt	r1, #:upper16:gsmd_tx_pull
	movw	fp, #:lower16:kmalloc_caches
	add	r5, r10, #224
	str	r3, [sp, #12]
	movt	fp, #:upper16:kmalloc_caches
	str	r2, [sp, #16]
	str	r1, [sp, #20]
	b	.L14126
.L14137:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14135
.L14123:
	add	ip, r4, #32
	add	r0, r4, #12
	str	r8, [r4]
	movw	r3, #:lower16:gsmd_connect_work
	add	lr, r4, #20
	str	r6, [r4, #4]
	movt	r3, #:upper16:gsmd_connect_work
	add	r2, r4, #44
	str	r0, [r4, #12]
	str	ip, [r4, #32]
	add	r1, r4, #56
	add	r8, r8, #1
	str	ip, [r4, #36]
	ldr	ip, [sp, #16]
	str	r0, [r4, #16]
	add	r0, r4, #80
	str	lr, [r4, #20]
	str	lr, [r4, #24]
	str	r7, [r4, #28]
	str	ip, [r4, #40]
	ldr	ip, [sp, #20]
	str	r2, [r4, #44]
	str	r2, [r4, #48]
	mov	r2, r6
	str	r7, [r4, #52]
	str	r1, [r4, #56]
	str	r1, [r4, #60]
	mov	r1, r6
	str	ip, [r4, #64]
	str	r9, [r4, #72]
	add	r9, r9, #12
	str	r7, [r4, #76]
	str	r0, [r4, #80]
	str	r0, [r4, #84]
	add	r0, r4, #92
	str	r3, [r4, #88]
	bl	init_timer_key
	movw	r1, #:lower16:delayed_work_timer_fn
	movw	r0, #:lower16:gsmd_disconnect_work
	str	r7, [r4, #124]
	movt	r1, #:upper16:delayed_work_timer_fn
	movw	r2, #:lower16:gsmd_ch_probe
	movw	r3, #:lower16:gsmd_ch_remove
	movt	r0, #:upper16:gsmd_disconnect_work
	str	r1, [r4, #108]
	movt	r2, #:upper16:gsmd_ch_probe
	add	r1, r4, #128
	movt	r3, #:upper16:gsmd_ch_remove
	add	ip, r4, #76
	str	ip, [r4, #112]
	str	r1, [r4, #128]
	str	r1, [r4, #132]
	str	r0, [r4, #136]
	add	r0, r5, #28
	add	r5, r5, #108
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #4]
	str	r3, [r5, #-60]
	str	r6, [r5, #-52]
	bl	platform_driver_register
	ldr	r3, [sp, #8]
	cmp	r8, r3
	beq	.L14136
.L14126:
	ldr	r3, .L14140+4
	mov	r0, r5
	mov	r6, #0
	ldr	r1, [sp, #12]
	mov	r7, #2560
	sub	r2, r3, #8
	bl	__mutex_init
	ldr	r3, [r10, #220]
	mov	r2, #172
	movw	r1, #32976
	ldr	ip, [fp, #8]
	add	r3, r3, #1
	cmp	ip, r6
	mov	r0, ip
	str	r3, [r10, #220]
	bne	.L14137
	mov	r4, #16
	b	.L14123
.L14136:
	movw	r0, #:lower16:.LC735
	mov	r1, r6
	movt	r0, #:upper16:.LC735
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L14130
	ldr	ip, .L14140+8
	movw	r0, #:lower16:.LC154
	mov	r3, r6
	movt	r0, #:upper16:.LC154
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	mov	r0, r6
.L14119:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14130:
	mov	r0, r6
	b	.L14119
.L14135:
	ldr	r3, [r10, #220]
	movw	r0, #:lower16:.LC554
	mov	r2, r8
	movt	r0, #:upper16:.LC554
	ldr	r1, .L14140+12
	sub	r3, r3, #1
	str	r3, [r10, #220]
	bl	printk
	ldr	r3, [r10, #220]
	cmp	r3, r6
	beq	.L14125
	ldr	r0, [r10, #248]
	cmp	r0, #0
	beq	.L14138
.L14127:
	cmp	r3, #1
	bls	.L14125
	ldr	r0, [r10, #356]
	cmp	r0, #0
	beq	.L14139
.L14125:
	ldr	r0, [r10, #3436]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L14119
.L14138:
	bl	kfree
	ldr	r3, [r10, #220]
	b	.L14127
.L14139:
	bl	kfree
	b	.L14125
.L14134:
	movw	r0, #:lower16:.LC733
	ldr	r1, .L14140+12
	movt	r0, #:upper16:.LC733
	bl	printk
	mvn	r0, #11
	b	.L14119
.L14133:
	mov	r3, r0
	movw	r0, #:lower16:.LC731
	ldr	r1, .L14140+12
	movt	r0, #:upper16:.LC731
	ldr	r2, [sp, #8]
	bl	printk
	mvn	r0, #21
	b	.L14119
.L14141:
	.align	2
.L14140:
	.word	.LANCHOR5-992
	.word	.LANCHOR4-3968
	.word	.LANCHOR3-1800
	.word	.LANCHOR3-1812
	.fnend
	.size	gsmd_setup, .-gsmd_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_bind_config, %function
acm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:__stack_chk_guard
	mov	r5, r1
	movt	r3, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR4
	movt	r9, #:upper16:.LANCHOR4
	strd	r10, [sp, #24]
	ldr	fp, [r9, #-3976]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r2, [r3]
	str	r3, [sp, #4]
	cmp	fp, #0
	str	r2, [sp, #44]
	mvnne	fp, #0
	beq	.L14199
.L14143:
	ldr	r2, [r9, #-3972]
	cmp	r2, #0
	ble	.L14142
	movw	r3, #:lower16:.LANCHOR1
	movw	r6, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR1
	movw	r10, #:lower16:kmalloc_caches
	movw	fp, #:lower16:acm_connect
	movt	r6, #:upper16:.LANCHOR5
	movt	r10, #:upper16:kmalloc_caches
	movt	fp, #:upper16:acm_connect
	str	r3, [sp]
	mov	r7, #0
	b	.L14162
.L14173:
	ldr	r2, [r9, #-3972]
	add	r7, r7, #1
	cmp	r2, r7
	ble	.L14200
.L14162:
	ldrb	r2, [r6, #-968]	@ zero_extendqisi2
	uxtb	r8, r7
	cmp	r2, #0
	bne	.L14163
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L14166
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r2, [r6, #-2328]
	strb	r2, [r6, #-968]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L14166
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r2, [r6, #-2308]
	strb	r2, [r6, #-960]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L14166
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r6, #-2337]
	strb	r2, [r6, #-952]
.L14163:
	ldr	r0, [r10, #8]
	cmp	r0, #0
	beq	.L14177
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14201
.L14167:
	ldr	r3, [sp]
	add	r2, r8, r8, lsl #1
	movw	r1, #:lower16:acm_send_break
	movt	r1, #:upper16:acm_send_break
	str	fp, [r4, #108]
	movw	lr, #:lower16:acm_disconnect
	movw	r0, #:lower16:acm_send_modem_ctrl_bits
	movt	lr, #:upper16:acm_disconnect
	movt	r0, #:upper16:acm_send_modem_ctrl_bits
	add	r2, r3, r2, lsl #2
	strb	r8, [r4, #138]
	ldr	ip, [r2, #2280]
	add	r2, r8, #1
	mov	r8, #0
	str	lr, [r4, #112]
	str	r1, [r4, #116]
	movw	r1, #:lower16:.LC739
	str	r0, [r4, #128]
	movt	r1, #:upper16:.LC739
	mov	r0, #208
	str	ip, [r4, #140]
	str	r8, [r4, #148]
	bl	kasprintf
	cmp	r0, r8
	str	r0, [r4]
	beq	.L14202
	movw	ip, #:lower16:acm_bind
	ldr	lr, .L14205
	movw	r2, #:lower16:acm_unbind
	movt	ip, #:upper16:acm_bind
	movw	r1, #:lower16:acm_set_alt
	movw	r0, #:lower16:acm_setup
	movt	r2, #:upper16:acm_unbind
	movt	r1, #:upper16:acm_set_alt
	movt	r0, #:upper16:acm_setup
	str	ip, [r4, #24]
	movw	ip, #:lower16:acm_disable
	movt	ip, #:upper16:acm_disable
	str	lr, [r4, #4]
	str	r5, [r4, #20]
	str	r2, [r4, #28]
	add	r2, r4, #64
	str	r1, [r4, #32]
	add	r1, r5, #36
	str	ip, [r4, #40]
	str	r0, [r4, #44]
	ldr	r0, [r5, #40]
	str	r2, [r5, #40]
	str	r1, [r4, #64]
	str	r0, [r4, #68]
	str	r2, [r0]
	ldr	r2, [r4, #24]
	cmp	r2, #0
	beq	.L14179
	mov	r1, r4
	mov	r0, r5
	blx	r2
	cmp	r0, #0
	bge	.L14169
	ldr	r1, [r4, #64]
	mov	lr, #256
	mov	ip, #512
	ldr	r2, [r4, #68]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r4, #20]
	str	lr, [r4, #64]
	str	ip, [r4, #68]
.L14169:
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L14170
	ldr	r1, [r4, #8]
	cmp	r1, #0
	beq	.L14170
	orr	r1, r2, #4
	mov	r2, r1
	strb	r1, [r5, #45]
.L14170:
	tst	r2, #2
	bne	.L14171
	ldr	r1, [r4, #12]
	cmp	r1, #0
	beq	.L14171
	ldrb	r1, [r5, #45]	@ zero_extendqisi2
	orr	r1, r1, #2
	mov	r2, r1
	strb	r1, [r5, #45]
.L14171:
	tst	r2, #1
	bne	.L14172
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L14172
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #1
	strb	r2, [r5, #45]
.L14172:
	cmp	r0, #0
	beq	.L14173
	mov	fp, r0
	mov	r0, r4
	bl	kfree
.L14165:
.L14153:
	movw	r0, #:lower16:.LC740
	mov	r2, r7
	ldr	r1, .L14205+4
	movt	r0, #:upper16:.LC740
	bl	printk
.L14142:
	ldr	r3, [sp, #4]
	mov	r0, fp
	ldr	r2, [sp, #44]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L14203
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14177:
	mov	r4, #16
	b	.L14167
.L14200:
	mov	fp, r0
	b	.L14142
.L14179:
	mov	r0, r2
	b	.L14169
.L14166:
	mvn	fp, #18
	b	.L14165
.L14199:
	mov	ip, #1
	ldr	r1, .L14205+8
	mov	r2, #32
	add	r0, sp, #12
	movw	r6, #:lower16:.LC270
	str	ip, [r9, #-3976]
	movt	r6, #:upper16:.LC270
	bl	strlcpy
	add	r0, sp, #12
	bl	strim
	add	r4, sp, #48
	str	r0, [r4, #-40]!
	b	.L14146
.L14154:
	mov	r1, r6
	mov	r0, r4
	bl	strsep
	subs	r7, r0, #0
	bne	.L14145
	ldr	r0, [sp, #8]
.L14146:
	cmp	r0, #0
	bne	.L14154
	ldr	r1, [r9, #-3968]
	cmp	r1, #0
	bne	.L14155
	ldr	r1, [r9, #-3964]
	cmp	r1, #0
	bne	.L14156
	ldr	r1, [r9, #-3960]
	cmp	r1, #0
	beq	.L14143
.L14157:
	ldr	r2, [r5, #24]
	ldr	r0, [r2]
	bl	gsmd_setup
	mov	r2, r0
.L14159:
	cmp	r2, #0
	beq	.L14143
	movw	r0, #:lower16:.LC738
	ldr	r1, .L14205+4
	mov	fp, r2
	movt	r0, #:upper16:.LC738
	bl	printk
	b	.L14142
.L14145:
	ldr	r8, [r9, #-3972]
	cmp	r8, #2
	bgt	.L14147
	bl	str_to_xport
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r8, r8, lsl #1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r2, lsl #2
	cmp	r0, #2
	str	r0, [r3, #2280]
	str	r8, [r3, #2284]
	beq	.L14149
	cmp	r0, #3
	beq	.L14150
	cmp	r0, #1
	beq	.L14204
	mov	r2, r0
	movw	r0, #:lower16:.LC736
	ldr	r1, .L14205+12
	movt	r0, #:upper16:.LC736
	bl	printk
.L14147:
	movw	r0, #:lower16:.LC737
	mov	r2, r7
	ldr	r1, .L14205+4
	movt	r0, #:upper16:.LC737
	mvn	fp, #18
	bl	printk
	b	.L14142
.L14150:
	ldr	r2, [r9, #-3960]
	add	r1, r2, #1
	str	r2, [r3, #2288]
	str	r1, [r9, #-3960]
.L14152:
	ldr	r3, [r9, #-3956]
	add	r8, r8, #1
	ldr	r0, [sp, #8]
	str	r8, [r9, #-3972]
	add	r3, r3, #1
	str	r3, [r9, #-3956]
	b	.L14146
.L14155:
	ldr	r2, [r5, #24]
	ldr	r0, [r2]
	bl	gserial_setup
	ldr	r1, [r9, #-3964]
	mov	r2, r0
	cmp	r1, #0
	beq	.L14158
.L14156:
	ldr	r2, [r5, #24]
	ldr	r0, [r2]
	bl	gsdio_setup
	mov	r2, r0
.L14158:
	ldr	r1, [r9, #-3960]
	cmp	r1, #0
	beq	.L14159
	b	.L14157
.L14202:
	mov	r0, r4
	mvn	fp, #11
	bl	kfree
	b	.L14165
.L14204:
	ldr	r2, [r9, #-3968]
	add	r1, r2, #1
	str	r2, [r3, #2288]
	str	r1, [r9, #-3968]
	b	.L14152
.L14149:
	ldr	r2, [r9, #-3964]
	add	r1, r2, #1
	str	r2, [r3, #2288]
	str	r1, [r9, #-3964]
	b	.L14152
.L14201:
	mvn	fp, #11
	b	.L14165
.L14203:
	bl	__stack_chk_fail
.L14206:
	.align	2
.L14205:
	.word	.LANCHOR5-936
	.word	.LANCHOR3-1680
	.word	.LANCHOR1+3576
	.word	.LANCHOR3-1696
	.fnend
	.size	acm_function_bind_config, .-acm_function_bind_config
	.align	2
	.global	gsmd_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_cleanup, %function
gsmd_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_cleanup, .-gsmd_cleanup
	.align	2
	.global	gbam_data_recv_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_recv_cb, %function
gbam_data_recv_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L14208
	add	r5, r0, #8
	mov	r4, r0
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L14212
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1316]
	cmp	r2, r3
	bls	.L14211
	ldr	r3, [r4, #244]
	ldr	r0, .L14218
	add	r3, r3, #1
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L14217
.L14212:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any
.L14208:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14211:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r5
	strd	r2, [r6]
	str	r6, [r3]
	ldr	r3, [r4, #44]
	str	r6, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost
.L14217:
	movw	r0, #:lower16:.LC374
	ldr	r1, .L14218
	ldr	r2, [r4, #244]
	movt	r0, #:upper16:.LC374
	bl	printk
	b	.L14212
.L14219:
	.align	2
.L14218:
	.word	.LANCHOR2+3112
	.fnend
	.size	gbam_data_recv_cb, .-gbam_data_recv_cb
	.align	2
	.global	gbam_data_write_done
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_done, %function
gbam_data_write_done:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, r1
	add	r5, r4, #4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #240]
	mov	r1, r0
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #240]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #80
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r0, [r3, #3568]
	b	queue_work
	.fnend
	.size	gbam_data_write_done, .-gbam_data_write_done
	.align	2
	.global	gbam_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect, %function
gbam_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r1
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L14251
	sub	r3, r2, #6
	cmp	r3, #1
	bhi	.L14228
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r3, [r3, #-3952]
	cmp	r1, r3
	bge	.L14252
.L14228:
	cmp	r4, #0
	beq	.L14234
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r3, r5, fp, lsl #2
	ldr	r6, [r3, #3752]
	str	r4, [r6, #16]
.L14229:
	add	r8, r6, #4
	mov	r7, #0
	mov	r0, r8
	add	r9, r6, #8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r9
	str	r1, [sp, #4]
	bl	_raw_spin_lock
	mov	r0, r9
	str	r7, [r6, #12]
	str	r7, [r5, #3564]
	bl	_raw_spin_unlock
	ldr	r1, [sp, #4]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #76]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #76]
	bic	r2, r10, #2
	cmp	r2, #5
	str	r7, [r3]
	ldr	r3, [r4, #80]
	str	r7, [r3]
	beq	.L14253
	cmp	r10, #6
	cmpeq	fp, #0
	beq	.L14254
.L14225:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14251:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #440]
	cmp	r1, r3
	bge	.L14255
	cmp	r0, #0
	beq	.L14234
	mov	r3, #84
	mla	r3, r3, fp, r5
	ldr	r6, [r3, #444]
	mov	r0, r6
	str	r4, [r6, #16]
	bl	gbam_free_buffers
	b	.L14229
.L14253:
	ldr	r0, [r5, #3568]
	add	r1, r6, #300
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L14254:
	mov	r0, r7
	bl	usb_bam_client_ready
	cmp	r0, #0
	beq	.L14225
	movw	r0, #:lower16:.LC742
	ldr	r1, .L14256
	movt	r0, #:upper16:.LC742
	b	.L14250
.L14252:
	mov	r2, r1
	ldr	r1, .L14256
	movw	r0, #:lower16:.LC399
	movt	r0, #:upper16:.LC399
.L14249:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14234:
	ldr	r1, .L14256
	movw	r0, #:lower16:.LC653
	movt	r0, #:upper16:.LC653
.L14250:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14255:
	movw	r0, #:lower16:.LC741
	mov	r2, r1
	ldr	r1, .L14256
	movt	r0, #:upper16:.LC741
	b	.L14249
.L14257:
	.align	2
.L14256:
	.word	.LANCHOR3-1652
	.fnend
	.size	gbam_disconnect, .-gbam_disconnect
	.align	2
	.global	gbam_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect, %function
gbam_connect:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #5
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	r2, [sp, #48]	@ zero_extendqisi2
	str	r3, [sp]
	str	r2, [sp, #4]
	beq	.L14282
	sub	r3, r5, #6
	cmp	r3, #1
	bhi	.L14262
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r3, [r3, #-3952]
	cmp	r1, r3
	bge	.L14281
.L14262:
	cmp	r4, #0
	beq	.L14269
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	add	r1, r6, r1, lsl #2
	ldr	fp, [r1, #3752]
.L14263:
	ldr	r3, [r4, #76]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L14283
	ldr	r3, [r4, #76]
	str	fp, [r3]
	ldr	r3, [r4, #80]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L14284
	ldr	r1, [r4, #80]
	add	r7, fp, #4
	add	r8, fp, #8
	mov	r0, r7
	str	fp, [r1]
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r8
	bl	_raw_spin_lock
	cmp	r5, #5
	str	r4, [fp, #12]
	beq	.L14285
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #6
	bne	.L14268
	ldr	r3, [sp]
	str	r4, [fp, #16]
	strb	r3, [fp, #128]
	ldr	r3, [sp, #4]
	strb	r3, [fp, #129]
.L14267:
	add	r1, fp, #284
	ldr	r0, [r6, #3568]
	str	r5, [fp, #132]
	bl	queue_work
.L14258:
	mov	r0, r10
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14268:
	cmp	r5, #7
	bne	.L14267
	ldr	r3, [sp]
	add	r0, fp, #120
	add	r1, fp, #124
	str	r4, [fp, #16]
	strb	r3, [fp, #136]
	ldr	r3, [sp, #4]
	strd	r0, [fp, #140]
	strb	r3, [fp, #137]
	b	.L14267
.L14282:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #440]
	cmp	r1, r3
	bge	.L14281
	cmp	r0, #0
	beq	.L14269
	mov	r2, #84
	mla	r1, r2, r1, r6
	ldr	fp, [r1, #444]
	b	.L14263
.L14285:
	mov	r0, r8
	str	r10, [fp, #240]
	str	r10, [fp, #244]
	str	r10, [fp, #248]
	str	r10, [fp, #260]
	str	r10, [fp, #264]
	str	r10, [fp, #268]
	str	r10, [fp, #272]
	str	r10, [fp, #276]
	str	r10, [fp, #280]
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L14267
.L14281:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldr	r1, .L14286
	movt	r0, #:upper16:.LC94
	mvn	r10, #18
	bl	printk
	b	.L14258
.L14284:
	movw	r0, #:lower16:.LC493
	ldr	r1, .L14286
	ldr	r2, [r4, #80]
	movt	r0, #:upper16:.LC493
	bl	printk
	ldr	r2, [r4, #76]
	mov	r1, #0
	str	r1, [r2]
	b	.L14258
.L14283:
	movw	r0, #:lower16:.LC492
	ldr	r1, .L14286
	ldr	r2, [r4, #76]
	movt	r0, #:upper16:.LC492
	bl	printk
	b	.L14258
.L14269:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L14286
	mvn	r10, #18
	movt	r0, #:upper16:.LC653
	bl	printk
	b	.L14258
.L14287:
	.align	2
.L14286:
	.word	.LANCHOR3-1636
	.fnend
	.size	gbam_connect, .-gbam_connect
	.align	2
	.global	gbam_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_setup, %function
gbam_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	orrs	r2, r0, r1
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #12]
	beq	.L14289
	cmp	r1, #3
	cmpls	r0, #1
	mov	r3, r1
	movhi	r3, #1
	movls	r3, #0
	bhi	.L14289
	movw	ip, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC744
	str	r3, [sp]
	mov	r5, ip
	movt	r0, #:upper16:.LC744
	mov	r2, #1
	mov	r1, #10
	bl	__alloc_workqueue_key
	mov	ip, r5
	cmp	r0, #0
	movt	ip, #:upper16:.LANCHOR1
	str	r0, [ip, #3568]
	str	ip, [sp, #8]
	beq	.L14292
	cmp	r4, #0
	beq	.L14294
	movw	r7, #:lower16:kmalloc_caches
	ldr	r3, [ip, #440]
	movt	r7, #:upper16:kmalloc_caches
	ldr	r0, [r7, #36]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [ip, #440]
	beq	.L14309
	mov	r2, #348
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L14326
.L14295:
	movw	r10, #:lower16:gbam_data_write_tobam
	add	fp, r2, #28
	ldr	r1, .L14327
	movt	r10, #:upper16:gbam_data_write_tobam
	movw	r7, #:lower16:gbam_connect_work
	str	fp, [r2, #28]
	movw	r6, #:lower16:gbam_disconnect_work
	movw	r0, #:lower16:gbam_write_data_tohost_w
	str	fp, [r2, #32]
	add	fp, r2, #52
	mov	r3, #0
	mov	ip, #2560
	add	r9, r2, #288
	str	r10, [r2, #92]
	add	r10, r2, #36
	add	r8, r2, #304
	movt	r0, #:upper16:gbam_write_data_tohost_w
	movt	r7, #:upper16:gbam_connect_work
	str	r3, [r2]
	str	fp, [r2, #52]
	movt	r6, #:upper16:gbam_disconnect_work
	movw	r5, #:lower16:gbam_data_ch_probe
	str	r10, [r2, #36]
	movw	r4, #:lower16:gbam_data_ch_remove
	movw	lr, #:lower16:.LC201
	str	r10, [r2, #40]
	add	r10, r2, #60
	movt	r5, #:upper16:gbam_data_ch_probe
	str	fp, [r2, #56]
	add	fp, r2, #84
	movt	r4, #:upper16:gbam_data_ch_remove
	str	r3, [r2, #4]
	movt	lr, #:upper16:.LC201
	str	r10, [r2, #60]
	str	r10, [r2, #64]
	mov	r10, #8
	str	r3, [r2, #8]
	str	fp, [r2, #84]
	str	fp, [r2, #88]
	add	fp, r2, #100
	str	r3, [r2, #44]
	str	r3, [r2, #48]
	str	r3, [r2, #68]
	str	r3, [r2, #72]
	str	r2, [r2, #76]
	str	ip, [r2, #80]
	str	ip, [r2, #96]
	str	fp, [r2, #100]
	str	fp, [r2, #104]
	str	r0, [r2, #108]
	mov	r0, r1
	str	ip, [r2, #284]
	str	r9, [r2, #288]
	str	r9, [r2, #292]
	str	r7, [r2, #296]
	str	ip, [r2, #300]
	str	r8, [r2, #304]
	str	r8, [r2, #308]
	str	r6, [r2, #312]
	str	r10, [r2, #24]
	str	r2, [r1, #-4]
	ldr	r2, [sp, #8]
	str	r5, [r2, #448]
	str	r4, [r1, #4]
	str	lr, [r1, #20]
	str	r3, [r1, #28]
	bl	platform_driver_register
.L14294:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L14298
	ldr	r6, .L14327+4
	movw	r7, #:lower16:kmalloc_caches
	movw	r5, #:lower16:.LANCHOR4
	movw	r10, #:lower16:gbam2bam_connect_work
	movw	r9, #:lower16:gbam2bam_disconnect_work
	movw	r8, #:lower16:gbam2bam_suspend_work
	movt	r7, #:upper16:kmalloc_caches
	movt	r5, #:upper16:.LANCHOR4
	movt	r10, #:upper16:gbam2bam_connect_work
	movt	r9, #:upper16:gbam2bam_disconnect_work
	movt	r8, #:upper16:gbam2bam_suspend_work
	mov	r4, #0
.L14301:
	ldr	ip, [r5, #-3952]
	mov	r2, #348
	movw	r1, #32976
	ldr	lr, [r7, #36]
	mov	r3, #16
	add	ip, ip, #1
	subs	r0, lr, #0
	str	ip, [r5, #-3952]
	beq	.L14299
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L14300
.L14299:
	ldr	r2, [sp, #12]
	mov	r0, #0
	str	r4, [r3]
	movw	r1, #:lower16:gbam2bam_resume_work
	add	r4, r4, #1
	str	r0, [r3, #4]
	add	fp, r3, #288
	add	lr, r3, #304
	add	ip, r3, #320
	str	r0, [r3, #8]
	movt	r1, #:upper16:gbam2bam_resume_work
	add	r0, r3, #336
	cmp	r4, r2
	str	r3, [r3, #76]
	mov	r2, #2560
	str	r1, [r3, #344]
	str	r2, [r3, #284]
	str	fp, [r3, #288]
	str	fp, [r3, #292]
	str	r10, [r3, #296]
	str	r2, [r3, #300]
	str	lr, [r3, #304]
	str	lr, [r3, #308]
	str	r9, [r3, #312]
	str	r2, [r3, #316]
	str	ip, [r3, #320]
	str	ip, [r3, #324]
	str	r8, [r3, #328]
	str	r2, [r3, #332]
	str	r0, [r3, #336]
	str	r0, [r3, #340]
	str	r3, [r6], #4
	bne	.L14301
.L14298:
	movw	r0, #:lower16:.LC746
	mov	r1, #0
	movt	r0, #:upper16:.LC746
	bl	debugfs_create_dir
	ldr	r3, [sp, #8]
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r3, #3480]
	beq	.L14304
	cmn	r0, #4096
	bhi	.L14304
	ldr	ip, .L14327+8
	movw	r0, #:lower16:.LC154
	mov	r3, #0
	movt	r0, #:upper16:.LC154
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L14305
	cmn	r0, #4096
	bhi	.L14305
.L14304:
	mov	r0, #0
.L14288:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14309:
	mov	r2, #16
	b	.L14295
.L14305:
	ldr	r4, [sp, #8]
	ldr	r0, [r4, #3480]
	bl	debugfs_remove
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #3480]
	b	.L14288
.L14326:
	ldr	ip, [sp, #8]
	movw	r0, #:lower16:.LC554
	movw	r5, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LC554
	ldr	r1, .L14327+12
	movt	r5, #:upper16:.LANCHOR4
	ldr	r3, [ip, #440]
	sub	r3, r3, #1
	str	r3, [ip, #440]
	bl	printk
.L14302:
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #440]
	cmp	r3, #0
	ble	.L14297
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #444]
	cmp	r0, #0
	beq	.L14297
	bl	kfree
	ldr	r0, .L14327
	bl	platform_driver_unregister
.L14297:
	ldr	r3, [r5, #-3952]
	cmp	r3, #0
	ble	.L14307
	ldr	r6, .L14327+4
	mov	r4, #0
.L14308:
	ldr	r0, [r6, r4, lsl #2]
	add	r4, r4, #1
	bl	kfree
	ldr	r3, [r5, #-3952]
	cmp	r4, r3
	blt	.L14308
.L14307:
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #3568]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L14288
.L14300:
	ldr	r3, [r5, #-3952]
	movw	r0, #:lower16:.LC554
	mov	r2, r4
	ldr	r1, .L14327+12
	movt	r0, #:upper16:.LC554
	sub	r3, r3, #1
	str	r3, [r5, #-3952]
	bl	printk
	b	.L14302
.L14289:
	movw	r0, #:lower16:.LC743
	ldr	r1, .L14327+12
	mov	r2, r4
	movt	r0, #:upper16:.LC743
	ldr	r3, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L14288
.L14292:
	movw	r0, #:lower16:.LC745
	ldr	r1, .L14327+12
	movt	r0, #:upper16:.LC745
	bl	printk
	mvn	r0, #11
	b	.L14288
.L14328:
	.align	2
.L14327:
	.word	.LANCHOR1+448
	.word	.LANCHOR1+3752
	.word	.LANCHOR3-1608
	.word	.LANCHOR3-1620
	.fnend
	.size	gbam_setup, .-gbam_setup
	.align	2
	.global	gbam_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_cleanup, %function
gbam_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3480]
	b	debugfs_remove_recursive
	.fnend
	.size	gbam_cleanup, .-gbam_cleanup
	.align	2
	.global	gbam_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_suspend, %function
gbam_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	cmp	r2, #1
	bls	.L14332
	bx	lr
.L14332:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r1, r3, r1, lsl #2
	ldr	r0, [r3, #3568]
	ldr	r1, [r1, #3752]
	add	r1, r1, #316
	b	queue_work
	.fnend
	.size	gbam_suspend, .-gbam_suspend
	.align	2
	.global	gbam_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_resume, %function
gbam_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	cmp	r2, #1
	bls	.L14335
	bx	lr
.L14335:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r1, r3, r1, lsl #2
	ldr	r0, [r3, #3568]
	ldr	r1, [r1, #3752]
	add	r1, r1, #332
	b	queue_work
	.fnend
	.size	gbam_resume, .-gbam_resume
	.align	2
	.global	gsmd_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_connect, %function
gsmd_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	uxtb	r3, r1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	cmp	r3, #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bhi	.L14337
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r4, #:upper16:.LANCHOR1
	mla	r3, r2, r3, r4
	ldr	r3, [r3, #528]
	cmp	r3, #0
	beq	.L14337
	cmp	r0, #0
	mov	r5, r0
	beq	.L14346
	mla	r1, r2, r1, r4
	ldr	r6, [r1, #528]
	add	r7, r6, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r5, [r6, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r5, #88]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r6, #112
	mov	r2, #0
	ldr	r0, [r4, #3516]
	bl	queue_delayed_work
	mov	r0, #0
.L14336:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14337:
	movw	r0, #:lower16:.LC652
	mov	r2, r1
	ldr	r1, .L14347
	movt	r0, #:upper16:.LC652
	bl	printk
	mvn	r0, #18
	b	.L14336
.L14346:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L14347
	movt	r0, #:upper16:.LC653
	bl	printk
	mvn	r0, #18
	b	.L14336
.L14348:
	.align	2
.L14347:
	.word	.LANCHOR3-2724
	.fnend
	.size	gsmd_ctrl_connect, .-gsmd_ctrl_connect
	.align	2
	.global	gsmd_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_disconnect, %function
gsmd_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bhi	.L14350
	movw	r8, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r8, #:upper16:.LANCHOR1
	mla	r3, r3, r1, r8
	ldr	r4, [r3, #528]
	cmp	r4, #0
	beq	.L14350
	cmp	r0, #0
	beq	.L14365
	add	r9, r4, #108
	mov	r6, r0
	mov	r0, r9
	add	r5, r4, #40
	bl	_raw_spin_lock_irqsave
	mov	r2, #0
	mov	r10, r0
	str	r2, [r4, #104]
	str	r2, [r6, #88]
	str	r2, [r6, #92]
	ldr	r3, [r4, #40]
	str	r2, [r4, #88]
	cmp	r5, r3
	beq	.L14353
	mov	r7, #256
	mov	r6, #512
.L14354:
	ldm	r3, {r1, r2}
	mov	fp, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r7, [r3]
	str	r6, [r3, #4]
	ldr	r0, [fp, #-8]!
	bl	kfree
	mov	r0, fp
	bl	kfree
	ldr	r3, [r4, #40]
	cmp	r3, r5
	bne	.L14354
.L14353:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #8
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L14366
.L14355:
	ldr	r0, [r8, #3516]
	add	r1, r4, #160
	mov	r2, #0
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_delayed_work
.L14366:
	ldr	r0, [r4]
	ldr	r1, [r4, #88]
	orr	r2, r1, #4
	mvn	r2, r2
	bl	smd_tiocmset
	b	.L14355
.L14365:
	ldr	r1, .L14367
	movw	r0, #:lower16:.LC653
	movt	r0, #:upper16:.LC653
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14350:
	mov	r2, r1
	ldr	r1, .L14367
	movw	r0, #:lower16:.LC652
	movt	r0, #:upper16:.LC652
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14368:
	.align	2
.L14367:
	.word	.LANCHOR3-1504
	.fnend
	.size	gsmd_ctrl_disconnect, .-gsmd_ctrl_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gps_disable, %function
gps_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r5, r0, #136
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #124
	str	r10, [sp, #24]
	mov	r10, r0
	str	lr, [sp, #28]
	ldr	r0, [r0, #128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r10, #128]
	mov	r3, #0
	mov	r0, r8
	str	r3, [r2]
	str	r3, [r10, #112]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #136]
	mov	r9, r0
	cmp	r5, r3
	beq	.L14370
	mov	r7, #256
	mov	r6, #512
.L14371:
	ldm	r3, {r1, r2}
	mov	r4, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r7, [r3]
	str	r6, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r10, #136]
	cmp	r3, r5
	bne	.L14371
.L14370:
	mov	r3, #0
	mov	r1, r9
	mov	r0, r8
	str	r3, [r10, #144]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r10
	ldrb	r1, [r10, #104]	@ zero_extendqisi2
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsmd_ctrl_disconnect
	.fnend
	.size	gps_disable, .-gps_disable
	.align	2
	.global	gsmd_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_setup, %function
gsmd_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r0, #1
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	str	r2, [sp, #20]
	bhi	.L14396
	sub	r3, r1, #1
	cmp	r3, #2
	bhi	.L14397
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r3, [sp, #16]
	ldrb	r3, [r3, #3532]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14398
.L14378:
	ldr	r2, [sp, #12]
	add	r1, r4, r4, lsl #1
	add	r3, r3, #1
	ldr	r0, [sp, #16]
	mov	r9, r1
	str	r1, [sp, #24]
	add	r2, r1, r2
	cmp	r1, r2
	strb	r3, [r0, #3532]
	bcs	.L14380
	mov	r3, #84
	ldr	r2, .L14401
	movw	fp, #:lower16:kmalloc_caches
	movt	fp, #:upper16:kmalloc_caches
	mov	r10, #0
	mul	r3, r3, r1
	add	r5, r2, r3
	str	r3, [sp, #28]
	b	.L14384
.L14400:
	str	r3, [sp, #8]
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	ldr	r3, [sp, #8]
	beq	.L14399
.L14381:
	movw	ip, #:lower16:grmnet_ctrl_smd_connect_w
	add	r0, r4, #116
	str	r9, [r4, #100]
	movt	ip, #:upper16:grmnet_ctrl_smd_connect_w
	mov	r2, r6
	str	r6, [r4, #108]
	mov	r1, r6
	str	r7, [r4, #112]
	mov	r10, r3
	str	r0, [r4, #116]
	add	r5, r5, #84
	str	r0, [r4, #120]
	add	r0, r4, #128
	str	ip, [r4, #124]
	bl	init_timer_key
	movw	r3, #:lower16:grmnet_ctrl_smd_disconnect_w
	add	r0, r4, #164
	str	r8, [r4, #144]
	movt	r3, #:upper16:grmnet_ctrl_smd_disconnect_w
	add	r2, r4, #112
	mov	r1, r6
	str	r2, [r4, #148]
	mov	r2, r6
	str	r7, [r4, #160]
	str	r0, [r4, #164]
	str	r0, [r4, #168]
	add	r0, r4, #176
	str	r3, [r4, #172]
	bl	init_timer_key
	movw	r3, #:lower16:.LANCHOR3
	add	r2, r4, #160
	str	r4, [r4, #84]
	movt	r3, #:upper16:.LANCHOR3
	movw	r1, #:lower16:.LC552
	str	r8, [r4, #192]
	add	r3, r3, r9, lsl #2
	movt	r1, #:upper16:.LC552
	str	r2, [r4, #196]
	add	r0, r4, #12
	ldr	r2, .L14401+4
	ldr	r3, [r3, #-1480]
	add	r9, r9, #1
	str	r3, [r4, #4]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC553
	ldr	r2, .L14401+4
	add	r0, r4, #24
	movt	r1, #:upper16:.LC553
	bl	__init_waitqueue_head
	movw	r0, #:lower16:grmnet_ctrl_smd_read_w
	movw	r1, #:lower16:grmnet_ctrl_smd_write_w
	str	r7, [r4, #52]
	movt	r0, #:upper16:grmnet_ctrl_smd_read_w
	movw	r2, #:lower16:grmnet_ctrl_smd_ch_probe
	movw	r3, #:lower16:grmnet_ctrl_smd_ch_remove
	add	lr, r4, #40
	movt	r3, #:upper16:grmnet_ctrl_smd_ch_remove
	add	ip, r4, #56
	str	r0, [r4, #64]
	movt	r1, #:upper16:grmnet_ctrl_smd_write_w
	add	r0, r4, #72
	str	r7, [r4, #68]
	movt	r2, #:upper16:grmnet_ctrl_smd_ch_probe
	ldr	r7, [sp, #12]
	str	lr, [r4, #40]
	str	lr, [r4, #44]
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	cmp	r10, r7
	str	r0, [r4, #72]
	str	r0, [r4, #76]
	str	r1, [r4, #80]
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	ldr	r3, [r4, #4]
	str	r3, [r5, #-60]
	str	r6, [r5, #-52]
	beq	.L14380
.L14384:
	ldr	ip, [fp, #32]
	mov	r6, #0
	movw	r8, #:lower16:delayed_work_timer_fn
	mov	r7, #2560
	mov	r2, #208
	movt	r8, #:upper16:delayed_work_timer_fn
	movw	r1, #32976
	add	r3, r10, #1
	cmp	ip, r6
	mov	r0, ip
	bne	.L14400
	mov	r4, #16
	b	.L14381
.L14380:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L14374
	ldr	r2, [sp, #24]
	mov	r0, #0
	strb	r2, [r3]
.L14374:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14398:
	movw	r0, #:lower16:.LC549
	str	r3, [sp]
	mov	r2, #1
	movt	r0, #:upper16:.LC549
	mov	r1, #10
	bl	__alloc_workqueue_key
	ldr	r3, [sp, #16]
	cmp	r0, #0
	str	r0, [r3, #3516]
	beq	.L14379
	ldrb	r3, [r3, #3532]	@ zero_extendqisi2
	b	.L14378
.L14399:
	movw	r0, #:lower16:.LC554
	mov	r2, r9
	ldr	r1, .L14401+8
	movt	r0, #:upper16:.LC554
	bl	printk
	cmp	r10, r6
	beq	.L14383
	ldr	r3, [sp, #28]
	add	r5, r3, #4
	ldr	r3, .L14401
	add	r5, r3, r5
.L14386:
	ldr	r3, [r5, #-4]
	add	r4, r4, #1
	subs	r0, r3, #0
	beq	.L14385
	bl	kfree
	mov	r0, r5
	bl	platform_driver_unregister
.L14385:
	cmp	r10, r4
	add	r5, r5, #84
	bne	.L14386
.L14383:
	ldr	r2, [sp, #16]
	ldrb	r3, [r2, #3532]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r2, #3532]
	mvnne	r0, #11
	bne	.L14374
	ldr	r0, [r2, #3516]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L14374
.L14379:
	movw	r0, #:lower16:.LC550
	ldr	r1, .L14401+8
	movt	r0, #:upper16:.LC550
	bl	printk
	mvn	r0, #11
	b	.L14374
.L14397:
	movw	r0, #:lower16:.LC534
	ldr	r1, .L14401+8
	movt	r0, #:upper16:.LC534
	ldr	r2, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L14374
.L14396:
	movw	r0, #:lower16:.LC747
	mov	r2, r4
	ldr	r1, .L14401+8
	movt	r0, #:upper16:.LC747
	bl	printk
	mvn	r0, #21
	b	.L14374
.L14402:
	.align	2
.L14401:
	.word	.LANCHOR1+528
	.word	.LANCHOR4-3992
	.word	.LANCHOR3-3516
	.fnend
	.size	gsmd_ctrl_setup, .-gsmd_ctrl_setup
	.align	2
	.global	gqti_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_connect, %function
gqti_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L14410
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #1032]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	str	r5, [r4]
	movt	r2, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5, #88]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #1
	add	r0, r4, #32
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #8]
	mov	r1, #3
	bl	__wake_up
	cmp	r4, #0
	beq	.L14408
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L14403
	ldr	r4, [r0, #100]
	cmp	r4, #0
	beq	.L14408
	blx	r4
	mov	r0, #0
.L14403:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14408:
	mov	r0, r4
	b	.L14403
.L14410:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L14411
	movt	r0, #:upper16:.LC653
	bl	printk
	mvn	r0, #18
	b	.L14403
.L14412:
	.align	2
.L14411:
	.word	.LANCHOR3-1456
	.fnend
	.size	gqti_ctrl_connect, .-gqti_ctrl_connect
	.align	2
	.global	gqti_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_disconnect, %function
gqti_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	subs	r7, r0, #0
	movt	r3, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r3, #1032]
	beq	.L14436
	cmp	r5, #0
	beq	.L14415
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L14415
	ldr	r3, [r0, #96]
	cmp	r3, #0
	beq	.L14415
	blx	r3
.L14415:
	mov	r4, #0
	mov	r6, r5
	add	r9, r5, #52
	mov	r0, r9
	str	r4, [r5, #8]
	str	r4, [r5, #12]
	bl	_raw_spin_lock_irqsave
	str	r4, [r6], #44
	mov	r10, r0
	str	r4, [r7, #88]
	str	r4, [r7, #92]
	ldr	r3, [r5, #44]
	cmp	r6, r3
	beq	.L14416
	mov	r8, #256
	mov	r7, #512
.L14417:
	ldm	r3, {r1, r2}
	mov	r4, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r5, #44]
	cmp	r3, r6
	bne	.L14417
.L14416:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r5, #4]	@ zero_extendqisi2
	mov	r4, r0
	cmp	r3, #0
	beq	.L14437
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14419
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L14438
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L14420:
	ldr	r2, [r5, #48]
	add	ip, r3, #8
	mov	r1, r4
	mov	r0, r9
	str	ip, [r5, #48]
	str	r6, [r3, #8]
	str	r2, [r3, #12]
	str	ip, [r2]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r0, r5, #32
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L14419:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L14420
.L14438:
	mvn	r3, #11
	b	.L14420
.L14437:
	movw	r0, #:lower16:.LC481
	mov	r2, r5
	ldr	r1, .L14439
	movt	r0, #:upper16:.LC481
	bl	printk
	ldrd	r6, [sp, #8]
	mov	r1, r4
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L14436:
	movw	r0, #:lower16:.LC653
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC653
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L14439+4
	b	printk
.L14440:
	.align	2
.L14439:
	.word	.LANCHOR3-3876
	.word	.LANCHOR3-1436
	.fnend
	.size	gqti_ctrl_disconnect, .-gqti_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect, %function
ghsic_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	clz	r3, r0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR1
	lsr	r3, r3, #5
	strd	r6, [sp, #8]
	ldr	r2, [ip, #1036]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	cmp	r1, r2
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L14448
	mov	r2, #104
	mla	r1, r2, r1, ip
	ldr	r4, [r1, #1040]
	cmp	r4, #0
	beq	.L14449
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #48]
	mov	r1, r0
	cmp	r3, #0
	beq	.L14450
.L14445:
	cmp	r3, #1
	bne	.L14446
	ldr	r0, [r6, #84]
	movw	r2, #:lower16:ghsic_send_cpkt_tomodem
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r2, #:upper16:ghsic_send_cpkt_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r0, [r4, #52]
	strd	r2, [r6, #88]
.L14446:
	mov	r5, #0
	mov	r0, r7
	str	r6, [r4, #8]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #16
	ldr	r0, [r4, #12]
	bl	queue_work
	mov	r0, r5
.L14441:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14450:
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r3, [r6, #132]
	ldr	r3, [r4, #48]
	b	.L14445
.L14448:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldr	r1, .L14451
	movt	r0, #:upper16:.LC94
	bl	printk
	mvn	r0, #18
	b	.L14441
.L14449:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L14451
	movt	r0, #:upper16:.LC15
	bl	printk
	mvn	r0, #18
	b	.L14441
.L14452:
	.align	2
.L14451:
	.word	.LANCHOR3-1412
	.fnend
	.size	ghsic_ctrl_connect, .-ghsic_ctrl_connect
	.align	2
	.global	ghsic_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_disconnect, %function
ghsic_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #1036]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #1040]
	cmp	r1, r2
	bhi	.L14459
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L14460
	ldr	r8, [r4, #48]
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	cmp	r8, #0
	beq	.L14461
	bl	_raw_spin_lock_irqsave
	str	r5, [r6, #88]
	str	r5, [r6, #92]
.L14457:
	mov	r3, #0
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	str	r3, [r4, #52]
	str	r3, [r4, #88]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r1, r4, #32
	ldr	r0, [r4, #12]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work
.L14461:
	bl	_raw_spin_lock_irqsave
	str	r8, [r6, #132]
	b	.L14457
.L14459:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC94
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L14462
	b	printk
.L14460:
	movw	r0, #:lower16:.LC653
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC653
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L14462
	b	printk
.L14463:
	.align	2
.L14462:
	.word	.LANCHOR3-1392
	.fnend
	.size	ghsic_ctrl_disconnect, .-ghsic_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_set_port_name, %function
ghsic_ctrl_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR4
	movt	r4, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	ldr	r2, [r4, #-3948]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L14470
	ldr	r5, .L14471
	mov	r3, r0
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #-3948]
	mov	r3, #104
	movw	r1, #:lower16:.LC749
	movt	r1, #:upper16:.LC749
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #-3948]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #-3948]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14470:
	movw	r0, #:lower16:.LC748
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC748
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L14471+4
	b	printk
.L14472:
	.align	2
.L14471:
	.word	.LANCHOR1+1040
	.word	.LANCHOR3-1368
	.fnend
	.size	ghsic_ctrl_set_port_name, .-ghsic_ctrl_set_port_name
	.align	2
	.global	ghsic_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_setup, %function
ghsic_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	mov	fp, r1
	str	lr, [sp, #32]
	ldr	r3, [r8, #1036]
	.pad #44
	sub	sp, sp, #44
	add	r1, r3, r0
	cmp	r1, #4
	str	r3, [sp, #28]
	str	r3, [sp, #32]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #12]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L14490
	ldr	r2, [sp, #28]
	cmp	r2, r1
	bcs	.L14473
	movw	r1, #:lower16:ghsic_ctrl_connect_w
	mov	r3, #104
	movt	r1, #:upper16:ghsic_ctrl_connect_w
	movw	r0, #:lower16:gctrl_disconnect_w
	mul	r3, r3, r2
	movw	ip, #:lower16:ghsic_ctrl_receive
	movt	r0, #:upper16:gctrl_disconnect_w
	str	r1, [sp, #16]
	ldr	r1, .L14494
	movt	ip, #:upper16:ghsic_ctrl_receive
	movw	r9, #:lower16:kmalloc_caches
	mov	r6, r2
	str	r0, [sp, #20]
	add	r5, r3, #84
	str	ip, [sp, #24]
	movt	r9, #:upper16:kmalloc_caches
	str	r3, [sp, #36]
	mov	r10, r8
	mov	r3, r2
	add	r5, r1, r5
	b	.L14480
.L14493:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14491
.L14476:
	mov	r3, r7
	mov	r2, #1
	str	r7, [sp]
	mov	r1, #10
	mov	r0, r5
	bl	__alloc_workqueue_key
	mov	ip, r0
	movw	r2, #:lower16:ghsic_ctrl_probe
	cmp	ip, #0
	movw	r3, #:lower16:ghsic_ctrl_remove
	movw	r1, #:lower16:ghsic_ctrl_status
	str	ip, [r4, #12]
	add	r8, r4, #20
	sub	r0, r5, #80
	movt	r2, #:upper16:ghsic_ctrl_probe
	movt	r3, #:upper16:ghsic_ctrl_remove
	mov	lr, #2560
	movt	r1, #:upper16:ghsic_ctrl_status
	add	ip, r4, #36
	beq	.L14492
	cmp	fp, #0
	str	r6, [r4]
	add	r6, r6, #1
	str	ip, [r4, #36]
	str	ip, [r4, #40]
	ldr	ip, [sp, #20]
	str	r7, [r4, #4]
	ldr	r7, [sp, #16]
	streq	r1, [r4, #76]
	str	lr, [r4, #16]
	str	r8, [r4, #20]
	str	ip, [r4, #44]
	ldr	ip, [sp, #24]
	str	r8, [r4, #24]
	str	r7, [r4, #28]
	str	lr, [r4, #32]
	str	fp, [r4, #48]
	str	r4, [r4, #56]
	str	r5, [r4, #64]
	str	ip, [r4, #72]
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	mov	r3, #0
	str	r5, [r5, #-60]
	add	r5, r5, #104
	str	r3, [r5, #-156]
	bl	platform_driver_register
	ldr	r3, [sp, #12]
	cmp	r3, r6
	bls	.L14473
	ldr	r3, [r10, #1036]
.L14480:
	ldr	ip, [r9, #28]
	mov	r7, #0
	add	r3, r3, #1
	mov	r2, #108
	movw	r1, #32976
	str	r3, [r10, #1036]
	cmp	ip, r7
	mov	r0, ip
	bne	.L14493
	mov	r4, #16
	b	.L14476
.L14491:
	mov	r8, r10
.L14477:
	ldr	r3, [r8, #1036]
	movw	r0, #:lower16:.LC554
	mov	r2, r6
	movt	r0, #:upper16:.LC554
	ldr	r1, .L14494+4
	sub	r3, r3, #1
	str	r3, [r8, #1036]
	bl	printk
	ldr	r2, [sp, #28]
	ldr	r3, [r8, #1036]
	cmp	r2, r3
	bcs	.L14482
	ldr	r3, [sp, #36]
	mov	r5, r2
	add	r4, r3, #4
	ldr	r3, .L14494
	add	r4, r3, r4
.L14483:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #12]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #104
	bl	platform_driver_unregister
	ldr	r3, [r8, #1036]
	cmp	r5, r3
	bcc	.L14483
.L14482:
	mvn	r3, #11
	str	r3, [sp, #28]
	ldr	r3, [sp, #32]
	str	r3, [r8, #1036]
.L14473:
	ldr	r0, [sp, #28]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14492:
	movw	r0, #:lower16:.LC750
	mov	r2, r5
	ldr	r1, .L14494+8
	movt	r0, #:upper16:.LC750
	mov	r8, r10
	bl	printk
	b	.L14477
.L14490:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L14494+4
	movw	r0, #:lower16:.LC534
	movt	r0, #:upper16:.LC534
	str	r3, [sp, #28]
	bl	printk
	b	.L14473
.L14495:
	.align	2
.L14494:
	.word	.LANCHOR1+1040
	.word	.LANCHOR3-1340
	.word	.LANCHOR3-1320
	.fnend
	.size	ghsic_ctrl_setup, .-ghsic_ctrl_setup
	.align	2
	.global	ghsic_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect, %function
ghsic_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	ip, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [ip, #1456]
	mov	lr, #104
	mla	ip, lr, r1, ip
	cmp	r1, r2
	ldr	r4, [ip, #1460]
	bhi	.L14508
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L14509
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.40
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14499
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L14499:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14500
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L14500:
	mov	r5, #0
	add	r8, r4, #48
	mov	r0, r8
	add	r7, r4, #164
	str	r5, [r4, #4]
	add	r6, r4, #80
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #184]
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r1, r4, #104
	ldr	r0, [r4, #84]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work
.L14508:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC94
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L14510
	b	printk
.L14509:
	movw	r0, #:lower16:.LC15
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC15
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L14510
	b	printk
.L14511:
	.align	2
.L14510:
	.word	.LANCHOR3-1300
	.fnend
	.size	ghsic_data_disconnect, .-ghsic_data_disconnect
	.align	2
	.global	ghsic_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect, %function
ghsic_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #1456]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #1460]
	cmp	r1, r2
	bhi	.L14521
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L14522
	ldr	r3, [r4, #16]
	add	r7, r4, #48
	add	r6, r4, #80
	mov	r0, r7
	cmp	r3, #0
	beq	.L14523
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #76]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldr	r2, [r3, #-920]
	ldr	r3, [r3, #-916]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #76]
	str	r4, [r3]
	ldr	r3, [r5, #80]
	str	r4, [r3]
.L14517:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L14524
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L14525
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r7
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r6
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #88
	ldr	r0, [r4, #84]
	bl	queue_work
.L14512:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14523:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldr	r2, [r3, #-928]
	ldr	r3, [r3, #-924]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #80]
	str	r4, [r3]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	b	.L14517
.L14524:
	movw	r0, #:lower16:.LC751
	ldr	r1, .L14526
	ldr	r2, [r4, #8]
	movt	r0, #:upper16:.LC751
	bl	printk
	b	.L14512
.L14525:
	movw	r0, #:lower16:.LC752
	ldr	r1, .L14526
	ldr	r2, [r4, #12]
	movt	r0, #:upper16:.LC752
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L14512
.L14522:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L14526
	mvn	r5, #18
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L14512
.L14521:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldr	r1, .L14526
	movt	r0, #:upper16:.LC94
	mvn	r5, #18
	bl	printk
	b	.L14512
.L14527:
	.align	2
.L14526:
	.word	.LANCHOR3-1276
	.fnend
	.size	ghsic_data_connect, .-ghsic_data_connect
	.align	2
	.global	ghsic_data_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_set_port_name, %function
ghsic_data_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR4
	movt	r4, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	ldr	r2, [r4, #-3944]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L14534
	ldr	r5, .L14535
	mov	r3, r0
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #-3944]
	mov	r3, #104
	movw	r1, #:lower16:.LC753
	movt	r1, #:upper16:.LC753
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #-3944]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #-3944]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14534:
	movw	r0, #:lower16:.LC748
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC748
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L14535+4
	b	printk
.L14536:
	.align	2
.L14535:
	.word	.LANCHOR1+1460
	.word	.LANCHOR3-1256
	.fnend
	.size	ghsic_data_set_port_name, .-ghsic_data_set_port_name
	.align	2
	.global	ghsic_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_setup, %function
ghsic_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	str	r3, [sp, #12]
	ldr	r3, [r3, #1456]
	str	r1, [sp, #24]
	add	r1, r3, r0
	cmp	r1, #4
	str	r3, [sp, #44]
	str	r3, [sp, #48]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #20]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L14553
	ldr	r4, [sp, #44]
	cmp	r4, r1
	bcs	.L14537
	movw	r1, #:lower16:kmalloc_caches
	mov	r3, #104
	movt	r1, #:upper16:kmalloc_caches
	movw	r0, #:lower16:ghsic_data_connect_w
	mul	lr, r3, r4
	movw	ip, #:lower16:ghsic_data_disconnect_w
	movw	r3, #:lower16:ghsic_data_write_tohost
	str	r1, [sp, #28]
	ldr	r1, .L14557
	movt	r3, #:upper16:ghsic_data_write_tohost
	movt	r0, #:upper16:ghsic_data_connect_w
	movt	ip, #:upper16:ghsic_data_disconnect_w
	add	r2, lr, #84
	str	r0, [sp, #32]
	add	fp, r1, r2
	str	ip, [sp, #36]
	mov	r2, fp
	str	r3, [sp, #40]
	mov	fp, r4
	mov	r3, r4
	str	lr, [sp, #52]
	mov	r4, r2
	b	.L14543
.L14556:
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L14554
.L14540:
	mov	r3, r6
	mov	r2, #1
	str	r6, [sp]
	mov	r1, #10
	mov	r0, r4
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	ip, #:lower16:ghsic_data_write_tomdm
	movw	lr, #:lower16:ghsic_data_receive
	movw	r1, #:lower16:ghsic_data_unthrottle_tx
	str	r3, [sp, #8]
	movw	r2, #:lower16:ghsic_data_probe
	mov	r7, #2560
	str	r3, [r5, #84]
	movw	r3, #:lower16:ghsic_data_remove
	add	r10, r5, #24
	movt	r3, #:upper16:ghsic_data_remove
	add	r8, r5, #56
	add	r9, r5, #32
	sub	r0, r4, #80
	str	r3, [sp, #16]
	ldr	r3, [sp, #8]
	movt	ip, #:upper16:ghsic_data_write_tomdm
	movt	lr, #:upper16:ghsic_data_receive
	movt	r1, #:upper16:ghsic_data_unthrottle_tx
	movt	r2, #:upper16:ghsic_data_probe
	cmp	r3, #0
	beq	.L14555
	ldr	r3, [sp, #32]
	str	fp, [r5]
	add	fp, fp, #1
	str	r8, [r5, #56]
	str	r8, [r5, #60]
	add	r8, r5, #64
	str	ip, [r5, #132]
	add	ip, r5, #140
	str	r10, [r5, #24]
	str	r8, [r5, #64]
	str	r8, [r5, #68]
	add	r8, r5, #92
	str	r3, [r5, #100]
	ldr	r3, [sp, #36]
	str	r10, [r5, #28]
	str	r8, [r5, #92]
	str	r8, [r5, #96]
	add	r8, r5, #108
	str	r9, [r5, #32]
	str	r9, [r5, #36]
	str	r8, [r5, #108]
	str	r8, [r5, #112]
	add	r8, r5, #124
	str	r6, [r5, #40]
	str	r6, [r5, #72]
	str	r6, [r5, #80]
	str	r6, [r5, #48]
	str	r6, [r5, #44]
	str	r6, [r5, #76]
	str	r7, [r5, #88]
	str	r7, [r5, #104]
	str	r3, [r5, #116]
	str	r7, [r5, #120]
	str	r8, [r5, #124]
	str	r8, [r5, #128]
	str	r7, [r5, #136]
	str	ip, [r5, #140]
	str	ip, [r5, #144]
	ldr	r3, [sp, #40]
	str	r3, [r5, #148]
	ldr	r3, [sp, #24]
	str	r5, [r5, #152]
	str	r4, [r5, #160]
	str	lr, [r5, #168]
	str	r3, [r5, #16]
	ldr	r3, [sp, #16]
	str	r1, [r5, #176]
	str	r5, [r4, #-84]
	str	r2, [r4, #-80]
	str	r3, [r4, #-76]
	str	r4, [r4, #-60]
	add	r4, r4, #104
	str	r6, [r4, #-156]
	bl	platform_driver_register
	ldr	r3, [sp, #20]
	cmp	r3, fp
	bls	.L14537
	ldr	r3, [sp, #12]
	ldr	r3, [r3, #1456]
.L14543:
	ldr	r0, [sp, #12]
	mov	r6, #0
	add	r3, r3, #1
	ldr	r2, [sp, #28]
	movw	r1, #32976
	str	r3, [r0, #1456]
	ldr	ip, [r2, #32]
	mov	r2, #220
	cmp	ip, r6
	mov	r0, ip
	bne	.L14556
	mov	r5, #16
	b	.L14540
.L14554:
	mov	r4, fp
.L14541:
	ldr	ip, [sp, #12]
	movw	r0, #:lower16:.LC554
	mov	r2, r4
	movt	r0, #:upper16:.LC554
	ldr	r1, .L14557+4
	ldr	r3, [ip, #1456]
	mov	r4, ip
	sub	r3, r3, #1
	str	r3, [ip, #1456]
	bl	printk
	ldr	r2, [sp, #44]
	ldr	r3, [r4, #1456]
	cmp	r2, r3
	bcs	.L14545
	ldr	r7, [sp, #12]
	mov	r5, r2
	ldr	r3, [sp, #52]
	add	r4, r3, #4
	ldr	r3, .L14557
	add	r4, r3, r4
.L14546:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #84]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #104
	bl	platform_driver_unregister
	ldr	r3, [r7, #1456]
	cmp	r5, r3
	bcc	.L14546
.L14545:
	mvn	r3, #11
	ldr	r2, [sp, #48]
	str	r3, [sp, #44]
	ldr	r3, [sp, #12]
	str	r2, [r3, #1456]
.L14537:
	ldr	r0, [sp, #44]
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14555:
	mov	r3, r4
	movw	r0, #:lower16:.LC750
	ldr	r1, .L14557+8
	mov	r2, r3
	movt	r0, #:upper16:.LC750
	bl	printk
	mov	r0, r5
	mov	r4, fp
	bl	kfree
	b	.L14541
.L14553:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L14557+4
	movw	r0, #:lower16:.LC534
	movt	r0, #:upper16:.LC534
	str	r3, [sp, #44]
	bl	printk
	b	.L14537
.L14558:
	.align	2
.L14557:
	.word	.LANCHOR1+1460
	.word	.LANCHOR3-1228
	.word	.LANCHOR3-1208
	.fnend
	.size	ghsic_data_setup, .-ghsic_data_setup
	.align	2
	.global	ghsuart_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect, %function
ghsuart_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	clz	r5, r0
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	lsr	r5, r5, #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #1876]
	cmp	r1, r2
	orrhi	r5, r5, #1
	cmp	r5, #0
	bne	.L14567
	mov	r2, #84
	mla	r1, r2, r1, r3
	ldr	r4, [r1, #1880]
	cmp	r4, #0
	beq	.L14568
	add	r7, r4, #8
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r6, #84]
	movw	r2, #:lower16:ghsuart_send_cpkt_tomodem
	movw	r3, #:lower16:ghsuart_send_cbits_tomodem
	movt	r2, #:upper16:ghsuart_send_cpkt_tomodem
	movt	r3, #:upper16:ghsuart_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #68]
	strd	r2, [r6, #88]
	str	r6, [r4, #12]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #1, #1
	cmp	r0, #0
	beq	.L14559
	add	r1, r4, #36
	ldr	r0, [r4, #32]
	bl	queue_work
	mov	r0, r5
.L14559:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14567:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldr	r1, .L14569
	movt	r0, #:upper16:.LC94
	bl	printk
	mvn	r0, #18
	b	.L14559
.L14568:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L14569
	movt	r0, #:upper16:.LC15
	bl	printk
	mvn	r0, #18
	b	.L14559
.L14570:
	.align	2
.L14569:
	.word	.LANCHOR3-1184
	.fnend
	.size	ghsuart_ctrl_connect, .-ghsuart_ctrl_connect
	.align	2
	.global	ghsuart_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect, %function
ghsuart_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #1876]
	cmp	r1, r2
	bhi	.L14576
	mov	r2, #84
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	cmp	r0, #0
	strd	r6, [sp, #8]
	mla	r1, r2, r1, r3
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #1880]
	clz	r4, r5
	lsr	r4, r4, #5
	moveq	r4, #1
	cmp	r4, #0
	bne	.L14577
	add	r7, r5, #8
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #88]
	mov	r0, r7
	str	r4, [r6, #92]
	str	r4, [r5, #12]
	str	r4, [r5, #68]
	str	r4, [r5, #92]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r1, r5, #52
	ldr	r0, [r5, #32]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work
.L14576:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldr	r1, .L14578
	movt	r0, #:upper16:.LC94
	b	printk
.L14577:
	movw	r0, #:lower16:.LC653
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC653
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L14578
	b	printk
.L14579:
	.align	2
.L14578:
	.word	.LANCHOR3-1160
	.fnend
	.size	ghsuart_ctrl_disconnect, .-ghsuart_ctrl_disconnect
	.align	2
	.global	ghsuart_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_setup, %function
ghsuart_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r3, [r8, #1876]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	add	r9, r3, r0
	str	r3, [sp, #20]
	cmp	r9, #2
	str	r3, [sp, #24]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L14596
	ldr	r7, [sp, #20]
	cmp	r7, r9
	bcs	.L14580
	ldr	r2, .L14600
	mov	r3, #84
	movw	r0, #:lower16:.LC448
	movt	r0, #:upper16:.LC448
	movw	r10, #:lower16:kmalloc_caches
	movw	fp, #:lower16:.LC754
	movt	r10, #:upper16:kmalloc_caches
	str	r0, [sp, #16]
	movt	fp, #:upper16:.LC754
	mov	r0, r7
	mla	r3, r3, r7, r2
	add	r3, r3, #4
	mov	r5, r3
	str	r3, [sp, #28]
	b	.L14586
.L14599:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14597
.L14583:
	movw	r0, #:lower16:.LC754
	mov	r3, r6
	str	r6, [sp]
	mov	r2, #1
	mov	r1, #10
	movt	r0, #:upper16:.LC754
	bl	__alloc_workqueue_key
	mov	r3, r0
	ldr	r2, .L14600+4
	add	r0, r4, #20
	cmp	r3, #0
	ldr	r1, [sp, #16]
	str	r3, [r4, #32]
	beq	.L14598
	ldr	r3, [sp, #12]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r6, [r4, #8]
	str	r6, [r4, #16]
	bl	__init_waitqueue_head
	movw	r3, #:lower16:ghsuart_ctrl_connect_w
	movw	r2, #:lower16:ghsuart_ctrl_disconnect_w
	str	r4, [r4, #72]
	movt	r3, #:upper16:ghsuart_ctrl_connect_w
	movt	r2, #:upper16:ghsuart_ctrl_disconnect_w
	movw	r1, #:lower16:ghsuart_ctrl_receive
	mov	ip, #2560
	add	r0, r4, #56
	movt	r1, #:upper16:ghsuart_ctrl_receive
	str	r3, [r4, #48]
	add	r3, r4, #40
	mov	lr, #42
	str	r2, [r4, #64]
	movw	r2, #:lower16:ghsuart_ctrl_probe
	movt	r2, #:upper16:ghsuart_ctrl_probe
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	movw	r3, #:lower16:ghsuart_ctrl_remove
	movt	r3, #:upper16:ghsuart_ctrl_remove
	str	ip, [r4, #52]
	str	r0, [r4, #56]
	str	r0, [r4, #60]
	mov	r0, r5
	add	r5, r5, #84
	str	lr, [r4, #76]
	str	r1, [r4, #84]
	str	r4, [r5, #-88]
	str	r2, [r5, #-84]
	str	r3, [r5, #-80]
	str	fp, [r5, #-64]
	str	r6, [r5, #-56]
	bl	platform_driver_register
	cmp	r0, #0
	blt	.L14593
	add	r7, r7, #1
	cmp	r9, r7
	bls	.L14580
	ldr	r0, [r8, #1876]
.L14586:
	ldr	r3, [r10, #28]
	mov	r6, #0
	add	r0, r0, #1
	mov	r2, #108
	movw	r1, #32976
	str	r0, [r8, #1876]
	cmp	r3, r6
	mov	r0, r3
	bne	.L14599
	mov	r4, #16
	b	.L14583
.L14593:
	mov	r4, r0
.L14584:
	ldr	r3, [r8, #1876]
	movw	r0, #:lower16:.LC554
	mov	r2, r7
	movt	r0, #:upper16:.LC554
	ldr	r1, .L14600+8
	sub	r3, r3, #1
	str	r3, [r8, #1876]
	bl	printk
	ldr	r2, [sp, #20]
	ldr	r3, [r8, #1876]
	cmp	r2, r3
	bcs	.L14588
	ldr	r5, [sp, #28]
	mov	r6, r2
.L14587:
	ldr	r7, [r5, #-4]
	add	r6, r6, #1
	ldr	r0, [r7, #32]
	bl	destroy_workqueue
	mov	r0, r5
	add	r5, r5, #84
	bl	platform_driver_unregister
	mov	r0, r7
	bl	kfree
	ldr	r3, [r8, #1876]
	cmp	r6, r3
	bcc	.L14587
.L14588:
	ldr	r3, [sp, #24]
	str	r4, [sp, #20]
	str	r3, [r8, #1876]
.L14580:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14597:
	mvn	r4, #11
	b	.L14584
.L14598:
	movw	r2, #:lower16:.LC754
	movw	r0, #:lower16:.LC750
	ldr	r1, .L14600+12
	movt	r2, #:upper16:.LC754
	movt	r0, #:upper16:.LC750
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L14584
.L14596:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L14600+8
	movw	r0, #:lower16:.LC534
	movt	r0, #:upper16:.LC534
	str	r3, [sp, #20]
	bl	printk
	b	.L14580
.L14601:
	.align	2
.L14600:
	.word	.LANCHOR1+1880
	.word	.LANCHOR1+4080
	.word	.LANCHOR3-1136
	.word	.LANCHOR3-1116
	.fnend
	.size	ghsuart_ctrl_setup, .-ghsuart_ctrl_setup
	.align	2
	.global	event_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	event_string, %function
event_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #8
	bhi	.L14604
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r0, lsl #2
	ldr	r0, [r3, #-1092]
	bx	lr
.L14604:
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bx	lr
	.fnend
	.size	event_string, .-event_string
	.align	2
	.global	ghsuart_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect, %function
ghsuart_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, #84
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r3, #2048]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #2052]
	cmp	r1, r2
	bhi	.L14618
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L14619
	mov	r6, r0
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.41
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14608
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L14608:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14609
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L14609:
	ldr	r5, [r4, #16]
	mov	r3, #0
	str	r3, [r4, #4]
	cmp	r5, r3
	beq	.L14620
.L14610:
	add	r8, r4, #72
	mov	r5, #0
	mov	r0, r8
	add	r7, r4, #184
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #192]
	add	r6, r4, #104
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r1, r4, #128
	ldr	r0, [r4, #108]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work
.L14620:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r6, #132]
	mov	r0, r7
	str	r5, [r4, #24]
	str	r5, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	b	.L14610
.L14619:
	movw	r0, #:lower16:.LC15
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC15
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L14621
	b	printk
.L14618:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC94
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L14621
	b	printk
.L14622:
	.align	2
.L14621:
	.word	.LANCHOR3-1056
	.fnend
	.size	ghsuart_data_disconnect, .-ghsuart_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disable, %function
frmnet_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #136
	strd	r8, [sp, #16]
	add	r9, r0, #124
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #128]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #128]
	mov	r3, #0
	mov	r0, r9
	str	r3, [r2]
	str	r3, [r5, #112]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #136]
	mov	r10, r0
	cmp	r6, r3
	beq	.L14624
	mov	r8, #256
	mov	r7, #512
.L14625:
	ldm	r3, {r1, r2}
	mov	r4, r3
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r8, [r3]
	str	r7, [r3, #4]
	ldr	r0, [r4, #-8]!
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r5, #136]
	cmp	r3, r6
	bne	.L14625
.L14624:
	mov	r3, #0
	mov	r1, r10
	mov	r0, r9
	movw	r4, #:lower16:.LANCHOR1
	str	r3, [r5, #144]
	movt	r4, #:upper16:.LANCHOR1
	bl	_raw_spin_unlock_irqrestore
	ldrb	r0, [r5, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	add	r2, r3, r0
	add	r2, r4, r2, lsl #3
	ldr	r7, [r2, #2340]
	ldr	ip, [r2, #2344]
	sub	r1, ip, #1
	cmp	r1, #9
	movwhi	lr, #:lower16:.LC102
	movthi	lr, #:upper16:.LC102
	bhi	.L14626
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r1, lsl #2
	ldr	lr, [r2, #676]
.L14626:
	sub	r2, r7, #1
	cmp	r2, #9
	movwhi	r6, #:lower16:.LC102
	movthi	r6, #:upper16:.LC102
	bhi	.L14627
	movw	r1, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR2
	add	r1, r1, r2, lsl #2
	ldr	r6, [r1, #676]
.L14627:
	add	r1, r3, r0
	sub	ip, ip, #3
	add	r1, r4, r1, lsl #3
	ldr	r2, [r1, #2352]
	cmp	ip, #7
	ldrls	pc, [pc, ip, asl #2]
	b	.L14628
.L14630:
	.word	.L14629
	.word	.L14631
	.word	.L14628
	.word	.L14628
	.word	.L14628
	.word	.L14632
	.word	.L14633
	.word	.L14634
.L14633:
	ldr	r3, [r4, #1876]
	cmp	r2, r3
	bhi	.L14652
	mov	r1, #84
	cmp	r5, #0
	mla	r2, r1, r2, r4
	ldr	r9, [r2, #1880]
	clz	r8, r9
	lsr	r8, r8, #5
	moveq	r8, #1
	cmp	r8, #0
	bne	.L14653
	add	r10, r9, #8
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r5, #88]
	mov	r0, r10
	str	r8, [r5, #92]
	str	r8, [r9, #12]
	str	r8, [r9, #68]
	str	r8, [r9, #92]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r9, #52
	ldr	r0, [r9, #32]
	bl	queue_work
	ldrb	r0, [r5, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L14634:
	add	r3, r3, r0
	add	r4, r4, r3, lsl #3
	sub	r2, r7, #5
	ldr	r1, [r4, #2348]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L14641
.L14643:
	.word	.L14642
	.word	.L14642
	.word	.L14642
	.word	.L14644
	.word	.L14645
	.word	.L14623
.L14645:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	ghsuart_data_disconnect
.L14644:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	ghsic_data_disconnect
.L14642:
	uxtb	r1, r1
	mov	r2, r7
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_disconnect
.L14623:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14632:
	ldr	r1, [r4, #1036]
	mov	r3, #104
	mla	r3, r3, r2, r4
	cmp	r2, r1
	ldr	r8, [r3, #1040]
	bhi	.L14654
	clz	r3, r8
	cmp	r5, #0
	lsr	r3, r3, #5
	moveq	r9, #1
	movne	r9, r3
	cmp	r9, #0
	bne	.L14655
	ldr	fp, [r8, #48]
	add	r10, r8, #4
	mov	r0, r10
	cmp	fp, #0
	beq	.L14656
	bl	_raw_spin_lock_irqsave
	str	r9, [r5, #88]
	str	r9, [r5, #92]
.L14638:
	mov	r3, #0
	mov	r1, r0
	mov	r0, r10
	str	r3, [r8, #8]
	str	r3, [r8, #52]
	str	r3, [r8, #88]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r8, #32
	ldr	r0, [r8, #12]
	bl	queue_work
	ldrb	r0, [r5, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14634
.L14631:
	mov	r0, r5
	bl	gqti_ctrl_disconnect
	ldrb	r0, [r5, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14634
.L14629:
	mov	r0, r5
	uxtb	r1, r2
	bl	gsmd_ctrl_disconnect
	ldrb	r0, [r5, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14634
.L14656:
	bl	_raw_spin_lock_irqsave
	str	fp, [r5, #132]
	b	.L14638
.L14628:
	movw	r0, #:lower16:.LC375
	mov	r2, lr
.L14651:
	ldr	r1, .L14657
	movt	r0, #:upper16:.LC375
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L14641:
	movw	r0, #:lower16:.LC375
	mov	r2, r6
	b	.L14651
.L14652:
	movw	r0, #:lower16:.LC94
	ldr	r1, .L14657+4
	movt	r0, #:upper16:.LC94
	bl	printk
	ldrb	r0, [r5, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14634
.L14655:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L14657+8
	movt	r0, #:upper16:.LC653
	bl	printk
	ldrb	r0, [r5, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14634
.L14653:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L14657+4
	movt	r0, #:upper16:.LC653
	bl	printk
	ldrb	r0, [r5, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14634
.L14654:
	movw	r0, #:lower16:.LC94
	ldr	r1, .L14657+8
	movt	r0, #:upper16:.LC94
	bl	printk
	ldrb	r0, [r5, #108]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L14634
.L14658:
	.align	2
.L14657:
	.word	.LANCHOR3-1032
	.word	.LANCHOR3-1160
	.word	.LANCHOR3-1392
	.fnend
	.size	frmnet_disable, .-frmnet_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_disable, %function
gser_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #140]
	sub	r3, r3, #1
	cmp	r3, #9
	bhi	.L14674
	ldrb	r2, [r0, #137]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LANCHOR2
	add	r1, r1, r3, lsl #2
	add	r2, r2, r2, lsl #1
	ldr	r1, [r1, #676]
	add	r2, r0, r2, lsl #2
	ldr	r6, [r2, #2252]
	cmp	r3, #8
	ldrls	pc, [pc, r3, asl #2]
	b	.L14660
.L14662:
	.word	.L14661
	.word	.L14663
	.word	.L14664
	.word	.L14660
	.word	.L14660
	.word	.L14660
	.word	.L14660
	.word	.L14665
	.word	.L14666
.L14674:
	movw	r1, #:lower16:.LC102
	movt	r1, #:upper16:.LC102
.L14660:
	movw	r0, #:lower16:.LC730
	mov	r2, r1
	ldr	r1, .L14681
	movt	r0, #:upper16:.LC730
	bl	printk
.L14667:
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L14673
	blx	r2
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
.L14673:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
	mov	r3, #0
	str	r3, [r2]
	strb	r3, [r4, #138]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14666:
	mov	r1, r6
	mov	r0, r4
	bl	ghsuart_data_disconnect
	b	.L14667
.L14665:
	ldr	r2, [r0, #1036]
	mov	r3, #104
	mla	r0, r3, r6, r0
	cmp	r6, r2
	ldr	r5, [r0, #1040]
	bhi	.L14679
	clz	r3, r5
	cmp	r4, #0
	lsr	r3, r3, #5
	moveq	r7, #1
	movne	r7, r3
	cmp	r7, #0
	bne	.L14680
	ldr	r9, [r5, #48]
	add	r8, r5, #4
	mov	r0, r8
	cmp	r9, #0
	bne	.L14671
	bl	_raw_spin_lock_irqsave
	str	r9, [r4, #132]
.L14672:
	mov	r3, #0
	mov	r1, r0
	mov	r0, r8
	str	r3, [r5, #8]
	str	r3, [r5, #52]
	str	r3, [r5, #88]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r5, #32
	ldr	r0, [r5, #12]
	bl	queue_work
.L14669:
	mov	r1, r6
	mov	r0, r4
	bl	ghsic_data_disconnect
	b	.L14667
.L14664:
	uxtb	r1, r6
	mov	r0, r4
	bl	gsmd_disconnect
	b	.L14667
.L14663:
	uxtb	r1, r6
	mov	r0, r4
	bl	gsdio_disconnect
	b	.L14667
.L14661:
	mov	r0, r4
	bl	gserial_disconnect
	b	.L14667
.L14671:
	bl	_raw_spin_lock_irqsave
	str	r7, [r4, #88]
	str	r7, [r4, #92]
	b	.L14672
.L14679:
	movw	r0, #:lower16:.LC94
	mov	r2, r6
	ldr	r1, .L14681+4
	movt	r0, #:upper16:.LC94
	bl	printk
	b	.L14669
.L14680:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L14681+4
	movt	r0, #:upper16:.LC653
	bl	printk
	b	.L14669
.L14682:
	.align	2
.L14681:
	.word	.LANCHOR3-1008
	.word	.LANCHOR3-1392
	.fnend
	.size	gser_disable, .-gser_disable
	.align	2
	.global	ghsuart_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect, %function
ghsuart_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #84
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #2048]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #2052]
	cmp	r1, r2
	bhi	.L14692
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L14693
	ldr	r3, [r4, #16]
	add	r7, r4, #72
	add	r6, r4, #104
	mov	r0, r7
	cmp	r3, #0
	beq	.L14694
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #76]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldr	r2, [r3, #-904]
	ldr	r3, [r3, #-900]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #76]
	str	r4, [r3]
	ldr	r3, [r5, #80]
	str	r4, [r3]
.L14688:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L14695
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L14696
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #208]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #204]
	mov	r0, r6
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #112
	ldr	r0, [r4, #108]
	bl	queue_work
.L14683:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14694:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #80]
	mov	r1, r0
	mov	r0, r7
	add	r8, r4, #20
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR5
	mov	r0, r8
	movt	r3, #:upper16:.LANCHOR5
	ldr	r2, [r3, #-912]
	ldr	r3, [r3, #-908]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #80]
	str	r4, [r3]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:ghsuart_send_controlbits_tomodem
	mov	r1, r0
	movt	r3, #:upper16:ghsuart_send_controlbits_tomodem
	mov	r0, r8
	str	r3, [r5, #132]
	str	r5, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	b	.L14688
.L14695:
	movw	r0, #:lower16:.LC492
	ldr	r1, .L14697
	ldr	r2, [r4, #8]
	movt	r0, #:upper16:.LC492
	bl	printk
	b	.L14683
.L14696:
	movw	r0, #:lower16:.LC493
	ldr	r1, .L14697
	ldr	r2, [r4, #12]
	movt	r0, #:upper16:.LC493
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L14683
.L14693:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L14697
	mvn	r5, #18
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L14683
.L14692:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldr	r1, .L14697
	movt	r0, #:upper16:.LC94
	mvn	r5, #18
	bl	printk
	b	.L14683
.L14698:
	.align	2
.L14697:
	.word	.LANCHOR3-988
	.fnend
	.size	ghsuart_data_connect, .-ghsuart_data_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_set_alt, %function
gser_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #152]
	.pad #4
	sub	sp, sp, #4
	ldr	r2, [r4, #20]
	ldr	r3, [r0]
	ldr	r7, [r2, #24]
	cmp	r3, #0
	beq	.L14700
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #152]
.L14700:
	ldr	r5, [r0, #28]
	cmp	r5, #0
	beq	.L14752
.L14701:
	ldr	r3, [r0, #8]
	mov	r1, r5
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L14753
	ldr	r3, [r4, #152]
	str	r4, [r3]
	ldr	r2, [r4, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14705
	ldr	r3, [r4, #140]
	sub	r3, r3, #1
	cmp	r3, #9
	bls	.L14754
	movw	ip, #:lower16:.LC102
	movt	ip, #:upper16:.LC102
.L14706:
	movw	r0, #:lower16:.LC730
	mov	r2, ip
	ldr	r1, .L14761
	movt	r0, #:upper16:.LC730
	bl	printk
	ldr	r2, [r4, #80]
.L14705:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14718
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L14718
.L14719:
	ldr	r3, [r4, #140]
	sub	r3, r3, #1
	cmp	r3, #9
	bls	.L14755
	movw	ip, #:lower16:.LC102
	movt	ip, #:upper16:.LC102
.L14722:
	movw	r0, #:lower16:.LC375
	mov	r2, ip
	ldr	r1, .L14761+4
	movt	r0, #:upper16:.LC375
	bl	printk
.L14729:
	mov	r3, #1
	strb	r3, [r4, #138]
.L14699:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14755:
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR2
	add	r0, r0, r3, lsl #2
	add	r2, r2, r2, lsl #1
	ldr	ip, [r0, #676]
	add	r2, r1, r2, lsl #2
	ldr	r7, [r2, #2252]
	cmp	r3, #8
	ldrls	pc, [pc, r3, asl #2]
	b	.L14722
.L14724:
	.word	.L14723
	.word	.L14725
	.word	.L14726
	.word	.L14722
	.word	.L14722
	.word	.L14722
	.word	.L14722
	.word	.L14727
	.word	.L14728
.L14718:
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14721
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L14719
.L14721:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r6, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L14699
.L14753:
	ldr	r2, [r4, #152]
	movw	r1, #:lower16:.LC639
	mov	r3, r6
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC639
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L14699
.L14754:
	ldrb	r2, [r4, #137]	@ zero_extendqisi2
	movw	r1, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR2
	add	r0, r0, r3, lsl #2
	add	r2, r2, r2, lsl #1
	ldr	ip, [r0, #676]
	add	r2, r1, r2, lsl #2
	ldr	r8, [r2, #2252]
	cmp	r3, #8
	ldrls	pc, [pc, r3, asl #2]
	b	.L14706
.L14708:
	.word	.L14707
	.word	.L14709
	.word	.L14710
	.word	.L14706
	.word	.L14706
	.word	.L14706
	.word	.L14706
	.word	.L14711
	.word	.L14712
.L14727:
	ldr	r2, [r1, #1036]
	clz	r3, r4
	lsr	r3, r3, #5
	cmp	r7, r2
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L14756
	mov	r3, #104
	mla	r1, r3, r7, r1
	ldr	r5, [r1, #1040]
	cmp	r5, #0
	beq	.L14757
	add	r8, r5, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #48]
	mov	r1, r0
	cmp	r3, #0
	bne	.L14733
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r3, [r4, #132]
	ldr	r3, [r5, #48]
.L14733:
	cmp	r3, #1
	bne	.L14734
	ldr	r0, [r4, #84]
	movw	r2, #:lower16:ghsic_send_cpkt_tomodem
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r2, #:upper16:ghsic_send_cpkt_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r0, [r5, #52]
	strd	r2, [r4, #88]
.L14734:
	mov	r3, #0
	mov	r0, r8
	str	r4, [r5, #8]
	str	r3, [r5, #96]
	str	r3, [r5, #100]
	str	r3, [r5, #104]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r5, #16
	ldr	r0, [r5, #12]
	bl	queue_work
	mov	r1, r7
	mov	r0, r4
	bl	ghsic_data_connect
	subs	r2, r0, #0
	beq	.L14729
	movw	r0, #:lower16:.LC756
	ldr	r1, .L14761+4
	movt	r0, #:upper16:.LC756
	bl	printk
	mov	r1, r7
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	b	.L14729
.L14726:
	uxtb	r1, r7
	mov	r0, r4
	bl	gsmd_connect
	b	.L14729
.L14725:
	uxtb	r1, r7
	mov	r0, r4
	bl	gsdio_connect
	b	.L14729
.L14723:
	uxtb	r1, r7
	mov	r0, r4
	bl	gserial_connect
	b	.L14729
.L14728:
	mov	r1, r7
	mov	r0, r4
	bl	ghsuart_data_connect
	subs	r2, r0, #0
	beq	.L14729
	movw	r0, #:lower16:.LC757
	ldr	r1, .L14761+4
	movt	r0, #:upper16:.LC757
	bl	printk
	b	.L14729
.L14712:
	mov	r1, r8
	mov	r0, r4
	bl	ghsuart_data_disconnect
	ldr	r2, [r4, #80]
	b	.L14705
.L14711:
	ldr	r2, [r1, #1036]
	mov	r3, #104
	mla	r1, r3, r8, r1
	cmp	r8, r2
	ldr	r5, [r1, #1040]
	bhi	.L14758
	clz	r3, r5
	cmp	r4, #0
	lsr	r3, r3, #5
	moveq	r9, #1
	movne	r9, r3
	cmp	r9, #0
	bne	.L14759
	ldr	fp, [r5, #48]
	add	r10, r5, #4
	mov	r0, r10
	cmp	fp, #0
	beq	.L14760
	bl	_raw_spin_lock_irqsave
	str	r9, [r4, #88]
	str	r9, [r4, #92]
.L14717:
	mov	r3, #0
	mov	r1, r0
	mov	r0, r10
	str	r3, [r5, #8]
	str	r3, [r5, #52]
	str	r3, [r5, #88]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r5, #32
	ldr	r0, [r5, #12]
	bl	queue_work
.L14714:
	mov	r1, r8
	mov	r0, r4
	bl	ghsic_data_disconnect
	ldr	r2, [r4, #80]
	b	.L14705
.L14710:
	uxtb	r1, r8
	mov	r0, r4
	bl	gsmd_disconnect
	ldr	r2, [r4, #80]
	b	.L14705
.L14709:
	uxtb	r1, r8
	mov	r0, r4
	bl	gsdio_disconnect
	ldr	r2, [r4, #80]
	b	.L14705
.L14707:
	mov	r0, r4
	bl	gserial_disconnect
	ldr	r2, [r4, #80]
	b	.L14705
.L14760:
	bl	_raw_spin_lock_irqsave
	str	fp, [r4, #132]
	b	.L14717
.L14752:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14702
	ldr	r0, [r4, #152]
	ldr	r5, [r0, #28]
	b	.L14701
.L14702:
	ldr	r3, [r4, #152]
	mvn	r6, #21
	str	r5, [r3, #28]
	b	.L14699
.L14757:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L14761+8
	movt	r0, #:upper16:.LC15
	bl	printk
.L14731:
	movw	r0, #:lower16:.LC755
	mvn	r2, #18
	ldr	r1, .L14761+4
	movt	r0, #:upper16:.LC755
	bl	printk
	b	.L14729
.L14756:
	movw	r0, #:lower16:.LC94
	mov	r2, r7
	ldr	r1, .L14761+8
	movt	r0, #:upper16:.LC94
	bl	printk
	b	.L14731
.L14759:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L14761+12
	movt	r0, #:upper16:.LC653
	bl	printk
	b	.L14714
.L14758:
	movw	r0, #:lower16:.LC94
	mov	r2, r8
	ldr	r1, .L14761+12
	movt	r0, #:upper16:.LC94
	bl	printk
	b	.L14714
.L14762:
	.align	2
.L14761:
	.word	.LANCHOR3-1008
	.word	.LANCHOR3-964
	.word	.LANCHOR3-1412
	.word	.LANCHOR3-1392
	.fnend
	.size	gser_set_alt, .-gser_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_set_alt, %function
frmnet_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #120]
	ldr	r2, [r0, #128]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14764
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #128]
.L14764:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L14857
	ldr	r3, [r4, #128]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L14858
	ldr	r3, [r4, #128]
	str	r4, [r3]
	ldr	r2, [r4, #76]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14768
	ldr	r3, [r4, #80]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L14768
.L14769:
	mov	r3, #1
	mov	r8, r4
	str	r3, [r4, #112]
	ldr	r5, [r8, #136]!
	cmp	r8, r5
	beq	.L14763
	add	r7, r4, #124
	mvn	r9, #94
	mov	r10, #256
.L14815:
	mov	r0, r7
	ldr	fp, [r4, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	cmp	fp, #0
	clz	r3, r3
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r3, #0
	bne	.L14856
	ldr	r2, [fp]
	cmp	r2, #0
	beq	.L14856
	ldr	r2, [r4, #144]
	add	r2, r2, #1
	cmp	r2, #1
	str	r2, [r4, #144]
	beq	.L14812
.L14856:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L14811:
	ldr	r5, [r5]
	cmp	r8, r5
	bne	.L14815
.L14763:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14812:
	ldr	ip, [fp]
	mov	r1, r0
	mov	r0, r7
	strb	r9, [ip]
	strb	r2, [ip, #1]
	strb	r3, [ip, #2]
	strb	r3, [ip, #3]
	ldrh	r2, [r4, #104]
	strh	r2, [ip, #4]	@ unaligned
	strb	r3, [ip, #6]
	strb	r3, [ip, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #128]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L14811
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #136]
	mov	fp, r0
	cmp	r8, r3
	beq	.L14813
	ldr	r2, [r4, #144]
	cmp	r2, #0
	beq	.L14813
	sub	r2, r2, #1
	mov	ip, #512
	str	r2, [r4, #144]
	ldrd	r0, [r3]
	mov	r2, r3
	str	r1, [r0, #4]
	str	r0, [r1]
	stm	r3, {r10, ip}
	ldr	r0, [r2, #-8]!
	str	r2, [sp, #8]
	str	r2, [sp, #12]
	bl	kfree
	ldr	r2, [sp, #8]
	mov	r0, r2
	bl	kfree
.L14813:
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L14811
.L14768:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14771
	mov	r1, r4
	ldr	r2, [r4, #80]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L14771
	ldrb	r1, [r4, #108]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR1
	ldr	r2, [r4, #120]
	movt	r5, #:upper16:.LANCHOR1
	lsl	r3, r1, #1
	ldr	fp, [r2]
	add	r2, r3, r1
	add	r2, r5, r2, lsl #3
	ldr	r7, [r2, #2340]
	ldr	r8, [r2, #2344]
	sub	r0, r8, #1
	cmp	r0, #9
	movwhi	ip, #:lower16:.LC102
	movthi	ip, #:upper16:.LC102
	bls	.L14859
.L14772:
	sub	r0, r7, #1
	cmp	r0, #9
	movwhi	r9, #:lower16:.LC102
	movthi	r9, #:upper16:.LC102
	bls	.L14860
.L14773:
	add	r0, r3, r1
	sub	lr, r8, #3
	add	r0, r5, r0, lsl #3
	ldr	r2, [r0, #2352]
	cmp	lr, #7
	ldrls	pc, [pc, lr, asl #2]
	b	.L14774
.L14776:
	.word	.L14775
	.word	.L14777
	.word	.L14774
	.word	.L14774
	.word	.L14774
	.word	.L14778
	.word	.L14779
	.word	.L14780
.L14775:
	uxtb	r1, r2
	cmp	r1, #5
	bhi	.L14781
	mov	r3, #84
	mla	r1, r3, r1, r5
	ldr	r1, [r1, #528]
	cmp	r1, #0
	beq	.L14781
	cmp	r4, #0
	beq	.L14861
	mla	r3, r3, r2, r5
	ldr	r10, [r3, #528]
	add	r2, r10, #108
	mov	r0, r2
	str	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	movw	ip, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	movt	ip, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	str	r4, [r10, #104]
	mov	r1, r0
	str	ip, [r4, #88]
	mov	r0, r2
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r10, #112
	mov	r2, #0
	ldr	r0, [r5, #3516]
	bl	queue_delayed_work
	ldrb	r1, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r1, #1
.L14780:
	add	r3, r3, r1
	add	r5, r5, r3, lsl #3
	sub	r2, r7, #5
	ldr	r5, [r5, #2348]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L14797
.L14799:
	.word	.L14798
	.word	.L14800
	.word	.L14801
	.word	.L14802
	.word	.L14803
	.word	.L14818
.L14860:
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r0, lsl #2
	ldr	r9, [r2, #676]
	b	.L14773
.L14859:
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r0, lsl #2
	ldr	ip, [r2, #676]
	b	.L14772
.L14779:
	ldr	r1, [r5, #1876]
	clz	r3, r4
	lsr	r3, r3, #5
	cmp	r2, r1
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L14862
	mov	r1, #84
	mla	r2, r1, r2, r5
	ldr	r10, [r2, #1880]
	cmp	r10, #0
	beq	.L14863
	add	r2, r10, #8
	mov	r0, r2
	strd	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #84]
	movw	lr, #:lower16:ghsuart_send_cpkt_tomodem
	movw	ip, #:lower16:ghsuart_send_cbits_tomodem
	ldr	r2, [sp, #8]
	movt	lr, #:upper16:ghsuart_send_cpkt_tomodem
	movt	ip, #:upper16:ghsuart_send_cbits_tomodem
	mov	r1, r0
	str	r3, [r10, #68]
	ldr	r3, [sp, #12]
	str	lr, [r4, #88]
	mov	r0, r2
	str	ip, [r4, #92]
	str	r4, [r10, #12]
	str	r3, [r10, #96]
	str	r3, [r10, #100]
	str	r3, [r10, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r10, #88]
	tst	r3, #2
	bne	.L14796
.L14855:
	ldrb	r1, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r1, #1
	b	.L14780
.L14778:
	ldr	r1, [r5, #1036]
	clz	r3, r4
	lsr	r3, r3, #5
	cmp	r2, r1
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L14864
	mov	r3, #104
	mla	r2, r3, r2, r5
	ldr	r10, [r2, #1040]
	cmp	r10, #0
	beq	.L14865
	add	r2, r10, #4
	mov	r0, r2
	str	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #48]
	mov	r1, r0
	ldr	r2, [sp, #8]
	cmp	r3, #0
	bne	.L14791
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r3, [r4, #132]
	ldr	r3, [r10, #48]
.L14791:
	cmp	r3, #1
	beq	.L14866
.L14792:
	mov	r3, #0
	mov	r0, r2
	str	r4, [r10, #8]
	str	r3, [r10, #96]
	str	r3, [r10, #100]
	str	r3, [r10, #104]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r10, #16
	ldr	r0, [r10, #12]
	bl	queue_work
	ldrb	r1, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r1, #1
	b	.L14780
.L14777:
	cmp	r4, #0
	beq	.L14867
	ldr	r10, [r5, #1032]
	add	r2, r10, #52
	mov	r0, r2
	str	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	movw	ip, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	movt	ip, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	str	r4, [r10]
	mov	r1, r0
	str	ip, [r4, #88]
	mov	r0, r2
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #1
	add	r0, r10, #32
	mov	r2, r1
	mov	r3, #0
	str	r1, [r10, #8]
	mov	r1, #3
	bl	__wake_up
	cmp	r10, #0
	beq	.L14855
	ldr	r0, [r10]
	cmp	r0, #0
	beq	.L14855
	ldr	r3, [r0, #100]
	cmp	r3, #0
	beq	.L14855
	blx	r3
	b	.L14855
.L14818:
	mov	r6, #0
	b	.L14769
.L14803:
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_data_connect
	subs	r6, r0, #0
	beq	.L14769
	movw	r0, #:lower16:.LC757
	mov	r2, r6
	ldr	r1, .L14870
	movt	r0, #:upper16:.LC757
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_ctrl_disconnect
	b	.L14769
.L14802:
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_data_connect
	subs	r6, r0, #0
	beq	.L14769
	movw	r0, #:lower16:.LC756
	mov	r2, r6
	ldr	r1, .L14870
	movt	r0, #:upper16:.LC756
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	b	.L14769
.L14801:
	mov	r3, r5
	mov	r2, #0
	ldr	r0, [fp, #28]
	mov	r1, #2
	uxtb	r9, r5
	bl	usb_bam_get_connection_idx
	mov	r7, r0
	mov	r3, r5
	ldr	r0, [fp, #28]
	mov	r2, #1
	mov	r1, #2
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r7
	bmi	.L14868
	uxtb	r0, r0
	uxtb	r3, r7
	mov	r2, #7
	mov	r1, r9
	str	r0, [sp]
	mov	r0, r4
	bl	gbam_connect
	subs	r5, r0, #0
	beq	.L14769
	movw	r0, #:lower16:.LC762
	mov	r2, r5
	ldr	r1, .L14870
	movt	r0, #:upper16:.LC762
	bl	printk
	cmp	r8, #4
	beq	.L14869
	mov	r1, r9
	mov	r0, r4
	mov	r6, r5
	bl	gsmd_ctrl_disconnect
	b	.L14769
.L14800:
	mov	r2, #0
	mov	r3, r5
	ldr	r0, [fp, #28]
	mov	r1, r2
	uxtb	r8, r5
	bl	usb_bam_get_connection_idx
	mov	r6, r0
	mov	r3, r5
	ldr	r0, [fp, #28]
	mov	r2, #1
	mov	r1, #0
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r6
	bmi	.L14804
	uxtb	r3, r6
	uxtb	r2, r0
.L14805:
	str	r2, [sp]
	mov	r1, r8
	mov	r0, r4
	mov	r2, r7
	bl	gbam_connect
	subs	r6, r0, #0
	beq	.L14769
	movw	r0, #:lower16:.LC762
	mov	r2, r6
	ldr	r1, .L14870
	movt	r0, #:upper16:.LC762
	bl	printk
	mov	r1, r8
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L14769
.L14798:
	mov	r2, #0
	uxtb	r8, r5
	mov	r3, r2
	b	.L14805
.L14857:
	ldr	r2, [r4, #128]
	mov	r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r3, r6
	str	r0, [r2, #28]
	ldr	r2, [r4, #128]
	ldr	r0, [r5]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L14763
.L14796:
	add	r1, r10, #36
	ldr	r0, [r10, #32]
	bl	queue_work
	ldrb	r1, [r4, #108]	@ zero_extendqisi2
	lsl	r3, r1, #1
	b	.L14780
.L14866:
	ldr	ip, [r4, #84]
	movw	r0, #:lower16:ghsic_send_cpkt_tomodem
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r0, #:upper16:ghsic_send_cpkt_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	ip, [r10, #52]
	str	r0, [r4, #88]
	str	r3, [r4, #92]
	b	.L14792
.L14771:
	ldr	r2, [r4, #76]
	mov	r3, #0
	mvn	r6, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #80]
	str	r3, [r2, #28]
	b	.L14763
.L14858:
	ldr	r2, [r4, #128]
	movw	r0, #:lower16:.LC649
	mov	r3, r6
	ldr	r1, .L14870+4
	movt	r0, #:upper16:.LC649
	ldr	r2, [r2, #4]
	bl	printk
	b	.L14763
.L14797:
	movw	r0, #:lower16:.LC375
	mov	r2, r9
	ldr	r1, .L14870
	movt	r0, #:upper16:.LC375
	mvn	r6, #18
	bl	printk
	b	.L14769
.L14862:
	movw	r0, #:lower16:.LC94
	ldr	r1, .L14870+8
	movt	r0, #:upper16:.LC94
	bl	printk
.L14794:
	movw	r0, #:lower16:.LC760
	mvn	r2, #18
	ldr	r1, .L14870
	movt	r0, #:upper16:.LC760
	mov	r6, r2
	bl	printk
	b	.L14769
.L14774:
	movw	r0, #:lower16:.LC375
	mov	r2, ip
	ldr	r1, .L14870
	movt	r0, #:upper16:.LC375
	mvn	r6, #18
	bl	printk
	b	.L14769
.L14781:
	movw	r0, #:lower16:.LC652
	ldr	r1, .L14870+12
	movt	r0, #:upper16:.LC652
	bl	printk
.L14784:
	movw	r0, #:lower16:.LC758
	mvn	r2, #18
	ldr	r1, .L14870
	movt	r0, #:upper16:.LC758
	mov	r6, r2
	bl	printk
	b	.L14769
.L14863:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L14870+8
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L14794
.L14865:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L14870+16
	movt	r0, #:upper16:.LC15
	bl	printk
.L14789:
	movw	r0, #:lower16:.LC755
	mvn	r2, #18
	ldr	r1, .L14870
	movt	r0, #:upper16:.LC755
	mov	r6, r2
	bl	printk
	b	.L14769
.L14864:
	movw	r0, #:lower16:.LC94
	ldr	r1, .L14870+16
	movt	r0, #:upper16:.LC94
	bl	printk
	b	.L14789
.L14867:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L14870+20
	mvn	r6, #18
	movt	r0, #:upper16:.LC653
	bl	printk
	movw	r0, #:lower16:.LC759
	mov	r2, r6
	ldr	r1, .L14870
	movt	r0, #:upper16:.LC759
	bl	printk
	b	.L14769
.L14861:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L14870+12
	movt	r0, #:upper16:.LC653
	bl	printk
	b	.L14784
.L14804:
	movw	r0, #:lower16:.LC761
	ldr	r1, .L14870
	mov	r6, #0
	movt	r0, #:upper16:.LC761
	bl	printk
	mov	r1, r8
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L14769
.L14868:
	movw	r0, #:lower16:.LC761
	ldr	r1, .L14870
	mov	r6, #0
	movt	r0, #:upper16:.LC761
	bl	printk
	mov	r1, r9
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L14769
.L14869:
	mov	r0, r4
	mov	r6, r5
	bl	gqti_ctrl_disconnect
	b	.L14769
.L14871:
	.align	2
.L14870:
	.word	.LANCHOR3-932
	.word	.LANCHOR3-948
	.word	.LANCHOR3-1184
	.word	.LANCHOR3-2724
	.word	.LANCHOR3-1412
	.word	.LANCHOR3-1456
	.fnend
	.size	frmnet_set_alt, .-frmnet_set_alt
	.align	2
	.global	ghsuart_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_setup, %function
ghsuart_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r3, [r9, #2048]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #8]
	add	r10, r3, r0
	str	r3, [sp, #20]
	cmp	r10, #4
	str	r3, [sp, #24]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L14890
	ldr	r3, [sp, #20]
	cmp	r3, r10
	bge	.L14872
	ldr	r2, .L14893
	mov	r7, r3
	mov	r3, #84
	cmp	r1, #0
	movw	r1, #:lower16:.LC448
	moveq	r0, #11
	movne	r0, #10
	movt	r1, #:upper16:.LC448
	movw	fp, #:lower16:kmalloc_caches
	mla	r3, r3, r7, r2
	movt	fp, #:upper16:kmalloc_caches
	strd	r0, [sp, #12]
	mov	r0, r7
	add	r3, r3, #4
	mov	r6, r3
	str	r3, [sp, #28]
	b	.L14878
.L14892:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14876
.L14875:
	ldr	r3, .L14893+4
	mov	r2, #1
	mov	r1, #10
	str	r5, [sp]
	ldr	r8, [r3, r7, lsl #2]
	mov	r3, r5
	mov	r0, r8
	bl	__alloc_workqueue_key
	mov	r3, r0
	ldr	r2, .L14893+8
	add	r0, r4, #32
	cmp	r3, #0
	ldr	r1, [sp, #16]
	str	r3, [r4, #108]
	beq	.L14891
	str	r7, [r4]
	add	r7, r7, #1
	str	r5, [r4, #20]
	str	r5, [r4, #28]
	str	r5, [r4, #104]
	str	r5, [r4, #72]
	bl	__init_waitqueue_head
	movw	r0, #:lower16:ghsuart_data_write_tomdm
	movw	r3, #:lower16:ghsuart_data_disconnect_w
	ldr	r2, [sp, #8]
	movt	r0, #:upper16:ghsuart_data_write_tomdm
	movt	r3, #:upper16:ghsuart_data_disconnect_w
	movw	lr, #:lower16:ghsuart_data_connect_w
	movw	ip, #:lower16:ghsuart_data_write_tohost
	movt	lr, #:upper16:ghsuart_data_connect_w
	movw	r1, #:lower16:ghsuart_data_probe
	str	r0, [r4, #156]
	add	r0, r4, #132
	movt	ip, #:upper16:ghsuart_data_write_tohost
	str	r3, [r4, #140]
	mov	r3, #2560
	movt	r1, #:upper16:ghsuart_data_probe
	str	r2, [r4, #16]
	movw	r2, #:lower16:ghsuart_data_remove
	str	r0, [r4, #132]
	movt	r2, #:upper16:ghsuart_data_remove
	str	r0, [r4, #136]
	add	r0, r4, #148
	str	lr, [r4, #124]
	add	lr, r4, #116
	str	r3, [r4, #112]
	str	r3, [r4, #128]
	str	r3, [r4, #144]
	str	r3, [r4, #160]
	add	r3, r4, #80
	str	r0, [r4, #148]
	str	r0, [r4, #152]
	add	r0, r4, #48
	str	r0, [r4, #48]
	str	r0, [r4, #52]
	add	r0, r4, #56
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	ldr	r3, [sp, #12]
	str	r0, [r4, #56]
	str	r0, [r4, #60]
	add	r0, r4, #88
	str	lr, [r4, #116]
	str	lr, [r4, #120]
	add	lr, r4, #164
	str	r5, [r4, #64]
	str	r5, [r4, #68]
	str	r0, [r4, #88]
	str	r0, [r4, #92]
	mov	r0, r6
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	lr, [r4, #164]
	str	lr, [r4, #168]
	str	ip, [r4, #172]
	str	r4, [r4, #176]
	str	r3, [r4, #180]
	str	r4, [r6, #-4]
	stm	r6, {r1, r2}
	add	r6, r6, #84
	str	r8, [r6, #-64]
	str	r5, [r6, #-56]
	bl	platform_driver_register
	cmp	r10, r7
	ble	.L14872
	ldr	r0, [r9, #2048]
.L14878:
	ldr	r3, [fp, #32]
	mov	r5, #0
	add	r0, r0, #1
	mov	r2, #216
	movw	r1, #32976
	str	r0, [r9, #2048]
	cmp	r3, r5
	mov	r0, r3
	bne	.L14892
	mov	r4, #16
	b	.L14875
.L14891:
	movw	r0, #:lower16:.LC750
	mov	r2, r8
	ldr	r1, .L14893+12
	movt	r0, #:upper16:.LC750
	bl	printk
	mov	r0, r4
	bl	kfree
.L14876:
	ldr	r3, [r9, #2048]
	movw	r0, #:lower16:.LC554
	mov	r2, r7
	movt	r0, #:upper16:.LC554
	ldr	r1, .L14893+16
	sub	r3, r3, #1
	str	r3, [r9, #2048]
	bl	printk
	ldr	r2, [sp, #20]
	ldr	r3, [r9, #2048]
	cmp	r2, r3
	bcs	.L14881
	ldr	r4, [sp, #28]
	mov	r5, r2
.L14879:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #108]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #84
	bl	platform_driver_unregister
	ldr	r3, [r9, #2048]
	cmp	r5, r3
	bcc	.L14879
.L14881:
	ldr	r3, [sp, #24]
	str	r3, [r9, #2048]
	mvn	r3, #11
	str	r3, [sp, #20]
.L14872:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14890:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L14893+16
	movw	r0, #:lower16:.LC534
	movt	r0, #:upper16:.LC534
	str	r3, [sp, #20]
	bl	printk
	b	.L14872
.L14894:
	.align	2
.L14893:
	.word	.LANCHOR1+2052
	.word	.LANCHOR3-892
	.word	.LANCHOR1+4080
	.word	.LANCHOR3-884
	.word	.LANCHOR3-912
	.fnend
	.size	ghsuart_data_setup, .-ghsuart_data_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_function_bind_config, %function
serial_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:__stack_chk_guard
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR4
	movt	r8, #:upper16:.LANCHOR4
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r8, #-3940]
	.pad #92
	sub	sp, sp, #92
	str	r3, [sp]
	ldr	r3, [r3]
	cmp	r6, #0
	mvnne	r6, #0
	str	r3, [sp, #84]
	beq	.L14997
.L14896:
	ldr	r3, [r8, #-3936]
	cmp	r3, #0
	ble	.L14895
	movw	r7, #:lower16:.LANCHOR5
	movw	r9, #:lower16:kmalloc_caches
	movw	r10, #:lower16:.LC765
	movt	r7, #:upper16:.LANCHOR5
	movt	r9, #:upper16:kmalloc_caches
	movt	r10, #:upper16:.LC765
	mov	fp, #0
	b	.L14932
.L15000:
	movw	r3, #:lower16:.LC766
	movt	r3, #:upper16:.LC766
	str	r3, [r4]
.L14937:
	movw	r3, #:lower16:gser_setup
	movw	ip, #:lower16:gser_get_dtr
	str	r5, [r4, #20]
	movw	r0, #:lower16:gser_get_rts
	movt	r3, #:upper16:gser_setup
	movt	ip, #:upper16:gser_get_dtr
	movt	r0, #:upper16:gser_get_rts
	str	r3, [r4, #44]
	movw	lr, #:lower16:gser_connect
	movw	r2, #:lower16:gser_send_carrier_detect
	str	ip, [r4, #100]
	movw	r1, #:lower16:gser_send_modem_ctrl_bits
	movw	r3, #:lower16:gser_send_ring_indicator
	str	r0, [r4, #104]
	movw	ip, #:lower16:gser_disconnect
	movw	r0, #:lower16:gser_send_break
	movt	r2, #:upper16:gser_send_carrier_detect
	movt	r1, #:upper16:gser_send_modem_ctrl_bits
	movt	r3, #:upper16:gser_send_ring_indicator
	movt	lr, #:upper16:gser_connect
	movt	ip, #:upper16:gser_disconnect
	movt	r0, #:upper16:gser_send_break
	str	lr, [r4, #108]
	str	ip, [r4, #112]
	str	r0, [r4, #116]
	str	r2, [r4, #120]
	add	r2, r5, #36
	str	r3, [r4, #124]
	add	r3, r4, #64
	str	r1, [r4, #128]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, #0
	beq	.L14939
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L14939
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #64]
.L14939:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L14940
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L14940
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L14940:
	tst	r3, #2
	bne	.L14941
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L14941
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L14941:
	tst	r3, #1
	bne	.L14942
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L14942
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L14942:
	cmp	r6, #0
	bne	.L14998
	ldr	r3, [r8, #-3936]
	add	fp, fp, #1
	cmp	r3, fp
	ble	.L14895
.L14932:
	ldrb	r3, [r7, #-896]	@ zero_extendqisi2
	uxtb	r6, fp
	cmp	r3, #0
	bne	.L14933
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L14949
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r7, #-896]
.L14933:
	ldr	r0, [r9, #8]
	cmp	r0, #0
	beq	.L14950
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L14999
.L14935:
	ldr	r1, .L15010
	add	r2, r6, r6, lsl #1
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r10, [r4]
	add	r3, r3, r2, lsl #2
	movw	r0, #:lower16:gser_unbind
	movw	r2, #:lower16:gser_set_alt
	str	r1, [r4, #4]
	movw	r1, #:lower16:gser_bind
	ldr	ip, [r3, #2244]
	movt	r1, #:upper16:gser_bind
	movw	r3, #:lower16:gser_disable
	movt	r0, #:upper16:gser_unbind
	movt	r2, #:upper16:gser_set_alt
	movt	r3, #:upper16:gser_disable
	str	r1, [r4, #24]
	cmp	r6, #0
	mov	r1, #0
	str	r0, [r4, #28]
	str	r2, [r4, #32]
	str	r3, [r4, #40]
	strb	r6, [r4, #137]
	str	ip, [r4, #140]
	str	r1, [r4, #148]
	beq	.L15000
	cmp	r6, #1
	movweq	r3, #:lower16:.LC767
	movwne	r3, #:lower16:.LC768
	movteq	r3, #:upper16:.LC767
	movtne	r3, #:upper16:.LC768
	str	r3, [r4]
	b	.L14937
.L14950:
	mov	r4, #16
	b	.L14935
.L14998:
	mov	r0, r4
	bl	kfree
.L14934:
.L14917:
	movw	r0, #:lower16:.LC769
	mov	r2, fp
	ldr	r1, .L15010+4
	movt	r0, #:upper16:.LC769
	bl	printk
.L14895:
	ldr	r3, [sp]
	mov	r0, r6
	ldr	r2, [sp, #84]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L15001
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14997:
	mov	r3, #1
	ldr	r1, .L15010+8
	mov	r2, #32
	add	r0, sp, #20
	movw	r4, #:lower16:.LC270
	str	r3, [r8, #-3940]
	movw	r9, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LC270
	bl	strlcpy
	add	r0, sp, #20
	movt	r9, #:upper16:.LANCHOR1
	bl	strim
	str	r0, [sp, #12]
	mov	r2, #32
	ldr	r1, .L15010+12
	add	r0, sp, #52
	mov	r10, r6
	bl	strlcpy
	add	r0, sp, #52
	bl	strim
	ldr	r3, .L15010+16
	str	r0, [sp, #16]
	sub	r3, r3, #120
	str	r3, [sp, #4]
	b	.L14898
.L14918:
	mov	r1, r4
	add	r0, sp, #12
	bl	strsep
	cmp	r0, #0
	bne	.L15002
.L14898:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	bne	.L14918
	ldr	r1, [r8, #-3932]
	cmp	r1, #0
	bne	.L15003
.L14919:
	ldr	r1, [r8, #-3928]
	cmp	r1, #0
	bne	.L15004
.L14920:
	ldr	r1, [r8, #-3924]
	cmp	r1, #0
	bne	.L15005
.L14921:
	ldr	r0, [r8, #-3920]
	cmp	r0, #0
	bne	.L15006
.L14922:
	ldr	r0, [r8, #-3916]
	cmp	r0, #0
	bne	.L15007
.L14928:
	cmp	r6, #0
	beq	.L14896
.L14947:
	mov	r2, r6
.L14923:
	movw	r0, #:lower16:.LC764
	ldr	r1, .L15010+4
	mov	r6, r2
	movt	r0, #:upper16:.LC764
	bl	printk
	b	.L14895
.L15002:
	ldr	r3, [sp, #16]
	mov	r7, r0
	cmp	r3, #0
	beq	.L14899
	mov	r1, r4
	add	r0, sp, #16
	bl	strsep
	mov	r10, r0
.L14899:
	ldr	fp, [r8, #-3936]
	cmp	fp, #2
	bgt	.L14900
	mov	r0, r7
	bl	str_to_xport
	lsl	r1, fp, #1
	sub	r2, r0, #1
	add	r3, r1, fp
	add	r3, r9, r3, lsl #2
	str	r0, [r3, #2244]
	str	fp, [r3, #2248]
	cmp	r2, #8
	ldrls	pc, [pc, r2, asl #2]
	b	.L14901
.L14903:
	.word	.L14902
	.word	.L14904
	.word	.L14905
	.word	.L14901
	.word	.L14901
	.word	.L14901
	.word	.L14901
	.word	.L14906
	.word	.L14907
.L15007:
	mov	r1, #0
	bl	ghsuart_data_setup
	subs	r2, r0, #0
	blt	.L14923
	ldr	r1, [r8, #-3912]
	cmp	r1, #0
	beq	.L14928
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2244]
	cmp	r0, #9
	streq	r2, [r3, #2252]
	addeq	r2, r2, #1
	cmp	r1, #1
	bls	.L14928
	ldr	r0, [r3, #2256]
	cmp	r0, #9
	streq	r2, [r3, #2264]
	addeq	r2, r2, #1
	cmp	r1, #2
	beq	.L14928
	ldr	r1, [r3, #2268]
	cmp	r1, #9
	streq	r2, [r3, #2276]
	b	.L14928
.L14907:
	ldr	r3, [r8, #-3916]
	add	r3, r3, #1
	str	r3, [r8, #-3916]
.L14908:
	ldr	r3, [r8, #-3912]
	add	fp, fp, #1
	str	fp, [r8, #-3936]
	add	r3, r3, #1
	str	r3, [r8, #-3912]
	b	.L14898
.L14906:
	ldr	r2, [r8, #-3948]
	cmp	r2, #3
	bhi	.L15008
	ldr	fp, .L15010+20
	mov	r0, #104
	cmp	r10, #0
	moveq	r1, r7
	movne	r1, r10
	mla	r2, r0, r2, fp
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r8, #-3948]
	mov	r3, #104
	movw	r1, #:lower16:.LC749
	movt	r1, #:upper16:.LC749
	mov	r2, #20
	mla	r0, r3, r0, fp
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r8, #-3948]
	add	r3, r3, #1
	str	r3, [r8, #-3948]
.L14910:
	ldr	r2, [r8, #-3944]
	cmp	r2, #3
	bhi	.L15009
	ldr	fp, .L15010+24
	mov	r0, #104
	cmp	r10, #0
	moveq	r1, r7
	movne	r1, r10
	mla	r2, r0, r2, fp
	add	r0, r2, #84
	moveq	r2, #20
	movne	r2, #20
	bl	strlcpy
	ldr	r0, [r8, #-3944]
	mov	r3, #104
	movw	r1, #:lower16:.LC753
	movt	r1, #:upper16:.LC753
	mov	r2, #20
	mla	r0, r3, r0, fp
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r8, #-3944]
	add	r3, r3, #1
	str	r3, [r8, #-3944]
.L14914:
	ldr	fp, [r8, #-3936]
	ldr	r3, [r8, #-3920]
	add	r3, r3, #1
	str	r3, [r8, #-3920]
	b	.L14908
.L14905:
	ldr	r2, [r8, #-3924]
	add	r3, r1, fp
	add	r3, r9, r3, lsl #2
	add	r1, r2, #1
	str	r2, [r3, #2252]
	str	r1, [r8, #-3924]
	b	.L14908
.L14904:
	ldr	r2, [r8, #-3928]
	add	r3, r1, fp
	add	r3, r9, r3, lsl #2
	add	r1, r2, #1
	str	r2, [r3, #2252]
	str	r1, [r8, #-3928]
	b	.L14908
.L14902:
	ldr	r2, [r8, #-3932]
	add	r3, r1, fp
	add	r3, r9, r3, lsl #2
	add	r1, r2, #1
	str	r2, [r3, #2252]
	str	r1, [r8, #-3932]
	b	.L14908
.L14949:
	mvn	r6, #18
	b	.L14934
.L15006:
	mov	r1, #0
	bl	ghsic_data_setup
	subs	r2, r0, #0
	blt	.L14923
	ldr	r1, [r8, #-3912]
	cmp	r1, #0
	beq	.L14924
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2244]
	cmp	r0, #8
	streq	r2, [r3, #2252]
	addeq	r2, r2, #1
	cmp	r1, #1
	bls	.L14924
	ldr	r0, [r3, #2256]
	cmp	r0, #8
	streq	r2, [r3, #2264]
	addeq	r2, r2, #1
	cmp	r1, #2
	beq	.L14924
	ldr	r1, [r3, #2268]
	cmp	r1, #8
	streq	r2, [r3, #2276]
.L14924:
	mov	r1, #0
	ldr	r0, [r8, #-3920]
	bl	ghsic_ctrl_setup
	subs	r6, r0, #0
	bge	.L14922
	b	.L14947
.L15005:
	ldr	r3, [r5, #24]
	ldr	r0, [r3]
	bl	gsmd_setup
	mov	r6, r0
	b	.L14921
.L15004:
	ldr	r3, [r5, #24]
	ldr	r0, [r3]
	bl	gsdio_setup
	mov	r6, r0
	b	.L14920
.L15003:
	ldr	r3, [r5, #24]
	ldr	r0, [r3]
	bl	gserial_setup
	mov	r6, r0
	b	.L14919
.L14999:
	mvn	r6, #11
	b	.L14934
.L15001:
	bl	__stack_chk_fail
.L15009:
	movw	r0, #:lower16:.LC748
	ldr	r1, .L15010+28
	movt	r0, #:upper16:.LC748
	bl	printk
	b	.L14914
.L15008:
	movw	r0, #:lower16:.LC748
	ldr	r1, [sp, #4]
	movt	r0, #:upper16:.LC748
	bl	printk
	b	.L14910
.L14901:
	mov	r2, r0
	movw	r0, #:lower16:.LC736
	ldr	r1, .L15010+32
	movt	r0, #:upper16:.LC736
	bl	printk
.L14900:
	movw	r0, #:lower16:.LC763
	mov	r2, r7
	ldr	r1, .L15010+4
	movt	r0, #:upper16:.LC763
	mvn	r6, #18
	bl	printk
	b	.L14895
.L15011:
	.align	2
.L15010:
	.word	.LANCHOR5-880
	.word	.LANCHOR3-840
	.word	.LANCHOR1+3608
	.word	.LANCHOR1+3236
	.word	.LANCHOR3-1248
	.word	.LANCHOR1+1040
	.word	.LANCHOR1+1460
	.word	.LANCHOR3-1256
	.word	.LANCHOR3-860
	.fnend
	.size	serial_function_bind_config, .-serial_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_bind_config, %function
rmnet_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 152
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:__stack_chk_guard
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:__stack_chk_guard
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR4
	strd	r8, [sp, #16]
	movt	fp, #:upper16:.LANCHOR4
	str	lr, [sp, #32]
	.pad #156
	sub	sp, sp, #156
	ldr	r9, [fp, #-3908]
	str	r3, [sp, #12]
	ldr	r3, [r3]
	cmp	r9, #0
	str	r3, [sp, #148]
	beq	.L15160
.L15013:
	ldr	r3, [fp, #-3904]
	cmp	r3, #0
	ble	.L15071
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r3, [sp]
	ldr	r3, [r3, #3476]
	cmp	r3, #0
	beq	.L15161
	movw	r3, #:lower16:.LC775
	movw	r2, #:lower16:frmnet_bind
	ldr	r8, .L15175
	movt	r3, #:upper16:.LC775
	movt	r2, #:upper16:frmnet_bind
	movw	r9, #:lower16:.LANCHOR5
	mov	r6, #0
	movt	r9, #:upper16:.LANCHOR5
	str	r3, [sp, #4]
	str	r2, [sp, #8]
	b	.L15076
.L15089:
	ldr	r3, [sp]
	add	r8, r8, #24
	ldr	r2, [r3, #3476]
	mov	r3, r6
	cmp	r6, r2
	bcs	.L15086
.L15076:
	ldrb	r3, [r9, #-872]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15078
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15162
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r9, #-872]
.L15078:
	ldr	r4, [r8, #20]
	add	r7, r4, #124
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r5, #24]
	mov	r10, r0
	mov	r2, r6
	ldr	r1, [sp, #4]
	mov	r0, #32
	str	ip, [r4, #120]
	bl	kasprintf
	str	r0, [r4]
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L15163
	ldr	r2, .L15175+4
	movw	r3, #:lower16:frmnet_unbind
	movw	r0, #:lower16:frmnet_disable
	ldr	ip, [sp, #8]
	movw	r1, #:lower16:frmnet_setup
	movt	r3, #:upper16:frmnet_unbind
	movt	r0, #:upper16:frmnet_disable
	movt	r1, #:upper16:frmnet_setup
	str	r2, [r4, #4]
	movw	r2, #:lower16:frmnet_set_alt
	movt	r2, #:upper16:frmnet_set_alt
	str	r3, [r4, #28]
	movw	r3, #:lower16:frmnet_resume
	str	ip, [r4, #24]
	movw	ip, #:lower16:frmnet_suspend
	movt	r3, #:upper16:frmnet_resume
	movt	ip, #:upper16:frmnet_suspend
	str	r5, [r4, #20]
	str	r2, [r4, #32]
	movw	r2, #:lower16:frmnet_send_cpkt_response
	strd	r0, [r4, #40]
	movw	r0, #:lower16:frmnet_disconnect
	movw	r1, #:lower16:frmnet_connect
	movt	r1, #:upper16:frmnet_connect
	movt	r2, #:upper16:frmnet_send_cpkt_response
	str	ip, [r4, #48]
	movt	r0, #:upper16:frmnet_disconnect
	str	r3, [r4, #52]
	add	r3, r4, #64
	str	r2, [r4, #84]
	add	r2, r5, #36
	strd	r0, [r4, #96]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L15092
	mov	r1, r4
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	bge	.L15081
	ldrd	r2, [r4, #64]
	mov	ip, #256
	mov	r1, #512
	mov	lr, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	lr, [r4, #20]
	str	ip, [r4, #64]
	str	r1, [r4, #68]
.L15081:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15082
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15082
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15082:
	tst	r3, #2
	bne	.L15083
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L15083
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15083:
	tst	r3, #1
	bne	.L15084
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L15084
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15084:
	cmp	r0, #0
	bne	.L15164
	ldr	r3, [fp, #-3904]
	add	r6, r6, #1
	cmp	r3, r6
	bgt	.L15089
.L15071:
.L15047:
	mov	r7, #0
.L15012:
	ldr	r3, [sp, #12]
	mov	r0, r7
	ldr	r2, [sp, #148]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L15165
	add	sp, sp, #156
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15092:
	mov	r0, r3
	b	.L15081
.L15160:
	mov	r3, #1
	ldr	r1, .L15175+8
	mov	r2, #50
	add	r0, sp, #48
	movw	r7, #:lower16:.LANCHOR1
	str	r3, [fp, #-3908]
	movt	r7, #:upper16:.LANCHOR1
	movw	r4, #:lower16:.LC270
	bl	strlcpy
	add	r0, sp, #48
	movt	r4, #:upper16:.LC270
	bl	strim
	mov	r2, #50
	ldr	r1, .L15175+12
	str	r7, [sp]
	str	r0, [sp, #40]
	add	r0, sp, #98
	bl	strlcpy
	add	r0, sp, #98
	bl	strim
	ldr	r3, .L15175+16
	movw	r2, #:lower16:kmalloc_caches
	str	r9, [sp, #4]
	movt	r2, #:upper16:kmalloc_caches
	str	r5, [sp, #8]
	str	r2, [sp, #16]
	add	r3, r3, #104
	str	r9, [sp, #24]
	str	r0, [sp, #44]
	str	r3, [sp, #28]
	b	.L15015
.L15048:
	mov	r1, r4
	add	r0, sp, #40
	bl	strsep
	mov	r6, r0
	mov	r1, r4
	add	r0, sp, #40
	bl	strsep
	cmp	r6, #0
	cmpne	r0, #0
	bne	.L15166
.L15015:
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L15048
	ldr	r3, [sp]
	ldr	r5, [sp, #8]
	ldr	r0, [r3, #3492]
	ldr	r1, [r3, #3496]
	orrs	r3, r0, r1
	beq	.L15053
	bl	gbam_setup
	subs	r7, r0, #0
	bne	.L15052
.L15053:
	ldr	r3, [sp]
	ldr	r1, [r3, #3484]
	cmp	r1, #0
	bne	.L15167
.L15051:
	ldr	r3, [sp]
	ldr	r0, [r3, #3504]
	cmp	r0, #0
	bne	.L15168
.L15057:
	ldr	r3, [sp]
	ldr	r0, [r3, #3500]
	cmp	r0, #0
	bne	.L15169
.L15061:
	ldr	r3, [sp]
	ldr	r0, [r3, #3512]
	cmp	r0, #0
	bne	.L15170
.L15065:
	ldr	r3, [sp]
	ldr	r0, [r3, #3508]
	cmp	r0, #0
	beq	.L15013
	mov	r1, #1
	bl	ghsuart_ctrl_setup
	subs	r7, r0, #0
	blt	.L15052
	ldr	r2, [sp]
	ldr	r3, [r2, #3476]
	cmp	r3, #0
	beq	.L15013
	ldr	r2, [r2, #2344]
	cmp	r2, #9
	bne	.L15073
	ldr	r2, [sp]
	str	r7, [r2, #2352]
	add	r7, r7, #1
.L15073:
	cmp	r3, #1
	bls	.L15013
	ldr	r2, [sp]
	ldr	r2, [r2, #2368]
	cmp	r2, #9
	bne	.L15074
	ldr	r2, [sp]
	str	r7, [r2, #2376]
	add	r7, r7, #1
.L15074:
	cmp	r3, #2
	beq	.L15013
	ldr	r3, [sp]
	ldr	r3, [r3, #2392]
	cmp	r3, #9
	bne	.L15013
	ldr	r3, [sp]
	str	r7, [r3, #2400]
	b	.L15013
.L15167:
	add	r2, sp, #39
	mov	r0, #0
	bl	gsmd_ctrl_setup
	subs	r7, r0, #0
	beq	.L15171
.L15052:
	movw	r0, #:lower16:.LC777
	ldr	r1, .L15175+20
	movt	r0, #:upper16:.LC777
	bl	printk
	b	.L15012
.L15166:
	ldr	r3, [sp, #44]
	mov	r8, r0
	cmp	r3, #0
	beq	.L15016
	mov	r1, r4
	add	r0, sp, #44
	bl	strsep
	str	r0, [sp, #4]
.L15016:
	ldr	r5, [r7, #3476]
	cmp	r5, #2
	bhi	.L15172
	ldr	r3, [sp, #16]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15091
	mov	r2, #152
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L15020
	ldr	r5, [r7, #3476]
.L15019:
	lsl	r10, r5, #1
	add	ip, r2, #136
	strb	r5, [r2, #108]
	mov	r0, #0
	add	r1, r10, r5
	add	r9, r7, r1, lsl #3
	str	r0, [r2, #124]
	mov	r0, r6
	str	ip, [r2, #136]
	str	ip, [r2, #140]
	str	r5, [r9, #2356]
	str	r2, [r9, #2360]
	bl	str_to_xport
	mov	r3, r0
	mov	r0, r8
	str	r3, [r9, #2344]
	str	r3, [sp, #20]
	bl	str_to_xport
	ldr	r3, [sp, #20]
	str	r0, [r9, #2340]
	sub	ip, r3, #3
	cmp	ip, #7
	ldrls	pc, [pc, ip, asl #2]
	b	.L15021
.L15023:
	.word	.L15022
	.word	.L15024
	.word	.L15021
	.word	.L15021
	.word	.L15021
	.word	.L15025
	.word	.L15026
	.word	.L15027
.L15091:
	mov	r2, #16
	b	.L15019
.L15025:
	ldr	r2, [fp, #-3948]
	cmp	r2, #3
	bhi	.L15173
	ldr	r9, .L15175+24
	mov	r0, #104
	ldr	r3, [sp, #4]
	mla	r2, r0, r2, r9
	cmp	r3, #0
	moveq	r1, r6
	movne	r1, r3
	add	r0, r2, #84
	moveq	r2, #20
	movne	r2, #20
	bl	strlcpy
	ldr	r0, [fp, #-3948]
	mov	ip, #104
	movw	r1, #:lower16:.LC749
	mov	r2, #20
	movt	r1, #:upper16:.LC749
	mla	r0, ip, r0, r9
	add	r0, r0, #84
	bl	strlcat
	ldr	r2, [fp, #-3948]
	add	r2, r2, #1
	str	r2, [fp, #-3948]
.L15029:
	add	r2, r10, r5
	ldr	r1, [r7, #3500]
	add	r2, r7, r2, lsl #3
	ldr	r0, [r2, #2340]
	add	ip, r1, #1
	str	r1, [r2, #2352]
	str	ip, [r7, #3500]
.L15027:
	sub	r2, r0, #5
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L15033
.L15035:
	.word	.L15034
	.word	.L15036
	.word	.L15036
	.word	.L15037
	.word	.L15038
	.word	.L15039
.L15037:
	ldr	r2, [fp, #-3944]
	cmp	r2, #3
	bhi	.L15174
	ldr	r6, .L15175+28
	mov	r0, #104
	ldr	r3, [sp, #4]
	mla	r2, r0, r2, r6
	cmp	r3, #0
	moveq	r1, r8
	movne	r1, r3
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [fp, #-3944]
	mov	ip, #104
	movw	r1, #:lower16:.LC753
	mov	r2, #20
	movt	r1, #:upper16:.LC753
	mla	r0, ip, r0, r6
	add	r0, r0, #84
	bl	strlcat
	ldr	r2, [fp, #-3944]
	add	r2, r2, #1
	str	r2, [fp, #-3944]
.L15041:
	ldr	r2, [r7, #3504]
	add	r3, r10, r5
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #2348]
	str	r1, [r7, #3504]
.L15039:
	ldr	r2, [r7, #3476]
	ldr	r3, [fp, #-3904]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r7, #3476]
	str	r3, [fp, #-3904]
	b	.L15015
.L15038:
	ldr	r2, [r7, #3512]
	add	r3, r10, r5
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #2348]
	str	r1, [r7, #3512]
	b	.L15039
.L15036:
	ldr	r2, [r7, #3496]
	add	r3, r10, r5
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #2348]
	str	r1, [r7, #3496]
	b	.L15039
.L15034:
	ldr	r2, [r7, #3492]
	add	r3, r10, r5
	add	r3, r7, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #2348]
	str	r1, [r7, #3492]
	b	.L15039
.L15026:
	ldr	r1, [r7, #3508]
	add	r2, r10, r5
	add	r2, r7, r2, lsl #3
	add	ip, r1, #1
	str	r1, [r2, #2352]
	str	ip, [r7, #3508]
	b	.L15027
.L15024:
	ldr	r1, [r7, #3488]
	add	r2, r10, r5
	add	r2, r7, r2, lsl #3
	add	ip, r1, #1
	str	r1, [r2, #2352]
	str	ip, [r7, #3488]
	b	.L15027
.L15022:
	ldr	r1, [r7, #3484]
	add	r2, r10, r5
	add	r2, r7, r2, lsl #3
	add	ip, r1, #1
	str	r1, [r2, #2352]
	str	ip, [r7, #3484]
	b	.L15027
.L15168:
	mov	r1, #1
	bl	ghsic_data_setup
	subs	r7, r0, #0
	blt	.L15052
	ldr	r2, [sp]
	ldr	r3, [r2, #3476]
	cmp	r3, #0
	beq	.L15057
	ldr	r2, [r2, #2340]
	cmp	r2, #8
	bne	.L15058
	ldr	r2, [sp]
	str	r7, [r2, #2348]
	add	r7, r7, #1
.L15058:
	cmp	r3, #1
	bls	.L15057
	ldr	r2, [sp]
	ldr	r2, [r2, #2364]
	cmp	r2, #8
	bne	.L15059
	ldr	r2, [sp]
	str	r7, [r2, #2372]
	add	r7, r7, #1
.L15059:
	cmp	r3, #2
	beq	.L15057
	ldr	r3, [sp]
	ldr	r3, [r3, #2388]
	cmp	r3, #8
	ldreq	r3, [sp]
	streq	r7, [r3, #2396]
	b	.L15057
.L15169:
	mov	r1, #1
	bl	ghsic_ctrl_setup
	subs	r7, r0, #0
	blt	.L15052
	ldr	r2, [sp]
	ldr	r3, [r2, #3476]
	cmp	r3, #0
	beq	.L15061
	ldr	r2, [r2, #2344]
	cmp	r2, #8
	bne	.L15062
	ldr	r2, [sp]
	str	r7, [r2, #2352]
	add	r7, r7, #1
.L15062:
	cmp	r3, #1
	bls	.L15061
	ldr	r2, [sp]
	ldr	r2, [r2, #2368]
	cmp	r2, #8
	bne	.L15063
	ldr	r2, [sp]
	str	r7, [r2, #2376]
	add	r7, r7, #1
.L15063:
	cmp	r3, #2
	beq	.L15061
	ldr	r3, [sp]
	ldr	r3, [r3, #2392]
	cmp	r3, #8
	ldreq	r3, [sp]
	streq	r7, [r3, #2400]
	b	.L15061
.L15170:
	mov	r1, #1
	bl	ghsuart_data_setup
	subs	r7, r0, #0
	blt	.L15052
	ldr	r2, [sp]
	ldr	r3, [r2, #3476]
	cmp	r3, #0
	beq	.L15065
	ldr	r2, [r2, #2340]
	cmp	r2, #9
	bne	.L15066
	ldr	r2, [sp]
	str	r7, [r2, #2348]
	add	r7, r7, #1
.L15066:
	cmp	r3, #1
	bls	.L15065
	ldr	r2, [sp]
	ldr	r2, [r2, #2364]
	cmp	r2, #9
	bne	.L15067
	ldr	r2, [sp]
	str	r7, [r2, #2372]
	add	r7, r7, #1
.L15067:
	cmp	r3, #2
	beq	.L15065
	ldr	r3, [sp]
	ldr	r3, [r3, #2388]
	cmp	r3, #9
	ldreq	r3, [sp]
	streq	r7, [r3, #2396]
	b	.L15065
.L15171:
	ldr	r2, [sp]
	ldr	r3, [r2, #3476]
	cmp	r3, #0
	beq	.L15051
	ldr	r1, [r2, #2360]
	ldrb	r2, [sp, #39]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L15054
	ldrb	r0, [r1, #108]	@ zero_extendqisi2
	add	r0, r2, r0
	strb	r0, [r1, #108]
.L15054:
	cmp	r3, #1
	bls	.L15051
	ldr	r1, [sp]
	ldr	r1, [r1, #2384]
	cmp	r1, #0
	beq	.L15055
	ldrb	r0, [r1, #108]	@ zero_extendqisi2
	add	r0, r2, r0
	strb	r0, [r1, #108]
.L15055:
	cmp	r3, #2
	beq	.L15051
	ldr	r3, [sp]
	ldr	r3, [r3, #2408]
	cmp	r3, #0
	beq	.L15051
	ldrb	r1, [r3, #108]	@ zero_extendqisi2
	add	r2, r2, r1
	strb	r2, [r3, #108]
	b	.L15051
.L15164:
	mov	r7, r0
	movw	r0, #:lower16:.LC559
	ldr	r1, .L15175+32
	mov	r2, r7
	movt	r0, #:upper16:.LC559
	bl	printk
	ldr	r0, [r4]
	bl	kfree
.L15077:
	movw	r0, #:lower16:.LC776
	mov	r2, r6
	ldr	r1, .L15175+20
	movt	r0, #:upper16:.LC776
	bl	printk
	b	.L15012
.L15163:
	movw	r0, #:lower16:.LC558
	ldr	r1, .L15175+32
	mvn	r7, #11
	movt	r0, #:upper16:.LC558
	bl	printk
	b	.L15077
.L15161:
	mov	r2, r3
	mov	r6, r3
.L15086:
	movw	r0, #:lower16:.LC774
	ldr	r1, .L15175+32
	mvn	r7, #18
	movt	r0, #:upper16:.LC774
	bl	printk
	b	.L15077
.L15162:
	movw	r0, #:lower16:.LC556
	mvn	r2, #18
	ldr	r1, .L15175+32
	movt	r0, #:upper16:.LC556
	mov	r7, r2
	bl	printk
	b	.L15077
.L15021:
	movw	r0, #:lower16:.LC772
	mov	r2, r3
	ldr	r1, .L15175+36
	movt	r0, #:upper16:.LC772
	ldr	r9, [sp, #24]
	bl	printk
.L15032:
	ldr	r3, [sp]
	ldr	r3, [r3, #3476]
	cmp	r3, #0
	ldrne	r4, .L15175
	ldrne	r5, [sp]
	beq	.L15045
.L15046:
	ldr	r0, [r4, #20]
	add	r9, r9, #1
	add	r4, r4, #24
	bl	kfree
	ldr	r3, [r5, #3476]
	cmp	r9, r3
	bcc	.L15046
.L15045:
	ldr	r2, [sp]
	mov	r3, #0
	mvn	r7, #18
	str	r3, [r2, #3476]
	str	r3, [r2, #3484]
	str	r3, [r2, #3488]
	str	r3, [r2, #3492]
	str	r3, [r2, #3500]
	str	r3, [r2, #3504]
	str	r3, [r2, #3508]
	str	r3, [r2, #3512]
.L15018:
	movw	r0, #:lower16:.LC773
	mov	r3, r8
	ldr	r1, .L15175+20
	mov	r2, r6
	movt	r0, #:upper16:.LC773
	bl	printk
	b	.L15012
.L15033:
	mov	r2, r0
	movw	r0, #:lower16:.LC772
	ldr	r1, .L15175+36
	movt	r0, #:upper16:.LC772
	ldr	r9, [sp, #24]
	bl	printk
	b	.L15032
.L15172:
	movw	r0, #:lower16:.LC770
	mov	r2, #3
	ldr	r1, .L15175+36
	movt	r0, #:upper16:.LC770
	mvn	r7, #21
	bl	printk
	b	.L15018
.L15173:
	movw	r0, #:lower16:.LC748
	ldr	r1, .L15175+40
	movt	r0, #:upper16:.LC748
	bl	printk
	b	.L15029
.L15174:
	movw	r0, #:lower16:.LC748
	ldr	r1, [sp, #28]
	movt	r0, #:upper16:.LC748
	bl	printk
	b	.L15041
.L15020:
	movw	r0, #:lower16:.LC771
	ldr	r1, .L15175+36
	mvn	r7, #11
	movt	r0, #:upper16:.LC771
	bl	printk
	b	.L15018
.L15165:
	bl	__stack_chk_fail
.L15176:
	.align	2
.L15175:
	.word	.LANCHOR1+2340
	.word	.LANCHOR5-856
	.word	.LANCHOR1+3320
	.word	.LANCHOR1+3268
	.word	.LANCHOR3-1360
	.word	.LANCHOR3-792
	.word	.LANCHOR1+1040
	.word	.LANCHOR1+1460
	.word	.LANCHOR3-764
	.word	.LANCHOR3-812
	.word	.LANCHOR3-1368
	.fnend
	.size	rmnet_function_bind_config, .-rmnet_function_bind_config
	.align	2
	.global	gser_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	gser_bind_config, %function
gser_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR5
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r3, #-896]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15178
	ldr	ip, [r0, #24]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15188
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-896]
	strb	r2, [ip, #48]
.L15178:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r1
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15189
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15205
.L15180:
	add	r2, r6, r6, lsl #1
	movw	r3, #:lower16:.LANCHOR1
	ldr	r1, .L15207
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r2, lsl #2
	movw	r2, #:lower16:.LC765
	movt	r2, #:upper16:.LC765
	ldr	r0, [r3, #2244]
	movw	r3, #:lower16:gser_bind
	cmp	r6, #0
	movt	r3, #:upper16:gser_bind
	str	r2, [r4]
	movw	r2, #:lower16:gser_set_alt
	str	r1, [r4, #4]
	movw	r1, #:lower16:gser_unbind
	movt	r2, #:upper16:gser_set_alt
	movt	r1, #:upper16:gser_unbind
	str	r3, [r4, #24]
	movw	r3, #:lower16:gser_disable
	movt	r3, #:upper16:gser_disable
	str	r1, [r4, #28]
	mov	r1, #0
	str	r2, [r4, #32]
	str	r3, [r4, #40]
	strb	r6, [r4, #137]
	str	r0, [r4, #140]
	str	r1, [r4, #148]
	beq	.L15206
	cmp	r6, #1
	movweq	r3, #:lower16:.LC767
	movwne	r3, #:lower16:.LC768
	movteq	r3, #:upper16:.LC767
	movtne	r3, #:upper16:.LC768
	str	r3, [r4]
.L15182:
	movw	r2, #:lower16:gser_setup
	movw	r0, #:lower16:gser_connect
	str	r5, [r4, #20]
	movw	r1, #:lower16:gser_get_dtr
	movw	r3, #:lower16:gser_get_rts
	movt	r2, #:upper16:gser_setup
	movt	r0, #:upper16:gser_connect
	movt	r1, #:upper16:gser_get_dtr
	movt	r3, #:upper16:gser_get_rts
	str	r2, [r4, #44]
	movw	ip, #:lower16:gser_send_carrier_detect
	movw	r2, #:lower16:gser_send_ring_indicator
	str	r1, [r4, #100]
	movw	r1, #:lower16:gser_send_modem_ctrl_bits
	movt	r2, #:upper16:gser_send_ring_indicator
	str	r3, [r4, #104]
	movw	r3, #:lower16:gser_disconnect
	movt	r1, #:upper16:gser_send_modem_ctrl_bits
	str	r0, [r4, #108]
	movw	r0, #:lower16:gser_send_break
	movt	r3, #:upper16:gser_disconnect
	movt	ip, #:upper16:gser_send_carrier_detect
	movt	r0, #:upper16:gser_send_break
	str	r3, [r4, #112]
	add	r3, r4, #64
	str	r0, [r4, #116]
	str	ip, [r4, #120]
	str	r2, [r4, #124]
	add	r2, r5, #36
	str	r1, [r4, #128]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, #0
	beq	.L15184
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L15184
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #64]
.L15184:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15185
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15185
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15185:
	tst	r3, #2
	bne	.L15186
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L15186
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15186:
	tst	r3, #1
	bne	.L15187
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L15187
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15187:
	cmp	r6, #0
	beq	.L15177
	mov	r0, r4
	bl	kfree
.L15177:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15206:
	movw	r3, #:lower16:.LC766
	movt	r3, #:upper16:.LC766
	str	r3, [r4]
	b	.L15182
.L15189:
	mov	r4, #16
	b	.L15180
.L15188:
	mvn	r6, #18
	b	.L15177
.L15205:
	mvn	r6, #11
	b	.L15177
.L15208:
	.align	2
.L15207:
	.word	.LANCHOR5-880
	.fnend
	.size	gser_bind_config, .-gser_bind_config
	.align	2
	.global	acm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind_config, %function
acm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR5
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR5
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r3, #-968]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15210
	ldr	ip, [r0, #24]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15213
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [ip, #48]
	ldr	ip, [r0, #24]
	strb	r2, [r3, #-2328]
	strb	r2, [r3, #-968]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15213
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [ip, #48]
	ldr	ip, [r0, #24]
	strb	r2, [r3, #-2308]
	strb	r2, [r3, #-960]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15213
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-2337]
	strb	r2, [r3, #-952]
	strb	r2, [ip, #48]
.L15210:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r1
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15220
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15236
.L15214:
	add	r2, r6, r6, lsl #1
	movw	r3, #:lower16:.LANCHOR1
	strb	r6, [r4, #138]
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r2, lsl #2
	movw	r0, #:lower16:acm_disconnect
	movw	r1, #:lower16:acm_send_break
	ldr	lr, [r3, #2280]
	movt	r0, #:upper16:acm_disconnect
	movt	r1, #:upper16:acm_send_break
	movw	ip, #:lower16:acm_connect
	movw	r3, #:lower16:acm_send_modem_ctrl_bits
	movt	ip, #:upper16:acm_connect
	mov	r7, #0
	movt	r3, #:upper16:acm_send_modem_ctrl_bits
	add	r2, r6, #1
	str	ip, [r4, #108]
	strd	r0, [r4, #112]
	movw	r1, #:lower16:.LC739
	mov	r0, #208
	str	r3, [r4, #128]
	movt	r1, #:upper16:.LC739
	str	lr, [r4, #140]
	str	r7, [r4, #148]
	bl	kasprintf
	cmp	r0, r7
	str	r0, [r4]
	beq	.L15237
	movw	r0, #:lower16:acm_bind
	ldr	ip, .L15238
	movw	r3, #:lower16:acm_unbind
	movt	r0, #:upper16:acm_bind
	movw	r2, #:lower16:acm_set_alt
	movw	r1, #:lower16:acm_setup
	movt	r3, #:upper16:acm_unbind
	movt	r2, #:upper16:acm_set_alt
	movt	r1, #:upper16:acm_setup
	str	r0, [r4, #24]
	movw	r0, #:lower16:acm_disable
	movt	r0, #:upper16:acm_disable
	str	ip, [r4, #4]
	str	r5, [r4, #20]
	str	r3, [r4, #28]
	add	r3, r4, #64
	str	r2, [r4, #32]
	add	r2, r5, #36
	str	r0, [r4, #40]
	str	r1, [r4, #44]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, #0
	beq	.L15216
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L15216
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4, #20]
	strd	r0, [r4, #64]
.L15216:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15217
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15217
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15217:
	tst	r3, #2
	bne	.L15218
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L15218
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15218:
	tst	r3, #1
	bne	.L15219
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L15219
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15219:
	cmp	r6, #0
	beq	.L15209
	mov	r0, r4
	bl	kfree
.L15209:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15220:
	mov	r4, #16
	b	.L15214
.L15213:
	mvn	r6, #18
	b	.L15209
.L15237:
	mov	r0, r4
	mvn	r6, #11
	bl	kfree
	b	.L15209
.L15236:
	mvn	r6, #11
	b	.L15209
.L15239:
	.align	2
.L15238:
	.word	.LANCHOR5-936
	.fnend
	.size	acm_bind_config, .-acm_bind_config
	.align	2
	.global	adb_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_put, %function
adb_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r4, r2
	str	r6, [sp, #8]
	add	r6, r0, #80
	mov	r0, r6
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #4]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	str	r2, [r5, #4]
	str	r5, [r4, #36]
	str	r3, [r4, #40]
	str	r2, [r3]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	adb_req_put, .-adb_req_put
	.align	2
	.global	adb_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_get, %function
adb_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r4, r0, #80
	mov	r5, r1
	mov	r0, r4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5]
	mov	r1, r0
	cmp	r5, r3
	beq	.L15244
	ldr	ip, [r3]
	mov	lr, #256
	mov	r0, #512
	ldr	r2, [r3, #4]
	sub	r5, r3, #36
	str	r2, [ip, #4]
	str	ip, [r2]
	str	lr, [r3]
	str	r0, [r3, #4]
.L15243:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15244:
	mov	r5, #0
	b	.L15243
	.fnend
	.size	adb_req_get, .-adb_req_get
	.align	2
	.global	rndis_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config, %function
rndis_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	movt	r7, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	subs	r9, r1, #0
	ldr	r3, [r7]
	str	lr, [sp, #24]
	.pad #36
	sub	sp, sp, #36
	str	r3, [sp, #28]
	beq	.L15262
	movw	r8, #:lower16:.LANCHOR4
	mov	r5, r0
	movt	r8, #:upper16:.LANCHOR4
	ldrb	r4, [r8, #-4008]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L15284
.L15248:
	movw	r6, #:lower16:.LANCHOR5
	movt	r6, #:upper16:.LANCHOR5
	ldrb	r3, [r6, #-848]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15252
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15254
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #-2040]
	strb	r3, [r6, #-848]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15254
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #-2020]
	strb	r3, [r6, #-840]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15254
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r6, #-2049]
	strb	r3, [r6, #-832]
.L15252:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15263
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15285
.L15255:
	ldr	r3, [r9]	@ unaligned
	movw	r2, #:lower16:rndis_add_header
	movw	r1, #:lower16:rndis_rm_hdr
	ldr	r0, [r6, #-1764]
	movw	lr, #:lower16:rndis_unbind
	movt	r2, #:upper16:rndis_add_header
	ldr	ip, [r6, #-816]
	movt	r1, #:upper16:rndis_rm_hdr
	movt	lr, #:upper16:rndis_unbind
	str	r3, [r4, #142]	@ unaligned
	ldrh	r6, [r9, #4]	@ unaligned
	movw	r3, #:lower16:.LC778
	ldr	r9, .L15291
	movt	r3, #:upper16:.LC778
	str	r0, [r4, #108]
	movw	r0, #:lower16:rndis_bind
	movt	r0, #:upper16:rndis_bind
	str	ip, [r4, #112]
	movw	ip, #:lower16:rndis_set_alt
	movt	ip, #:upper16:rndis_set_alt
	stm	r4, {r3, r9}
	movw	r3, #:lower16:rndis_setup
	mov	r9, #0
	movt	r3, #:upper16:rndis_setup
	str	r5, [r4, #20]
	str	r0, [r4, #24]
	movw	r0, #:lower16:rndis_disable
	movt	r0, #:upper16:rndis_disable
	str	lr, [r4, #28]
	str	ip, [r4, #32]
	mov	ip, #44
	str	r0, [r4, #40]
	str	r3, [r4, #44]
	add	r3, r4, #64
	strh	r9, [r4, #90]	@ movhi
	str	ip, [r4, #92]
	str	r2, [r4, #120]
	add	r2, r5, #36
	str	r1, [r4, #124]
	strh	r6, [r4, #146]	@ unaligned
	str	r9, [r4, #148]
	str	r9, [r4, #152]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, r9
	beq	.L15257
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	blt	.L15286
.L15257:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15258
.L15289:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15258
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15258:
	tst	r3, #2
	bne	.L15259
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L15259
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15259:
	tst	r3, #1
	bne	.L15260
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L15260
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15260:
	cmp	r6, #0
	bne	.L15287
.L15246:
	ldr	r2, [sp, #28]
	mov	r0, r6
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L15288
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15287:
	mov	r0, r4
	bl	kfree
.L15256:
	ldrb	r3, [r8, #-4008]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15246
	mov	r4, #0
	movw	r1, #:lower16:.LC473
	mov	r2, r4
	movt	r1, #:upper16:.LC473
	add	r0, sp, #8
	strb	r4, [r8, #-4008]
	bl	sprintf
	add	r0, sp, #8
	mov	r1, r4
	bl	remove_proc_entry
	b	.L15246
.L15286:
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4, #20]
	strd	r0, [r4, #64]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15258
	b	.L15289
.L15284:
	movw	r1, #:lower16:.LC473
	mov	r2, r4
	movt	r1, #:upper16:.LC473
	add	r0, sp, #8
	bl	sprintf
	ldr	ip, .L15291+4
	add	r0, sp, #8
	mov	r2, r4
	ldr	r3, .L15291+8
	mov	r1, #432
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	str	ip, [sp]
	bl	proc_create_data
	cmp	r0, #0
	movw	r3, #3772
	beq	.L15290
	mov	r2, #1
	strh	r4, [r6, r3]	@ movhi
	add	r3, r6, #3824
	str	r4, [r6, #3776]
	str	r2, [r6, #3788]
	str	r3, [r6, #3824]
	str	r3, [r6, #3828]
	strb	r2, [r8, #-4008]
	b	.L15248
.L15263:
	mov	r4, #16
	b	.L15255
.L15285:
	mvn	r6, #11
	b	.L15256
.L15254:
	mvn	r6, #18
	b	.L15246
.L15262:
	mvn	r6, #21
	b	.L15246
.L15290:
	mvn	r6, #4
	b	.L15246
.L15288:
	bl	__stack_chk_fail
.L15292:
	.align	2
.L15291:
	.word	.LANCHOR5-812
	.word	.LANCHOR1+3772
	.word	.LANCHOR3-744
	.fnend
	.size	rndis_bind_config, .-rndis_bind_config
	.align	2
	.global	rndis_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config_vendor, %function
rndis_bind_config_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	movt	r7, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	subs	r9, r1, #0
	ldr	r1, [r7]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #28]
	beq	.L15309
	movw	r8, #:lower16:.LANCHOR4
	mov	r5, r0
	movt	r8, #:upper16:.LANCHOR4
	mov	fp, r2
	ldrb	r4, [r8, #-4008]	@ zero_extendqisi2
	mov	r10, r3
	cmp	r4, #0
	beq	.L15331
.L15295:
	movw	r6, #:lower16:.LANCHOR5
	movt	r6, #:upper16:.LANCHOR5
	ldrb	r3, [r6, #-848]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15299
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15301
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #-2040]
	strb	r3, [r6, #-848]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15301
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #-2020]
	strb	r3, [r6, #-840]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15301
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r6, #-2049]
	strb	r3, [r6, #-832]
.L15299:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15310
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15332
.L15302:
	ldr	r1, [r9]	@ unaligned
	movw	r3, #:lower16:rndis_add_header
	movw	r2, #:lower16:rndis_rm_hdr
	ldr	r0, [r6, #-1764]
	movt	r3, #:upper16:rndis_add_header
	movt	r2, #:upper16:rndis_rm_hdr
	ldr	lr, [r6, #-816]
	movw	r6, #:lower16:.LC778
	movt	r6, #:upper16:.LC778
	str	r1, [r4, #142]	@ unaligned
	ldrh	ip, [r9, #4]	@ unaligned
	mov	r9, #0
	ldr	r1, .L15338
	str	r6, [r4]
	movw	r6, #:lower16:rndis_unbind
	str	r0, [r4, #108]
	movw	r0, #:lower16:rndis_bind
	movt	r6, #:upper16:rndis_unbind
	movt	r0, #:upper16:rndis_bind
	str	r1, [r4, #4]
	movw	r1, #:lower16:rndis_setup
	str	r0, [r4, #24]
	movw	r0, #:lower16:rndis_disable
	movt	r1, #:upper16:rndis_setup
	movt	r0, #:upper16:rndis_disable
	str	lr, [r4, #112]
	movw	lr, #:lower16:rndis_set_alt
	movt	lr, #:upper16:rndis_set_alt
	str	r5, [r4, #20]
	str	r6, [r4, #28]
	str	r0, [r4, #40]
	mov	r0, #44
	str	lr, [r4, #32]
	str	r1, [r4, #44]
	strh	r9, [r4, #90]	@ movhi
	str	r0, [r4, #92]
	str	r3, [r4, #120]
	add	r3, r4, #64
	str	r2, [r4, #124]
	add	r2, r5, #36
	strh	ip, [r4, #146]	@ unaligned
	str	fp, [r4, #148]
	str	r10, [r4, #152]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, r9
	beq	.L15304
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	blt	.L15333
.L15304:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15305
.L15336:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15305
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15305:
	tst	r3, #2
	bne	.L15306
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L15306
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15306:
	tst	r3, #1
	bne	.L15307
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L15307
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15307:
	cmp	r6, #0
	bne	.L15334
.L15293:
	ldr	r2, [sp, #28]
	mov	r0, r6
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L15335
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15334:
	mov	r0, r4
	bl	kfree
.L15303:
	ldrb	r3, [r8, #-4008]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15293
	mov	r4, #0
	movw	r1, #:lower16:.LC473
	mov	r2, r4
	movt	r1, #:upper16:.LC473
	add	r0, sp, #8
	strb	r4, [r8, #-4008]
	bl	sprintf
	add	r0, sp, #8
	mov	r1, r4
	bl	remove_proc_entry
	b	.L15293
.L15333:
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4, #20]
	strd	r0, [r4, #64]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15305
	b	.L15336
.L15331:
	movw	r1, #:lower16:.LC473
	mov	r2, r4
	movt	r1, #:upper16:.LC473
	add	r0, sp, #8
	bl	sprintf
	ldr	ip, .L15338+4
	add	r0, sp, #8
	mov	r2, r4
	ldr	r3, .L15338+8
	mov	r1, #432
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	str	ip, [sp]
	bl	proc_create_data
	cmp	r0, #0
	movw	r3, #3772
	beq	.L15337
	mov	r2, #1
	strh	r4, [r6, r3]	@ movhi
	add	r3, r6, #3824
	str	r4, [r6, #3776]
	str	r2, [r6, #3788]
	str	r3, [r6, #3824]
	str	r3, [r6, #3828]
	strb	r2, [r8, #-4008]
	b	.L15295
.L15310:
	mov	r4, #16
	b	.L15302
.L15332:
	mvn	r6, #11
	b	.L15303
.L15301:
	mvn	r6, #18
	b	.L15293
.L15309:
	mvn	r6, #21
	b	.L15293
.L15337:
	mvn	r6, #4
	b	.L15293
.L15335:
	bl	__stack_chk_fail
.L15339:
	.align	2
.L15338:
	.word	.LANCHOR5-812
	.word	.LANCHOR1+3772
	.word	.LANCHOR3-744
	.fnend
	.size	rndis_bind_config_vendor, .-rndis_bind_config_vendor
	.align	2
	.global	rndis_signal_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_connect, %function
rndis_signal_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR1
	mov	r2, #0
	strd	r6, [sp, #8]
	lsl	r6, r0, #4
	ldr	r7, .L15347
	movt	r5, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	sub	r4, r6, r0
	str	r10, [sp, #24]
	lsl	r4, r4, #2
	str	lr, [sp, #28]
	add	r3, r5, r4
	add	r8, r7, r4
	str	r2, [r3, #3788]
	ldr	r3, [r8, #4]
	cmp	r3, r2
	beq	.L15343
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r2
	beq	.L15344
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L15345
	add	r2, r3, #20
.L15342:
	sub	r6, r6, r9
	mov	r1, #20
	str	r2, [r3, #8]
	add	r5, r5, r6, lsl #2
	mov	r6, #0
	str	r1, [r3, #12]
	add	r4, r4, #52
	str	r6, [r3, #16]
	ldr	r0, [r5, #3828]
	add	r4, r7, r4
	str	r3, [r5, #3828]
	mov	r2, #11
	mov	ip, #7
	str	r4, [r3]
	movt	r2, 16385
	str	r0, [r3, #4]
	str	r3, [r0]
	ldr	r3, [r3, #8]
	str	ip, [r3]
	stmib	r3, {r1, r2, r6}
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L15340:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15344:
	mov	r2, #36
	mov	r3, #16
	b	.L15342
.L15343:
	movw	r0, #65012
	movt	r0, 65535
	b	.L15340
.L15345:
	mvn	r0, #11
	b	.L15340
.L15348:
	.align	2
.L15347:
	.word	.LANCHOR1+3772
	.fnend
	.size	rndis_signal_connect, .-rndis_signal_connect
	.align	2
	.global	rndis_signal_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_disconnect, %function
rndis_signal_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR1
	mov	r2, #1
	strd	r6, [sp, #8]
	lsl	r6, r0, #4
	ldr	r7, .L15356
	movt	r5, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	sub	r4, r6, r0
	str	r10, [sp, #24]
	lsl	r4, r4, #2
	str	lr, [sp, #28]
	add	r3, r5, r4
	add	r8, r7, r4
	str	r2, [r3, #3788]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L15352
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15353
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L15354
	add	r2, r3, #20
.L15351:
	sub	r6, r6, r9
	mov	r1, #20
	str	r2, [r3, #8]
	add	r5, r5, r6, lsl #2
	mov	r6, #0
	str	r1, [r3, #12]
	add	r4, r4, #52
	str	r6, [r3, #16]
	ldr	r0, [r5, #3828]
	add	r4, r7, r4
	str	r3, [r5, #3828]
	mov	r2, #12
	mov	ip, #7
	str	r4, [r3]
	movt	r2, 16385
	str	r0, [r3, #4]
	str	r3, [r0]
	ldr	r3, [r3, #8]
	str	ip, [r3]
	stmib	r3, {r1, r2, r6}
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L15349:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15353:
	mov	r2, #36
	mov	r3, #16
	b	.L15351
.L15352:
	movw	r0, #65012
	movt	r0, 65535
	b	.L15349
.L15354:
	mvn	r0, #11
	b	.L15349
.L15357:
	.align	2
.L15356:
	.word	.LANCHOR1+3772
	.fnend
	.size	rndis_signal_disconnect, .-rndis_signal_disconnect
	.align	2
	.global	rndis_uninit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_uninit, %function
rndis_uninit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxgt	lr
	rsb	r0, r0, r0, lsl #4
	ldr	r3, .L15382
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r2, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	lsl	r5, r0, #2
	movt	r2, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	mov	r1, #0
	add	r2, r2, r5
	str	lr, [sp, #28]
	add	r5, r5, r3
	ldr	r3, [r2, #3824]
	mov	r8, r2
	str	r1, [r2, #3776]
	ldr	r4, [r3]
.L15360:
	cmp	r5, r3
	beq	.L15358
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L15366
	b	.L15380
.L15368:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15365
	mov	r4, r3
.L15366:
	cmp	r4, r5
	ldr	r3, [r4]
	bne	.L15368
.L15358:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15380:
	mov	r4, r3
.L15365:
	ldr	r7, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r7, #0
	beq	.L15358
	ldr	r3, [r8, #3824]
	cmp	r3, r5
	ldr	r4, [r3]
	moveq	r3, r5
	beq	.L15360
	mov	r6, r4
	mov	r10, #256
	mov	r9, #512
	b	.L15363
.L15370:
	mov	r6, r4
.L15363:
	cmp	r3, #0
	beq	.L15362
	ldr	r2, [r3, #8]
	cmp	r7, r2
	beq	.L15381
.L15362:
	cmp	r6, r5
	mov	r3, r6
	ldr	r4, [r4]
	bne	.L15370
	ldr	r3, [r8, #3824]
	ldr	r4, [r3]
	b	.L15360
.L15381:
	ldr	r2, [r3, #4]
	mov	r0, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r10, [r3]
	str	r9, [r3, #4]
	bl	kfree
	b	.L15362
.L15383:
	.align	2
.L15382:
	.word	.LANCHOR1+3824
	.fnend
	.size	rndis_uninit, .-rndis_uninit
	.align	2
	.global	rndis_set_host_mac
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_host_mac, %function
rndis_set_host_mac:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	str	r1, [r3, #3792]
	bx	lr
	.fnend
	.size	rndis_set_host_mac, .-rndis_set_host_mac
	.align	2
	.global	rndis_msg_parser
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_msg_parser, %function
rndis_msg_parser:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r1, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L15400
	cmp	r0, #0
	ldr	r2, [r5]	@ unaligned
	bne	.L15470
	sub	r3, r2, #2
	cmp	r3, #6
	ldrls	pc, [pc, r3, asl #2]
	b	.L15389
.L15391:
	.word	.L15390
	.word	.L15392
	.word	.L15393
	.word	.L15394
	.word	.L15395
	.word	.L15389
	.word	.L15396
.L15395:
	movw	r7, #:lower16:.LANCHOR1
	mov	r8, #256
	movt	r7, #:upper16:.LANCHOR1
	mov	r6, r7
	ldr	r3, [r6, #3824]!
	ldr	r4, [r3]
	mov	r9, r6
.L15397:
	cmp	r3, r6
	beq	.L15423
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L15421
	b	.L15471
.L15424:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15420
	mov	r4, r3
.L15421:
	cmp	r4, r6
	ldr	r3, [r4]
	bne	.L15424
.L15423:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15472
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L15400
	add	r3, r0, #20
.L15418:
	mov	r2, #16
	mov	r4, #0
	str	r3, [r0, #8]
	mov	ip, #-2147483642
	mov	r1, #1
	str	r2, [r0, #12]
	str	r4, [r0, #16]
	ldr	r3, [r7, #3828]
	str	r0, [r7, #3828]
	str	r6, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	ip, [r3]
	stmib	r3, {r2, r4}
	str	r1, [r3, #12]
	ldr	r3, [r7, #3816]
	ldr	r0, [r7, #3820]
	blx	r3
	mov	r0, r4
.L15385:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15390:
	movw	r7, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3800]
	str	r2, [r7, #3776]
	cmp	r3, #0
	beq	.L15470
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L15426
	mov	r2, #72
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L15400
	add	r3, r0, #20
.L15399:
	mov	r4, #0
	mov	r1, #52
	str	r3, [r0, #8]
	ldr	r2, .L15477
	mov	ip, #-2147483646
	str	r1, [r0, #12]
	str	r4, [r0, #16]
	ldr	r3, [r7, #3828]
	str	r0, [r7, #3828]
	strd	r2, [r0]
	mov	r2, #1
	str	r0, [r3]
	ldr	r3, [r0, #8]
	str	ip, [r3]
	str	r1, [r3, #4]
	ldr	r1, [r5, #8]
	str	r1, [r3, #8]
	str	r4, [r3, #12]
	str	r2, [r3, #16]
	str	r4, [r3, #20]
	str	r2, [r3, #24]
	str	r4, [r3, #28]
	ldrb	r2, [r7, #3808]	@ zero_extendqisi2
	ldr	r1, [r7, #3800]
	str	r2, [r3, #32]
	ldrb	r2, [r7, #3808]	@ zero_extendqisi2
	ldr	r1, [r1, #364]
	str	r4, [r3, #44]
	str	r4, [r3, #48]
	add	r1, r1, #80
	mul	r2, r2, r1
	str	r2, [r3, #36]
	ldrb	r2, [r7, #3809]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r3, [r7, #3816]
	ldr	r0, [r7, #3820]
	blx	r3
	mov	r0, r4
	b	.L15385
.L15392:
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, #0
	movt	r5, #:upper16:.LANCHOR1
	ldr	r0, [r5, #3800]
	str	r4, [r5, #3776]
	cmp	r0, r4
	beq	.L15385
	bl	netif_carrier_off
	ldr	r3, [r5, #3800]
	ldr	r5, [r3, #576]
	cmp	r5, r4
	beq	.L15473
	mov	r0, r4
	add	r1, r5, #80
	bl	_set_bit
	mov	r0, r4
	b	.L15385
.L15393:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3800]
	cmp	r3, #0
	beq	.L15470
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15428
	mov	r2, #156
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L15400
	add	r2, r0, #20
.L15402:
	mov	r3, #136
	mov	r6, #0
	ldr	r1, .L15477
	strd	r2, [r0, #8]
	mov	r2, #-2147483644
	str	r6, [r0, #16]
	ldr	r3, [r7, #3828]
	str	r0, [r7, #3828]
	stm	r0, {r1, r3}
	mov	r1, r0
	str	r0, [r3]
	ldr	r4, [r0, #8]
	str	r2, [r4]
	ldr	r3, [r5, #8]
	str	r3, [r4, #8]
	ldr	r0, [r5, #12]
	bl	gen_ndis_query_resp.constprop.118
	cmp	r0, #0
	beq	.L15403
	mov	r0, #187
	mov	r3, #24
	movt	r0, 49152
	str	r3, [r4, #4]
	str	r6, [r4, #16]
	str	r6, [r4, #20]
.L15403:
	str	r0, [r4, #12]
	ldr	r3, [r7, #3816]
	ldr	r0, [r7, #3820]
	blx	r3
	mov	r0, #0
	b	.L15385
.L15471:
	mov	r4, r3
.L15420:
	ldr	r10, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r10, #0
	beq	.L15423
	ldr	r3, [r7, #3824]
	cmp	r3, r6
	ldr	r4, [r3]
	moveq	r3, r9
	beq	.L15397
	mov	r5, r4
	mov	fp, #512
	b	.L15416
.L15432:
	mov	r5, r4
.L15416:
	cmp	r3, #0
	beq	.L15415
	ldr	r2, [r3, #8]
	cmp	r10, r2
	beq	.L15474
.L15415:
	cmp	r5, r6
	mov	r3, r5
	ldr	r4, [r4]
	bne	.L15432
	ldr	r3, [r7, #3824]
	ldr	r4, [r3]
	b	.L15397
.L15474:
	ldr	r2, [r3, #4]
	mov	r0, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	stm	r3, {r8, fp}
	bl	kfree
	b	.L15415
.L15472:
	mov	r3, #36
	mov	r0, #16
	b	.L15418
.L15394:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15430
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L15400
	add	r3, r0, #20
.L15404:
	mov	r2, #16
	mov	r6, #0
	str	r3, [r0, #8]
	movw	r7, #:lower16:.LANCHOR1
	mov	r1, #-2147483643
	movt	r7, #:upper16:.LANCHOR1
	str	r2, [r0, #12]
	str	r6, [r0, #16]
	ldr	r3, [r7, #3828]
	add	ip, r7, #3824
	str	r0, [r7, #3828]
	str	ip, [r0]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r4, [r0, #8]
	ldr	r3, [r5, #16]
	ldr	ip, [r5, #20]
	stm	r4, {r1, r2}
	ldr	r2, [r5, #8]
	str	r2, [r4, #8]
	ldr	r1, [r0, #8]
	ldr	r2, [r5, #12]
	cmp	r1, r6
	beq	.L15405
	movw	r1, #270
	movt	r1, 1
	cmp	r2, r1
	beq	.L15407
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	bne	.L15475
.L15408:
	mov	r3, #0
	str	r3, [r4, #12]
.L15413:
	ldr	r3, [r7, #3816]
	ldr	r0, [r7, #3820]
	blx	r3
	mov	r0, #0
	b	.L15385
.L15396:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15436
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L15400
	add	r3, r0, #20
.L15425:
	str	r3, [r0, #8]
	mov	r1, #16
	mov	r4, #0
	movw	r3, #:lower16:.LANCHOR1
	mov	ip, #-2147483640
	movt	r3, #:upper16:.LANCHOR1
	str	r1, [r0, #12]
	str	r4, [r0, #16]
	ldr	r2, [r3, #3828]
	add	lr, r3, #3824
	str	r0, [r3, #3828]
	str	lr, [r0]
	str	r2, [r0, #4]
	str	r0, [r2]
	ldr	r2, [r0, #8]
	str	ip, [r2]
	str	r1, [r2, #4]
	ldr	r1, [r5, #8]
	str	r1, [r2, #8]
	str	r4, [r2, #12]
	ldr	r2, [r3, #3816]
	ldr	r0, [r3, #3820]
	blx	r2
	mov	r0, r4
	b	.L15385
.L15426:
	mov	r3, #36
	mov	r0, #16
	b	.L15399
.L15428:
	mov	r2, #36
	mov	r0, #16
	b	.L15402
.L15475:
	movw	r0, #:lower16:.LC598
	ldr	r1, .L15477+4
	movt	r0, #:upper16:.LC598
	bl	printk
.L15405:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r4, #12]
	b	.L15413
.L15407:
	add	r1, r5, ip
	ldr	r3, [r7, #3796]
	ldr	r2, [r1, #8]	@ unaligned
	strh	r2, [r3]	@ movhi
	ldr	r3, [r7, #3796]
	ldrh	r5, [r3]
	cmp	r5, #0
	beq	.L15409
	mov	r3, #2
	ldr	r0, [r7, #3800]
	str	r3, [r7, #3776]
	bl	netif_carrier_on
	ldr	r3, [r7, #3800]
	ldr	r2, [r3, #160]
	tst	r2, #1
	beq	.L15408
	ldr	r5, [r3, #576]
	mov	r0, r6
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L15408
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L15408
.L15409:
	mov	r3, #1
	ldr	r0, [r7, #3800]
	str	r3, [r7, #3776]
	bl	netif_carrier_off
	ldr	r3, [r7, #3800]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L15476
	add	r1, r1, #80
	mov	r0, r5
	bl	_set_bit
	b	.L15408
.L15400:
	mvn	r0, #11
	b	.L15385
.L15389:
	movw	r0, #:lower16:.LC599
	ldr	r3, [r5, #4]	@ unaligned
	movt	r0, #:upper16:.LC599
	ldr	r1, .L15477+8
	bl	printk
.L15470:
	movw	r0, #65012
	movt	r0, 65535
	b	.L15385
.L15430:
	mov	r3, #36
	mov	r0, #16
	b	.L15404
.L15436:
	mov	r3, #36
	mov	r0, #16
	b	.L15425
.L15473:
	movw	r0, #:lower16:.LC81
	movw	r1, #1847
	movt	r0, #:upper16:.LC81
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC82
	movt	r0, #:upper16:.LC82
	bl	printk
	mov	r0, r5
	b	.L15385
.L15476:
	movw	r0, #:lower16:.LC81
	movw	r1, #1847
	movt	r0, #:upper16:.LC81
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC82
	movt	r0, #:upper16:.LC82
	bl	printk
	b	.L15408
.L15478:
	.align	2
.L15477:
	.word	.LANCHOR1+3824
	.word	.LANCHOR3-3036
	.word	.LANCHOR3-3016
	.fnend
	.size	rndis_msg_parser, .-rndis_msg_parser
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_command_complete, %function
rndis_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L15479
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L15479
	mov	r4, r1
	ldrb	r0, [r5, #156]	@ zero_extendqisi2
	ldr	r1, [r1]
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L15488
.L15483:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L15489
.L15479:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15489:
	ldr	r3, [r3, #20]
	movw	r2, #:lower16:.LANCHOR5
	movt	r2, #:upper16:.LANCHOR5
	ldr	r2, [r2, #-816]
	cmp	r3, #2048
	movls	r3, #0
	movhi	r3, #1
	cmp	r2, #1
	strb	r3, [r5, #116]
	movls	r3, #0
	strbls	r3, [r5, #116]
	b	.L15479
.L15488:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC779
	ldr	ip, [r4, #4]
	movt	r1, #:upper16:.LC779
	ldr	r3, [r4, #48]
	add	r0, r0, #32
	str	ip, [sp]
	bl	dev_err
	b	.L15483
	.fnend
	.size	rndis_command_complete, .-rndis_command_complete
	.align	2
	.global	rndis_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_register, %function
rndis_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r0, #0
	beq	.L15492
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r0, [r3, #3773]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L15493
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, .L15498
	mov	ip, #1
	strb	ip, [r3, #3773]
	str	r2, [r3, #3816]
	str	r1, [r3, #3820]
	strh	ip, [lr, #36]	@ movhi
	ldr	pc, [sp], #4
.L15493:
	mvn	r0, #18
	bx	lr
.L15492:
	mvn	r0, #21
	bx	lr
.L15499:
	.align	2
.L15498:
	.word	.LANCHOR1+3772
	.fnend
	.size	rndis_register, .-rndis_register
	.align	2
	.global	rndis_deregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_deregister, %function
rndis_deregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bgt	.L15500
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r0, r3, r0, lsl #2
	mov	r3, #0
	strb	r3, [r0, #3773]
.L15500:
	bx	lr
	.fnend
	.size	rndis_deregister, .-rndis_deregister
	.align	2
	.global	rndis_set_param_dev
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_dev, %function
rndis_set_param_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L15504
	cmp	r0, #0
	bne	.L15505
	movw	r3, #:lower16:.LANCHOR1
	mov	ip, r0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3720]
	str	r0, [r3, #3724]
	str	r2, [r3, #3796]
	str	r1, [r3, #3800]
.L15502:
	mov	r0, ip
	bx	lr
.L15505:
	mvn	ip, #0
	b	.L15502
.L15504:
	mvn	ip, #21
	b	.L15502
	.fnend
	.size	rndis_set_param_dev, .-rndis_set_param_dev
	.align	2
	.global	rndis_set_param_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_vendor, %function
rndis_set_param_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	clz	r3, r2
	cmp	r0, #0
	lsr	r3, r3, #5
	movne	r0, #1
	moveq	r0, r3
	cmp	r0, #0
	bne	.L15508
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r1, [r3, #3804]
	str	r2, [r3, #3812]
	bx	lr
.L15508:
	mvn	r0, #0
	bx	lr
	.fnend
	.size	rndis_set_param_vendor, .-rndis_set_param_vendor
	.align	2
	.global	rndis_set_param_medium
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_medium, %function
rndis_set_param_medium:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bne	.L15511
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r1, [r3, #3780]
	str	r2, [r3, #3784]
	bx	lr
.L15511:
	mvn	r0, #0
	bx	lr
	.fnend
	.size	rndis_set_param_medium, .-rndis_set_param_medium
	.align	2
	.global	rndis_set_max_pkt_xfer
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_max_pkt_xfer, %function
rndis_set_max_pkt_xfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	strb	r1, [r3, #3808]
	bx	lr
	.fnend
	.size	rndis_set_max_pkt_xfer, .-rndis_set_max_pkt_xfer
	.align	2
	.global	rndis_set_pkt_alignment_factor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_pkt_alignment_factor, %function
rndis_set_pkt_alignment_factor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	strb	r1, [r3, #3809]
	bx	lr
	.fnend
	.size	rndis_set_pkt_alignment_factor, .-rndis_set_pkt_alignment_factor
	.align	2
	.global	rndis_add_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_hdr, %function
rndis_add_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L15514
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L15514:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_add_hdr, .-rndis_add_hdr
	.align	2
	.global	rndis_free_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_free_response, %function
rndis_free_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	rsb	r0, r0, r0, lsl #4
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, .L15530
	lsl	r6, r0, #2
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	add	r3, r3, r6
	str	lr, [sp, #28]
	ldr	r3, [r3, #3824]
	add	r6, r6, r2
	cmp	r3, r6
	ldr	r4, [r3]
	beq	.L15520
	mov	r7, r1
	mov	r5, r4
	mov	r9, #256
	mov	r8, #512
	b	.L15523
.L15524:
	mov	r5, r4
.L15523:
	cmp	r3, #0
	beq	.L15522
	ldr	r2, [r3, #8]
	cmp	r2, r7
	beq	.L15529
.L15522:
	cmp	r6, r5
	mov	r3, r5
	ldr	r4, [r4]
	bne	.L15524
.L15520:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15529:
	ldr	r2, [r3, #4]
	mov	r0, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	r9, [r3]
	str	r8, [r3, #4]
	bl	kfree
	b	.L15522
.L15531:
	.align	2
.L15530:
	.word	.LANCHOR1+3824
	.fnend
	.size	rndis_free_response, .-rndis_free_response
	.align	2
	.global	rndis_get_next_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_get_next_response, %function
rndis_get_next_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L15538
	rsb	r0, r0, r0, lsl #4
	ldr	ip, .L15546
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	lsl	r2, r0, #2
	add	r3, r3, r2
	add	r2, r2, ip
	ldr	ip, [r3, #3824]
	cmp	ip, r2
	ldr	r3, [ip]
	beq	.L15538
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r0, [ip, #16]
	cmp	r0, #0
	bne	.L15535
	b	.L15545
.L15536:
	ldr	lr, [r3, #16]
	cmp	lr, #0
	beq	.L15534
	mov	r3, ip
.L15535:
	cmp	r2, r3
	ldr	ip, [r3]
	bne	.L15536
	mov	r0, #0
	ldr	pc, [sp], #4
.L15545:
	mov	r3, ip
.L15534:
	ldr	r2, [r3, #12]
	mov	r0, #1
	str	r0, [r3, #16]
	str	r2, [r1]
	ldr	r0, [r3, #8]
	ldr	pc, [sp], #4
.L15538:
	mov	r0, #0
	bx	lr
.L15547:
	.align	2
.L15546:
	.word	.LANCHOR1+3824
	.fnend
	.size	rndis_get_next_response, .-rndis_get_next_response
	.align	2
	.global	rndis_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init, %function
rndis_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR4
	movt	r5, #:upper16:__stack_chk_guard
	movt	r7, #:upper16:.LANCHOR4
	ldr	r3, [r5]
	str	lr, [sp, #16]
	ldrb	r4, [r7, #-4008]	@ zero_extendqisi2
	.pad #36
	sub	sp, sp, #36
	str	r3, [sp, #28]
	cmp	r4, #0
	bne	.L15558
	movw	r1, #:lower16:.LC473
	mov	r2, r4
	movt	r1, #:upper16:.LC473
	add	r0, sp, #8
	bl	sprintf
	ldr	ip, .L15561
	add	r0, sp, #8
	mov	r2, r4
	ldr	r3, .L15561+4
	mov	r1, #432
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	str	ip, [sp]
	bl	proc_create_data
	cmp	r0, #0
	movw	r3, #3772
	beq	.L15559
	mov	r2, #1
	strh	r4, [r6, r3]	@ movhi
	mov	r0, r4
	add	r3, r6, #3824
	str	r4, [r6, #3776]
	str	r2, [r6, #3788]
	str	r3, [r6, #3824]
	str	r3, [r6, #3828]
	strb	r2, [r7, #-4008]
.L15548:
	ldr	r2, [sp, #28]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L15560
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15558:
	mov	r0, #0
	b	.L15548
.L15559:
	mvn	r0, #4
	b	.L15548
.L15560:
	bl	__stack_chk_fail
.L15562:
	.align	2
.L15561:
	.word	.LANCHOR1+3772
	.word	.LANCHOR3-744
	.fnend
	.size	rndis_init, .-rndis_init
	.align	2
	.global	rndis_exit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_exit, %function
rndis_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	ldrb	r1, [r3, #-4008]	@ zero_extendqisi2
	.pad #28
	sub	sp, sp, #28
	ldr	r2, [r4]
	cmp	r1, #0
	str	r2, [sp, #20]
	bne	.L15570
.L15563:
	ldr	r2, [sp, #20]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L15571
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L15570:
	mov	r5, #0
	movw	r1, #:lower16:.LC473
	mov	r2, r5
	movt	r1, #:upper16:.LC473
	mov	r0, sp
	strb	r5, [r3, #-4008]
	bl	sprintf
	mov	r0, sp
	mov	r1, r5
	bl	remove_proc_entry
	b	.L15563
.L15571:
	bl	__stack_chk_fail
	.fnend
	.size	rndis_exit, .-rndis_exit
	.align	2
	.global	ecm_ipa_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ipa_init, %function
ecm_ipa_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_ipa_init, .-ecm_ipa_init
	.align	2
	.global	ecm_qc_get_ipa_rx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_rx_cb, %function
ecm_qc_get_ipa_rx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3676]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_rx_cb, .-ecm_qc_get_ipa_rx_cb
	.align	2
	.global	ecm_qc_get_ipa_tx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_tx_cb, %function
ecm_qc_get_ipa_tx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3680]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_tx_cb, .-ecm_qc_get_ipa_tx_cb
	.align	2
	.global	ecm_qc_get_ipa_priv
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_priv, %function
ecm_qc_get_ipa_priv:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3696]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_priv, .-ecm_qc_get_ipa_priv
	.align	2
	.global	ecm_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind_config, %function
ecm_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	movw	r0, #:lower16:.LC283
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC283
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	ldr	r3, [r5, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L15592
	movw	r0, #:lower16:.LC286
	mov	r1, r4
	movt	r0, #:upper16:.LC286
	bl	strcmp
	cmp	r0, #0
	cmpne	r9, #0
	beq	.L15592
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3444]
	cmp	r3, #0
	beq	.L15609
.L15578:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #1404]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15581
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15583
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #1404]
	strb	r3, [r6, #3392]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15583
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r6, #1420]
	strb	r3, [r6, #3424]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15583
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR5
	strb	r3, [r1, #48]
	strb	r3, [r2, #-801]
	strb	r3, [r6, #1412]
.L15581:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15593
	mov	r2, #164
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15610
.L15584:
	mov	r0, r10
	add	r8, r4, #120
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #116]
	beq	.L15611
	ldrb	fp, [r9, #5]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC780
	mov	r1, #14
	ldrb	r10, [r9, #4]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC780
	mov	r0, r8
	ldrb	r7, [r9, #3]	@ zero_extendqisi2
	ldrb	lr, [r9, #2]	@ zero_extendqisi2
	ldrb	ip, [r9, #1]	@ zero_extendqisi2
	ldrb	r3, [r9]	@ zero_extendqisi2
	strd	r10, [sp, #12]
	stm	sp, {ip, lr}
	str	r7, [sp, #8]
	bl	snprintf
.L15586:
	ldr	lr, .L15613
	movw	r3, #:lower16:.LC781
	movw	r0, #:lower16:ecm_qc_bind
	movw	r2, #:lower16:ecm_qc_unbind
	movw	r1, #:lower16:ecm_qc_set_alt
	str	r8, [r6, #1416]
	movt	r3, #:upper16:.LC781
	movt	r0, #:upper16:ecm_qc_bind
	movt	r2, #:upper16:ecm_qc_unbind
	movt	r1, #:upper16:ecm_qc_set_alt
	movw	ip, #:lower16:ecm_qc_get_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:ecm_qc_setup
	movt	ip, #:upper16:ecm_qc_get_alt
	movt	r3, #:upper16:ecm_qc_setup
	str	r5, [r4, #20]
	str	r0, [r4, #24]
	movw	r0, #:lower16:ecm_qc_disable
	str	r2, [r4, #28]
	movw	r2, #:lower16:ecm_qc_suspend
	movt	r0, #:upper16:ecm_qc_disable
	str	r1, [r4, #32]
	movw	r1, #:lower16:ecm_qc_resume
	movt	r2, #:upper16:ecm_qc_suspend
	str	ip, [r4, #36]
	movt	r1, #:upper16:ecm_qc_resume
	mov	ip, #15
	str	r0, [r4, #40]
	str	r3, [r4, #44]
	add	r3, r4, #64
	str	r2, [r4, #48]
	add	r2, r5, #36
	str	r1, [r4, #52]
	strh	ip, [r4, #90]	@ movhi
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r8, [r4, #24]
	cmp	r8, #0
	beq	.L15587
	mov	r1, r4
	mov	r0, r5
	blx	r8
	subs	r8, r0, #0
	bge	.L15587
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #64]
.L15587:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15588
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15588
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15588:
	tst	r3, #2
	bne	.L15589
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L15589
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15589:
	tst	r3, #1
	bne	.L15590
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L15590
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15590:
	cmp	r8, #0
	bne	.L15612
.L15576:
	mov	r0, r8
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15593:
	mov	r4, #16
	b	.L15584
.L15611:
	movw	r9, #:lower16:.LANCHOR4
	ldr	r1, .L15613+4
	movt	r9, #:upper16:.LANCHOR4
	ldr	r0, [r9, #-3900]
	bl	get_qc_ether_addr
	ldr	r1, .L15613+8
	ldr	r0, [r9, #-3896]
	bl	get_qc_ether_addr
	ldrb	r3, [r7, #3689]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC780
	mov	r1, #14
	ldrb	r10, [r7, #3688]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC780
	mov	r0, r8
	ldrb	r9, [r7, #3687]	@ zero_extendqisi2
	ldrb	lr, [r7, #3686]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r7, #3685]	@ zero_extendqisi2
	ldrb	r3, [r7, #3684]	@ zero_extendqisi2
	str	r10, [sp, #12]
	stm	sp, {ip, lr}
	str	r9, [sp, #8]
	bl	snprintf
	b	.L15586
.L15609:
	movw	r0, #:lower16:.LC535
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC535
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r7, #3444]
	beq	.L15579
	bl	bam_data_setup.part.98
	subs	r8, r0, #0
	beq	.L15578
.L15580:
	movw	r0, #:lower16:.LC537
	mov	r2, r8
	ldr	r1, .L15613+12
	movt	r0, #:upper16:.LC537
	bl	printk
	movw	r0, #:lower16:.LC538
	ldr	r1, .L15613+16
	movt	r0, #:upper16:.LC538
	bl	printk
	b	.L15576
.L15592:
	mvn	r8, #21
	b	.L15576
.L15583:
	mvn	r8, #18
	b	.L15576
.L15610:
	mvn	r8, #11
	b	.L15576
.L15612:
	movw	r0, #:lower16:.LC782
	ldr	r1, .L15613+16
	movt	r0, #:upper16:.LC782
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #1416]
	bl	kfree
	b	.L15576
.L15579:
	movw	r0, #:lower16:.LC536
	ldr	r1, .L15613+20
	mvn	r8, #11
	movt	r0, #:upper16:.LC536
	bl	printk
	b	.L15580
.L15614:
	.align	2
.L15613:
	.word	.LANCHOR5-788
	.word	.LANCHOR1+3690
	.word	.LANCHOR1+3684
	.word	.LANCHOR3-640
	.word	.LANCHOR3-620
	.word	.LANCHOR2+3148
	.fnend
	.size	ecm_qc_bind_config, .-ecm_qc_bind_config
	.align	2
	.global	fmbim_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_free_req, %function
fmbim_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L15615
	mov	r4, r0
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L15615:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	fmbim_free_req, .-fmbim_free_req
	.align	2
	.global	mbim_configure_params
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_configure_params, %function
mbim_configure_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L15620
	movw	r0, #:lower16:.LC783
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC783
	str	lr, [sp, #4]
	mov	r1, r2
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #0
	ldr	pc, [sp], #4
.L15621:
	.align	2
.L15620:
	.word	.LANCHOR3-600
	.fnend
	.size	mbim_configure_params, .-mbim_configure_params
	.align	2
	.global	mbim_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind_config, %function
mbim_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r7, .L15656
	movw	r0, #:lower16:.LC531
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC531
	mov	r9, r1
	str	r10, [sp, #24]
	movt	r4, #:upper16:.LANCHOR1
	mov	r8, r2
	str	lr, [sp, #28]
	mov	r2, r1
	.pad #8
	sub	sp, sp, #8
	sub	r10, r7, #4
	mov	r1, r10
	bl	printk
	ldr	r6, [r4, #3708]
	cmp	r6, r9
	bls	.L15652
	movw	r0, #:lower16:.LC533
	mov	r2, r6
	movt	r0, #:upper16:.LC533
	add	r1, r7, #16
	bl	printk
	cmp	r6, #1
	bne	.L15653
	ldr	r3, [r4, #3444]
	cmp	r3, #0
	beq	.L15654
.L15627:
	movw	r0, #:lower16:.LC397
	movw	r6, #:lower16:.LANCHOR0
	ldr	r1, .L15656+4
	movt	r0, #:upper16:.LC397
	mov	r2, #1
	movt	r6, #:upper16:.LANCHOR0
	bl	printk
	ldrb	r3, [r6, #2492]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15630
.L15631:
	ldr	r4, [r4, #3712]
	cmp	r4, #0
	beq	.L15655
	ldr	lr, .L15656+8
	movw	r2, #:lower16:.LC540
	movw	r3, #:lower16:mbim_unbind
	movt	r2, #:upper16:.LC540
	movt	r3, #:upper16:mbim_unbind
	mov	r0, r8
	movw	r1, #:lower16:mbim_bind
	ldr	r8, [r5, #24]
	str	r3, [r4, #28]
	movw	r3, #:lower16:mbim_setup
	movt	r1, #:upper16:mbim_bind
	add	r9, lr, #852
	movt	r3, #:upper16:mbim_setup
	movw	ip, #:lower16:mbim_get_alt
	stm	r4, {r2, r9}
	movw	r2, #:lower16:mbim_set_alt
	movt	ip, #:upper16:mbim_get_alt
	movt	r2, #:upper16:mbim_set_alt
	str	r1, [r4, #24]
	movw	r1, #:lower16:mbim_disable
	movt	r1, #:upper16:mbim_disable
	str	r2, [r4, #32]
	movw	r2, #:lower16:mbim_suspend
	str	r3, [r4, #44]
	movw	r3, #:lower16:mbim_resume
	movt	r2, #:upper16:mbim_suspend
	movt	r3, #:upper16:mbim_resume
	str	ip, [r4, #36]
	str	r1, [r4, #40]
	mov	r1, #16384
	strd	r2, [r4, #48]
	mov	r2, #0
	str	r8, [r4, #76]
	str	r2, [r4, #80]
	str	lr, [r4, #192]
	str	r1, [r4, #216]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #124]
	beq	.L15635
	mov	r3, #6
	str	r3, [r4, #124]
.L15636:
	add	r1, r4, #208
	add	r0, r4, #200
	str	r5, [r4, #20]
	add	r3, r4, #64
	add	r2, r5, #36
	str	r0, [r4, #200]
	strd	r0, [r4, #204]
	str	r1, [r4, #212]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, #0
	beq	.L15637
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L15637
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #64]
.L15637:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15638
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15638
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15638:
	tst	r3, #2
	bne	.L15639
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L15639
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15639:
	tst	r3, #1
	bne	.L15640
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L15640
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15640:
	movw	r0, #:lower16:.LC541
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC541
	mov	r2, r6
	bl	printk
.L15622:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15630:
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15633
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #2492]
	strb	r3, [r6, #2524]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15633
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r6, #2500]
	strb	r3, [r6, #2536]
	strb	r3, [r6, #2548]
	b	.L15631
.L15635:
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r6, #140]
	strh	r1, [r6, #144]	@ movhi
	str	r3, [r6, #152]
	strh	r2, [r6, #162]	@ movhi
	b	.L15636
.L15654:
	movw	r0, #:lower16:.LC535
	mov	r2, r6
	str	r3, [sp]
	movt	r0, #:upper16:.LC535
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3444]
	beq	.L15628
	bl	bam_data_setup.part.98
	subs	r6, r0, #0
	beq	.L15627
.L15626:
	movw	r0, #:lower16:.LC537
	mov	r2, r6
	ldr	r1, .L15656+4
	movt	r0, #:upper16:.LC537
	bl	printk
.L15629:
	movw	r0, #:lower16:.LC538
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC538
	bl	printk
	b	.L15622
.L15633:
	mvn	r6, #18
	b	.L15622
.L15655:
	movw	r0, #:lower16:.LC539
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC539
	mvn	r6, #11
	bl	printk
	b	.L15622
.L15652:
	movw	r0, #:lower16:.LC532
	mov	r3, r6
	mov	r2, r9
	mov	r1, r10
	movt	r0, #:upper16:.LC532
	mvn	r6, #18
	bl	printk
	b	.L15622
.L15653:
	movw	r0, #:lower16:.LC534
	mov	r2, r6
	ldr	r1, .L15656+12
	movt	r0, #:upper16:.LC534
	mvn	r6, #21
	bl	printk
	b	.L15626
.L15628:
	movw	r0, #:lower16:.LC536
	ldr	r1, .L15656+12
	mvn	r6, #11
	movt	r0, #:upper16:.LC536
	bl	printk
	movw	r0, #:lower16:.LC537
	mov	r2, r6
	add	r1, r7, #16
	movt	r0, #:upper16:.LC537
	bl	printk
	b	.L15629
.L15657:
	.align	2
.L15656:
	.word	.LANCHOR3-3696
	.word	.LANCHOR3-3680
	.word	.LANCHOR0+1700
	.word	.LANCHOR2+3148
	.fnend
	.size	mbim_bind_config, .-mbim_bind_config
	.align	2
	.global	bam_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect, %function
bam_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #3764]
	str	lr, [sp, #12]
	cmp	r1, r3
	bge	.L15675
	cmp	r0, #0
	beq	.L15676
	add	r1, r4, r1, lsl #2
	ldr	r5, [r1, #3440]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L15661
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L15661
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L15661
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L15661:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L15677
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L15678
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15677:
	add	r1, r5, #184
	ldr	r0, [r4, #3444]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
.L15676:
	movw	r0, #:lower16:.LC400
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC400
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L15679
	b	printk
.L15675:
	mov	r2, r1
	ldr	r1, .L15679
	movw	r0, #:lower16:.LC399
	movt	r0, #:upper16:.LC399
.L15674:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L15678:
	ldr	r2, .L15679
	movw	r0, #:lower16:.LC401
	movt	r0, #:upper16:.LC401
	mov	r1, r2
	b	.L15674
.L15680:
	.align	2
.L15679:
	.word	.LANCHOR2+3316
	.fnend
	.size	bam_data_disconnect, .-bam_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_disable, %function
mbim_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	movw	r0, #:lower16:.LC784
	add	r3, r5, #196
	strd	r6, [sp, #8]
	ldr	r1, .L15705
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC784
	mov	r4, r3
	strd	r10, [sp, #24]
	mov	r6, r5
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp, #4]
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #80]
	strb	r3, [r5, #156]
	bl	_raw_spin_lock
	ldr	r3, [r6, #200]!
	ldr	r4, [r3]
	cmp	r3, r6
	movne	fp, #256
	movne	r10, #512
	movne	r8, r4
	bne	.L15682
	b	.L15683
.L15702:
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	cmp	r6, r8
	ldr	r4, [r4]
	beq	.L15683
.L15685:
	mov	r3, r8
	mov	r8, r4
.L15682:
	ldr	r2, [r3, #4]
	subs	r9, r3, #8
	str	r2, [r4, #4]
	str	r4, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	bne	.L15702
	cmp	r6, r8
	ldr	r4, [r4]
	bne	.L15685
.L15683:
	mov	r9, r5
	ldr	r3, [r9, #208]!
	ldr	r4, [r3]
	cmp	r3, r9
	movne	r7, #256
	movne	fp, #512
	movne	r8, r4
	bne	.L15686
	b	.L15687
.L15703:
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r8, r9
	ldr	r4, [r4]
	beq	.L15687
.L15689:
	mov	r3, r8
	mov	r8, r4
.L15686:
	ldr	r2, [r3, #4]
	subs	r10, r3, #8
	str	r2, [r4, #4]
	str	r4, [r2]
	stm	r3, {r7, fp}
	bne	.L15703
	cmp	r8, r9
	ldr	r4, [r4]
	bne	.L15689
.L15687:
	ldr	r4, [sp, #4]
	mov	r0, r4
	bl	_raw_spin_unlock
	mov	r0, r4
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15690
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L15704
	mov	r8, #16
	mov	r9, #0
	strd	r8, [r3]
.L15691:
	ldr	r2, [r5, #204]
	add	r1, r3, #8
	ldr	r0, [sp, #4]
	str	r1, [r5, #204]
	str	r6, [r3, #8]
	str	r2, [r3, #12]
	str	r1, [r2]
	bl	_raw_spin_unlock
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r5, #100
	bl	__wake_up
	movw	r0, #:lower16:.LC785
	ldrb	r3, [r5, #128]	@ zero_extendqisi2
	mov	r2, r5
	ldr	r1, .L15705+4
	movt	r0, #:upper16:.LC785
	bl	printk
	add	r0, r5, #132
	ldrb	r1, [r5, #128]	@ zero_extendqisi2
	bl	bam_data_disconnect
	ldr	r0, [r5, #148]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15693
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #148]
	mov	r2, #0
	str	r2, [r3]
.L15693:
	ldr	r1, .L15705
	movw	r0, #:lower16:.LC786
	mov	r3, #0
	movt	r0, #:upper16:.LC786
	str	r3, [r5, #160]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L15690:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L15691
.L15704:
	mvn	r3, #11
	b	.L15691
.L15706:
	.align	2
.L15705:
	.word	.LANCHOR3-576
	.word	.LANCHOR3-560
	.fnend
	.size	mbim_disable, .-mbim_disable
	.align	2
	.global	bam_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_connect, %function
bam_data_connect:
	.fnstart
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldrb	r8, [sp, #32]	@ zero_extendqisi2
	ldr	r0, [r6, #3764]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r1, r0
	bge	.L15715
	cmp	r5, #0
	beq	.L15716
	mov	r9, r3
	ldr	r3, [r5, #8]
	mov	r7, r2
	add	r1, r6, r1, lsl #2
	ldr	r4, [r1, #3440]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L15717
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r3, [r5, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L15718
	ldr	r3, [r5, #12]
	cmp	r7, #7
	str	r4, [r3]
	ldr	r3, [sp, #36]
	str	r5, [r4, #4]
	strb	r9, [r4, #52]
	strb	r8, [r4, #53]
	str	r3, [r4, #56]
	str	r7, [r4, #60]
	bne	.L15713
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r9, [r4, #64]
	strb	r8, [r4, #65]
	strd	r2, [r4, #68]
.L15713:
	add	r1, r4, #168
	ldr	r0, [r6, #3444]
	bl	queue_work
.L15707:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15718:
	movw	r0, #:lower16:.LC493
	ldr	r2, [r5, #12]
	movt	r0, #:upper16:.LC493
	ldr	r1, .L15719
	bl	printk
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L15707
.L15717:
	movw	r0, #:lower16:.LC492
	ldr	r1, .L15719
	ldr	r2, [r5, #8]
	movt	r0, #:upper16:.LC492
	bl	printk
	b	.L15707
.L15716:
	movw	r0, #:lower16:.LC400
	ldr	r1, .L15719
	mvn	r10, #18
	movt	r0, #:upper16:.LC400
	bl	printk
	b	.L15707
.L15715:
	movw	r0, #:lower16:.LC94
	mov	r2, r1
	ldr	r1, .L15719
	movt	r0, #:upper16:.LC94
	mvn	r10, #18
	bl	printk
	b	.L15707
.L15720:
	.align	2
.L15719:
	.word	.LANCHOR3-540
	.fnend
	.size	bam_data_connect, .-bam_data_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_set_alt, %function
mbim_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r5, [r0, #188]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r0, #76]
	cmp	r5, r1
	beq	.L15744
	ldrb	r3, [r0, #189]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L15723
	movw	r0, #:lower16:.LC790
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC790
	bl	printk
	cmp	r6, #1
	bhi	.L15723
	ldr	r3, [r4, #140]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L15745
.L15729:
	cmp	r6, #1
	beq	.L15746
.L15730:
	add	r5, r4, #196
	strb	r6, [r4, #190]
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #3
	mov	r0, r5
	strb	r3, [r4, #156]
	bl	_raw_spin_unlock
.L15728:
	mov	r5, #1
	movw	r0, #:lower16:.LC802
	ldr	r1, .L15753
	mov	r7, #0
	movt	r0, #:upper16:.LC802
	str	r5, [r4, #80]
	bl	printk
	mov	r2, r5
	mov	r3, r7
	mov	r1, #3
	add	r0, r4, #100
	bl	__wake_up
	mov	r2, r5
	add	r0, r4, #112
	mov	r3, r7
	mov	r1, #3
	bl	__wake_up
.L15721:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15746:
	movw	r0, #:lower16:.LC792
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC792
	bl	printk
	ldr	r3, [r4, #140]
	ldr	r5, [r3, #28]
	cmp	r5, #0
	beq	.L15747
	movw	r0, #:lower16:.LC801
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC801
	bl	printk
	b	.L15730
.L15747:
	movw	r0, #:lower16:.LC793
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC793
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #140]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L15748
	ldr	r3, [r4, #140]
	movw	r0, #:lower16:.LC795
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC795
	ldr	r2, [r3, #28]
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #144]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L15749
	ldr	r3, [r4, #144]
	movw	r0, #:lower16:.LC797
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC797
	ldr	r2, [r3, #28]
	bl	printk
	ldr	lr, [r4, #76]
	movw	r0, #:lower16:.LC798
	mov	r2, r4
	ldr	ip, [r4, #124]
	movt	r0, #:upper16:.LC798
	ldrb	r3, [r4, #128]	@ zero_extendqisi2
	ldr	r1, .L15753+4
	ldr	r8, [lr]
	cmp	ip, #7
	moveq	r5, #2
	movne	r5, #0
	bl	printk
	mov	r2, r7
	mov	r1, r5
	ldrb	r3, [r4, #128]	@ zero_extendqisi2
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx
	mov	r7, r0
	mov	r1, r5
	ldrb	r3, [r4, #128]	@ zero_extendqisi2
	mov	r2, r6
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx
	uxtb	ip, r0
	ldr	r2, [r4, #124]
	uxtb	r3, r7
	str	r6, [sp, #4]
	ldrb	r1, [r4, #128]	@ zero_extendqisi2
	add	r0, r4, #132
	str	ip, [sp]
	bl	bam_data_connect
	subs	r2, r0, #0
	bne	.L15750
	movw	r0, #:lower16:.LC800
	ldr	r1, .L15753+4
	movt	r0, #:upper16:.LC800
	bl	printk
	b	.L15730
.L15723:
	movw	r0, #:lower16:.LC803
	ldr	r1, .L15753
	mvn	r7, #21
	movt	r0, #:upper16:.LC803
	bl	printk
	b	.L15721
.L15749:
	ldr	r2, [r4, #144]
	movw	r0, #:lower16:.LC796
	mov	r3, r7
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC796
	str	r5, [r2, #28]
	ldr	r2, [r4, #144]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15721
.L15748:
	ldr	r2, [r4, #140]
	movw	r0, #:lower16:.LC794
	mov	r3, r7
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC794
	str	r5, [r2, #28]
	ldr	r2, [r4, #140]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15721
.L15750:
	movw	r0, #:lower16:.LC799
	ldr	r1, .L15753+4
	movt	r0, #:upper16:.LC799
	bl	printk
	b	.L15730
.L15745:
	movw	r0, #:lower16:.LC791
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC791
	bl	printk
	ldr	r3, .L15753+8
	mov	r2, #16384
	mov	r1, #0
	str	r1, [r4, #80]
	str	r3, [r4, #192]
	str	r2, [r4, #216]
	b	.L15729
.L15744:
	movw	r0, #:lower16:.LC787
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC787
	bl	printk
	cmp	r6, #0
	bne	.L15723
	ldr	r3, [r4, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L15751
.L15724:
	mov	r1, r4
	ldr	r2, [r4, #148]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L15752
	ldr	r3, [r4, #148]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	ldreq	r3, [r4, #148]
	streq	r4, [r3]
	beq	.L15728
	ldr	r2, [r4, #148]
	movw	r0, #:lower16:.LC649
	mov	r3, r7
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC649
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15721
.L15751:
	movw	r0, #:lower16:.LC788
	mov	r2, r5
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC788
	bl	printk
	ldr	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15724
.L15752:
	ldr	r2, [r4, #148]
	mov	ip, #0
	movw	r0, #:lower16:.LC789
	mov	r3, r7
	ldr	r1, .L15753
	movt	r0, #:upper16:.LC789
	str	ip, [r2, #28]
	ldr	r2, [r4, #148]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15721
.L15754:
	.align	2
.L15753:
	.word	.LANCHOR3-520
	.word	.LANCHOR3-504
	.word	.LANCHOR0+1700
	.fnend
	.size	mbim_set_alt, .-mbim_set_alt
	.align	2
	.global	bam_data_destroy
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_destroy, %function
bam_data_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	add	r5, r4, r0, lsl #2
	str	lr, [sp, #12]
	ldr	r0, [r5, #3440]
	bl	kfree
	ldr	r0, [r4, #3444]
	mov	r3, #0
	str	r3, [r5, #3440]
	cmp	r0, r3
	beq	.L15756
	bl	destroy_workqueue
.L15756:
	mov	r3, #0
	ldr	r6, [sp, #8]
	mov	r0, r3
	str	r3, [r4, #3444]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	bam_data_destroy, .-bam_data_destroy
	.align	2
	.global	bam_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup, %function
bam_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #1
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r2, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bne	.L15771
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3444]
	cmp	r3, #0
	movne	r0, #0
	beq	.L15772
.L15761:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15772:
	movw	r0, #:lower16:.LC535
	mov	r1, #10
	str	r3, [sp]
	movt	r0, #:upper16:.LC535
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3444]
	beq	.L15764
	movw	r2, #:lower16:kmalloc_caches
	ldr	r3, [r4, #3764]
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r4, #3764]
	beq	.L15769
	mov	r2, #232
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L15773
.L15765:
	movw	r3, #:lower16:bam2bam_data_connect_work
	movw	lr, #:lower16:bam2bam_data_disconnect_work
	str	r2, [r2, #16]
	movw	ip, #:lower16:bam2bam_data_suspend_work
	movt	r3, #:upper16:bam2bam_data_connect_work
	movt	lr, #:upper16:bam2bam_data_disconnect_work
	movt	ip, #:upper16:bam2bam_data_suspend_work
	movw	r1, #:lower16:bam2bam_data_resume_work
	add	r6, r2, #172
	add	r5, r2, #188
	movt	r1, #:upper16:bam2bam_data_resume_work
	mov	r0, #0
	str	r3, [r2, #180]
	mov	r3, #2560
	str	lr, [r2, #196]
	add	lr, r2, #204
	str	ip, [r2, #212]
	add	ip, r2, #220
	str	r0, [r2]
	str	r3, [r2, #168]
	str	r6, [r2, #172]
	str	r6, [r2, #176]
	str	r3, [r2, #184]
	str	r5, [r2, #188]
	str	r5, [r2, #192]
	str	r2, [r4, #3440]
	str	r3, [r2, #200]
	str	lr, [r2, #204]
	str	lr, [r2, #208]
	str	r3, [r2, #216]
	str	ip, [r2, #220]
	str	ip, [r2, #224]
	str	r1, [r2, #228]
	b	.L15761
.L15769:
	mov	r2, #16
	b	.L15765
.L15773:
	ldr	r3, [r4, #3764]
	movw	r0, #:lower16:.LC377
	mov	r5, r2
	movt	r0, #:upper16:.LC377
	ldr	r1, .L15774
	mov	r7, r2
	add	r6, r4, #3440
	sub	r3, r3, #1
	str	r3, [r4, #3764]
	bl	printk
.L15766:
	ldr	r3, [r4, #3764]
	cmp	r5, r3
	blt	.L15767
	ldr	r0, [r4, #3444]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L15761
.L15771:
	movw	r0, #:lower16:.LC534
	ldr	r1, .L15774
	movt	r0, #:upper16:.LC534
	bl	printk
	mvn	r0, #21
	b	.L15761
.L15764:
	movw	r0, #:lower16:.LC536
	ldr	r1, .L15774
	movt	r0, #:upper16:.LC536
	bl	printk
	mvn	r0, #11
	b	.L15761
.L15767:
	ldr	r0, [r6, r5, lsl #2]
	bl	kfree
	str	r7, [r6, r5, lsl #2]
	add	r5, r5, #1
	b	.L15766
.L15775:
	.align	2
.L15774:
	.word	.LANCHOR2+3148
	.fnend
	.size	bam_data_setup, .-bam_data_setup
	.align	2
	.global	bam_data_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_suspend, %function
bam_data_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r2, r3, r0, lsl #2
	ldr	r0, [r3, #3444]
	ldr	r1, [r2, #3440]
	add	r1, r1, #200
	b	queue_work
	.fnend
	.size	bam_data_suspend, .-bam_data_suspend
	.align	2
	.global	bam_data_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_resume, %function
bam_data_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r2, r3, r0, lsl #2
	ldr	r0, [r3, #3444]
	ldr	r1, [r2, #3440]
	add	r1, r1, #216
	b	queue_work
	.fnend
	.size	bam_data_resume, .-bam_data_resume
	.align	2
	.global	ecm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind_config, %function
ecm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	movw	r0, #:lower16:.LC283
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC283
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r8, [r5, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L15789
	movw	r0, #:lower16:.LC286
	mov	r1, r4
	movt	r0, #:upper16:.LC286
	bl	strcmp
	cmp	r0, #0
	cmpne	r7, #0
	beq	.L15789
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #1660]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15780
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15782
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r8, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #1660]
	strb	r3, [r6, #3976]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15782
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r6, #1676]
	strb	r3, [r6, #4008]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15782
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR5
	strb	r3, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r2, #-777]
	strb	r3, [r6, #1668]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15782
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r6, #1684]
	strb	r3, [r6, #3967]
.L15780:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15790
	mov	r2, #168
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15806
.L15783:
	ldrb	lr, [r7, #2]	@ zero_extendqisi2
	add	r8, r4, #142
	movw	r2, #:lower16:.LC780
	ldrb	ip, [r7, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC780
	mov	r1, #14
	ldrb	fp, [r7, #5]	@ zero_extendqisi2
	mov	r0, r8
	ldrb	r10, [r7, #4]	@ zero_extendqisi2
	ldrb	r9, [r7, #3]	@ zero_extendqisi2
	ldrb	r3, [r7]	@ zero_extendqisi2
	stm	sp, {ip, lr}
	ldr	r7, .L15807
	str	r9, [sp, #8]
	strd	r10, [sp, #12]
	bl	snprintf
	movw	r1, #:lower16:.LC781
	movw	lr, #:lower16:ecm_bind
	str	r8, [r6, #1672]
	movt	r1, #:upper16:.LC781
	movt	lr, #:upper16:ecm_bind
	movw	r3, #:lower16:ecm_unbind
	movw	r2, #:lower16:ecm_set_alt
	stm	r4, {r1, r7}
	movw	ip, #:lower16:ecm_get_alt
	movw	r0, #:lower16:ecm_disable
	movw	r1, #:lower16:ecm_setup
	movt	r3, #:upper16:ecm_unbind
	str	r5, [r4, #20]
	str	lr, [r4, #24]
	movt	r2, #:upper16:ecm_set_alt
	movt	r1, #:upper16:ecm_setup
	movt	ip, #:upper16:ecm_get_alt
	movt	r0, #:upper16:ecm_disable
	str	r3, [r4, #28]
	mov	lr, #15
	str	r2, [r4, #32]
	add	r3, r4, #64
	str	ip, [r4, #36]
	add	r2, r5, #36
	str	r0, [r4, #40]
	str	r1, [r4, #44]
	strh	lr, [r4, #90]	@ movhi
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r7, [r4, #24]
	cmp	r7, #0
	beq	.L15784
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	bge	.L15784
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #64]
.L15784:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15785
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15785
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L15785:
	tst	r3, #2
	bne	.L15786
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L15786
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L15786:
	tst	r3, #1
	bne	.L15787
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L15787
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L15787:
	cmp	r7, #0
	beq	.L15778
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #1672]
	bl	kfree
.L15778:
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15790:
	mov	r4, #16
	b	.L15783
.L15789:
	mvn	r7, #21
	b	.L15778
.L15782:
	mvn	r7, #18
	b	.L15778
.L15806:
	mvn	r7, #11
	b	.L15778
.L15808:
	.align	2
.L15807:
	.word	.LANCHOR5-764
	.fnend
	.size	ecm_bind_config, .-ecm_bind_config
	.align	2
	.global	rndis_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config, %function
rndis_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:__stack_chk_guard
	movt	r8, #:upper16:__stack_chk_guard
	str	r10, [sp, #24]
	subs	r10, r1, #0
	ldr	r3, [r8]
	str	lr, [sp, #28]
	.pad #32
	sub	sp, sp, #32
	str	r3, [sp, #28]
	beq	.L15829
	movw	r7, #:lower16:.LANCHOR4
	mov	r6, r0
	movt	r7, #:upper16:.LANCHOR4
	ldrb	r4, [r7, #-4008]	@ zero_extendqisi2
	cmp	r4, #0
	movwne	r5, #:lower16:.LANCHOR1
	movtne	r5, #:upper16:.LANCHOR1
	bne	.L15811
	movw	r1, #:lower16:.LC473
	mov	r2, r4
	movt	r1, #:upper16:.LC473
	add	r0, sp, #8
	bl	sprintf
	ldr	ip, .L15859
	add	r0, sp, #8
	mov	r2, r4
	ldr	r3, .L15859+4
	mov	r1, #432
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	str	ip, [sp]
	bl	proc_create_data
	cmp	r0, #0
	movw	r3, #3772
	beq	.L15852
	mov	r2, #1
	strh	r4, [r5, r3]	@ movhi
	add	r3, r5, #3824
	str	r4, [r5, #3776]
	str	r2, [r5, #3788]
	str	r3, [r5, #3824]
	str	r3, [r5, #3828]
	strb	r2, [r7, #-4008]
.L15811:
	ldr	r3, [r5, #3444]
	cmp	r3, #0
	beq	.L15853
.L15815:
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldrb	r2, [r3, #-756]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15819
	ldr	r1, [r6, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15821
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r2, [r3, #-1744]
	strb	r2, [r3, #-756]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15821
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r2, [r3, #-1724]
	strb	r2, [r3, #-748]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15821
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-1753]
	strb	r2, [r3, #-740]
.L15819:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15830
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15854
.L15822:
	ldr	r0, [r10]	@ unaligned
	movw	ip, #:lower16:rndis_qc_unbind
	movw	r2, #:lower16:rndis_qc_add_header
	ldr	r1, .L15859+8
	movt	ip, #:upper16:rndis_qc_unbind
	movw	r3, #:lower16:rndis_qc_rm_hdr
	movt	r2, #:upper16:rndis_qc_add_header
	movt	r3, #:upper16:rndis_qc_rm_hdr
	str	r0, [r4, #114]	@ unaligned
	movw	r0, #:lower16:.LC778
	ldrh	lr, [r10, #4]	@ unaligned
	movt	r0, #:upper16:.LC778
	mov	r10, #0
	str	ip, [r4, #28]
	movw	ip, #:lower16:rndis_qc_disable
	strd	r0, [r4]
	movw	r1, #:lower16:rndis_qc_bind
	movw	r0, #:lower16:rndis_qc_set_alt
	movt	r1, #:upper16:rndis_qc_bind
	movt	r0, #:upper16:rndis_qc_set_alt
	str	r6, [r4, #20]
	movt	ip, #:upper16:rndis_qc_disable
	str	r4, [r5, #2332]
	str	r1, [r4, #24]
	movw	r1, #:lower16:rndis_qc_setup
	movt	r1, #:upper16:rndis_qc_setup
	str	r0, [r4, #32]
	movw	r0, #:lower16:rndis_qc_suspend
	movt	r0, #:upper16:rndis_qc_suspend
	str	ip, [r4, #40]
	str	r1, [r4, #44]
	movw	r1, #:lower16:rndis_qc_resume
	movt	r1, #:upper16:rndis_qc_resume
	str	r0, [r4, #48]
	mov	r0, #1
	str	r1, [r4, #52]
	mov	r1, #44
	strh	r10, [r4, #90]	@ movhi
	str	r1, [r4, #92]
	strd	r2, [r4, #96]
	add	r3, r4, #64
	add	r2, r6, #36
	strh	lr, [r4, #118]	@ unaligned
	str	r10, [r4, #120]
	strb	r0, [r4, #124]
	str	r10, [r4, #132]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r9, [r4, #24]
	cmp	r9, r10
	beq	.L15824
	mov	r1, r4
	mov	r0, r6
	blx	r9
	subs	r9, r0, #0
	blt	.L15855
.L15824:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15825
.L15858:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15825
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L15825:
	tst	r3, #2
	bne	.L15826
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L15826
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L15826:
	tst	r3, #1
	bne	.L15827
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L15827
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L15827:
	cmp	r9, #0
	bne	.L15856
.L15809:
	ldr	r2, [sp, #28]
	mov	r0, r9
	ldr	r3, [r8]
	cmp	r2, r3
	bne	.L15857
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15856:
	mov	r0, r4
	bl	kfree
.L15823:
	ldrb	r3, [r7, #-4008]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15809
	mov	r4, #0
	movw	r1, #:lower16:.LC473
	mov	r2, r4
	movt	r1, #:upper16:.LC473
	add	r0, sp, #8
	strb	r4, [r7, #-4008]
	bl	sprintf
	add	r0, sp, #8
	mov	r1, r4
	bl	remove_proc_entry
	b	.L15809
.L15855:
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r4, #20]
	strd	r0, [r4, #64]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15825
	b	.L15858
.L15830:
	mov	r4, #16
	b	.L15822
.L15854:
	mvn	r9, #11
	b	.L15823
.L15853:
	movw	r0, #:lower16:.LC535
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC535
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #3444]
	beq	.L15816
	bl	bam_data_setup.part.98
	subs	r9, r0, #0
	beq	.L15815
.L15817:
	movw	r0, #:lower16:.LC537
	mov	r2, r9
	ldr	r1, .L15859+12
	movt	r0, #:upper16:.LC537
	bl	printk
	movw	r0, #:lower16:.LC538
	ldr	r1, .L15859+16
	movt	r0, #:upper16:.LC538
	bl	printk
	b	.L15809
.L15821:
	mvn	r9, #18
	b	.L15809
.L15829:
	mvn	r9, #21
	b	.L15809
.L15852:
	mvn	r9, #4
	b	.L15809
.L15857:
	bl	__stack_chk_fail
.L15816:
	movw	r0, #:lower16:.LC536
	ldr	r1, .L15859+20
	mvn	r9, #11
	movt	r0, #:upper16:.LC536
	bl	printk
	b	.L15817
.L15860:
	.align	2
.L15859:
	.word	.LANCHOR1+3772
	.word	.LANCHOR3-744
	.word	.LANCHOR5-724
	.word	.LANCHOR3-484
	.word	.LANCHOR3-464
	.word	.LANCHOR2+3148
	.fnend
	.size	rndis_qc_bind_config, .-rndis_qc_bind_config
	.align	2
	.global	rndis_qc_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config_vendor, %function
rndis_qc_bind_config_vendor:
	.fnstart
	@ args = 4, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	movt	r7, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	subs	r10, r1, #0
	ldr	r1, [r7]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldrb	r9, [sp, #80]	@ zero_extendqisi2
	str	r3, [sp, #12]
	str	r1, [sp, #36]
	beq	.L15882
	movw	r6, #:lower16:.LANCHOR4
	mov	r5, r0
	movt	r6, #:upper16:.LANCHOR4
	mov	fp, r2
	ldrb	r8, [r6, #-4008]	@ zero_extendqisi2
	cmp	r8, #0
	movwne	r4, #:lower16:.LANCHOR1
	movtne	r4, #:upper16:.LANCHOR1
	bne	.L15863
	movw	r1, #:lower16:.LC473
	mov	r2, r8
	movt	r1, #:upper16:.LC473
	add	r0, sp, #16
	bl	sprintf
	ldr	ip, .L15913
	add	r0, sp, #16
	mov	r2, r8
	ldr	r3, .L15913+4
	mov	r1, #432
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	ip, [sp]
	bl	proc_create_data
	cmp	r0, #0
	movw	r3, #3772
	beq	.L15906
	mov	r2, #1
	strh	r8, [r4, r3]	@ movhi
	add	r3, r4, #3824
	str	r8, [r4, #3776]
	str	r2, [r4, #3788]
	str	r3, [r4, #3824]
	str	r3, [r4, #3828]
	strb	r2, [r6, #-4008]
.L15863:
	ldr	r3, [r4, #3444]
	cmp	r3, #0
	beq	.L15907
.L15867:
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldrb	r2, [r3, #-756]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15871
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15873
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r2, [r3, #-1744]
	strb	r2, [r3, #-756]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15873
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r2, [r3, #-1724]
	strb	r2, [r3, #-748]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15873
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-1753]
	strb	r2, [r3, #-740]
.L15871:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15883
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L15908
.L15874:
	ldr	r2, [r10]	@ unaligned
	movw	r0, #:lower16:.LC778
	movw	lr, #:lower16:rndis_qc_add_header
	ldr	r1, .L15913+8
	movt	r0, #:upper16:.LC778
	movt	lr, #:upper16:rndis_qc_add_header
	cmp	r9, #0
	moveq	r9, #15
	str	r2, [r3, #114]	@ unaligned
	ldrh	ip, [r10, #4]	@ unaligned
	movw	r2, #:lower16:rndis_qc_rm_hdr
	strd	r0, [r3]
	movw	r0, #:lower16:rndis_qc_set_alt
	movw	r1, #:lower16:rndis_qc_bind
	movt	r0, #:upper16:rndis_qc_set_alt
	movt	r1, #:upper16:rndis_qc_bind
	str	r5, [r3, #20]
	str	lr, [r3, #96]
	movw	lr, #:lower16:rndis_qc_unbind
	movt	r2, #:upper16:rndis_qc_rm_hdr
	str	r1, [r3, #24]
	movw	r1, #:lower16:rndis_qc_setup
	movt	lr, #:upper16:rndis_qc_unbind
	str	r0, [r3, #32]
	movw	r0, #:lower16:rndis_qc_suspend
	movt	r1, #:upper16:rndis_qc_setup
	movt	r0, #:upper16:rndis_qc_suspend
	str	lr, [r3, #28]
	movw	lr, #:lower16:rndis_qc_disable
	str	r1, [r3, #44]
	movw	r1, #:lower16:rndis_qc_resume
	mov	r10, #0
	str	r0, [r3, #48]
	mov	r0, #44
	movt	r1, #:upper16:rndis_qc_resume
	movt	lr, #:upper16:rndis_qc_disable
	str	r3, [r4, #2332]
	str	r0, [r3, #92]
	ldr	r0, [sp, #12]
	str	lr, [r3, #40]
	str	r1, [r3, #52]
	add	r1, r5, #36
	strh	r10, [r3, #90]	@ movhi
	str	r2, [r3, #100]
	add	r2, r3, #64
	strh	ip, [r3, #118]	@ unaligned
	str	fp, [r3, #120]
	strb	r9, [r3, #124]
	str	r0, [r3, #132]
	ldr	r0, [r5, #40]
	str	r2, [r5, #40]
	str	r1, [r3, #64]
	str	r0, [r3, #68]
	str	r2, [r0]
	ldr	r8, [r3, #24]
	cmp	r8, r10
	beq	.L15877
	mov	r1, r3
	mov	r0, r5
	str	r3, [sp, #12]
	blx	r8
	subs	r8, r0, #0
	ldr	r3, [sp, #12]
	blt	.L15909
.L15877:
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L15878
.L15912:
	ldr	r1, [r3, #8]
	cmp	r1, #0
	beq	.L15878
	orr	r1, r2, #4
	mov	r2, r1
	strb	r1, [r5, #45]
.L15878:
	tst	r2, #2
	bne	.L15879
	ldr	r1, [r3, #12]
	cmp	r1, #0
	beq	.L15879
	ldrb	r1, [r5, #45]	@ zero_extendqisi2
	orr	r1, r1, #2
	mov	r2, r1
	strb	r1, [r5, #45]
.L15879:
	tst	r2, #1
	bne	.L15880
	ldr	r2, [r3, #16]
	cmp	r2, #0
	beq	.L15880
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #1
	strb	r2, [r5, #45]
.L15880:
	cmp	r8, #0
	bne	.L15910
.L15861:
	ldr	r2, [sp, #36]
	mov	r0, r8
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L15911
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15910:
	mov	r0, r3
	bl	kfree
.L15875:
	ldrb	r3, [r6, #-4008]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15861
	mov	r4, #0
	movw	r1, #:lower16:.LC473
	mov	r2, r4
	movt	r1, #:upper16:.LC473
	add	r0, sp, #16
	strb	r4, [r6, #-4008]
	bl	sprintf
	add	r0, sp, #16
	mov	r1, r4
	bl	remove_proc_entry
	b	.L15861
.L15909:
	ldr	r1, [r3, #64]
	mov	ip, #256
	mov	r0, #512
	ldr	r2, [r3, #68]
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [r3, #20]
	str	ip, [r3, #64]
	str	r0, [r3, #68]
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L15878
	b	.L15912
.L15883:
	mov	r3, #16
	b	.L15874
.L15908:
	mvn	r8, #11
	b	.L15875
.L15907:
	movw	r0, #:lower16:.LC535
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC535
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3444]
	beq	.L15868
	bl	bam_data_setup.part.98
	subs	r8, r0, #0
	beq	.L15867
.L15869:
	movw	r0, #:lower16:.LC537
	mov	r2, r8
	ldr	r1, .L15913+12
	movt	r0, #:upper16:.LC537
	bl	printk
	movw	r0, #:lower16:.LC538
	ldr	r1, .L15913+16
	movt	r0, #:upper16:.LC538
	bl	printk
	b	.L15861
.L15873:
	mvn	r8, #18
	b	.L15861
.L15882:
	mvn	r8, #21
	b	.L15861
.L15906:
	mvn	r8, #4
	b	.L15861
.L15911:
	bl	__stack_chk_fail
.L15868:
	movw	r0, #:lower16:.LC536
	ldr	r1, .L15913+20
	mvn	r8, #11
	movt	r0, #:upper16:.LC536
	bl	printk
	b	.L15869
.L15914:
	.align	2
.L15913:
	.word	.LANCHOR1+3772
	.word	.LANCHOR3-744
	.word	.LANCHOR5-724
	.word	.LANCHOR3-484
	.word	.LANCHOR3-464
	.word	.LANCHOR2+3148
	.fnend
	.size	rndis_qc_bind_config_vendor, .-rndis_qc_bind_config_vendor
	.align	2
	.global	gether_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup_name, %function
gether_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR4
	movt	r8, #:upper16:.LANCHOR4
	strd	r10, [sp, #24]
	ldr	r5, [r8, #-4012]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	cmp	r5, #0
	bne	.L15933
	mov	r10, r0
	mov	r6, r2
	mov	r2, #1
	mov	r0, #132
	str	r10, [sp, #8]
	str	r1, [sp, #12]
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r4, r0, #0
	beq	.L15934
	add	r7, r4, #1216
	movw	r2, #:lower16:eth_work
	str	r5, [r4, #1216]
	add	lr, r7, #20
	movw	ip, #:lower16:process_rx_w
	str	r4, [r4, #1224]
	movt	r2, #:upper16:eth_work
	movt	ip, #:upper16:process_rx_w
	str	r5, [r4, #1232]
	str	lr, [r4, #1236]
	add	r9, r7, #92
	add	r1, r7, #108
	str	lr, [r4, #1240]
	add	lr, r7, #28
	mov	r3, r6
	str	r5, [r4, #1276]
	str	lr, [r4, #1244]
	str	lr, [r4, #1248]
	mov	lr, #2560
	str	r5, [r4, #1280]
	add	r5, r7, #52
	str	r2, [r4, #1316]
	movw	r2, #:lower16:.LC804
	str	ip, [r4, #1332]
	add	ip, r10, #32
	movt	r2, #:upper16:.LC804
	str	r5, [r4, #1268]
	str	r5, [r4, #1272]
	str	lr, [r4, #1304]
	str	r9, [r4, #1308]
	str	r9, [r4, #1312]
	str	lr, [r4, #1320]
	str	r1, [r4, #1324]
	str	r1, [r4, #1328]
	mov	r1, #16
	str	ip, [sp, #4]
	bl	snprintf
	ldr	r5, [r8, #-3892]
	ldr	r6, [r4, #492]
	cmp	r5, #0
	subne	r10, r6, #1
	addne	r9, r6, #5
	bne	.L15919
	b	.L15923
.L15945:
	ldrb	r0, [r5, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r1, r0
	ldrb	r0, [r5, #2]	@ zero_extendqisi2
	str	r1, [sp]
	bl	hex_to_bin
	ldr	r1, [sp]
	orr	r0, r0, r1, lsl #4
	strb	r0, [r10, #1]!
	cmp	r9, r10
	beq	.L15922
.L15921:
	mov	r5, fp
.L15919:
	ldrb	r1, [r5]	@ zero_extendqisi2
	add	fp, r5, #3
	cmp	r1, #58
	cmpne	r1, #46
	mov	r0, r1
	beq	.L15945
	bl	hex_to_bin
	mov	fp, r0
	ldrb	r0, [r5, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, fp, lsl #4
	add	fp, r5, #2
	strb	r0, [r10, #1]!
	cmp	r9, r10
	bne	.L15921
.L15922:
	ldrb	r3, [r6]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L15946
.L15923:
	mov	r1, #6
	mov	r0, r6
	bl	get_random_bytes
	ldrb	r3, [r6]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC805
	movw	r1, #:lower16:.LC806
	movt	r2, #:upper16:.LC805
	movt	r1, #:upper16:.LC806
	ldr	r0, [sp, #4]
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r6]
	bl	dev_warn
.L15918:
	ldr	r5, [r8, #-3888]
	add	r3, r7, #125
	str	r3, [sp]
	cmp	r5, #0
	addne	r9, r4, #1328
	addne	r6, r7, #130
	addne	r9, r9, #12
	bne	.L15926
	b	.L15930
.L15947:
	ldrb	r0, [r5, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	fp, r0
	ldrb	r0, [r5, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, fp, lsl #4
	strb	r0, [r9, #1]!
	cmp	r6, r9
	beq	.L15929
.L15928:
	mov	r5, r10
.L15926:
	ldrb	r2, [r5]	@ zero_extendqisi2
	add	r10, r5, #3
	cmp	r2, #58
	cmpne	r2, #46
	mov	r0, r2
	beq	.L15947
	bl	hex_to_bin
	mov	r10, r0
	ldrb	r0, [r5, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r10, lsl #4
	add	r10, r5, #2
	strb	r0, [r9, #1]!
	cmp	r6, r9
	bne	.L15928
.L15929:
	ldrb	r3, [r4, #1341]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L15948
.L15930:
	mov	r1, #6
	ldr	r0, [sp]
	bl	get_random_bytes
	ldrb	r3, [r4, #1341]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC807
	movw	r1, #:lower16:.LC806
	movt	r2, #:upper16:.LC807
	movt	r1, #:upper16:.LC806
	ldr	r0, [sp, #4]
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r4, #1341]
	bl	dev_warn
.L15925:
	ldr	r2, [sp, #12]
	cmp	r2, #0
	beq	.L15931
	ldr	r1, [sp]
	ldr	r3, [r1]	@ unaligned
	str	r3, [r2]	@ unaligned
	ldrh	r3, [r1, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
.L15931:
	ldr	r2, [sp, #4]
	mov	r0, r4
	ldr	r3, .L15949
	ldr	r1, .L15949+4
	str	r2, [r4, #688]
	ldr	r2, [sp, #8]
	str	r3, [r4, #336]
	str	r1, [r4, #736]
	str	r2, [r4, #1228]
	add	r2, r3, #136
	str	r2, [r4, #340]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L15932
	mov	r0, r4
	bl	free_netdev
.L15915:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15946:
	ldrb	r1, [r6, #1]	@ zero_extendqisi2
	ldrb	r2, [r6, #2]	@ zero_extendqisi2
	ldrb	r0, [r6, #3]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r6, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r6, #5]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L15923
	b	.L15918
.L15948:
	ldrb	r1, [r4, #1342]	@ zero_extendqisi2
	ldrb	r2, [r4, #1343]	@ zero_extendqisi2
	ldrb	r0, [r4, #1344]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r4, #1345]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r4, #1346]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L15930
	b	.L15925
.L15933:
	mvn	r5, #15
	b	.L15915
.L15934:
	mvn	r5, #11
	b	.L15915
.L15932:
	movw	r0, #:lower16:.LC808
	ldr	r2, [r4, #492]
	ldr	r1, [r4, #1224]
	movt	r0, #:upper16:.LC808
	bl	printk
	movw	r0, #:lower16:.LC809
	ldr	r1, [r4, #1224]
	ldr	r2, [sp]
	movt	r0, #:upper16:.LC809
	bl	printk
	mov	r0, r4
	str	r7, [r8, #-4012]
	bl	netif_carrier_off
	b	.L15915
.L15950:
	.align	2
.L15949:
	.word	.LANCHOR3-436
	.word	.LANCHOR5-716
	.fnend
	.size	gether_setup_name, .-gether_setup_name
	.align	2
	.global	gether_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup, %function
gether_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r2, #:lower16:.LC810
	movt	r2, #:upper16:.LC810
	b	gether_setup_name
	.fnend
	.size	gether_setup, .-gether_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_bind_config, %function
rndis_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:__stack_chk_guard
	strd	r10, [sp, #24]
	movt	r8, #:upper16:__stack_chk_guard
	str	lr, [sp, #32]
	ldr	r5, [r0, #4]
	.pad #52
	sub	sp, sp, #52
	ldr	r3, [r8]
	cmp	r5, #0
	str	r3, [sp, #44]
	beq	.L15999
	mov	r6, r1
	ldrb	r1, [r5, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC812
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC812
	ldr	r2, .L16009
	str	r1, [sp, #16]
	ldrb	ip, [r5, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r5, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r5, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldrb	r3, [r5]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC778
	movt	r2, #:upper16:.LC778
	cmp	r3, #0
	ldr	r3, [r6, #24]
	movne	r1, #0
	moveq	r1, r5
	ldr	r0, [r3]
	bl	gether_setup_name
	cmp	r0, #0
	mov	r10, r0
	bne	.L16000
	ldrb	r3, [r5, #269]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16001
.L15958:
	movw	r9, #:lower16:.LANCHOR4
	ldr	fp, [r5, #8]
	movt	r9, #:upper16:.LANCHOR4
	ldrb	r4, [r9, #-4008]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L16002
.L15959:
	movw	r7, #:lower16:.LANCHOR5
	movt	r7, #:upper16:.LANCHOR5
	ldrb	r3, [r7, #-848]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15962
	ldr	r2, [r6, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15964
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r6, #24]
	strb	r3, [r7, #-2040]
	strb	r3, [r7, #-848]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15964
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r6, #24]
	strb	r3, [r7, #-2020]
	strb	r3, [r7, #-840]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L15964
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r7, #-2049]
	strb	r3, [r7, #-832]
.L15962:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15973
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16003
.L15965:
	ldr	r0, [r5]	@ unaligned
	movw	r2, #:lower16:rndis_add_header
	movw	r3, #:lower16:rndis_rm_hdr
	ldr	r1, [r7, #-1764]
	movt	r2, #:upper16:rndis_add_header
	movt	r3, #:upper16:rndis_rm_hdr
	ldr	ip, .L16009+4
	add	r5, r5, #13
	ldr	lr, [r7, #-816]
	movw	r7, #:lower16:.LC778
	str	r0, [r4, #142]	@ unaligned
	ldrh	r0, [r5, #-9]	@ unaligned
	movt	r7, #:upper16:.LC778
	str	r1, [r4, #108]
	movw	r1, #:lower16:rndis_bind
	movt	r1, #:upper16:rndis_bind
	stm	r4, {r7, ip}
	movw	r7, #:lower16:rndis_set_alt
	movt	r7, #:upper16:rndis_set_alt
	strd	r2, [r4, #120]
	movw	r2, #:lower16:rndis_setup
	str	lr, [r4, #112]
	movw	lr, #:lower16:rndis_unbind
	movt	r2, #:upper16:rndis_setup
	str	r1, [r4, #24]
	movw	r1, #:lower16:rndis_disable
	movt	lr, #:upper16:rndis_unbind
	movt	r1, #:upper16:rndis_disable
	str	r6, [r4, #20]
	add	r3, r4, #64
	str	r7, [r4, #32]
	mov	r7, #0
	str	lr, [r4, #28]
	str	r1, [r4, #40]
	mov	r1, #44
	str	r2, [r4, #44]
	add	r2, r6, #36
	strh	r7, [r4, #90]	@ movhi
	str	r1, [r4, #92]
	strh	r0, [r4, #146]	@ unaligned
	str	fp, [r4, #148]
	str	r5, [r4, #152]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r3, [r4, #24]
	cmp	r3, r7
	beq	.L15967
	mov	r1, r4
	mov	r0, r6
	blx	r3
	subs	r10, r0, #0
	blt	.L16004
.L15967:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15968
.L16007:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15968
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L15968:
	tst	r3, #2
	bne	.L15969
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L15969
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L15969:
	tst	r3, #1
	bne	.L15970
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L15970
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L15970:
	cmp	r10, #0
	bne	.L16005
.L15952:
	ldr	r2, [sp, #44]
	mov	r0, r10
	ldr	r3, [r8]
	cmp	r2, r3
	bne	.L16006
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16001:
	movw	r3, #:lower16:.LANCHOR5
	mvn	r1, #31
	movt	r3, #:upper16:.LANCHOR5
	mov	ip, #1
	sub	r2, r3, #2048
	mov	r0, #480
	strb	r1, [r3, #-2043]
	mov	r1, #3
	strh	r0, [r2, #-4]	@ movhi
	strb	r1, [r3, #-2050]
	strb	ip, [r3, #-2042]
	strb	r1, [r3, #-2041]
	b	.L15958
.L16005:
	mov	r0, r4
	bl	kfree
.L15966:
	ldrb	r3, [r9, #-4008]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15952
	mov	r4, #0
	movw	r1, #:lower16:.LC473
	mov	r2, r4
	movt	r1, #:upper16:.LC473
	add	r0, sp, #24
	strb	r4, [r9, #-4008]
	bl	sprintf
	add	r0, sp, #24
	mov	r1, r4
	bl	remove_proc_entry
	b	.L15952
.L16004:
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4, #20]
	strd	r0, [r4, #64]
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15968
	b	.L16007
.L16002:
	movw	r1, #:lower16:.LC473
	mov	r2, r4
	movt	r1, #:upper16:.LC473
	add	r0, sp, #24
	bl	sprintf
	ldr	ip, .L16009+8
	add	r0, sp, #24
	mov	r2, r4
	ldr	r3, .L16009+12
	mov	r1, #432
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	str	ip, [sp]
	bl	proc_create_data
	cmp	r0, #0
	movw	r3, #3772
	beq	.L16008
	mov	r2, #1
	strh	r4, [r7, r3]	@ movhi
	add	r3, r7, #3824
	str	r4, [r7, #3776]
	str	r2, [r7, #3788]
	str	r3, [r7, #3824]
	str	r3, [r7, #3828]
	strb	r2, [r9, #-4008]
	b	.L15959
.L15973:
	mov	r4, #16
	b	.L15965
.L16003:
	mvn	r10, #11
	b	.L15966
.L15964:
	mvn	r10, #18
	b	.L15952
.L15999:
	ldr	r2, .L16009
	movw	r0, #:lower16:.LC811
	mvn	r10, #0
	movt	r0, #:upper16:.LC811
	mov	r1, r2
	bl	printk
	b	.L15952
.L16008:
	mvn	r10, #4
	b	.L15952
.L16006:
	bl	__stack_chk_fail
.L16000:
	ldr	r2, .L16009
	movw	r0, #:lower16:.LC813
	movt	r0, #:upper16:.LC813
	mov	r1, r2
	bl	printk
	b	.L15952
.L16010:
	.align	2
.L16009:
	.word	.LANCHOR3-136
	.word	.LANCHOR5-812
	.word	.LANCHOR1+3772
	.word	.LANCHOR3-744
	.fnend
	.size	rndis_function_bind_config, .-rndis_function_bind_config
	.align	2
	.global	gether_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_cleanup, %function
gether_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR4
	movt	r4, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldr	r3, [r4, #-4012]
	cmp	r3, #0
	beq	.L16011
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #-4012]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #-4012]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #-4012]
.L16011:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_cleanup, .-gether_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_bind_config, %function
ecm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r5, [r0, #4]
	.pad #28
	sub	sp, sp, #28
	cmp	r5, #0
	beq	.L16050
	mov	r6, r1
	ldrb	r1, [r5, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC812
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC812
	ldr	r2, .L16054
	str	r1, [sp, #16]
	ldrb	ip, [r5, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r5, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r5, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC815
	mov	r1, r5
	movt	r2, #:upper16:.LC815
	ldr	r0, [r3]
	bl	gether_setup_name
	subs	r9, r0, #0
	bne	.L16051
	ldr	r4, [r6, #24]
	movw	r0, #:lower16:.LC283
	movt	r0, #:upper16:.LC283
	ldr	r3, [r4]
	ldr	r7, [r3, #28]
	mov	r1, r7
	bl	strcmp
	cmp	r0, #0
	beq	.L16031
	movw	r0, #:lower16:.LC286
	mov	r1, r7
	movt	r0, #:upper16:.LC286
	bl	strcmp
	cmp	r0, #0
	beq	.L16031
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	ldrb	r3, [r7, #1660]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16022
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16024
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r4, #48]
	ldr	r2, [r6, #24]
	strb	r3, [r7, #1660]
	strb	r3, [r7, #3976]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16024
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r7, #1676]
	strb	r3, [r7, #4008]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16024
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR5
	strb	r3, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r2, #-777]
	strb	r3, [r7, #1668]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16024
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r7, #1684]
	strb	r3, [r7, #3967]
.L16022:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16032
	mov	r2, #168
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16052
.L16025:
	ldrb	ip, [r5, #5]	@ zero_extendqisi2
	add	r8, r4, #142
	movw	r2, #:lower16:.LC780
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC780
	mov	r1, #14
	mov	r0, r8
	str	ip, [sp, #16]
	ldrb	ip, [r5, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r5, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r5, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	ldr	r5, .L16054+4
	str	ip, [sp]
	bl	snprintf
	movw	r1, #:lower16:.LC781
	movw	lr, #:lower16:ecm_bind
	str	r8, [r7, #1672]
	movt	r1, #:upper16:.LC781
	movt	lr, #:upper16:ecm_bind
	movw	r3, #:lower16:ecm_unbind
	movw	r2, #:lower16:ecm_set_alt
	stm	r4, {r1, r5}
	movw	ip, #:lower16:ecm_get_alt
	movw	r0, #:lower16:ecm_disable
	movw	r1, #:lower16:ecm_setup
	movt	r3, #:upper16:ecm_unbind
	str	r6, [r4, #20]
	str	lr, [r4, #24]
	movt	r2, #:upper16:ecm_set_alt
	movt	r1, #:upper16:ecm_setup
	movt	ip, #:upper16:ecm_get_alt
	movt	r0, #:upper16:ecm_disable
	str	r3, [r4, #28]
	mov	lr, #15
	str	r2, [r4, #32]
	add	r3, r4, #64
	str	ip, [r4, #36]
	add	r2, r6, #36
	str	r0, [r4, #40]
	str	r1, [r4, #44]
	strh	lr, [r4, #90]	@ movhi
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L16026
	mov	r1, r4
	mov	r0, r6
	blx	r3
	subs	r9, r0, #0
	bge	.L16026
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #64]
.L16026:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16027
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L16027
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L16027:
	tst	r3, #2
	bne	.L16028
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L16028
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L16028:
	tst	r3, #1
	bne	.L16029
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L16029
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L16029:
	cmp	r9, #0
	bne	.L16053
.L16017:
	mov	r0, r9
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L16053:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r7, #1672]
	bl	kfree
.L16021:
	ldr	r2, .L16054
	movw	r0, #:lower16:.LC816
	movt	r0, #:upper16:.LC816
	mov	r1, r2
	bl	printk
	bl	gether_cleanup
	b	.L16017
.L16032:
	mov	r4, #16
	b	.L16025
.L16031:
	mvn	r9, #21
	b	.L16021
.L16024:
	mvn	r9, #18
	b	.L16021
.L16050:
	ldr	r2, .L16054
	movw	r0, #:lower16:.LC814
	mvn	r9, #21
	movt	r0, #:upper16:.LC814
	mov	r1, r2
	bl	printk
	b	.L16017
.L16052:
	mvn	r9, #11
	b	.L16021
.L16051:
	ldr	r2, .L16054
	movw	r0, #:lower16:.LC813
	movt	r0, #:upper16:.LC813
	mov	r1, r2
	bl	printk
	b	.L16017
.L16055:
	.align	2
.L16054:
	.word	.LANCHOR3-108
	.word	.LANCHOR5-764
	.fnend
	.size	ecm_function_bind_config, .-ecm_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_bind_config, %function
ncm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r0, #4]
	.pad #24
	sub	sp, sp, #24
	cmp	r5, #0
	beq	.L16089
	mov	r6, r1
	ldrb	r1, [r5, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC812
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC812
	ldr	r2, .L16093
	str	r1, [sp, #16]
	ldrb	ip, [r5, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r5, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r5, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC818
	mov	r1, r5
	movt	r2, #:upper16:.LC818
	ldr	r0, [r3]
	bl	gether_setup_name
	subs	r8, r0, #0
	bne	.L16090
	ldr	r4, [r6, #24]
	movw	r0, #:lower16:.LC283
	movt	r0, #:upper16:.LC283
	ldr	r3, [r4]
	ldr	r7, [r3, #28]
	mov	r1, r7
	bl	strcmp
	cmp	r0, #0
	beq	.L16070
	movw	r0, #:lower16:.LC286
	mov	r1, r7
	movt	r0, #:upper16:.LC286
	bl	strcmp
	cmp	r0, #0
	beq	.L16070
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	ldrb	r3, [r7, #1620]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16061
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16063
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR5
	strb	r3, [r4, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r2, #-3636]
	strb	r3, [r7, #1620]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16063
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r2, #-3616]
	strb	r3, [r2, #-3604]
	strb	r3, [r7, #1636]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16063
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r2, #-689]
	strb	r3, [r7, #1628]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16063
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r2, #-3645]
	strb	r3, [r7, #1644]
.L16061:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16071
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16091
.L16064:
	ldrb	ip, [r5, #5]	@ zero_extendqisi2
	add	r10, r4, #142
	movw	r2, #:lower16:.LC780
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC780
	mov	r1, #14
	mov	r0, r10
	mov	r9, #0
	str	ip, [sp, #16]
	ldrb	ip, [r5, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r5, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r5, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	ldr	r1, .L16093+4
	mov	r0, #15
	movw	r3, #:lower16:.LC820
	ldr	r2, .L16093+8
	movt	r3, #:upper16:.LC820
	movw	lr, #:lower16:ncm_set_alt
	strh	r0, [r4, #90]	@ movhi
	movw	r0, #:lower16:ncm_bind
	movw	ip, #:lower16:ncm_get_alt
	movt	r0, #:upper16:ncm_bind
	str	r9, [r4, #92]
	movt	lr, #:upper16:ncm_set_alt
	str	r1, [r4, #168]
	movw	r1, #:lower16:ncm_unbind
	movt	ip, #:upper16:ncm_get_alt
	movt	r1, #:upper16:ncm_unbind
	strb	r9, [r4, #172]
	str	r9, [r4, #176]
	ldr	r5, [r7, #36]
	str	r10, [r7, #1632]
	str	r3, [r4]
	movw	r3, #:lower16:ncm_setup
	str	r2, [r4, #4]
	movw	r2, #:lower16:ncm_disable
	movt	r3, #:upper16:ncm_setup
	movt	r2, #:upper16:ncm_disable
	str	r6, [r4, #20]
	strd	r0, [r4, #24]
	movw	r0, #:lower16:ncm_wrap_ntb
	movw	r1, #:lower16:ncm_unwrap_ntb
	str	lr, [r4, #32]
	movt	r1, #:upper16:ncm_unwrap_ntb
	movt	r0, #:upper16:ncm_wrap_ntb
	str	ip, [r4, #36]
	mov	lr, #2048
	mov	ip, #1
	strd	r2, [r4, #40]
	add	r3, r4, #64
	add	r2, r6, #36
	strb	ip, [r4, #96]
	str	r5, [r4, #100]
	str	lr, [r4, #104]
	strd	r0, [r4, #120]
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r3, [r4, #24]
	cmp	r3, r9
	beq	.L16065
	mov	r1, r4
	mov	r0, r6
	blx	r3
	subs	r8, r0, #0
	bge	.L16065
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r9, [r4, #20]
	strd	r0, [r4, #64]
.L16065:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16066
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L16066
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L16066:
	tst	r3, #2
	bne	.L16067
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L16067
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L16067:
	tst	r3, #1
	bne	.L16068
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L16068
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L16068:
	cmp	r8, #0
	bne	.L16092
.L16056:
	mov	r0, r8
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16092:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r7, #1632]
	bl	kfree
.L16060:
	ldr	r2, .L16093
	movw	r0, #:lower16:.LC821
	mov	r3, r8
	movt	r0, #:upper16:.LC821
	mov	r1, r2
	bl	printk
	bl	gether_cleanup
	b	.L16056
.L16071:
	mov	r4, #16
	b	.L16064
.L16070:
	mvn	r8, #21
	b	.L16060
.L16063:
	mvn	r8, #18
	b	.L16060
.L16089:
	ldr	r2, .L16093
	movw	r0, #:lower16:.LC817
	mvn	r8, #21
	movt	r0, #:upper16:.LC817
	mov	r1, r2
	bl	printk
	b	.L16056
.L16091:
	mvn	r8, #11
	b	.L16060
.L16090:
	ldr	r2, .L16093
	movw	r0, #:lower16:.LC819
	mov	r3, r8
	movt	r0, #:upper16:.LC819
	mov	r1, r2
	bl	printk
	b	.L16056
.L16094:
	.align	2
.L16093:
	.word	.LANCHOR3-80
	.word	.LANCHOR0+48
	.word	.LANCHOR5-676
	.fnend
	.size	ncm_function_bind_config, .-ncm_function_bind_config
	.align	2
	.global	gether_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_connect, %function
gether_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r3, #-4012]
	cmp	r6, #0
	mvneq	r0, #21
	beq	.L16095
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #136]
	beq	.L16098
	mov	r2, #44
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #136]
	beq	.L16124
.L16098:
	ldr	r3, [r4, #80]
	str	r6, [r3]
	ldr	r3, [r4, #80]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L16100
	ldr	r3, [r4, #84]
	str	r6, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L16125
.L16101:
	ldr	r0, [r4, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r5, #0
	blt	.L16100
.L16123:
	ldr	r0, [r6, #8]
.L16095:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16100:
	ldr	r0, [r4, #136]
	bl	kfree
.L16099:
	mov	r0, r5
	b	.L16095
.L16125:
	ldr	r3, [r6, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L16111
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L16111
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r8, [r3, #560]
	lsl	r8, r8, #1
	b	.L16102
.L16111:
	mov	r8, #2
.L16102:
	add	r7, r6, #16
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r6, #20
	ldr	r1, [r4, #80]
	bl	prealloc
	subs	r5, r0, #0
	blt	.L16103
	mov	r2, r8
	ldr	r1, [r4, #84]
	add	r0, r6, #28
	bl	prealloc
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r5, #0
	beq	.L16126
.L16104:
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L16101
.L16103:
	mov	r0, r7
	bl	_raw_spin_unlock
	b	.L16104
.L16124:
	movw	r0, #:lower16:.LC822
	ldr	r1, .L16127
	mvn	r5, #11
	movt	r0, #:upper16:.LC822
	bl	printk
	b	.L16099
.L16126:
	ldrb	r3, [r4, #88]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r6, #124]
	ldr	r3, [r4, #92]
	str	r3, [r6, #68]
	ldr	r3, [r4, #124]
	str	r3, [r6, #84]
	ldr	r3, [r4, #120]
	str	r3, [r6, #80]
	ldr	r3, [r4, #108]
	str	r3, [r6, #72]
	ldr	r3, [r4, #112]
	str	r3, [r6, #76]
	bl	_raw_spin_lock
	str	r4, [r6, #4]
	str	r5, [r6, #40]
	str	r5, [r6, #44]
	str	r5, [r6, #48]
	str	r6, [r4, #76]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #160]
	tst	r3, #1
	beq	.L16105
	ldr	r3, [r4, #128]
	cmp	r3, #0
	beq	.L16106
.L16122:
	mov	r0, r4
	blx	r3
.L16106:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r6, #8]
	bl	netif_carrier_on
	ldr	r0, [r6, #8]
	ldr	r3, [r0, #160]
	tst	r3, #1
	beq	.L16095
	mov	r1, #32
	mov	r0, r6
	bl	rx_fill
	ldr	r2, [r6, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #36]
	ldr	r4, [r2, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L16123
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	ldr	r0, [r6, #8]
	b	.L16095
.L16105:
	ldr	r3, [r4, #132]
	cmp	r3, #0
	bne	.L16122
	b	.L16106
.L16128:
	.align	2
.L16127:
	.word	.LANCHOR3-52
	.fnend
	.size	gether_connect, .-gether_connect
	.align	2
	.global	gether_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_disconnect, %function
gether_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #76]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L16129
	ldr	r3, [r4, #8]
	mov	r5, r0
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L16149
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L16140:
	ldr	r0, [r4, #8]
	add	r6, r4, #16
	add	r8, r4, #20
	bl	netif_carrier_off
	ldr	r0, [r5, #80]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	fp, [r4, #20]
	cmp	r8, fp
	beq	.L16133
	mov	r10, #256
	mov	r9, #512
	b	.L16132
.L16134:
	ldr	r0, [r5, #80]
.L16148:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	fp, [r4, #20]
	cmp	fp, r8
	beq	.L16133
.L16132:
	ldm	fp, {r1, r2}
	mov	r0, r6
	sub	r7, fp, #36
	str	r2, [r1, #4]
	str	r1, [r2]
	str	r10, [fp]
	str	r9, [fp, #4]
	bl	_raw_spin_unlock
	ldrb	r2, [r5, #116]	@ zero_extendqisi2
	mov	r1, r7
	cmp	r2, #0
	beq	.L16134
	ldr	r0, [fp, #-36]
	bl	kfree
	mov	r3, #0
	mov	r1, r7
	str	r3, [fp, #-36]
	ldr	r0, [r5, #80]
	b	.L16148
.L16133:
	mov	r7, #0
	ldr	r0, [r5, #136]
	add	r8, r4, #28
	bl	kfree
	mov	r0, r6
	str	r7, [r5, #136]
	bl	_raw_spin_unlock
	ldr	r3, [r5, #80]
	str	r7, [r3]
	ldr	r3, [r5, #80]
	str	r7, [r3, #28]
	ldr	r0, [r5, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r7, [r4, #28]
	cmp	r7, r8
	beq	.L16136
	mov	r10, #256
	mov	r9, #512
.L16137:
	ldrd	r2, [r7]
	mov	r0, r6
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r10, [r7]
	str	r9, [r7, #4]
	bl	_raw_spin_unlock
	ldr	r0, [r5, #84]
	sub	r1, r7, #36
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r7, [r4, #28]
	cmp	r7, r8
	bne	.L16137
.L16136:
	mov	r0, r6
	add	r7, r4, #64
	bl	_raw_spin_unlock
	mov	r0, r7
	add	r6, r4, #52
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, r6
	beq	.L16138
	mov	r8, #0
	b	.L16139
.L16150:
	ldr	r2, [r4, #60]
	sub	r2, r2, #1
	str	r2, [r4, #60]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #52]
	cmp	r3, r6
	beq	.L16138
.L16139:
	subs	r0, r3, #0
	bne	.L16150
.L16138:
	mov	r0, r7
	mov	r6, #0
	bl	_raw_spin_unlock
	ldr	r3, [r5, #84]
	mov	r0, r4
	str	r6, [r3]
	ldr	r3, [r5, #84]
	str	r6, [r3, #28]
	str	r6, [r4, #68]
	str	r6, [r4, #80]
	str	r6, [r4, #84]
	bl	_raw_spin_lock
	mov	r0, r4
	str	r6, [r4, #4]
	str	r6, [r5, #76]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock
.L16149:
	movw	r0, #:lower16:.LC81
	movw	r1, #1847
	movt	r0, #:upper16:.LC81
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC82
	movt	r0, #:upper16:.LC82
	bl	printk
	b	.L16140
.L16129:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	gether_disconnect, .-gether_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_disable, %function
rndis_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #160]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #156]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	ble	.L16153
.L16158:
	mov	r0, r7
	bl	gether_disconnect
	ldr	r0, [r7, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r7, #160]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16153:
	rsb	r3, r3, r3, lsl #4
	movw	r2, #:lower16:.LANCHOR1
	ldr	r0, .L16179
	movt	r2, #:upper16:.LANCHOR1
	lsl	r5, r3, #2
	mov	r1, #0
	add	r2, r2, r5
	add	r5, r5, r0
	ldr	r3, [r2, #3824]
	mov	r9, r2
	str	r1, [r2, #3776]
	ldr	r4, [r3]
.L16154:
	cmp	r5, r3
	beq	.L16158
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L16160
	b	.L16177
.L16166:
	mov	r4, r3
.L16160:
	cmp	r4, r5
	ldr	r3, [r4]
	beq	.L16158
	ldr	r2, [r4, #16]
	cmp	r2, #0
	bne	.L16166
.L16159:
	ldr	r8, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r8, #0
	beq	.L16158
	ldr	r3, [r9, #3824]
	cmp	r3, r5
	ldr	r4, [r3]
	moveq	r3, r5
	beq	.L16154
	mov	r6, r4
	mov	fp, #256
	mov	r10, #512
	b	.L16157
.L16164:
	mov	r6, r4
.L16157:
	cmp	r3, #0
	beq	.L16156
	ldr	r2, [r3, #8]
	cmp	r8, r2
	beq	.L16178
.L16156:
	cmp	r6, r5
	mov	r3, r6
	ldr	r4, [r4]
	bne	.L16164
	ldr	r3, [r9, #3824]
	ldr	r4, [r3]
	b	.L16154
.L16178:
	ldr	r2, [r3, #4]
	mov	r0, r3
	str	r2, [r4, #4]
	str	r4, [r2]
	str	fp, [r3]
	str	r10, [r3, #4]
	bl	kfree
	b	.L16156
.L16177:
	mov	r4, r3
	b	.L16159
.L16180:
	.align	2
.L16179:
	.word	.LANCHOR1+3824
	.fnend
	.size	rndis_disable, .-rndis_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_alt, %function
rndis_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #140]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L16205
	ldrb	r3, [r0, #141]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L16187
	ldr	r2, [r0, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16188
	bl	gether_disconnect
	ldr	r2, [r4, #80]
.L16188:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16189
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16189
.L16190:
	mov	r5, #0
	mov	r0, r4
	strb	r5, [r4, #88]
	strh	r5, [r4, #90]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L16181
	ldrb	r1, [r4, #156]	@ zero_extendqisi2
	clz	r3, r2
	lsr	r3, r3, #5
	cmp	r1, #0
	movne	r3, #1
	cmp	r3, #0
	movne	r0, r5
	beq	.L16206
.L16181:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16206:
	movw	r1, #:lower16:.LANCHOR1
	add	r4, r4, #90
	movt	r1, #:upper16:.LANCHOR1
	mov	r0, r3
	str	r3, [r1, #3720]
	str	r3, [r1, #3724]
	str	r4, [r1, #3796]
	str	r2, [r1, #3800]
	b	.L16181
.L16189:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16192
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L16190
.L16192:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L16181
.L16205:
	ldr	r0, [r0, #160]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16183
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #160]
.L16183:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L16207
.L16184:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #160]
	mov	r0, #0
	str	r4, [r3]
	b	.L16181
.L16187:
	mvn	r0, #21
	b	.L16181
.L16207:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16187
	ldr	r0, [r4, #160]
	ldr	r1, [r0, #28]
	b	.L16184
	.fnend
	.size	rndis_set_alt, .-rndis_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_disable, %function
ecm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #80]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16209
	bl	gether_disconnect
.L16209:
	ldr	r0, [r4, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #156]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #156]
	str	r3, [r2, #28]
.L16208:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_disable, .-ecm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_set_alt, %function
ecm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	ip, [r0, #140]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	ip, r1
	ldr	r6, [r3, #24]
	beq	.L16243
	ldrb	r3, [r0, #141]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L16224
	ldr	r2, [r0, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16225
	bl	gether_disconnect
	ldr	r2, [r4, #80]
.L16225:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16226
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16226
.L16227:
	cmp	r5, #1
	beq	.L16244
.L16230:
	ldr	r6, [r4, #160]
	mov	r3, #1
	strb	r3, [r4, #164]
	cmp	r6, #0
	beq	.L16232
	ldr	r3, [r6]
	mov	r5, #0
	mov	r1, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r2, #32
	strb	r5, [r3, #1]
	ldrb	lr, [r4, #165]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	str	r1, [r6, #4]
	mov	r1, r6
	strb	ip, [r4, #164]
	strb	r0, [r3]
	ldrb	r0, [r4, #140]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #156]
	str	r5, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	blt	.L16245
.L16232:
	mov	r0, #0
.L16218:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16244:
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC290
	movt	r0, #:upper16:.LC290
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strb	r2, [r4, #88]
	strh	r3, [r4, #90]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	bls	.L16230
	b	.L16218
.L16226:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16229
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L16227
.L16229:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L16218
.L16243:
	cmp	r2, #0
	bne	.L16224
	ldr	r0, [r0, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16222
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #156]
.L16222:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L16246
.L16223:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r0, #0
	str	r4, [r3]
	b	.L16218
.L16245:
	mov	r0, r5
	str	r6, [r4, #160]
	b	.L16218
.L16224:
	mvn	r0, #21
	b	.L16218
.L16246:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16224
	ldr	r0, [r4, #156]
	ldr	r1, [r0, #28]
	b	.L16223
	.fnend
	.size	ecm_set_alt, .-ecm_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_disable, %function
ncm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #80]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16248
	bl	gether_disconnect
.L16248:
	ldr	r0, [r4, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16247
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #156]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #156]
	str	r3, [r2, #28]
.L16247:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_disable, .-ncm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_set_alt, %function
ncm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	ip, [r0, #140]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	ip, r1
	ldr	r7, [r3, #24]
	beq	.L16286
	ldrb	r3, [r0, #141]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	movne	r5, #1
	moveq	r5, #0
	bne	.L16263
	ldr	r3, [r0, #80]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16264
	bl	gether_disconnect
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #15
	movt	r3, #:upper16:.LANCHOR0
	add	r1, r3, #48
	strh	r2, [r4, #90]	@ movhi
	mov	r2, #2048
	str	r5, [r4, #92]
	str	r1, [r4, #168]
	strb	r5, [r4, #172]
	ldr	r3, [r3, #36]
	str	r3, [r4, #100]
	str	r2, [r4, #104]
.L16264:
	cmp	r6, #1
	bne	.L16265
	ldr	r2, [r4, #80]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16266
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16266
.L16267:
	ldr	r3, [r7]
	movw	r0, #:lower16:.LC290
	movt	r0, #:upper16:.LC290
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strb	r2, [r4, #88]
	strh	r3, [r4, #90]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	bhi	.L16257
.L16265:
	add	r6, r4, #176
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r5, [r4, #160]
	mov	r3, #2
	strb	r3, [r4, #164]
	cmp	r5, #0
	beq	.L16271
	ldr	r1, [r4, #20]
	mov	r2, #0
	mov	lr, #42
	ldr	r3, [r5]
	mov	ip, #8
	mov	r0, #16
	ldr	r1, [r1, #24]
	strb	lr, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	str	r0, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L16272
	ldr	r0, [r2, #16]
	mov	r1, #0
	mov	r2, #28672
	movt	r1, 6500
	movt	r2, 148
	cmp	r0, #3
	moveq	r2, r1
.L16272:
	ldr	r1, [r5]
	mvn	lr, #94
	mov	r7, #1
	mov	ip, #0
	mov	r0, r6
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	r7, [r4, #164]
	strb	lr, [r3]
	ldrb	r2, [r4, #140]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	str	ip, [r4, #160]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r5, [r4, #160]
.L16271:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, #0
.L16257:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16286:
	cmp	r2, #0
	bne	.L16263
	ldr	r0, [r0, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16261
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #156]
.L16261:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L16287
.L16262:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r0, #0
	str	r4, [r3]
	b	.L16257
.L16266:
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16269
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L16267
.L16269:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L16257
.L16263:
	mvn	r0, #21
	b	.L16257
.L16287:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16263
	ldr	r0, [r4, #156]
	ldr	r1, [r0, #28]
	b	.L16262
	.fnend
	.size	ncm_set_alt, .-ncm_set_alt
	.align	2
	.global	gether_qc_get_macs
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_get_macs, %function
gether_qc_get_macs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR4
	mov	r5, r1
	movt	r4, #:upper16:.LANCHOR4
	mov	r1, r0
	str	r6, [sp, #8]
	ldr	r0, [r4, #-3900]
	str	lr, [sp, #12]
	bl	get_qc_ether_addr
	ldr	r6, [sp, #8]
	mov	r1, r5
	ldr	r0, [r4, #-3896]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	get_qc_ether_addr
	.fnend
	.size	gether_qc_get_macs, .-gether_qc_get_macs
	.align	2
	.global	gether_qc_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup_name, %function
gether_qc_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r2
	mov	r2, #1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	strd	r0, [sp, #8]
	mov	r0, #28
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r5, r0, #0
	beq	.L16308
	mov	r1, #0
	movw	r2, #:lower16:.LC804
	movw	fp, #:lower16:.LANCHOR4
	mov	r3, r4
	str	r1, [r5, #1216]
	movt	r2, #:upper16:.LC804
	movt	fp, #:upper16:.LANCHOR4
	str	r5, [r5, #1224]
	mov	r1, #16
	bl	snprintf
	ldr	r4, [fp, #-3900]
	add	r3, r6, #32
	ldr	r6, [r5, #492]
	str	r3, [sp, #4]
	cmp	r4, #0
	subne	r9, r6, #1
	addne	r10, r6, #5
	bne	.L16294
	b	.L16298
.L16319:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r7, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r7, lsl #4
	strb	r0, [r9, #1]!
	cmp	r10, r9
	beq	.L16297
.L16296:
	mov	r4, r8
.L16294:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r8, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L16319
	bl	hex_to_bin
	mov	r8, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r8, lsl #4
	add	r8, r4, #2
	strb	r0, [r9, #1]!
	cmp	r10, r9
	bne	.L16296
.L16297:
	ldrb	r3, [r6]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L16320
.L16298:
	mov	r1, #6
	mov	r0, r6
	bl	get_random_bytes
	ldrb	r3, [r6]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC805
	movw	r1, #:lower16:.LC806
	movt	r2, #:upper16:.LC805
	movt	r1, #:upper16:.LC806
	ldr	r0, [sp, #4]
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r6]
	bl	dev_warn
.L16293:
	ldr	r4, [fp, #-3896]
	add	r6, r5, #1216
	add	r7, r6, #21
	cmp	r4, #0
	addne	fp, r5, #1232
	addne	r6, r6, #26
	addne	fp, fp, #4
	bne	.L16301
	b	.L16305
.L16321:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r10, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r10, lsl #4
	strb	r0, [fp, #1]!
	cmp	r6, fp
	beq	.L16304
.L16303:
	mov	r4, r9
.L16301:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r9, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L16321
	bl	hex_to_bin
	mov	r9, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r9, lsl #4
	add	r9, r4, #2
	strb	r0, [fp, #1]!
	cmp	r6, fp
	bne	.L16303
.L16304:
	ldrb	r3, [r5, #1237]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L16322
.L16305:
	mov	r1, #6
	mov	r0, r7
	bl	get_random_bytes
	ldrb	r3, [r5, #1237]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC807
	movw	r1, #:lower16:.LC806
	movt	r2, #:upper16:.LC807
	movt	r1, #:upper16:.LC806
	ldr	r0, [sp, #4]
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r5, #1237]
	bl	dev_warn
.L16300:
	ldr	r2, [sp, #12]
	cmp	r2, #0
	beq	.L16306
	ldr	r3, [r7]	@ unaligned
	str	r3, [r2]	@ unaligned
	ldrh	r3, [r7, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
.L16306:
	ldr	r3, .L16323
	mov	r0, r5
	add	r2, r3, #136
	str	r3, [r5, #336]
	str	r2, [r5, #340]
	bl	netif_carrier_off
	ldr	r2, [sp, #4]
	mov	r0, r5
	ldr	r3, .L16323+4
	str	r2, [r5, #688]
	ldr	r2, [sp, #8]
	str	r3, [r5, #736]
	str	r2, [r5, #1228]
	bl	register_netdev
	subs	r4, r0, #0
	bge	.L16307
	mov	r0, r5
	bl	free_netdev
.L16290:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16320:
	ldrb	r1, [r6, #1]	@ zero_extendqisi2
	ldrb	r2, [r6, #2]	@ zero_extendqisi2
	ldrb	r0, [r6, #3]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r6, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r6, #5]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L16298
	b	.L16293
.L16322:
	ldrb	r1, [r5, #1238]	@ zero_extendqisi2
	ldrb	r2, [r5, #1239]	@ zero_extendqisi2
	ldrb	r0, [r5, #1240]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r5, #1241]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r5, #1242]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L16305
	b	.L16300
.L16308:
	mvn	r4, #11
	b	.L16290
.L16307:
	movw	r0, #:lower16:.LC808
	ldr	r2, [r5, #492]
	ldr	r1, [r5, #1224]
	movt	r0, #:upper16:.LC808
	bl	printk
	movw	r0, #:lower16:.LC809
	mov	r2, r7
	ldr	r1, [r5, #1224]
	movt	r0, #:upper16:.LC809
	bl	printk
	b	.L16290
.L16324:
	.align	2
.L16323:
	.word	.LANCHOR3-36
	.word	.LANCHOR5-668
	.fnend
	.size	gether_qc_setup_name, .-gether_qc_setup_name
	.align	2
	.global	gether_qc_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup, %function
gether_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r2, #:lower16:.LC810
	movt	r2, #:upper16:.LC810
	b	gether_qc_setup_name
	.fnend
	.size	gether_qc_setup, .-gether_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_bind_config, %function
rndis_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r7, #:upper16:__stack_chk_guard
	strd	r10, [sp, #24]
	ldr	r3, [r7]
	str	lr, [sp, #32]
	ldr	r4, [r0, #4]
	.pad #60
	sub	sp, sp, #60
	str	r3, [sp, #52]
	cmp	r4, #0
	beq	.L16378
	mov	r5, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC812
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC812
	ldr	r2, .L16387
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r5, #24]
	movw	r2, #:lower16:.LC778
	mov	r1, r4
	movt	r2, #:upper16:.LC778
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	fp, r0, #0
	bne	.L16379
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16330
	movw	r3, #:lower16:.LANCHOR5
	mvn	r2, #31
	movt	r3, #:upper16:.LANCHOR5
	mov	ip, #1
	sub	r1, r3, #1760
	mov	r0, #480
	strb	r2, [r3, #-1747]
	mov	r2, #3
	strh	r0, [r1, #4]	@ movhi
	strb	r2, [r3, #-1754]
	strb	ip, [r3, #-1746]
	strb	r2, [r3, #-1745]
.L16330:
	movw	r8, #:lower16:.LANCHOR4
	ldr	r3, [r4, #8]
	movt	r8, #:upper16:.LANCHOR4
	ldrb	r10, [r4, #12]	@ zero_extendqisi2
	ldrb	r9, [r8, #-4008]	@ zero_extendqisi2
	str	r3, [sp, #28]
	cmp	r9, #0
	movwne	r6, #:lower16:.LANCHOR1
	movtne	r6, #:upper16:.LANCHOR1
	bne	.L16331
	movw	r1, #:lower16:.LC473
	mov	r2, r9
	movt	r1, #:upper16:.LC473
	add	r0, sp, #32
	bl	sprintf
	ldr	ip, .L16387+4
	add	r0, sp, #32
	mov	r2, r9
	ldr	r3, .L16387+8
	mov	r1, #432
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	str	ip, [sp]
	bl	proc_create_data
	cmp	r0, #0
	movw	r3, #3772
	beq	.L16380
	mov	r2, #1
	strh	r9, [r6, r3]	@ movhi
	add	r3, r6, #3824
	str	r9, [r6, #3776]
	str	r2, [r6, #3788]
	str	r3, [r6, #3824]
	str	r3, [r6, #3828]
	strb	r2, [r8, #-4008]
.L16331:
	ldr	r3, [r6, #3444]
	cmp	r3, #0
	beq	.L16381
.L16334:
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	ldrb	r2, [r3, #-756]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L16338
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L16340
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r2, [r3, #-1744]
	strb	r2, [r3, #-756]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L16340
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r2, [r3, #-1724]
	strb	r2, [r3, #-748]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L16340
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-1753]
	strb	r2, [r3, #-740]
.L16338:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16350
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r9, r0, #0
	beq	.L16382
.L16341:
	ldr	r1, [r4]	@ unaligned
	movw	r3, #:lower16:rndis_qc_add_header
	movw	ip, #:lower16:.LC778
	ldr	r2, .L16387+12
	movt	r3, #:upper16:rndis_qc_add_header
	movt	ip, #:upper16:.LC778
	cmp	r10, #0
	moveq	r10, #15
	str	r1, [r9, #114]	@ unaligned
	ldrh	r0, [r4, #4]	@ unaligned
	add	r1, r4, #13
	str	ip, [r9]
	movw	ip, #:lower16:rndis_qc_unbind
	mov	r4, #0
	str	r2, [r9, #4]
	movw	r2, #:lower16:rndis_qc_rm_hdr
	movt	ip, #:upper16:rndis_qc_unbind
	str	r3, [r9, #96]
	movw	r3, #:lower16:rndis_qc_bind
	movt	r2, #:upper16:rndis_qc_rm_hdr
	movt	r3, #:upper16:rndis_qc_bind
	str	r5, [r9, #20]
	str	ip, [r9, #28]
	movw	ip, #:lower16:rndis_qc_disable
	str	r3, [r9, #24]
	movw	r3, #:lower16:rndis_qc_setup
	movt	ip, #:upper16:rndis_qc_disable
	str	r2, [r9, #100]
	movw	r2, #:lower16:rndis_qc_set_alt
	movt	r3, #:upper16:rndis_qc_setup
	movt	r2, #:upper16:rndis_qc_set_alt
	str	r9, [r6, #2332]
	strh	r4, [r9, #90]	@ movhi
	str	r2, [r9, #32]
	movw	r2, #:lower16:rndis_qc_suspend
	str	r3, [r9, #44]
	movw	r3, #:lower16:rndis_qc_resume
	movt	r2, #:upper16:rndis_qc_suspend
	movt	r3, #:upper16:rndis_qc_resume
	str	ip, [r9, #40]
	strh	r0, [r9, #118]	@ unaligned
	strd	r2, [r9, #48]
	mov	r2, #44
	add	r3, r9, #64
	strb	r10, [r9, #124]
	str	r2, [r9, #92]
	ldr	r2, [sp, #28]
	str	r1, [r9, #132]
	str	r2, [r9, #120]
	ldr	r1, [r5, #40]
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r9, #64]
	str	r1, [r9, #68]
	str	r3, [r1]
	ldr	r3, [r9, #24]
	cmp	r3, r4
	beq	.L16344
	mov	r1, r9
	mov	r0, r5
	blx	r3
	subs	fp, r0, #0
	blt	.L16383
.L16344:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16345
.L16386:
	ldr	r2, [r9, #8]
	cmp	r2, #0
	beq	.L16345
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L16345:
	tst	r3, #2
	bne	.L16346
	ldr	r2, [r9, #12]
	cmp	r2, #0
	beq	.L16346
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L16346:
	tst	r3, #1
	bne	.L16347
	ldr	r3, [r9, #16]
	cmp	r3, #0
	beq	.L16347
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L16347:
	cmp	fp, #0
	bne	.L16384
.L16326:
	ldr	r2, [sp, #52]
	mov	r0, fp
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L16385
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16384:
	mov	r0, r9
	bl	kfree
.L16342:
	ldrb	r3, [r8, #-4008]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16326
	mov	r4, #0
	movw	r1, #:lower16:.LC473
	mov	r2, r4
	movt	r1, #:upper16:.LC473
	add	r0, sp, #32
	strb	r4, [r8, #-4008]
	bl	sprintf
	add	r0, sp, #32
	mov	r1, r4
	bl	remove_proc_entry
	b	.L16326
.L16383:
	ldrd	r2, [r9, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r4, [r9, #20]
	strd	r0, [r9, #64]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16345
	b	.L16386
.L16350:
	mov	r9, #16
	b	.L16341
.L16382:
	mvn	fp, #11
	b	.L16342
.L16381:
	movw	r0, #:lower16:.LC535
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC535
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r6, #3444]
	beq	.L16335
	bl	bam_data_setup.part.98
	subs	r9, r0, #0
	beq	.L16334
.L16336:
	movw	r0, #:lower16:.LC537
	mov	r2, r9
	ldr	r1, .L16387+16
	movt	r0, #:upper16:.LC537
	mov	fp, r9
	bl	printk
	movw	r0, #:lower16:.LC538
	ldr	r1, .L16387+20
	movt	r0, #:upper16:.LC538
	bl	printk
	b	.L16326
.L16340:
	mvn	fp, #18
	b	.L16326
.L16378:
	ldr	r2, .L16387
	movw	r0, #:lower16:.LC811
	mvn	fp, #21
	movt	r0, #:upper16:.LC811
	mov	r1, r2
	bl	printk
	b	.L16326
.L16380:
	mvn	fp, #4
	b	.L16326
.L16385:
	bl	__stack_chk_fail
.L16379:
	ldr	r2, .L16387
	movw	r0, #:lower16:.LC813
	movt	r0, #:upper16:.LC813
	mov	r1, r2
	bl	printk
	b	.L16326
.L16335:
	movw	r0, #:lower16:.LC536
	ldr	r1, .L16387+24
	mvn	r9, #11
	movt	r0, #:upper16:.LC536
	bl	printk
	b	.L16336
.L16388:
	.align	2
.L16387:
	.word	.LANCHOR3+264
	.word	.LANCHOR1+3772
	.word	.LANCHOR3-744
	.word	.LANCHOR5-724
	.word	.LANCHOR3-484
	.word	.LANCHOR3-464
	.word	.LANCHOR2+3148
	.fnend
	.size	rndis_qc_function_bind_config, .-rndis_qc_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_bind_config, %function
ecm_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r0, #4]
	.pad #24
	sub	sp, sp, #24
	cmp	r5, #0
	beq	.L16430
	mov	r6, r1
	ldrb	r1, [r5, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC812
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC812
	ldr	r2, .L16436
	str	r1, [sp, #16]
	ldrb	ip, [r5, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r5, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r5, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r0, .L16436+4
	bl	strim
	mov	r1, r0
	mov	r10, r0
	movw	r0, #:lower16:.LC366
	movt	r0, #:upper16:.LC366
	bl	strcmp
	cmp	r0, #0
	bne	.L16431
.L16392:
	ldr	r3, [r6, #24]
	movw	r0, #:lower16:.LC283
	movt	r0, #:upper16:.LC283
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L16407
	movw	r0, #:lower16:.LC286
	mov	r1, r4
	movt	r0, #:upper16:.LC286
	bl	strcmp
	cmp	r0, #0
	beq	.L16407
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #3444]
	cmp	r3, #0
	beq	.L16432
.L16393:
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	ldrb	r3, [r7, #1404]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16396
	ldr	r2, [r6, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16398
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r6, #24]
	strb	r3, [r7, #1404]
	strb	r3, [r7, #3392]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16398
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r6, #24]
	strb	r3, [r7, #1420]
	strb	r3, [r7, #3424]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16398
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR5
	strb	r3, [r1, #48]
	strb	r3, [r2, #-801]
	strb	r3, [r7, #1412]
.L16396:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16408
	mov	r2, #164
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16433
.L16399:
	mov	r0, r10
	add	r8, r4, #120
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #116]
	beq	.L16434
	ldrb	ip, [r5, #5]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC780
	mov	r1, #14
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC780
	mov	r0, r8
	str	ip, [sp, #16]
	ldrb	ip, [r5, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r5, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r5, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
.L16401:
	ldr	lr, .L16436+8
	movw	r3, #:lower16:.LC781
	movw	r0, #:lower16:ecm_qc_bind
	movw	r2, #:lower16:ecm_qc_unbind
	movw	r1, #:lower16:ecm_qc_set_alt
	str	r8, [r7, #1416]
	movt	r3, #:upper16:.LC781
	movt	r0, #:upper16:ecm_qc_bind
	movt	r2, #:upper16:ecm_qc_unbind
	movt	r1, #:upper16:ecm_qc_set_alt
	movw	ip, #:lower16:ecm_qc_get_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:ecm_qc_setup
	movt	ip, #:upper16:ecm_qc_get_alt
	movt	r3, #:upper16:ecm_qc_setup
	str	r6, [r4, #20]
	str	r0, [r4, #24]
	movw	r0, #:lower16:ecm_qc_disable
	str	r2, [r4, #28]
	movw	r2, #:lower16:ecm_qc_suspend
	movt	r0, #:upper16:ecm_qc_disable
	str	r1, [r4, #32]
	movw	r1, #:lower16:ecm_qc_resume
	movt	r2, #:upper16:ecm_qc_suspend
	str	ip, [r4, #36]
	movt	r1, #:upper16:ecm_qc_resume
	mov	ip, #15
	str	r0, [r4, #40]
	str	r3, [r4, #44]
	add	r3, r4, #64
	str	r2, [r4, #48]
	add	r2, r6, #36
	str	r1, [r4, #52]
	strh	ip, [r4, #90]	@ movhi
	ldr	r1, [r6, #40]
	str	r3, [r6, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r8, [r4, #24]
	cmp	r8, #0
	beq	.L16402
	mov	r1, r4
	mov	r0, r6
	blx	r8
	subs	r8, r0, #0
	bge	.L16402
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	mov	ip, #0
	str	r3, [r2, #4]
	str	r2, [r3]
	str	ip, [r4, #20]
	strd	r0, [r4, #64]
.L16402:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16403
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L16403
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L16403:
	tst	r3, #2
	bne	.L16404
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L16404
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L16404:
	tst	r3, #1
	bne	.L16405
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L16405
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L16405:
	cmp	r8, #0
	bne	.L16435
.L16389:
	mov	r0, r8
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16431:
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC815
	mov	r1, r5
	movt	r2, #:upper16:.LC815
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r8, r0, #0
	beq	.L16392
	ldr	r2, .L16436
	movw	r0, #:lower16:.LC813
	movt	r0, #:upper16:.LC813
	mov	r1, r2
	bl	printk
	b	.L16389
.L16408:
	mov	r4, #16
	b	.L16399
.L16434:
	movw	r5, #:lower16:.LANCHOR4
	ldr	r1, .L16436+12
	movt	r5, #:upper16:.LANCHOR4
	ldr	r0, [r5, #-3900]
	bl	get_qc_ether_addr
	ldr	r1, .L16436+16
	ldr	r0, [r5, #-3896]
	bl	get_qc_ether_addr
	ldrb	r3, [r9, #3689]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC780
	mov	r1, #14
	ldrb	r10, [r9, #3688]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC780
	mov	r0, r8
	ldrb	r5, [r9, #3687]	@ zero_extendqisi2
	ldrb	lr, [r9, #3686]	@ zero_extendqisi2
	ldrb	ip, [r9, #3685]	@ zero_extendqisi2
	str	r10, [sp, #12]
	str	r3, [sp, #16]
	ldrb	r3, [r9, #3684]	@ zero_extendqisi2
	stm	sp, {ip, lr}
	str	r5, [sp, #8]
	bl	snprintf
	b	.L16401
.L16432:
	movw	r0, #:lower16:.LC535
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC535
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r9, #3444]
	beq	.L16394
	bl	bam_data_setup.part.98
	subs	r8, r0, #0
	beq	.L16393
.L16395:
	movw	r0, #:lower16:.LC537
	mov	r2, r8
	ldr	r1, .L16436+20
	movt	r0, #:upper16:.LC537
	bl	printk
	movw	r0, #:lower16:.LC538
	ldr	r1, .L16436+24
	movt	r0, #:upper16:.LC538
	bl	printk
	b	.L16389
.L16407:
	mvn	r8, #21
	b	.L16389
.L16398:
	mvn	r8, #18
	b	.L16389
.L16430:
	ldr	r2, .L16436
	movw	r0, #:lower16:.LC814
	mvn	r8, #21
	movt	r0, #:upper16:.LC814
	mov	r1, r2
	bl	printk
	b	.L16389
.L16433:
	mvn	r8, #11
	b	.L16389
.L16435:
	movw	r0, #:lower16:.LC782
	ldr	r1, .L16436+24
	movt	r0, #:upper16:.LC782
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r7, #1416]
	bl	kfree
	b	.L16389
.L16394:
	movw	r0, #:lower16:.LC536
	ldr	r1, .L16436+28
	mvn	r8, #11
	movt	r0, #:upper16:.LC536
	bl	printk
	b	.L16395
.L16437:
	.align	2
.L16436:
	.word	.LANCHOR3+296
	.word	.LANCHOR1+3184
	.word	.LANCHOR5-788
	.word	.LANCHOR1+3690
	.word	.LANCHOR1+3684
	.word	.LANCHOR3-640
	.word	.LANCHOR3-620
	.word	.LANCHOR2+3148
	.fnend
	.size	ecm_qc_function_bind_config, .-ecm_qc_function_bind_config
	.align	2
	.global	gether_qc_cleanup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_cleanup_name, %function
gether_qc_cleanup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r0
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L16438
	.syntax divided
@ 17 "/home/xawlw/kernel/arg/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
@ 40 "/home/xawlw/kernel/arg/arch/arm/include/asm/percpu.h" 1
	mrc p15, 0, r1, c13, c0, 4
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #640]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/xawlw/kernel/arg/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L16438:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_qc_cleanup_name, .-gether_qc_cleanup_name
	.align	2
	.global	gether_qc_connect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_connect_name, %function
gether_qc_connect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L16444
	.syntax divided
@ 17 "/home/xawlw/kernel/arg/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
@ 40 "/home/xawlw/kernel/arg/arch/arm/include/asm/percpu.h" 1
	mrc p15, 0, r1, c13, c0, 4
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #640]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/xawlw/kernel/arg/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r7, r4, #1216
	beq	.L16444
	ldrb	r3, [r5, #88]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r4, #1236]
	ldr	r3, [r5, #92]
	str	r3, [r4, #1232]
	bl	_raw_spin_lock
	str	r5, [r4, #1220]
	str	r7, [r5, #76]
	ldr	r3, [r4, #1224]
	ldr	r3, [r3, #160]
	tst	r3, #1
	beq	.L16445
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L16446
.L16463:
	mov	r0, r5
	blx	r3
.L16446:
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r6, #0
	ldr	r0, [r4, #1224]
	beq	.L16441
	bl	netif_carrier_on
	ldr	r0, [r4, #1224]
	ldr	r3, [r0, #160]
	tst	r3, #1
	beq	.L16441
	ldr	r5, [r0, #576]
	mov	r0, #0
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L16449
.L16464:
	ldr	r0, [r4, #1224]
	b	.L16441
.L16444:
	mvn	r0, #21
.L16441:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16445:
	ldr	r3, [r5, #108]
	cmp	r3, #0
	bne	.L16463
	b	.L16446
.L16449:
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L16464
	.fnend
	.size	gether_qc_connect_name, .-gether_qc_connect_name
	.align	2
	.global	gether_qc_disconnect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_disconnect_name, %function
gether_qc_disconnect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	str	lr, [sp, #12]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L16465
	.syntax divided
@ 17 "/home/xawlw/kernel/arg/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
@ 40 "/home/xawlw/kernel/arg/arch/arm/include/asm/percpu.h" 1
	mrc p15, 0, r1, c13, c0, 4
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #640]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/xawlw/kernel/arg/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r5, r4, #1216
	beq	.L16465
	ldr	r3, [r4, #1224]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L16475
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L16470:
	ldr	r0, [r4, #1224]
	bl	netif_carrier_off
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #1220]
	str	r3, [r6, #76]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L16465:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16475:
	movw	r0, #:lower16:.LC81
	movw	r1, #1847
	movt	r0, #:upper16:.LC81
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC82
	movt	r0, #:upper16:.LC82
	bl	printk
	b	.L16470
	.fnend
	.size	gether_qc_disconnect_name, .-gether_qc_disconnect_name
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_disable, %function
ecm_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #80]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16478
	movw	r5, #:lower16:.LANCHOR1
	add	r3, r0, #148
	movt	r5, #:upper16:.LANCHOR1
	ldr	r2, [r5, #3764]
	cmp	r2, #0
	ble	.L16505
	cmp	r3, #0
	beq	.L16506
	ldr	r6, [r5, #3440]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L16482
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L16482
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L16482
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r6, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r6, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r6, #4]
.L16482:
	ldr	r3, [r6, #60]
	cmp	r3, #7
	beq	.L16507
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L16508
.L16480:
	ldr	r3, [r4, #116]
	cmp	r3, #7
	beq	.L16478
	movw	r1, #:lower16:.LC482
	mov	r0, r4
	movt	r1, #:upper16:.LC482
	bl	gether_qc_disconnect_name
.L16478:
	ldr	r0, [r4, #136]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16476
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #136]
	str	r3, [r2, #28]
.L16476:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16507:
	add	r1, r6, #184
	ldr	r0, [r5, #3444]
	bl	queue_work
	b	.L16480
.L16505:
	movw	r0, #:lower16:.LC399
	mov	r2, #0
	ldr	r1, .L16509
	movt	r0, #:upper16:.LC399
	bl	printk
	b	.L16480
.L16506:
	movw	r0, #:lower16:.LC400
	ldr	r1, .L16509
	movt	r0, #:upper16:.LC400
	bl	printk
	b	.L16480
.L16508:
	ldr	r2, .L16509
	movw	r0, #:lower16:.LC401
	movt	r0, #:upper16:.LC401
	mov	r1, r2
	bl	printk
	b	.L16480
.L16510:
	.align	2
.L16509:
	.word	.LANCHOR2+3316
	.fnend
	.size	ecm_qc_disable, .-ecm_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_set_alt, %function
ecm_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r0, [r0, #112]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L16557
	ldrb	r3, [r4, #113]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L16556
	ldr	r2, [r4, #80]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16518
	add	r0, r4, #148
	bl	bam_data_disconnect.constprop.113
	ldr	r3, [r4, #116]
	cmp	r3, #7
	bne	.L16519
	ldr	r2, [r4, #80]
.L16518:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16520
	ldr	r3, [r4, #84]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16520
.L16521:
	cmp	r5, #1
	bne	.L16555
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC290
	movt	r0, #:upper16:.LC290
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, [r4, #116]
	adds	r0, r0, #0
	mov	r2, #15
	movne	r0, #1
	strb	r0, [r4, #88]
	cmp	r3, #7
	strh	r2, [r4, #90]	@ movhi
	beq	.L16526
	movw	r1, #:lower16:.LC482
	mov	r2, r5
	movt	r1, #:upper16:.LC482
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	bhi	.L16511
	ldr	r2, [r4, #20]
	ldr	r3, [r4, #116]
	ldr	r2, [r2, #24]
	cmp	r3, #7
	movne	r7, #0
	moveq	r7, #2
	ldr	r5, [r2]
.L16528:
	ldr	ip, [r4, #80]
	mov	r3, #0
	mov	r1, r7
	ldr	r0, [r4, #84]
	str	r2, [r4, #148]
	mov	r2, r3
	str	r4, [r4, #152]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	str	ip, [r4, #156]
	str	r0, [r4, #160]
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx
	uxtb	r10, r0
	mov	r1, r7
	ldr	r0, [r5, #28]
	mov	r3, #0
	mov	r2, #1
	add	r7, r4, #148
	bl	usb_bam_get_connection_idx
	ldr	r3, [r6, #3764]
	uxtb	r9, r0
	ldr	r8, [r4, #116]
	cmp	r3, #0
	ble	.L16558
	cmp	r7, #0
	beq	.L16559
	ldr	r3, [r4, #156]
	ldr	r5, [r6, #3440]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L16560
	ldr	r3, [r4, #156]
	str	r5, [r3]
	ldr	r3, [r4, #160]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L16561
	ldr	r3, [r4, #160]
	cmp	r8, #7
	str	r5, [r3]
	str	r7, [r5, #4]
	strb	r10, [r5, #52]
	strb	r9, [r5, #53]
	str	fp, [r5, #56]
	str	r8, [r5, #60]
	bne	.L16534
	add	r2, r5, #44
	add	r3, r5, #48
	strb	r10, [r5, #64]
	strb	r9, [r5, #65]
	strd	r2, [r5, #68]
.L16534:
	add	r1, r5, #168
	ldr	r0, [r6, #3444]
	mov	r5, #1
	bl	queue_work
	ldr	r6, [r4, #140]
	strb	r5, [r4, #144]
	strb	r5, [r4, #145]
	cmp	r6, #0
	beq	.L16539
	ldr	r3, [r6]
	mov	ip, #0
	mov	r2, #8
	mov	r1, #2
	mvn	r0, #94
	strb	ip, [r3, #1]
	ldrb	lr, [r4, #145]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	str	r2, [r6, #4]
	mov	r2, #32
	strb	r1, [r4, #144]
	mov	r1, r6
	strb	r0, [r3]
	ldrb	r0, [r4, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	ip, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L16555
	str	r6, [r4, #140]
	strb	r5, [r4, #144]
	b	.L16538
.L16555:
	ldr	r6, [r4, #140]
	mov	r3, #1
	strb	r3, [r4, #144]
	cmp	r6, #0
	beq	.L16539
.L16538:
	ldr	r3, [r6]
	mov	r5, #0
	mov	r1, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r2, #32
	strb	r5, [r3, #1]
	ldrb	lr, [r4, #145]	@ zero_extendqisi2
	strh	lr, [r3, #2]	@ unaligned
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	str	r1, [r6, #4]
	mov	r1, r6
	strb	ip, [r4, #144]
	strb	r0, [r3]
	ldrb	r0, [r4, #112]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #136]
	str	r5, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	movlt	r0, r5
	strlt	r6, [r4, #140]
	blt	.L16511
.L16539:
	mov	r0, #0
.L16511:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16520:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16523
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L16521
.L16523:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L16511
.L16557:
	cmp	r2, #0
	bne	.L16556
	ldr	r0, [r4, #136]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16515
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #136]
.L16515:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L16562
.L16516:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #136]
	mov	r0, #0
	str	r4, [r3]
	b	.L16511
.L16519:
	movw	r1, #:lower16:.LC482
	mov	r0, r4
	movt	r1, #:upper16:.LC482
	bl	gether_qc_disconnect_name
	ldr	r2, [r4, #80]
	b	.L16518
.L16561:
	movw	r0, #:lower16:.LC493
	ldr	r2, [r4, #160]
	movt	r0, #:upper16:.LC493
	ldr	r1, .L16563
	bl	printk
	ldr	r3, [r4, #156]
	mov	r2, #0
	str	r2, [r3]
.L16530:
	movw	r0, #:lower16:.LC823
	mov	r2, fp
	ldr	r1, .L16563+4
	movt	r0, #:upper16:.LC823
	bl	printk
.L16556:
	mvn	r0, #21
	b	.L16511
.L16526:
	ldr	r3, [r4, #20]
	mov	r7, #2
	ldr	r2, [r3, #24]
	ldr	r5, [r2]
	b	.L16528
.L16562:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16556
	ldr	r0, [r4, #136]
	ldr	r1, [r0, #28]
	b	.L16516
.L16558:
	movw	r0, #:lower16:.LC94
	mov	r2, #0
	ldr	r1, .L16563
	movt	r0, #:upper16:.LC94
	mvn	fp, #18
	bl	printk
	b	.L16530
.L16560:
	movw	r0, #:lower16:.LC492
	ldr	r1, .L16563
	ldr	r2, [r4, #156]
	movt	r0, #:upper16:.LC492
	bl	printk
	b	.L16530
.L16559:
	movw	r0, #:lower16:.LC400
	ldr	r1, .L16563
	movt	r0, #:upper16:.LC400
	bl	printk
	movw	r0, #:lower16:.LC823
	mvn	r2, #18
	ldr	r1, .L16563+4
	movt	r0, #:upper16:.LC823
	bl	printk
	mvn	r0, #21
	b	.L16511
.L16564:
	.align	2
.L16563:
	.word	.LANCHOR3-540
	.word	.LANCHOR3+324
	.fnend
	.size	ecm_qc_set_alt, .-ecm_qc_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_disable, %function
rndis_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC824
	strd	r6, [sp, #8]
	ldr	r1, .L16592
	movt	r0, #:upper16:.LC824
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	printk
	ldr	r2, [r4, #136]
	cmp	r2, #0
	ble	.L16567
.L16572:
	add	r0, r4, #160
	bl	bam_data_disconnect.constprop.113
	movw	r1, #:lower16:.LC472
	mov	r0, r4
	movt	r1, #:upper16:.LC472
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #148]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16567:
	mov	r5, #60
	ldr	r0, .L16592+4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	mov	r1, #0
	mul	r5, r5, r2
	mov	r8, #1
	add	r3, r3, r5
	add	r5, r5, r0
	mov	r9, r3
	str	r1, [r3, #3776]
.L16568:
	ldr	r3, [r9, #3824]
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L16572
	ldr	r1, [r3, #16]
	cmp	r1, #0
	beq	.L16573
	mov	r3, r2
	b	.L16574
.L16578:
	mov	r3, r1
.L16574:
	cmp	r3, r5
	ldr	r1, [r3]
	beq	.L16572
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L16578
.L16573:
	ldr	r10, [r3, #8]
	str	r8, [r3, #16]
	cmp	r10, #0
	beq	.L16572
	ldr	r3, [r9, #3824]
	cmp	r3, r5
	beq	.L16568
	ldr	r6, [r3]
	mov	r1, #256
	mov	fp, #512
	mov	r7, r6
	b	.L16571
.L16570:
	cmp	r7, r5
	mov	r3, r7
	ldr	r6, [r6]
	beq	.L16568
	mov	r7, r6
.L16571:
	cmp	r3, #0
	beq	.L16570
	ldr	r2, [r3, #8]
	cmp	r10, r2
	bne	.L16570
	ldr	r2, [r3, #4]
	mov	r0, r3
	str	r2, [r6, #4]
	str	r6, [r2]
	stm	r3, {r1, fp}
	bl	kfree
	mov	r1, #256
	b	.L16570
.L16593:
	.align	2
.L16592:
	.word	.LANCHOR3+344
	.word	.LANCHOR1+3824
	.fnend
	.size	rndis_qc_disable, .-rndis_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_set_alt, %function
rndis_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r0, #112]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L16624
	ldrb	r3, [r0, #113]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L16600
	ldr	r0, [r0, #80]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16601
	add	r0, r4, #160
	bl	bam_data_disconnect.constprop.113
	movw	r1, #:lower16:.LC472
	mov	r0, r4
	movt	r1, #:upper16:.LC472
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #80]
.L16601:
	ldr	r3, [r0, #28]
	cmp	r3, #0
	beq	.L16602
	ldr	ip, [r4, #84]
	ldr	r3, [ip, #28]
	cmp	r3, #0
	beq	.L16602
.L16603:
	ldr	r2, [r4, #20]
	mov	r6, #0
	movw	r7, #:lower16:.LANCHOR1
	mov	r3, r6
	mov	r1, r6
	strb	r6, [r4, #88]
	movt	r7, #:upper16:.LANCHOR1
	add	r9, r4, #160
	strh	r6, [r4, #90]	@ movhi
	ldr	lr, [r2, #24]
	mov	r2, r6
	ldr	r5, [lr]
	str	lr, [r4, #160]
	str	r4, [r4, #164]
	str	r0, [r4, #168]
	str	ip, [r4, #172]
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx
	uxtb	fp, r0
	mov	r3, r6
	ldr	r0, [r5, #28]
	mov	r1, r6
	mov	r2, #1
	bl	usb_bam_get_connection_idx
	ldr	r3, [r7, #3764]
	uxtb	r10, r0
	cmp	r3, r6
	ble	.L16625
	cmp	r9, #0
	beq	.L16626
	ldr	r3, [r4, #168]
	ldr	r5, [r7, #3440]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L16627
	ldr	r3, [r4, #168]
	str	r5, [r3]
	ldr	r3, [r4, #172]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L16628
	ldr	ip, [r4, #172]
	mov	r3, #6
	mov	r2, #2
	add	r1, r5, #168
	ldr	r0, [r7, #3444]
	str	r5, [ip]
	str	r9, [r5, #4]
	strb	fp, [r5, #52]
	strb	r10, [r5, #53]
	strd	r2, [r5, #56]
	bl	queue_work
	movw	r0, #:lower16:.LC825
	ldr	r1, .L16632
	movt	r0, #:upper16:.LC825
	bl	printk
	movw	r1, #:lower16:.LC472
	mov	r2, r8
	mov	r0, r4
	movt	r1, #:upper16:.LC472
	bl	gether_qc_connect_name
	cmn	r0, #4096
	bhi	.L16629
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	r2, #0
	movne	r3, #1
	cmp	r3, #0
	beq	.L16630
.L16594:
	mov	r0, r8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16630:
	add	r4, r4, #90
	str	r8, [r7, #3720]
	str	r8, [r7, #3724]
	str	r4, [r7, #3796]
	str	r0, [r7, #3800]
	b	.L16594
.L16602:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16605
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16605
	ldr	r0, [r4, #80]
	ldr	ip, [r4, #84]
	b	.L16603
.L16624:
	ldr	r0, [r0, #148]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16596
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #148]
.L16596:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L16631
.L16597:
	ldr	r3, [r0, #8]
	mov	r8, #0
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #148]
	str	r4, [r3]
	b	.L16594
.L16629:
	mov	r8, r0
	b	.L16594
.L16600:
	mvn	r8, #21
	b	.L16594
.L16605:
	ldr	r2, [r4, #80]
	mov	r3, #0
	mvn	r8, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L16594
.L16631:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16600
	ldr	r0, [r4, #148]
	ldr	r1, [r0, #28]
	b	.L16597
.L16625:
	movw	r0, #:lower16:.LC94
	mov	r2, r6
	ldr	r1, .L16632+4
	movt	r0, #:upper16:.LC94
	mvn	r8, #18
	bl	printk
.L16607:
	movw	r0, #:lower16:.LC823
	mov	r2, r8
	ldr	r1, .L16632
	movt	r0, #:upper16:.LC823
	mvn	r8, #21
	bl	printk
	b	.L16594
.L16627:
	movw	r0, #:lower16:.LC492
	ldr	r1, .L16632+4
	ldr	r2, [r4, #168]
	movt	r0, #:upper16:.LC492
	bl	printk
	b	.L16607
.L16628:
	movw	r0, #:lower16:.LC493
	ldr	r1, .L16632+4
	movt	r0, #:upper16:.LC493
	ldr	r2, [r4, #172]
	bl	printk
	ldr	r3, [r4, #168]
	str	r6, [r3]
	b	.L16607
.L16626:
	movw	r0, #:lower16:.LC400
	ldr	r1, .L16632+4
	mvn	r8, #21
	movt	r0, #:upper16:.LC400
	bl	printk
	movw	r0, #:lower16:.LC823
	mvn	r2, #18
	ldr	r1, .L16632
	movt	r0, #:upper16:.LC823
	bl	printk
	b	.L16594
.L16633:
	.align	2
.L16632:
	.word	.LANCHOR3+364
	.word	.LANCHOR3-540
	.fnend
	.size	rndis_qc_set_alt, .-rndis_qc_set_alt
	.align	2
	.global	pcm_buffer_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_buffer_size, %function
pcm_buffer_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #380]
	bx	lr
	.fnend
	.size	pcm_buffer_size, .-pcm_buffer_size
	.align	2
	.global	pcm_period_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_period_size, %function
pcm_period_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #332]
	bx	lr
	.fnend
	.size	pcm_period_size, .-pcm_period_size
	.align	2
	.global	u_audio_clear
	.syntax unified
	.arm
	.fpu softvfp
	.type	u_audio_clear, %function
u_audio_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2224]
	bx	lr
	.fnend
	.size	u_audio_clear, .-u_audio_clear
	.align	2
	.global	gaudio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_setup, %function
gaudio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L16671
	movw	r6, #:lower16:.LANCHOR5
	mov	r2, #0
	movt	r6, #:upper16:.LANCHOR5
	mov	r1, #2
	ldr	r0, [r6, #-644]
	bl	filp_open
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #84]
	bhi	.L16672
	mov	r2, #0
	mov	r1, #1
	ldr	r0, [r6, #-640]
	str	r4, [r4, #80]
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #112]
	bhi	.L16673
	ldr	r2, [r0, #124]
	movw	r7, #:lower16:kmalloc_caches
	mov	r3, #2
	movt	r7, #:upper16:kmalloc_caches
	mov	ip, #3
	ldr	r0, [r7, #40]
	ldr	r1, [r2]
	mov	r2, #8000
	str	r4, [r4, #108]
	cmp	r0, #0
	str	r1, [r4, #116]
	str	ip, [r4, #120]
	str	r3, [r4, #124]
	str	r3, [r4, #128]
	str	r2, [r4, #132]
	beq	.L16656
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L16674
.L16643:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #120]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.105
	ldr	r1, [r4, #124]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.106
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.107
	mov	r0, r5
	ldr	r1, [r4, #132]
	bl	_snd_pcm_hw_param_set.constprop.108
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L16657
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r1, #32
	bne	.L16644
.L16645:
	str	r3, [r4, #120]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L16659
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L16646
.L16647:
	str	r3, [r4, #124]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #128]
	ldr	r3, [r5, #296]
	str	r3, [r4, #132]
	bl	kfree
	mov	r2, #0
	ldr	r0, [r6, #-636]
	mov	r1, r2
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #140]
	bhi	.L16675
	ldr	r2, [r0, #124]
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r7, #40]
	mov	r1, #1
	mov	r3, #8000
	ldr	r2, [r2]
	str	r4, [r4, #136]
	cmp	r0, #0
	str	r2, [r4, #144]
	str	lr, [r4, #148]
	str	ip, [r4, #152]
	str	r1, [r4, #156]
	str	r3, [r4, #160]
	beq	.L16661
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L16676
.L16649:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #148]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.105
	ldr	r1, [r4, #152]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.106
	ldr	r1, [r4, #156]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.107
	mov	r0, r5
	ldr	r1, [r4, #160]
	bl	_snd_pcm_hw_param_set.constprop.108
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L16662
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r1, #32
	bne	.L16651
.L16652:
	str	r3, [r4, #148]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L16664
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L16653
.L16654:
	str	r3, [r4, #152]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #156]
	ldr	r3, [r5, #296]
	str	r3, [r4, #160]
	bl	kfree
.L16641:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3768]
	cmp	r5, #0
	movne	r5, #0
	streq	r4, [r3, #3768]
.L16637:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16656:
	mov	r5, #16
	b	.L16643
.L16661:
	mov	r5, #16
	b	.L16649
.L16659:
	mov	r1, #0
.L16646:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/xawlw/kernel/arg/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L16647
.L16657:
	mov	r1, #0
.L16644:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/xawlw/kernel/arg/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L16645
.L16672:
	movw	r0, #:lower16:.LC826
	ldr	r1, .L16677
	movt	r0, #:upper16:.LC826
	ldr	r2, [r6, #-644]
	bl	printk
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #84]
	beq	.L16641
	b	.L16639
.L16662:
	mov	r1, #0
.L16651:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/xawlw/kernel/arg/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L16652
.L16664:
	mov	r1, #0
.L16653:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/xawlw/kernel/arg/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L16654
.L16673:
	movw	r0, #:lower16:.LC827
	ldr	r1, .L16677
	mvn	r5, #21
	movt	r0, #:upper16:.LC827
	ldr	r2, [r6, #-640]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #112]
.L16639:
	movw	r0, #:lower16:.LC831
	ldr	r1, .L16677+4
	movt	r0, #:upper16:.LC831
	bl	printk
	b	.L16637
.L16675:
	movw	r0, #:lower16:.LC829
	ldr	r1, .L16677
	mvn	r5, #21
	movt	r0, #:upper16:.LC829
	ldr	r2, [r6, #-636]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	str	r3, [r4, #144]
	b	.L16639
.L16674:
	movw	r0, #:lower16:.LC828
	mvn	r2, #11
	ldr	r1, .L16677
	movt	r0, #:upper16:.LC828
	mov	r5, r2
	bl	printk
	b	.L16639
.L16676:
	movw	r0, #:lower16:.LC830
	mvn	r2, #11
	ldr	r1, .L16677
	movt	r0, #:upper16:.LC830
	mov	r5, r2
	bl	printk
	b	.L16639
.L16671:
	ldr	r2, .L16677
	movw	r0, #:lower16:.LC379
	mvn	r5, #18
	movt	r0, #:upper16:.LC379
	mov	r1, r2
	bl	printk
	b	.L16639
.L16678:
	.align	2
.L16677:
	.word	.LANCHOR3+388
	.word	.LANCHOR3+408
	.fnend
	.size	gaudio_setup, .-gaudio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_function_bind_config, %function
audio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L16692
	mov	r2, #268
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16722
.L16680:
	ldr	ip, [r5, #24]
	movw	r3, #:lower16:.LANCHOR5
	movw	r0, #:lower16:.LC832
	movt	r3, #:upper16:.LANCHOR5
	movt	r0, #:upper16:.LC832
	sub	r6, r3, #632
	sub	r9, r3, #624
	sub	r8, r3, #592
	movw	r2, #:lower16:f_audio_bind
	ldr	ip, [ip]
	stm	r4, {r0, r6}
	sub	r6, r3, #560
	movt	r2, #:upper16:f_audio_bind
	movw	r7, #:lower16:f_audio_unbind
	str	r8, [r3, #-620]
	movw	lr, #:lower16:f_audio_set_alt
	str	r6, [r3, #-612]
	movt	r7, #:upper16:f_audio_unbind
	str	r9, [r3, #-592]
	movt	lr, #:upper16:f_audio_set_alt
	movw	r1, #:lower16:f_audio_get_alt
	str	r6, [r3, #-516]
	add	r6, r4, #244
	movw	r0, #:lower16:f_audio_setup
	strd	r8, [r4, #244]
	sub	r8, r3, #616
	sub	r9, r3, #516
	str	r2, [r4, #24]
	movw	r2, #:lower16:f_audio_disable
	add	r10, r4, #196
	str	r6, [r3, #-624]
	movt	r1, #:upper16:f_audio_get_alt
	movt	r0, #:upper16:f_audio_setup
	str	ip, [r4, #76]
	movw	ip, #:lower16:f_audio_playback_work
	movt	r2, #:upper16:f_audio_disable
	str	r9, [r3, #-616]
	movt	ip, #:upper16:f_audio_playback_work
	str	r6, [r3, #-588]
	sub	r6, r3, #584
	str	r8, [r3, #-560]
	str	r9, [r3, #-556]
	sub	r9, r3, #472
	str	r7, [r4, #28]
	mov	r7, #0
	str	r8, [r3, #-512]
	sub	r8, r3, #428
	str	lr, [r4, #32]
	add	lr, r4, #228
	str	r9, [r3, #-580]
	str	r6, [r3, #-472]
	str	r1, [r4, #36]
	sub	r1, r3, #3760
	str	r9, [r3, #-428]
	movw	r9, #58272
	str	r2, [r4, #40]
	sub	r2, r3, #3792
	str	r0, [r4, #44]
	movw	r0, #:lower16:f_audio_capture_work
	str	r7, [r4, #172]
	movt	r0, #:upper16:f_audio_capture_work
	str	r10, [r4, #196]
	str	r10, [r4, #200]
	movw	r10, #65472
	str	r7, [r4, #204]
	str	lr, [r4, #228]
	str	lr, [r4, #232]
	mov	lr, #2560
	str	r8, [r3, #-468]
	str	r6, [r3, #-424]
	str	r1, [r3, #-3792]
	str	ip, [r4, #192]
	add	ip, r4, #184
	str	r0, [r4, #224]
	sub	r0, r3, #384
	str	lr, [r4, #180]
	str	ip, [r4, #184]
	str	ip, [r4, #188]
	add	ip, r4, #216
	str	r1, [r4, #256]
	str	lr, [r4, #212]
	add	lr, r2, #8
	str	ip, [r4, #216]
	str	ip, [r4, #220]
	add	ip, r1, #8
	sub	r1, r3, #340
	str	r0, [r3, #-3784]
	str	r0, [r3, #-3780]
	add	r0, r4, #252
	str	r2, [r4, #252]
	str	r2, [r3, #-3756]
	mov	r2, #48
	str	r0, [r3, #-3788]
	str	r1, [r3, #-3752]
	str	r1, [r3, #-3748]
	movw	r1, #65520
	str	r0, [r3, #-3760]
	mov	r0, r4
	str	r8, [r3, #-584]
	str	r10, [r3, #-496]
	str	lr, [r3, #-384]
	str	lr, [r3, #-380]
	str	ip, [r3, #-340]
	str	ip, [r3, #-336]
	str	r9, [r3, #-492]
	str	r1, [r3, #-488]
	str	r2, [r3, #-484]
	str	r10, [r3, #-408]
	str	r9, [r3, #-404]
	str	r1, [r3, #-400]
	str	r2, [r3, #-396]
	bl	gaudio_setup
	subs	r6, r0, #0
	bge	.L16723
.L16682:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #3768]
	cmp	r7, #0
	beq	.L16688
	ldr	r0, [r7, #84]
	cmp	r0, #0
	beq	.L16689
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #844]
	bl	filp_close
.L16689:
	ldr	r0, [r7, #112]
	cmp	r0, #0
	beq	.L16690
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #844]
	bl	filp_close
.L16690:
	ldr	r0, [r7, #140]
	cmp	r0, #0
	beq	.L16691
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #844]
	bl	filp_close
.L16691:
	mov	r3, #0
	str	r3, [r5, #3768]
.L16688:
	mov	r0, r4
	bl	kfree
.L16679:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16723:
	ldr	r3, [r4, #32]
	cmp	r3, r7
	beq	.L16695
	ldr	r3, [r4, #40]
	cmp	r3, r7
	beq	.L16695
	str	r5, [r4, #20]
	ldr	r1, [r5, #40]
	add	r3, r4, #64
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, r7
	beq	.L16684
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L16684
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4, #20]
	strd	r0, [r4, #64]
.L16684:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16685
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L16685
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L16685:
	tst	r3, #2
	bne	.L16686
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L16686
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L16686:
	tst	r3, #1
	bne	.L16687
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L16687
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L16687:
	cmp	r6, #0
	beq	.L16679
	b	.L16683
.L16692:
	mov	r4, #16
	b	.L16680
.L16695:
	mvn	r6, #21
.L16683:
	ldr	r2, .L16724
	movw	r0, #:lower16:.LC833
	mov	r3, r6
	movt	r0, #:upper16:.LC833
	mov	r1, r2
	bl	printk
	b	.L16688
.L16722:
	mvn	r6, #11
	b	.L16679
.L16725:
	.align	2
.L16724:
	.word	.LANCHOR3+424
	.fnend
	.size	audio_function_bind_config, .-audio_function_bind_config
	.align	2
	.global	gaudio_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_cleanup, %function
gaudio_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #3768]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L16726
	ldr	r0, [r5, #84]
	cmp	r0, #0
	beq	.L16728
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #844]
	bl	filp_close
.L16728:
	ldr	r0, [r5, #112]
	cmp	r0, #0
	beq	.L16729
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #844]
	bl	filp_close
.L16729:
	ldr	r0, [r5, #140]
	cmp	r0, #0
	beq	.L16730
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #844]
	bl	filp_close
.L16730:
	mov	r3, #0
	str	r3, [r4, #3768]
.L16726:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gaudio_cleanup, .-gaudio_cleanup
	.align	2
	.global	control_selector_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	control_selector_init, %function
control_selector_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR5
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR5
	strd	r6, [sp, #8]
	add	r7, r0, #244
	str	r8, [sp, #16]
	sub	r1, r3, #3760
	sub	r2, r3, #3792
	sub	r4, r3, #592
	sub	r8, r3, #624
	str	lr, [sp, #20]
	add	r0, r0, #252
	add	ip, r1, #8
	str	r1, [r3, #-3792]
	str	r4, [r0, #-8]
	sub	r5, r3, #616
	add	lr, r2, #8
	str	r8, [r0, #-4]
	sub	r6, r3, #560
	str	r2, [r0]
	str	r1, [r0, #4]
	sub	r1, r3, #516
	str	r0, [r3, #-3788]
	str	r0, [r3, #-3760]
	sub	r0, r3, #428
	str	r2, [r3, #-3756]
	sub	r2, r3, #584
	str	r7, [r3, #-624]
	str	r4, [r3, #-620]
	sub	r4, r3, #472
	str	r1, [r3, #-616]
	str	r6, [r3, #-612]
	str	r0, [r3, #-584]
	str	r5, [r3, #-560]
	str	r4, [r3, #-580]
	str	r1, [r3, #-556]
	sub	r1, r3, #384
	str	r6, [r3, #-516]
	movw	r6, #65472
	str	r5, [r3, #-512]
	movw	r5, #58272
	str	r0, [r3, #-468]
	movw	r0, #65520
	str	r2, [r3, #-472]
	str	r8, [r3, #-592]
	str	r4, [r3, #-428]
	mov	r4, #48
	str	r2, [r3, #-424]
	sub	r2, r3, #340
	str	r7, [r3, #-588]
	str	r6, [r3, #-496]
	str	r5, [r3, #-492]
	str	r0, [r3, #-488]
	str	r4, [r3, #-484]
	str	r6, [r3, #-408]
	str	r1, [r3, #-3784]
	str	r1, [r3, #-3780]
	str	r2, [r3, #-3752]
	str	r2, [r3, #-3748]
	str	r5, [r3, #-404]
	str	r0, [r3, #-400]
	mov	r0, #0
	str	r4, [r3, #-396]
	str	lr, [r3, #-384]
	str	lr, [r3, #-380]
	str	ip, [r3, #-340]
	str	ip, [r3, #-336]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	control_selector_init, .-control_selector_init
	.align	2
	.global	audio_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind_config, %function
audio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L16759
	mov	r2, #268
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16789
.L16747:
	ldr	ip, [r5, #24]
	movw	r3, #:lower16:.LANCHOR5
	movw	r0, #:lower16:.LC832
	movt	r3, #:upper16:.LANCHOR5
	movt	r0, #:upper16:.LC832
	sub	r6, r3, #632
	sub	r9, r3, #624
	sub	r8, r3, #592
	movw	r2, #:lower16:f_audio_bind
	ldr	ip, [ip]
	stm	r4, {r0, r6}
	sub	r6, r3, #560
	movt	r2, #:upper16:f_audio_bind
	movw	r7, #:lower16:f_audio_unbind
	str	r8, [r3, #-620]
	movw	lr, #:lower16:f_audio_set_alt
	str	r6, [r3, #-612]
	movt	r7, #:upper16:f_audio_unbind
	str	r9, [r3, #-592]
	movt	lr, #:upper16:f_audio_set_alt
	movw	r1, #:lower16:f_audio_get_alt
	str	r6, [r3, #-516]
	add	r6, r4, #244
	movw	r0, #:lower16:f_audio_setup
	strd	r8, [r4, #244]
	sub	r8, r3, #616
	sub	r9, r3, #516
	str	r2, [r4, #24]
	movw	r2, #:lower16:f_audio_disable
	add	r10, r4, #196
	str	r6, [r3, #-624]
	movt	r1, #:upper16:f_audio_get_alt
	movt	r0, #:upper16:f_audio_setup
	str	ip, [r4, #76]
	movw	ip, #:lower16:f_audio_playback_work
	movt	r2, #:upper16:f_audio_disable
	str	r9, [r3, #-616]
	movt	ip, #:upper16:f_audio_playback_work
	str	r6, [r3, #-588]
	sub	r6, r3, #584
	str	r8, [r3, #-560]
	str	r9, [r3, #-556]
	sub	r9, r3, #472
	str	r7, [r4, #28]
	mov	r7, #0
	str	r8, [r3, #-512]
	sub	r8, r3, #428
	str	lr, [r4, #32]
	add	lr, r4, #228
	str	r9, [r3, #-580]
	str	r6, [r3, #-472]
	str	r1, [r4, #36]
	sub	r1, r3, #3760
	str	r9, [r3, #-428]
	movw	r9, #58272
	str	r2, [r4, #40]
	sub	r2, r3, #3792
	str	r0, [r4, #44]
	movw	r0, #:lower16:f_audio_capture_work
	str	r7, [r4, #172]
	movt	r0, #:upper16:f_audio_capture_work
	str	r10, [r4, #196]
	str	r10, [r4, #200]
	movw	r10, #65472
	str	r7, [r4, #204]
	str	lr, [r4, #228]
	str	lr, [r4, #232]
	mov	lr, #2560
	str	r8, [r3, #-468]
	str	r6, [r3, #-424]
	str	r1, [r3, #-3792]
	str	ip, [r4, #192]
	add	ip, r4, #184
	str	r0, [r4, #224]
	sub	r0, r3, #384
	str	lr, [r4, #180]
	str	ip, [r4, #184]
	str	ip, [r4, #188]
	add	ip, r4, #216
	str	r1, [r4, #256]
	str	lr, [r4, #212]
	add	lr, r2, #8
	str	ip, [r4, #216]
	str	ip, [r4, #220]
	add	ip, r1, #8
	sub	r1, r3, #340
	str	r0, [r3, #-3784]
	str	r0, [r3, #-3780]
	add	r0, r4, #252
	str	r2, [r4, #252]
	str	r2, [r3, #-3756]
	mov	r2, #48
	str	r0, [r3, #-3788]
	str	r1, [r3, #-3752]
	str	r1, [r3, #-3748]
	movw	r1, #65520
	str	r0, [r3, #-3760]
	mov	r0, r4
	str	r8, [r3, #-584]
	str	r10, [r3, #-496]
	str	lr, [r3, #-384]
	str	lr, [r3, #-380]
	str	ip, [r3, #-340]
	str	ip, [r3, #-336]
	str	r9, [r3, #-492]
	str	r1, [r3, #-488]
	str	r2, [r3, #-484]
	str	r10, [r3, #-408]
	str	r9, [r3, #-404]
	str	r1, [r3, #-400]
	str	r2, [r3, #-396]
	bl	gaudio_setup
	subs	r6, r0, #0
	bge	.L16790
.L16749:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #3768]
	cmp	r7, #0
	beq	.L16755
	ldr	r0, [r7, #84]
	cmp	r0, #0
	beq	.L16756
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #844]
	bl	filp_close
.L16756:
	ldr	r0, [r7, #112]
	cmp	r0, #0
	beq	.L16757
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #844]
	bl	filp_close
.L16757:
	ldr	r0, [r7, #140]
	cmp	r0, #0
	beq	.L16758
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #844]
	bl	filp_close
.L16758:
	mov	r3, #0
	str	r3, [r5, #3768]
.L16755:
	mov	r0, r4
	bl	kfree
.L16746:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16790:
	ldr	r3, [r4, #32]
	cmp	r3, r7
	beq	.L16762
	ldr	r3, [r4, #40]
	cmp	r3, r7
	beq	.L16762
	str	r5, [r4, #20]
	ldr	r1, [r5, #40]
	add	r3, r4, #64
	add	r2, r5, #36
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r6, [r4, #24]
	cmp	r6, r7
	beq	.L16751
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	bge	.L16751
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r7, [r4, #20]
	strd	r0, [r4, #64]
.L16751:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16752
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L16752
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L16752:
	tst	r3, #2
	bne	.L16753
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L16753
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L16753:
	tst	r3, #1
	bne	.L16754
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L16754
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L16754:
	cmp	r6, #0
	beq	.L16746
	b	.L16750
.L16759:
	mov	r4, #16
	b	.L16747
.L16762:
	mvn	r6, #21
.L16750:
	ldr	r2, .L16791
	movw	r0, #:lower16:.LC833
	mov	r3, r6
	movt	r0, #:upper16:.LC833
	mov	r1, r2
	bl	printk
	b	.L16755
.L16789:
	mvn	r6, #11
	b	.L16746
.L16792:
	.align	2
.L16791:
	.word	.LANCHOR3+424
	.fnend
	.size	audio_bind_config, .-audio_bind_config
	.align	2
	.global	ncm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind_config, %function
ncm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	movw	r0, #:lower16:.LC283
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC283
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r5, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r4]
	ldr	r6, [r3, #28]
	mov	r1, r6
	bl	strcmp
	cmp	r0, #0
	beq	.L16804
	movw	r0, #:lower16:.LC286
	mov	r1, r6
	movt	r0, #:upper16:.LC286
	bl	strcmp
	cmp	r0, #0
	cmpne	r7, #0
	beq	.L16804
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #1620]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16795
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16797
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR5
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR5
	strb	r3, [r4, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r2, #-3636]
	strb	r3, [r6, #1620]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16797
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r2, #-3616]
	strb	r3, [r2, #-3604]
	strb	r3, [r6, #1636]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16797
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r5, #24]
	strb	r3, [r2, #-689]
	strb	r3, [r6, #1628]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L16797
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r2, #-3645]
	strb	r3, [r6, #1644]
.L16795:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16805
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16821
.L16798:
	ldrb	r8, [r7, #3]	@ zero_extendqisi2
	add	r9, r4, #142
	movw	r2, #:lower16:.LC780
	ldrb	lr, [r7, #2]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC780
	mov	r1, #14
	ldrb	ip, [r7, #1]	@ zero_extendqisi2
	mov	r0, r9
	ldrb	fp, [r7, #5]	@ zero_extendqisi2
	ldrb	r10, [r7, #4]	@ zero_extendqisi2
	ldrb	r3, [r7]	@ zero_extendqisi2
	stm	sp, {ip, lr}
	str	r8, [sp, #8]
	mov	r8, #0
	strd	r10, [sp, #12]
	bl	snprintf
	ldr	r1, .L16822
	mov	r0, #15
	movw	r3, #:lower16:.LC820
	ldr	r2, .L16822+4
	movt	r3, #:upper16:.LC820
	movw	lr, #:lower16:ncm_set_alt
	strh	r0, [r4, #90]	@ movhi
	movw	r0, #:lower16:ncm_bind
	movw	ip, #:lower16:ncm_get_alt
	movt	r0, #:upper16:ncm_bind
	str	r8, [r4, #92]
	movt	lr, #:upper16:ncm_set_alt
	str	r1, [r4, #168]
	movw	r1, #:lower16:ncm_unbind
	movt	ip, #:upper16:ncm_get_alt
	movt	r1, #:upper16:ncm_unbind
	strb	r8, [r4, #172]
	str	r8, [r4, #176]
	ldr	r7, [r6, #36]
	str	r9, [r6, #1632]
	str	r3, [r4]
	movw	r3, #:lower16:ncm_setup
	str	r2, [r4, #4]
	movw	r2, #:lower16:ncm_disable
	movt	r3, #:upper16:ncm_setup
	movt	r2, #:upper16:ncm_disable
	str	r5, [r4, #20]
	strd	r0, [r4, #24]
	movw	r0, #:lower16:ncm_wrap_ntb
	movw	r1, #:lower16:ncm_unwrap_ntb
	str	lr, [r4, #32]
	movt	r1, #:upper16:ncm_unwrap_ntb
	movt	r0, #:upper16:ncm_wrap_ntb
	str	ip, [r4, #36]
	mov	lr, #2048
	mov	ip, #1
	strd	r2, [r4, #40]
	add	r3, r4, #64
	add	r2, r5, #36
	strb	ip, [r4, #96]
	str	r7, [r4, #100]
	str	lr, [r4, #104]
	strd	r0, [r4, #120]
	ldr	r1, [r5, #40]
	str	r3, [r5, #40]
	str	r2, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r1]
	ldr	r7, [r4, #24]
	cmp	r7, r8
	beq	.L16799
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	bge	.L16799
	ldrd	r2, [r4, #64]
	mov	r0, #256
	mov	r1, #512
	str	r3, [r2, #4]
	str	r2, [r3]
	str	r8, [r4, #20]
	strd	r0, [r4, #64]
.L16799:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L16800
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L16800
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L16800:
	tst	r3, #2
	bne	.L16801
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L16801
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L16801:
	tst	r3, #1
	bne	.L16802
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L16802
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L16802:
	cmp	r7, #0
	beq	.L16793
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #1632]
	bl	kfree
.L16793:
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16805:
	mov	r4, #16
	b	.L16798
.L16804:
	mvn	r7, #21
	b	.L16793
.L16797:
	mvn	r7, #18
	b	.L16793
.L16821:
	mvn	r7, #11
	b	.L16793
.L16823:
	.align	2
.L16822:
	.word	.LANCHOR0+48
	.word	.LANCHOR5-676
	.fnend
	.size	ncm_bind_config, .-ncm_bind_config
	.global	diag_dload
	.global	speaker_output_terminal_desc
	.global	speaker_input_terminal_desc
	.global	uac1_ac_header_desc
	.global	uac1_ac_interface_desc
	.global	_rndis_qc
	.global	bam2bam_data_ports
	.global	rndis_ul_max_xfer_size_rcvd
	.global	rndis_ul_max_pkt_per_xfer_rcvd
	.global	mtp_ext_config_desc
	.global	mtp_tx_reqs
	.global	mtp_tx_req_len
	.global	mtp_rx_req_len
	.global	ghsuart_data_stats_ops
	.global	ghsuart_data_tx_intr_thld
	.global	ghsic_stats_ops
	.global	gdata_timestamp_ops
	.global	ghsic_data_tx_intr_thld
	.global	gctrl_dfile
	.global	gctrl_dent
	.global	gctrl_stats_ops
	.global	smd_ctrl_dfile
	.global	smd_ctrl_dent
	.global	gsmd_ctrl_stats_ops
	.global	online_clients
	.global	gbam_dent
	.global	gbam_stats_ops
	.global	bam2bam_ports
	.global	smd_pi
	.global	sport_info
	.global	gs_dent
	.global	debug_adb_ops
	.global	debug_rst_ops
	.global	dent_rmnet_mux
	.global	rmnet_mux_svlte_debug_stats_ops
	.global	debug_rmnet_sdio_stats_ops
	.global	sdio_rx_fctrl_dis_thld
	.global	sdio_rx_fctrl_en_thld
	.global	sdio_tx_pkt_drop_thld
	.global	dent_smd
	.global	rmnet_smd_debug_stats_ops
	.global	dent_diag
	.section	.rodata
	.align	3
	.set	.LANCHOR2,. + 0
	.set	.LANCHOR3,. + 8184
	.type	__func__.39295, %object
	.size	__func__.39295, 24
__func__.39295:
	.ascii	"usb_rmnet_mux_ctrl_open\000"
	.type	__func__.48599, %object
	.size	__func__.48599, 14
__func__.48599:
	.ascii	"gsmd_start_rx\000"
	.space	2
	.type	__func__.49279, %object
	.size	__func__.49279, 21
__func__.49279:
	.ascii	"gbam_stop_endless_rx\000"
	.space	3
	.type	__func__.49285, %object
	.size	__func__.49285, 21
__func__.49285:
	.ascii	"gbam_stop_endless_tx\000"
	.space	3
	.type	__func__.50887, %object
	.size	__func__.50887, 24
__func__.50887:
	.ascii	"ghsic_send_cpkt_tomodem\000"
	.type	__func__.56605, %object
	.size	__func__.56605, 13
__func__.56605:
	.ascii	"ecm_qc_setup\000"
	.space	3
	.type	__func__.56922, %object
	.size	__func__.56922, 21
__func__.56922:
	.ascii	"mbim_ep0out_complete\000"
	.space	3
	.type	__func__.57183, %object
	.size	__func__.57183, 25
__func__.57183:
	.ascii	"bam_data_stop_endless_rx\000"
	.space	3
	.type	__func__.57189, %object
	.size	__func__.57189, 25
__func__.57189:
	.ascii	"bam_data_stop_endless_tx\000"
	.space	3
	.type	__func__.57567, %object
	.size	__func__.57567, 27
__func__.57567:
	.ascii	"rndis_qc_response_complete\000"
	.space	1
	.type	__func__.57559, %object
	.size	__func__.57559, 28
__func__.57559:
	.ascii	"rndis_qc_response_available\000"
	.type	__func__.61497, %object
	.size	__func__.61497, 21
__func__.61497:
	.ascii	"f_audio_buffer_alloc\000"
	.space	3
	.type	__func__.61667, %object
	.size	__func__.61667, 23
__func__.61667:
	.ascii	"audio_set_endpoint_req\000"
	.space	1
	.type	__func__.61743, %object
	.size	__func__.61743, 14
__func__.61743:
	.ascii	"f_audio_setup\000"
	.space	2
	.type	__func__.63146, %object
	.size	__func__.63146, 24
__func__.63146:
	.ascii	"android_enable_function\000"
	.type	__func__.57692, %object
	.size	__func__.57692, 21
__func__.57692:
	.ascii	"rndis_qc_release_dev\000"
	.space	3
	.type	__func__.40017, %object
	.size	__func__.40017, 10
__func__.40017:
	.ascii	"gps_setup\000"
	.space	2
	.type	__func__.39722, %object
	.size	__func__.39722, 23
__func__.39722:
	.ascii	"frmnet_notify_complete\000"
	.space	1
	.type	__func__.56973, %object
	.size	__func__.56973, 17
__func__.56973:
	.ascii	"mbim_ctrlrequest\000"
	.space	3
	.type	__func__.57085, %object
	.size	__func__.57085, 13
__func__.57085:
	.ascii	"mbim_release\000"
	.space	3
	.type	__func__.57077, %object
	.size	__func__.57077, 10
__func__.57077:
	.ascii	"mbim_open\000"
	.space	2
	.type	__func__.48336, %object
	.size	__func__.48336, 14
__func__.48336:
	.ascii	"gsdio_tx_pull\000"
	.space	2
	.type	__func__.48325, %object
	.size	__func__.48325, 19
__func__.48325:
	.ascii	"gsdio_read_pending\000"
	.space	1
	.type	__func__.48403, %object
	.size	__func__.48403, 16
__func__.48403:
	.ascii	"gsdio_open_work\000"
	.type	__func__.45867, %object
	.size	__func__.45867, 19
__func__.45867:
	.ascii	"start_out_transfer\000"
	.space	1
	.type	__func__.51874, %object
	.size	__func__.51874, 26
__func__.51874:
	.ascii	"ghsuart_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.48311, %object
	.size	__func__.48311, 21
__func__.48311:
	.ascii	"gsdio_write_complete\000"
	.space	3
	.type	__func__.48379, %object
	.size	__func__.48379, 24
__func__.48379:
	.ascii	"gsdio_ctrl_notify_modem\000"
	.type	__func__.48675, %object
	.size	__func__.48675, 20
__func__.48675:
	.ascii	"gsmd_write_complete\000"
	.type	__func__.52381, %object
	.size	__func__.52381, 19
__func__.52381:
	.ascii	"ghsuart_data_probe\000"
	.space	1
	.type	__func__.56998, %object
	.size	__func__.56998, 13
__func__.56998:
	.ascii	"mbim_suspend\000"
	.space	3
	.type	__func__.57002, %object
	.size	__func__.57002, 12
__func__.57002:
	.ascii	"mbim_resume\000"
	.type	CSWTCH.1755, %object
	.size	CSWTCH.1755, 40
CSWTCH.1755:
	.word	.LC360
	.word	.LC361
	.word	.LC362
	.word	.LC363
	.word	.LC364
	.word	.LC365
	.word	.LC366
	.word	.LC367
	.word	.LC368
	.word	.LC846
	.type	__func__.48621, %object
	.size	__func__.48621, 13
__func__.48621:
	.ascii	"gsmd_rx_push\000"
	.space	3
	.type	__func__.49676, %object
	.size	__func__.49676, 24
__func__.49676:
	.ascii	"grmnet_ctrl_smd_write_w\000"
	.type	__func__.48654, %object
	.size	__func__.48654, 13
__func__.48654:
	.ascii	"gsmd_tx_pull\000"
	.space	3
	.type	__func__.49648, %object
	.size	__func__.49648, 23
__func__.49648:
	.ascii	"grmnet_ctrl_smd_read_w\000"
	.space	1
	.type	__func__.54029, %object
	.size	__func__.54029, 16
__func__.54029:
	.ascii	"mtp_ctrlrequest\000"
	.type	__func__.39023, %object
	.size	__func__.39023, 27
__func__.39023:
	.ascii	"rmnet_mux_command_complete\000"
	.space	1
	.type	gsmd_ctrl_stats_ops, %object
	.size	gsmd_ctrl_stats_ops, 104
gsmd_ctrl_stats_ops:
	.space	8
	.word	gsmd_ctrl_read_stats
	.word	gsmd_ctrl_reset_stats
	.space	88
	.type	gctrl_stats_ops, %object
	.size	gctrl_stats_ops, 104
gctrl_stats_ops:
	.space	8
	.word	gctrl_read_stats
	.word	gctrl_reset_stats
	.space	88
	.type	ghsic_stats_ops, %object
	.size	ghsic_stats_ops, 104
ghsic_stats_ops:
	.space	8
	.word	ghsic_data_read_stats
	.word	ghsic_data_reset_stats
	.space	88
	.type	gdata_timestamp_ops, %object
	.size	gdata_timestamp_ops, 104
gdata_timestamp_ops:
	.space	8
	.word	show_timestamp
	.space	92
	.type	ghsuart_ctrl_stats_ops, %object
	.size	ghsuart_ctrl_stats_ops, 104
ghsuart_ctrl_stats_ops:
	.space	8
	.word	ghsuart_ctrl_read_stats
	.word	ghsuart_ctrl_reset_stats
	.space	88
	.type	ghsuart_data_stats_ops, %object
	.size	ghsuart_data_stats_ops, 104
ghsuart_data_stats_ops:
	.space	8
	.word	ghsuart_data_read_stats
	.word	ghsuart_data_reset_stats
	.space	88
	.type	debug_fdiag_ops, %object
	.size	debug_fdiag_ops, 104
debug_fdiag_ops:
	.space	8
	.word	debug_read_stats
	.word	debug_reset_stats
	.space	28
	.word	debug_open
	.space	56
	.type	__func__.38216, %object
	.size	__func__.38216, 24
__func__.38216:
	.ascii	"rmnet_sdio_data_rx_work\000"
	.type	__func__.49146, %object
	.size	__func__.49146, 23
__func__.49146:
	.ascii	"gbam_write_data_tohost\000"
	.space	1
	.type	__func__.49213, %object
	.size	__func__.49213, 19
__func__.49213:
	.ascii	"gbam_epin_complete\000"
	.space	1
	.type	__func__.49745, %object
	.size	__func__.49745, 26
__func__.49745:
	.ascii	"grmnet_ctrl_smd_connect_w\000"
	.space	2
	.type	__func__.49259, %object
	.size	__func__.49259, 14
__func__.49259:
	.ascii	"gbam_start_rx\000"
	.space	2
	.type	__func__.49228, %object
	.size	__func__.49228, 20
__func__.49228:
	.ascii	"gbam_epout_complete\000"
	.type	__func__.57708, %object
	.size	__func__.57708, 15
__func__.57708:
	.ascii	"rndis_qc_ioctl\000"
	.space	1
	.type	__func__.57093, %object
	.size	__func__.57093, 11
__func__.57093:
	.ascii	"mbim_ioctl\000"
	.space	1
	.type	__func__.39318, %object
	.size	__func__.39318, 24
__func__.39318:
	.ascii	"usb_rmnet_mux_ctrl_read\000"
	.type	audio_hw_info, %object
	.size	audio_hw_info, 64
audio_hw_info:
	.word	65811
	.space	4
	.word	4
	.word	0
	.space	4
	.word	44100
	.word	44100
	.word	2
	.word	2
	.word	1048576
	.word	64
	.word	524288
	.word	2
	.word	1024
	.space	8
	.type	__func__.48426, %object
	.size	__func__.48426, 15
__func__.48426:
	.ascii	"gsdio_ch_probe\000"
	.space	1
	.type	__func__.50973, %object
	.size	__func__.50973, 18
__func__.50973:
	.ascii	"ghsic_ctrl_remove\000"
	.space	2
	.type	__func__.48737, %object
	.size	__func__.48737, 18
__func__.48737:
	.ascii	"gsmd_notify_modem\000"
	.space	2
	.type	__func__.49362, %object
	.size	__func__.49362, 18
__func__.49362:
	.ascii	"gbam_connect_work\000"
	.space	2
	.type	__func__.49303, %object
	.size	__func__.49303, 14
__func__.49303:
	.ascii	"gbam_start_io\000"
	.space	2
	.type	__func__.49376, %object
	.size	__func__.49376, 22
__func__.49376:
	.ascii	"gbam2bam_connect_work\000"
	.space	2
	.type	__func__.49267, %object
	.size	__func__.49267, 22
__func__.49267:
	.ascii	"gbam_start_endless_rx\000"
	.space	2
	.type	__func__.49273, %object
	.size	__func__.49273, 22
__func__.49273:
	.ascii	"gbam_start_endless_tx\000"
	.space	2
	.type	__func__.57218, %object
	.size	__func__.57218, 26
__func__.57218:
	.ascii	"bam2bam_data_connect_work\000"
	.space	2
	.type	__func__.57171, %object
	.size	__func__.57171, 26
__func__.57171:
	.ascii	"bam_data_start_endless_rx\000"
	.space	2
	.type	__func__.57177, %object
	.size	__func__.57177, 26
__func__.57177:
	.ascii	"bam_data_start_endless_tx\000"
	.space	2
	.type	__func__.57196, %object
	.size	__func__.57196, 23
__func__.57196:
	.ascii	"bam_data_peer_reset_cb\000"
	.space	1
	.type	__func__.57723, %object
	.size	__func__.57723, 14
__func__.57723:
	.ascii	"rndis_qc_init\000"
	.space	2
	.type	__func__.39362, %object
	.size	__func__.39362, 27
__func__.39362:
	.ascii	"rmnet_mux_ctrl_device_init\000"
	.space	1
	.type	rmnet_mux_svlte_debug_stats_ops, %object
	.size	rmnet_mux_svlte_debug_stats_ops, 104
rmnet_mux_svlte_debug_stats_ops:
	.space	8
	.word	rmnet_mux_read_stats
	.word	rmnet_mux_reset_stats
	.space	28
	.word	dbg_rmnet_mux_open
	.space	56
	.type	__func__.57728, %object
	.size	__func__.57728, 17
__func__.57728:
	.ascii	"rndis_qc_cleanup\000"
	.space	3
	.type	__func__.57121, %object
	.size	__func__.57121, 14
__func__.57121:
	.ascii	"fmbim_cleanup\000"
	.space	2
	.type	__func__.56296, %object
	.size	__func__.56296, 13
__func__.56296:
	.ascii	"rndis_rm_hdr\000"
	.space	3
	.type	CSWTCH.2588, %object
	.size	CSWTCH.2588, 12
CSWTCH.2588:
	.word	.LC843
	.word	.LC844
	.word	.LC845
	.type	__func__.63570, %object
	.size	__func__.63570, 21
__func__.63570:
	.ascii	"alloc_android_config\000"
	.space	3
	.type	__func__.63238, %object
	.size	__func__.63238, 16
__func__.63238:
	.ascii	"functions_store\000"
	.type	__func__.63075, %object
	.size	__func__.63075, 23
__func__.63075:
	.ascii	"android_init_functions\000"
	.space	1
	.type	longname, %object
	.size	longname, 15
longname:
	.ascii	"Gadget Android\000"
	.space	1
	.type	__func__.63472, %object
	.size	__func__.63472, 13
__func__.63472:
	.ascii	"android_bind\000"
	.space	3
	.type	__func__.62242, %object
	.size	__func__.62242, 13
__func__.62242:
	.ascii	"android_work\000"
	.space	3
	.type	__func__.61766, %object
	.size	__func__.61766, 16
__func__.61766:
	.ascii	"f_audio_set_alt\000"
	.type	__func__.48370, %object
	.size	__func__.48370, 14
__func__.48370:
	.ascii	"gsdio_ctrl_wq\000"
	.space	2
	.type	__func__.50048, %object
	.size	__func__.50048, 16
__func__.50048:
	.ascii	"rmnet_ctrl_poll\000"
	.type	__func__.50894, %object
	.size	__func__.50894, 25
__func__.50894:
	.ascii	"ghsic_send_cbits_tomodem\000"
	.space	3
	.type	__func__.51883, %object
	.size	__func__.51883, 27
__func__.51883:
	.ascii	"ghsuart_send_cbits_tomodem\000"
	.space	1
	.type	__func__.57275, %object
	.size	__func__.57275, 17
__func__.57275:
	.ascii	"bam_data_wake_cb\000"
	.space	3
	.type	__func__.57686, %object
	.size	__func__.57686, 18
__func__.57686:
	.ascii	"rndis_qc_open_dev\000"
	.space	2
	.type	__func__.39960, %object
	.size	__func__.39960, 12
__func__.39960:
	.ascii	"gps_connect\000"
	.type	__func__.39967, %object
	.size	__func__.39967, 15
__func__.39967:
	.ascii	"gps_disconnect\000"
	.space	1
	.type	__func__.39986, %object
	.size	__func__.39986, 17
__func__.39986:
	.ascii	"gps_cmd_complete\000"
	.space	3
	.type	__func__.39686, %object
	.size	__func__.39686, 15
__func__.39686:
	.ascii	"frmnet_connect\000"
	.space	1
	.type	__func__.39693, %object
	.size	__func__.39693, 18
__func__.39693:
	.ascii	"frmnet_disconnect\000"
	.space	2
	.type	__func__.39713, %object
	.size	__func__.39713, 20
__func__.39713:
	.ascii	"frmnet_cmd_complete\000"
	.type	__func__.50906, %object
	.size	__func__.50906, 21
__func__.50906:
	.ascii	"ghsic_ctrl_connect_w\000"
	.space	3
	.type	__func__.58103, %object
	.size	__func__.58103, 12
__func__.58103:
	.ascii	"gether_init\000"
	.type	__func__.48301, %object
	.size	__func__.48301, 20
__func__.48301:
	.ascii	"gsdio_read_complete\000"
	.type	__func__.48669, %object
	.size	__func__.48669, 19
__func__.48669:
	.ascii	"gsmd_read_complete\000"
	.space	1
	.type	__func__.49705, %object
	.size	__func__.49705, 29
__func__.49705:
	.ascii	"gsmd_ctrl_send_cbits_tomodem\000"
	.space	3
	.type	__func__.63634, %object
	.size	__func__.63634, 5
__func__.63634:
	.ascii	"init\000"
	.space	3
	.type	__func__.51480, %object
	.size	__func__.51480, 18
__func__.51480:
	.ascii	"ghsic_data_remove\000"
	.space	2
	.type	__func__.52391, %object
	.size	__func__.52391, 20
__func__.52391:
	.ascii	"ghsuart_data_remove\000"
	.type	__func__.52211, %object
	.size	__func__.52211, 25
__func__.52211:
	.ascii	"ghsuart_data_write_tomdm\000"
	.space	3
	.type	__func__.52254, %object
	.size	__func__.52254, 22
__func__.52254:
	.ascii	"ghsuart_data_start_rx\000"
	.space	2
	.type	__func__.52196, %object
	.size	__func__.52196, 26
__func__.52196:
	.ascii	"ghsuart_data_write_tohost\000"
	.space	2
	.type	__func__.38324, %object
	.size	__func__.38324, 22
__func__.38324:
	.ascii	"rmnet_close_sdio_work\000"
	.space	2
	.type	__func__.48720, %object
	.size	__func__.48720, 18
__func__.48720:
	.ascii	"gsmd_connect_work\000"
	.space	2
	.type	__func__.49349, %object
	.size	__func__.49349, 25
__func__.49349:
	.ascii	"gbam2bam_disconnect_work\000"
	.space	3
	.type	__func__.57205, %object
	.size	__func__.57205, 29
__func__.57205:
	.ascii	"bam2bam_data_disconnect_work\000"
	.space	3
	.type	__func__.51435, %object
	.size	__func__.51435, 21
__func__.51435:
	.ascii	"ghsic_data_connect_w\000"
	.space	3
	.type	__func__.51891, %object
	.size	__func__.51891, 23
__func__.51891:
	.ascii	"ghsuart_ctrl_connect_w\000"
	.space	1
	.type	__func__.52353, %object
	.size	__func__.52353, 23
__func__.52353:
	.ascii	"ghsuart_data_connect_w\000"
	.space	1
	.type	__func__.63026, %object
	.size	__func__.63026, 25
__func__.63026:
	.ascii	"hid_function_bind_config\000"
	.space	3
	.type	__func__.48273, %object
	.size	__func__.48273, 12
__func__.48273:
	.ascii	"gsdio_write\000"
	.type	__func__.49164, %object
	.size	__func__.49164, 18
__func__.49164:
	.ascii	"gbam_data_recv_cb\000"
	.space	2
	.type	__func__.39638, %object
	.size	__func__.39638, 14
__func__.39638:
	.ascii	"frmnet_resume\000"
	.space	2
	.type	__func__.57262, %object
	.size	__func__.57262, 15
__func__.57262:
	.ascii	"bam_data_setup\000"
	.space	1
	.type	__func__.63101, %object
	.size	__func__.63101, 31
__func__.63101:
	.ascii	"android_bind_enabled_functions\000"
	.space	1
	.type	__func__.61291, %object
	.size	__func__.61291, 20
__func__.61291:
	.ascii	"gaudio_open_streams\000"
	.type	__func__.61264, %object
	.size	__func__.61264, 24
__func__.61264:
	.ascii	"playback_prepare_params\000"
	.type	__func__.61275, %object
	.size	__func__.61275, 23
__func__.61275:
	.ascii	"capture_prepare_params\000"
	.space	1
	.type	__func__.61556, %object
	.size	__func__.61556, 21
__func__.61556:
	.ascii	"f_audio_capture_work\000"
	.space	3
	.type	__func__.61321, %object
	.size	__func__.61321, 16
__func__.61321:
	.ascii	"u_audio_capture\000"
	.type	__func__.57106, %object
	.size	__func__.57106, 10
__func__.57106:
	.ascii	"mbim_init\000"
	.space	2
	.type	__func__.57238, %object
	.size	__func__.57238, 20
__func__.57238:
	.ascii	"bam_data_disconnect\000"
	.type	oid_supported_list, %object
	.size	oid_supported_list, 112
oid_supported_list:
	.word	65793
	.word	65794
	.word	65795
	.word	65796
	.word	65798
	.word	65799
	.word	65802
	.word	65803
	.word	65804
	.word	65805
	.word	65814
	.word	65806
	.word	65809
	.word	65812
	.word	66050
	.word	131329
	.word	131330
	.word	131331
	.word	131332
	.word	131333
	.word	16843009
	.word	16843010
	.word	16843011
	.word	16843013
	.word	16843012
	.word	16908545
	.word	16908546
	.word	16908547
	.type	__func__.56065, %object
	.size	__func__.56065, 20
__func__.56065:
	.ascii	"gen_ndis_query_resp\000"
	.type	__func__.53586, %object
	.size	__func__.53586, 22
__func__.53586:
	.ascii	"ccid_ctrl_device_init\000"
	.space	2
	.type	__func__.53597, %object
	.size	__func__.53597, 11
__func__.53597:
	.ascii	"ccid_setup\000"
	.space	1
	.type	__func__.53530, %object
	.size	__func__.53530, 22
__func__.53530:
	.ascii	"ccid_bulk_device_init\000"
	.space	2
	.type	__func__.52406, %object
	.size	__func__.52406, 33
__func__.52406:
	.ascii	"ghsuart_send_controlbits_tomodem\000"
	.space	3
	.type	__func__.47346, %object
	.size	__func__.47346, 12
__func__.47346:
	.ascii	"gs_start_tx\000"
	.type	__func__.47408, %object
	.size	__func__.47408, 18
__func__.47408:
	.ascii	"gs_write_complete\000"
	.space	2
	.type	dirletter.46131, %object
	.size	dirletter.46131, 4
dirletter.46131:
	.byte	117
	.byte	111
	.byte	105
	.byte	110
	.type	__func__.49940, %object
	.size	__func__.49940, 34
__func__.49940:
	.ascii	"grmnet_ctrl_qti_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.38240, %object
	.size	__func__.38240, 26
__func__.38240:
	.ascii	"rmnet_sdio_complete_epout\000"
	.space	2
	.type	__func__.62255, %object
	.size	__func__.62255, 15
__func__.62255:
	.ascii	"android_enable\000"
	.space	1
	.type	__func__.53171, %object
	.size	__func__.53171, 9
__func__.53171:
	.ascii	"adb_open\000"
	.space	3
	.type	__func__.61536, %object
	.size	__func__.61536, 22
__func__.61536:
	.ascii	"f_audio_playback_work\000"
	.space	2
	.type	__func__.61307, %object
	.size	__func__.61307, 17
__func__.61307:
	.ascii	"u_audio_playback\000"
	.space	3
	.type	__func__.61546, %object
	.size	__func__.61546, 29
__func__.61546:
	.ascii	"f_audio_playback_ep_complete\000"
	.space	3
	.type	__func__.61568, %object
	.size	__func__.61568, 28
__func__.61568:
	.ascii	"f_audio_capture_ep_complete\000"
	.type	__func__.61585, %object
	.size	__func__.61585, 17
__func__.61585:
	.ascii	"f_audio_complete\000"
	.space	3
	.type	__func__.51313, %object
	.size	__func__.51313, 24
__func__.51313:
	.ascii	"ghsic_data_write_tohost\000"
	.type	__func__.51472, %object
	.size	__func__.51472, 17
__func__.51472:
	.ascii	"ghsic_data_probe\000"
	.space	3
	.type	__func__.50961, %object
	.size	__func__.50961, 17
__func__.50961:
	.ascii	"ghsic_ctrl_probe\000"
	.space	3
	.type	__func__.56908, %object
	.size	__func__.56908, 21
__func__.56908:
	.ascii	"mbim_notify_complete\000"
	.space	3
	.type	__func__.56899, %object
	.size	__func__.56899, 15
__func__.56899:
	.ascii	"mbim_do_notify\000"
	.space	1
	.type	__func__.51342, %object
	.size	__func__.51342, 23
__func__.51342:
	.ascii	"ghsic_data_write_tomdm\000"
	.space	1
	.type	__func__.51391, %object
	.size	__func__.51391, 20
__func__.51391:
	.ascii	"ghsic_data_start_rx\000"
	.type	__func__.45862, %object
	.size	__func__.45862, 18
__func__.45862:
	.ascii	"start_in_transfer\000"
	.space	2
	.type	ffs_sb_operations, %object
	.size	ffs_sb_operations, 108
ffs_sb_operations:
	.space	16
	.word	generic_delete_inode
	.space	24
	.word	simple_statfs
	.space	60
	.type	ffs_ep0_operations, %object
	.size	ffs_ep0_operations, 104
ffs_ep0_operations:
	.word	0
	.word	no_llseek
	.word	ffs_ep0_read
	.word	ffs_ep0_write
	.space	16
	.word	ffs_ep0_ioctl
	.space	8
	.word	ffs_ep0_open
	.space	4
	.word	ffs_ep0_release
	.space	48
	.type	__func__.31924, %object
	.size	__func__.31924, 25
__func__.31924:
	.ascii	"usb_qdss_disconnect_work\000"
	.space	3
	.type	__func__.57036, %object
	.size	__func__.57036, 10
__func__.57036:
	.ascii	"mbim_read\000"
	.space	2
	.type	__func__.24504, %object
	.size	__func__.24504, 11
__func__.24504:
	.ascii	"set_config\000"
	.space	1
	.type	__func__.24722, %object
	.size	__func__.24722, 16
__func__.24722:
	.ascii	"composite_setup\000"
	.type	__func__.55291, %object
	.size	__func__.55291, 16
__func__.55291:
	.ascii	"acc_ctrlrequest\000"
	.type	__func__.39623, %object
	.size	__func__.39623, 15
__func__.39623:
	.ascii	"frmnet_suspend\000"
	.space	1
	.type	__func__.56944, %object
	.size	__func__.56944, 11
__func__.56944:
	.ascii	"mbim_setup\000"
	.space	1
	.type	__func__.49928, %object
	.size	__func__.49928, 24
__func__.49928:
	.ascii	"rmnet_ctrl_queue_notify\000"
	.type	f_midi_cin_length, %object
	.size	f_midi_cin_length, 16
f_midi_cin_length:
	.byte	0
	.byte	0
	.byte	2
	.byte	3
	.byte	3
	.byte	1
	.byte	2
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	2
	.byte	2
	.byte	3
	.byte	1
	.type	__func__.39170, %object
	.size	__func__.39170, 16
__func__.39170:
	.ascii	"transport_store\000"
	.type	__func__.38162, %object
	.size	__func__.38162, 20
__func__.38162:
	.ascii	"rmnet_sdio_start_rx\000"
	.type	__func__.38385, %object
	.size	__func__.38385, 21
__func__.38385:
	.ascii	"rmnet_open_sdio_work\000"
	.space	3
	.type	__func__.49412, %object
	.size	__func__.49412, 19
__func__.49412:
	.ascii	"gbam_peer_reset_cb\000"
	.space	1
	.type	__func__.57602, %object
	.size	__func__.57602, 15
__func__.57602:
	.ascii	"rndis_qc_setup\000"
	.space	1
	.type	__func__.45840, %object
	.size	__func__.45840, 10
__func__.45840:
	.ascii	"fsg_setup\000"
	.space	2
	.type	__func__.62669, %object
	.size	__func__.62669, 26
__func__.62669:
	.ascii	"qdss_function_bind_config\000"
	.space	2
	.type	__func__.57025, %object
	.size	__func__.57025, 17
__func__.57025:
	.ascii	"mbim_bind_config\000"
	.space	3
	.type	__func__.56844, %object
	.size	__func__.56844, 15
__func__.56844:
	.ascii	"mbim_bam_setup\000"
	.space	1
	.type	debug_rmnet_sdio_stats_ops, %object
	.size	debug_rmnet_sdio_stats_ops, 104
debug_rmnet_sdio_stats_ops:
	.space	8
	.word	rmnet_sdio_read_stats
	.word	rmnet_sdio_reset_stats
	.space	28
	.word	debug_rmnet_sdio_open
	.space	56
	.type	__func__.40063, %object
	.size	__func__.40063, 14
__func__.40063:
	.ascii	"gps_init_port\000"
	.space	2
	.type	__func__.62492, %object
	.size	__func__.62492, 25
__func__.62492:
	.ascii	"gps_function_bind_config\000"
	.space	3
	.type	__func__.49840, %object
	.size	__func__.49840, 16
__func__.49840:
	.ascii	"gsmd_ctrl_setup\000"
	.type	__func__.40052, %object
	.size	__func__.40052, 16
__func__.40052:
	.ascii	"gps_bind_config\000"
	.type	rmnet_smd_debug_stats_ops, %object
	.size	rmnet_smd_debug_stats_ops, 104
rmnet_smd_debug_stats_ops:
	.space	8
	.word	rmnet_smd_debug_read_stats
	.word	rmnet_smd_debug_reset_stats
	.space	28
	.word	rmnet_smd_debug_open
	.space	56
	.type	__func__.53507, %object
	.size	__func__.53507, 16
__func__.53507:
	.ascii	"ccid_bulk_write\000"
	.type	ffs_epfile_operations, %object
	.size	ffs_epfile_operations, 104
ffs_epfile_operations:
	.word	0
	.word	no_llseek
	.word	ffs_epfile_read
	.word	ffs_epfile_write
	.space	16
	.word	ffs_epfile_ioctl
	.space	8
	.word	ffs_epfile_open
	.space	4
	.word	ffs_epfile_release
	.space	48
	.type	__func__.56931, %object
	.size	__func__.56931, 19
__func__.56931:
	.ascii	"fmbim_cmd_complete\000"
	.space	1
	.type	__func__.39341, %object
	.size	__func__.39341, 25
__func__.39341:
	.ascii	"usb_rmnet_mux_ctrl_write\000"
	.space	3
	.type	__func__.57072, %object
	.size	__func__.57072, 11
__func__.57072:
	.ascii	"mbim_write\000"
	.space	1
	.type	__func__.56836, %object
	.size	__func__.56836, 25
__func__.56836:
	.ascii	"fmbim_send_cpkt_response\000"
	.space	3
	.type	__func__.56826, %object
	.size	__func__.56826, 30
__func__.56826:
	.ascii	"fmbim_ctrl_response_available\000"
	.space	2
	.type	__func__.46281, %object
	.size	__func__.46281, 17
__func__.46281:
	.ascii	"handle_exception\000"
	.space	3
	.type	__func__.24836, %object
	.size	__func__.24836, 29
__func__.24836:
	.ascii	"usb_composite_setup_continue\000"
	.space	3
	.type	__func__.46211, %object
	.size	__func__.46211, 17
__func__.46211:
	.ascii	"get_next_command\000"
	.space	3
	.type	__func__.46102, %object
	.size	__func__.46102, 13
__func__.46102:
	.ascii	"finish_reply\000"
	.space	3
	.type	__func__.53477, %object
	.size	__func__.53477, 15
__func__.53477:
	.ascii	"ccid_bulk_read\000"
	.space	1
	.type	__func__.56114, %object
	.size	__func__.56114, 18
__func__.56114:
	.ascii	"gen_ndis_set_resp\000"
	.space	2
	.type	__func__.56194, %object
	.size	__func__.56194, 17
__func__.56194:
	.ascii	"rndis_msg_parser\000"
	.space	3
	.type	__func__.57581, %object
	.size	__func__.57581, 26
__func__.57581:
	.ascii	"rndis_qc_command_complete\000"
	.space	2
	.type	__func__.39976, %object
	.size	__func__.39976, 23
__func__.39976:
	.ascii	"gps_send_cpkt_response\000"
	.space	1
	.type	__func__.39702, %object
	.size	__func__.39702, 26
__func__.39702:
	.ascii	"frmnet_send_cpkt_response\000"
	.space	2
	.type	__func__.49691, %object
	.size	__func__.49691, 34
__func__.49691:
	.ascii	"grmnet_ctrl_smd_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.56661, %object
	.size	__func__.56661, 12
__func__.56661:
	.ascii	"ecm_qc_bind\000"
	.type	__func__.57011, %object
	.size	__func__.57011, 10
__func__.57011:
	.ascii	"mbim_bind\000"
	.space	2
	.type	__func__.61798, %object
	.size	__func__.61798, 13
__func__.61798:
	.ascii	"f_audio_bind\000"
	.space	3
	.type	__func__.53444, %object
	.size	__func__.53444, 19
__func__.53444:
	.ascii	"ccid_function_bind\000"
	.space	1
	.type	__func__.39775, %object
	.size	__func__.39775, 12
__func__.39775:
	.ascii	"frmnet_bind\000"
	.type	__func__.40041, %object
	.size	__func__.40041, 9
__func__.40041:
	.ascii	"gps_bind\000"
	.space	3
	.type	__func__.57653, %object
	.size	__func__.57653, 14
__func__.57653:
	.ascii	"rndis_qc_bind\000"
	.space	2
	.type	__func__.38396, %object
	.size	__func__.38396, 19
__func__.38396:
	.ascii	"rmnet_sdio_set_alt\000"
	.space	1
	.type	__func__.53420, %object
	.size	__func__.53420, 22
__func__.53420:
	.ascii	"ccid_function_set_alt\000"
	.space	2
	.type	__func__.39935, %object
	.size	__func__.39935, 12
__func__.39935:
	.ascii	"gps_set_alt\000"
	.type	__func__.49756, %object
	.size	__func__.49756, 18
__func__.49756:
	.ascii	"gsmd_ctrl_connect\000"
	.space	2
	.type	__func__.24565, %object
	.size	__func__.24565, 18
__func__.24565:
	.ascii	"usb_remove_config\000"
	.space	2
	.type	__func__.63283, %object
	.size	__func__.63283, 13
__func__.63283:
	.ascii	"enable_store\000"
	.space	3
	.type	__func__.53178, %object
	.size	__func__.53178, 12
__func__.53178:
	.ascii	"adb_release\000"
	.type	__func__.62372, %object
	.size	__func__.62372, 20
__func__.62372:
	.ascii	"adb_closed_callback\000"
	.type	__func__.62332, %object
	.size	__func__.62332, 27
__func__.62332:
	.ascii	"functionfs_closed_callback\000"
	.space	1
	.type	__func__.44892, %object
	.size	__func__.44892, 13
__func__.44892:
	.ascii	"ffs_data_put\000"
	.space	3
	.type	__func__.63600, %object
	.size	__func__.63600, 14
__func__.63600:
	.ascii	"android_probe\000"
	.space	2
	.type	__func__.26660, %object
	.size	__func__.26660, 14
__func__.26660:
	.ascii	"usb_diag_read\000"
	.space	2
	.type	__func__.26678, %object
	.size	__func__.26678, 15
__func__.26678:
	.ascii	"usb_diag_write\000"
	.space	1
	.type	__func__.62652, %object
	.size	__func__.62652, 26
__func__.62652:
	.ascii	"diag_function_bind_config\000"
	.space	2
	.type	gs_tty_ops, %object
	.size	gs_tty_ops, 124
gs_tty_ops:
	.space	12
	.word	gs_open
	.word	gs_close
	.space	8
	.word	gs_write
	.word	gs_put_char
	.word	gs_flush_chars
	.word	gs_write_room
	.word	gs_chars_in_buffer
	.space	16
	.word	gs_unthrottle
	.space	12
	.word	gs_break_ctl
	.space	16
	.word	gs_tiocmget
	.word	gs_tiocmset
	.space	16
	.type	__func__.47624, %object
	.size	__func__.47624, 14
__func__.47624:
	.ascii	"gserial_setup\000"
	.space	2
	.type	debug_adb_ops, %object
	.size	debug_adb_ops, 104
debug_adb_ops:
	.space	8
	.word	debug_read_status
	.space	32
	.word	serial_debug_open
	.space	56
	.type	debug_rst_ops, %object
	.size	debug_rst_ops, 104
debug_rst_ops:
	.space	12
	.word	debug_write_reset
	.space	28
	.word	serial_debug_open
	.space	56
	.type	__func__.48224, %object
	.size	__func__.48224, 16
__func__.48224:
	.ascii	"gsdio_alloc_req\000"
	.type	__func__.48576, %object
	.size	__func__.48576, 15
__func__.48576:
	.ascii	"gsmd_alloc_req\000"
	.space	1
	.type	__func__.48680, %object
	.size	__func__.48680, 14
__func__.48680:
	.ascii	"gsmd_start_io\000"
	.space	2
	.type	__func__.48256, %object
	.size	__func__.48256, 15
__func__.48256:
	.ascii	"gsdio_start_rx\000"
	.space	1
	.type	__func__.48283, %object
	.size	__func__.48283, 14
__func__.48283:
	.ascii	"gsdio_rx_push\000"
	.space	2
	.type	__func__.48354, %object
	.size	__func__.48354, 15
__func__.48354:
	.ascii	"gsdio_start_io\000"
	.space	1
	.type	__func__.48363, %object
	.size	__func__.48363, 16
__func__.48363:
	.ascii	"gsdio_port_free\000"
	.type	__func__.48437, %object
	.size	__func__.48437, 17
__func__.48437:
	.ascii	"gsdio_port_alloc\000"
	.space	3
	.type	__func__.48450, %object
	.size	__func__.48450, 14
__func__.48450:
	.ascii	"gsdio_connect\000"
	.space	2
	.type	__func__.48460, %object
	.size	__func__.48460, 17
__func__.48460:
	.ascii	"gsdio_disconnect\000"
	.space	3
	.type	__func__.48517, %object
	.size	__func__.48517, 12
__func__.48517:
	.ascii	"gsdio_setup\000"
	.type	debug_gsdio_ops, %object
	.size	debug_gsdio_ops, 104
debug_gsdio_ops:
	.space	8
	.word	debug_sdio_read_stats
	.word	debug_sdio_reset_stats
	.space	28
	.word	debug_sdio_open
	.space	56
	.type	__func__.48746, %object
	.size	__func__.48746, 13
__func__.48746:
	.ascii	"gsmd_connect\000"
	.space	3
	.type	__func__.48756, %object
	.size	__func__.48756, 16
__func__.48756:
	.ascii	"gsmd_disconnect\000"
	.type	__func__.52856, %object
	.size	__func__.52856, 20
__func__.52856:
	.ascii	"acm_port_disconnect\000"
	.type	__func__.52846, %object
	.size	__func__.52846, 17
__func__.52846:
	.ascii	"acm_port_connect\000"
	.space	3
	.type	__func__.48853, %object
	.size	__func__.48853, 11
__func__.48853:
	.ascii	"gsmd_setup\000"
	.space	1
	.type	debug_gsmd_ops, %object
	.size	debug_gsmd_ops, 104
debug_gsmd_ops:
	.space	8
	.word	debug_smd_read_stats
	.word	debug_smd_reset_stats
	.space	28
	.word	debug_smd_open
	.space	56
	.type	__func__.53007, %object
	.size	__func__.53007, 14
__func__.53007:
	.ascii	"acm_init_port\000"
	.space	2
	.type	__func__.62397, %object
	.size	__func__.62397, 25
__func__.62397:
	.ascii	"acm_function_bind_config\000"
	.space	3
	.type	__func__.49532, %object
	.size	__func__.49532, 16
__func__.49532:
	.ascii	"gbam_disconnect\000"
	.type	__func__.49547, %object
	.size	__func__.49547, 13
__func__.49547:
	.ascii	"gbam_connect\000"
	.space	3
	.type	__func__.49557, %object
	.size	__func__.49557, 11
__func__.49557:
	.ascii	"gbam_setup\000"
	.space	1
	.type	gbam_stats_ops, %object
	.size	gbam_stats_ops, 104
gbam_stats_ops:
	.space	8
	.word	gbam_read_stats
	.word	gbam_reset_stats
	.space	88
	.type	__func__.49777, %object
	.size	__func__.49777, 21
__func__.49777:
	.ascii	"gsmd_ctrl_disconnect\000"
	.space	3
	.type	ctrl_names, %object
	.size	ctrl_names, 24
ctrl_names:
	.word	.LC930
	.word	.LC551
	.word	.LC931
	.word	.LC551
	.space	8
	.type	__func__.49955, %object
	.size	__func__.49955, 18
__func__.49955:
	.ascii	"gqti_ctrl_connect\000"
	.space	2
	.type	__func__.49965, %object
	.size	__func__.49965, 21
__func__.49965:
	.ascii	"gqti_ctrl_disconnect\000"
	.space	3
	.type	__func__.50918, %object
	.size	__func__.50918, 19
__func__.50918:
	.ascii	"ghsic_ctrl_connect\000"
	.space	1
	.type	__func__.50936, %object
	.size	__func__.50936, 22
__func__.50936:
	.ascii	"ghsic_ctrl_disconnect\000"
	.space	2
	.type	__func__.50999, %object
	.size	__func__.50999, 25
__func__.50999:
	.ascii	"ghsic_ctrl_set_port_name\000"
	.space	3
	.type	__func__.51008, %object
	.size	__func__.51008, 17
__func__.51008:
	.ascii	"ghsic_ctrl_setup\000"
	.space	3
	.type	__func__.50990, %object
	.size	__func__.50990, 17
__func__.50990:
	.ascii	"gctrl_port_alloc\000"
	.space	3
	.type	__func__.51506, %object
	.size	__func__.51506, 22
__func__.51506:
	.ascii	"ghsic_data_disconnect\000"
	.space	2
	.type	__func__.51522, %object
	.size	__func__.51522, 19
__func__.51522:
	.ascii	"ghsic_data_connect\000"
	.space	1
	.type	__func__.51657, %object
	.size	__func__.51657, 25
__func__.51657:
	.ascii	"ghsic_data_set_port_name\000"
	.space	3
	.type	__func__.51666, %object
	.size	__func__.51666, 17
__func__.51666:
	.ascii	"ghsic_data_setup\000"
	.space	3
	.type	__func__.51493, %object
	.size	__func__.51493, 22
__func__.51493:
	.ascii	"ghsic_data_port_alloc\000"
	.space	2
	.type	__func__.51899, %object
	.size	__func__.51899, 21
__func__.51899:
	.ascii	"ghsuart_ctrl_connect\000"
	.space	3
	.type	__func__.51916, %object
	.size	__func__.51916, 24
__func__.51916:
	.ascii	"ghsuart_ctrl_disconnect\000"
	.type	__func__.51964, %object
	.size	__func__.51964, 19
__func__.51964:
	.ascii	"ghsuart_ctrl_setup\000"
	.space	1
	.type	__func__.51952, %object
	.size	__func__.51952, 24
__func__.51952:
	.ascii	"ghsuart_ctrl_port_alloc\000"
	.type	CSWTCH.2962, %object
	.size	CSWTCH.2962, 36
CSWTCH.2962:
	.word	.LC834
	.word	.LC835
	.word	.LC836
	.word	.LC837
	.word	.LC838
	.word	.LC839
	.word	.LC840
	.word	.LC841
	.word	.LC842
	.type	__func__.52429, %object
	.size	__func__.52429, 24
__func__.52429:
	.ascii	"ghsuart_data_disconnect\000"
	.type	__func__.39581, %object
	.size	__func__.39581, 23
__func__.39581:
	.ascii	"gport_rmnet_disconnect\000"
	.space	1
	.type	__func__.52638, %object
	.size	__func__.52638, 17
__func__.52638:
	.ascii	"gport_disconnect\000"
	.space	3
	.type	__func__.52448, %object
	.size	__func__.52448, 21
__func__.52448:
	.ascii	"ghsuart_data_connect\000"
	.space	3
	.type	__func__.52626, %object
	.size	__func__.52626, 14
__func__.52626:
	.ascii	"gport_connect\000"
	.space	2
	.type	__func__.39661, %object
	.size	__func__.39661, 15
__func__.39661:
	.ascii	"frmnet_set_alt\000"
	.space	1
	.type	__func__.39559, %object
	.size	__func__.39559, 20
__func__.39559:
	.ascii	"gport_rmnet_connect\000"
	.type	__func__.52530, %object
	.size	__func__.52530, 19
__func__.52530:
	.ascii	"ghsuart_data_setup\000"
	.space	1
	.type	ghsuart_data_names, %object
	.size	ghsuart_data_names, 8
ghsuart_data_names:
	.word	.LC927
	.word	.LC928
	.type	__func__.52414, %object
	.size	__func__.52414, 24
__func__.52414:
	.ascii	"ghsuart_data_port_alloc\000"
	.type	__func__.52797, %object
	.size	__func__.52797, 18
__func__.52797:
	.ascii	"gserial_init_port\000"
	.space	2
	.type	__func__.62711, %object
	.size	__func__.62711, 28
__func__.62711:
	.ascii	"serial_function_bind_config\000"
	.type	__func__.39808, %object
	.size	__func__.39808, 17
__func__.39808:
	.ascii	"frmnet_init_port\000"
	.space	3
	.type	__func__.62449, %object
	.size	__func__.62449, 27
__func__.62449:
	.ascii	"rmnet_function_bind_config\000"
	.space	1
	.type	__func__.39788, %object
	.size	__func__.39788, 19
__func__.39788:
	.ascii	"frmnet_bind_config\000"
	.space	1
	.type	rndis_proc_fops, %object
	.size	rndis_proc_fops, 104
rndis_proc_fops:
	.word	0
	.word	seq_lseek
	.word	seq_read
	.word	rndis_proc_write
	.space	28
	.word	rndis_proc_open
	.space	4
	.word	single_release
	.space	48
	.type	__func__.56550, %object
	.size	__func__.56550, 17
__func__.56550:
	.ascii	"ecm_qc_bam_setup\000"
	.space	3
	.type	__func__.56675, %object
	.size	__func__.56675, 19
__func__.56675:
	.ascii	"ecm_qc_bind_config\000"
	.space	1
	.type	__func__.56850, %object
	.size	__func__.56850, 22
__func__.56850:
	.ascii	"mbim_configure_params\000"
	.space	2
	.type	__func__.56994, %object
	.size	__func__.56994, 13
__func__.56994:
	.ascii	"mbim_disable\000"
	.space	3
	.type	__func__.56863, %object
	.size	__func__.56863, 20
__func__.56863:
	.ascii	"mbim_bam_disconnect\000"
	.type	__func__.57250, %object
	.size	__func__.57250, 17
__func__.57250:
	.ascii	"bam_data_connect\000"
	.space	3
	.type	__func__.56983, %object
	.size	__func__.56983, 13
__func__.56983:
	.ascii	"mbim_set_alt\000"
	.space	3
	.type	__func__.56859, %object
	.size	__func__.56859, 17
__func__.56859:
	.ascii	"mbim_bam_connect\000"
	.space	3
	.type	__func__.57527, %object
	.size	__func__.57527, 19
__func__.57527:
	.ascii	"rndis_qc_bam_setup\000"
	.space	1
	.type	__func__.57680, %object
	.size	__func__.57680, 28
__func__.57680:
	.ascii	"rndis_qc_bind_config_vendor\000"
	.type	eth_netdev_ops, %object
	.size	eth_netdev_ops, 136
eth_netdev_ops:
	.space	8
	.word	eth_open
	.word	eth_stop
	.word	eth_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_change_mtu
	.space	84
	.type	ops, %object
	.size	ops, 164
ops:
	.space	8
	.word	eth_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.62787, %object
	.size	__func__.62787, 27
__func__.62787:
	.ascii	"rndis_function_bind_config\000"
	.space	1
	.type	__func__.62895, %object
	.size	__func__.62895, 25
__func__.62895:
	.ascii	"ecm_function_bind_config\000"
	.space	3
	.type	__func__.62509, %object
	.size	__func__.62509, 25
__func__.62509:
	.ascii	"ncm_function_bind_config\000"
	.space	3
	.type	__func__.58077, %object
	.size	__func__.58077, 15
__func__.58077:
	.ascii	"gether_connect\000"
	.space	1
	.type	eth_qc_netdev_ops, %object
	.size	eth_qc_netdev_ops, 136
eth_qc_netdev_ops:
	.space	8
	.word	eth_qc_open
	.word	eth_qc_stop
	.word	eth_qc_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_qc_change_mtu
	.space	84
	.type	qc_ethtool_ops, %object
	.size	qc_ethtool_ops, 164
qc_ethtool_ops:
	.space	8
	.word	eth_qc_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.62794, %object
	.size	__func__.62794, 30
__func__.62794:
	.ascii	"rndis_qc_function_bind_config\000"
	.space	2
	.type	__func__.62549, %object
	.size	__func__.62549, 28
__func__.62549:
	.ascii	"ecm_qc_function_bind_config\000"
	.type	__func__.56560, %object
	.size	__func__.56560, 19
__func__.56560:
	.ascii	"ecm_qc_bam_connect\000"
	.space	1
	.type	__func__.57621, %object
	.size	__func__.57621, 17
__func__.57621:
	.ascii	"rndis_qc_disable\000"
	.space	3
	.type	__func__.57536, %object
	.size	__func__.57536, 21
__func__.57536:
	.ascii	"rndis_qc_bam_connect\000"
	.space	3
	.type	__func__.61345, %object
	.size	__func__.61345, 20
__func__.61345:
	.ascii	"gaudio_open_snd_dev\000"
	.type	__func__.61356, %object
	.size	__func__.61356, 13
__func__.61356:
	.ascii	"gaudio_setup\000"
	.space	3
	.type	__func__.61827, %object
	.size	__func__.61827, 18
__func__.61827:
	.ascii	"audio_bind_config\000"
	.space	2
	.type	__param_str_audio_capture_buf_size, %object
	.size	__param_str_audio_capture_buf_size, 31
__param_str_audio_capture_buf_size:
	.ascii	"android.audio_capture_buf_size\000"
	.space	1
	.type	__param_str_req_capture_count, %object
	.size	__param_str_req_capture_count, 26
__param_str_req_capture_count:
	.ascii	"android.req_capture_count\000"
	.space	2
	.type	__param_str_req_capture_buf_size, %object
	.size	__param_str_req_capture_buf_size, 29
__param_str_req_capture_buf_size:
	.ascii	"android.req_capture_buf_size\000"
	.space	3
	.type	__param_str_audio_playback_buf_size, %object
	.size	__param_str_audio_playback_buf_size, 32
__param_str_audio_playback_buf_size:
	.ascii	"android.audio_playback_buf_size\000"
	.type	__param_str_req_playback_count, %object
	.size	__param_str_req_playback_count, 27
__param_str_req_playback_count:
	.ascii	"android.req_playback_count\000"
	.space	1
	.type	__param_str_req_playback_buf_size, %object
	.size	__param_str_req_playback_buf_size, 30
__param_str_req_playback_buf_size:
	.ascii	"android.req_playback_buf_size\000"
	.space	2
	.type	__param_str_fn_cntl, %object
	.size	__param_str_fn_cntl, 16
__param_str_fn_cntl:
	.ascii	"android.fn_cntl\000"
	.type	__param_str_fn_cap, %object
	.size	__param_str_fn_cap, 15
__param_str_fn_cap:
	.ascii	"android.fn_cap\000"
	.space	1
	.type	__param_str_fn_play, %object
	.size	__param_str_fn_play, 16
__param_str_fn_play:
	.ascii	"android.fn_play\000"
	.type	__param_str_qc_host_addr, %object
	.size	__param_str_qc_host_addr, 21
__param_str_qc_host_addr:
	.ascii	"android.qc_host_addr\000"
	.space	3
	.type	__param_str_qc_dev_addr, %object
	.size	__param_str_qc_dev_addr, 20
__param_str_qc_dev_addr:
	.ascii	"android.qc_dev_addr\000"
	.type	__param_str_host_addr, %object
	.size	__param_str_host_addr, 18
__param_str_host_addr:
	.ascii	"android.host_addr\000"
	.space	2
	.type	__param_str_dev_addr, %object
	.size	__param_str_dev_addr, 17
__param_str_dev_addr:
	.ascii	"android.dev_addr\000"
	.space	3
	.type	__param_str_qmult, %object
	.size	__param_str_qmult, 14
__param_str_qmult:
	.ascii	"android.qmult\000"
	.space	2
	.type	rndis_qc_fops, %object
	.size	rndis_qc_fops, 104
rndis_qc_fops:
	.word	0
	.space	28
	.word	rndis_qc_ioctl
	.space	8
	.word	rndis_qc_open_dev
	.space	4
	.word	rndis_qc_release_dev
	.space	48
	.type	mbim_fops, %object
	.size	mbim_fops, 104
mbim_fops:
	.word	0
	.space	4
	.word	mbim_read
	.word	mbim_write
	.space	16
	.word	mbim_ioctl
	.space	8
	.word	mbim_open
	.space	4
	.word	mbim_release
	.space	48
	.type	__param_str_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_str_rndis_ul_max_xfer_size_rcvd, 36
__param_str_rndis_ul_max_xfer_size_rcvd:
	.ascii	"android.rndis_ul_max_xfer_size_rcvd\000"
	.type	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, 39
__param_str_rndis_ul_max_pkt_per_xfer_rcvd:
	.ascii	"android.rndis_ul_max_pkt_per_xfer_rcvd\000"
	.space	1
	.type	__param_str_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer, 34
__param_str_rndis_ul_max_pkt_per_xfer:
	.ascii	"android.rndis_ul_max_pkt_per_xfer\000"
	.space	2
	.type	__param_str_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_str_rndis_dl_max_pkt_per_xfer, 34
__param_str_rndis_dl_max_pkt_per_xfer:
	.ascii	"android.rndis_dl_max_pkt_per_xfer\000"
	.space	2
	.type	acc_hid_table, %object
	.size	acc_hid_table, 32
acc_hid_table:
	.short	3
	.space	2
	.word	-1
	.word	-1
	.space	4
	.space	16
	.type	acc_fops, %object
	.size	acc_fops, 104
acc_fops:
	.word	0
	.space	4
	.word	acc_read
	.word	acc_write
	.space	16
	.word	acc_ioctl
	.space	8
	.word	acc_open
	.space	4
	.word	acc_release
	.space	48
	.type	mtp_fops, %object
	.size	mtp_fops, 104
mtp_fops:
	.word	0
	.space	4
	.word	mtp_read
	.word	mtp_write
	.space	16
	.word	mtp_ioctl
	.space	8
	.word	mtp_open
	.space	4
	.word	mtp_release
	.space	48
	.type	mtp_shortname, %object
	.size	mtp_shortname, 8
mtp_shortname:
	.ascii	"mtp_usb\000"
	.type	__param_str_mtp_tx_reqs, %object
	.size	__param_str_mtp_tx_reqs, 20
__param_str_mtp_tx_reqs:
	.ascii	"android.mtp_tx_reqs\000"
	.type	__param_str_mtp_tx_req_len, %object
	.size	__param_str_mtp_tx_req_len, 23
__param_str_mtp_tx_req_len:
	.ascii	"android.mtp_tx_req_len\000"
	.space	1
	.type	__param_str_mtp_rx_req_len, %object
	.size	__param_str_mtp_rx_req_len, 23
__param_str_mtp_rx_req_len:
	.ascii	"android.mtp_rx_req_len\000"
	.space	1
	.type	ccid_ctrl_fops, %object
	.size	ccid_ctrl_fops, 104
ccid_ctrl_fops:
	.word	0
	.space	4
	.word	ccid_ctrl_read
	.space	20
	.word	ccid_ctrl_ioctl
	.space	8
	.word	ccid_ctrl_open
	.space	4
	.word	ccid_ctrl_release
	.space	48
	.type	ccid_bulk_fops, %object
	.size	ccid_bulk_fops, 104
ccid_bulk_fops:
	.word	0
	.space	4
	.word	ccid_bulk_read
	.word	ccid_bulk_write
	.space	28
	.word	ccid_bulk_open
	.space	4
	.word	ccid_bulk_release
	.space	48
	.type	adb_fops, %object
	.size	adb_fops, 104
adb_fops:
	.word	0
	.space	4
	.word	adb_read
	.word	adb_write
	.space	28
	.word	adb_open
	.space	4
	.word	adb_release
	.space	48
	.type	adb_shortname, %object
	.size	adb_shortname, 12
adb_shortname:
	.ascii	"android_adb\000"
	.type	__param_str_ghsuart_data_tx_intr_thld, %object
	.size	__param_str_ghsuart_data_tx_intr_thld, 34
__param_str_ghsuart_data_tx_intr_thld:
	.ascii	"android.ghsuart_data_tx_intr_thld\000"
	.space	2
	.type	__param_str_ghsuart_data_rx_req_size, %object
	.size	__param_str_ghsuart_data_rx_req_size, 33
__param_str_ghsuart_data_rx_req_size:
	.ascii	"android.ghsuart_data_rx_req_size\000"
	.space	3
	.type	__param_str_ghsuart_data_serial_rx_q_size, %object
	.size	__param_str_ghsuart_data_serial_rx_q_size, 38
__param_str_ghsuart_data_serial_rx_q_size:
	.ascii	"android.ghsuart_data_serial_rx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_serial_tx_q_size, %object
	.size	__param_str_ghsuart_data_serial_tx_q_size, 38
__param_str_ghsuart_data_serial_tx_q_size:
	.ascii	"android.ghsuart_data_serial_tx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_rx_q_size, 37
__param_str_ghsuart_data_rmnet_rx_q_size:
	.ascii	"android.ghsuart_data_rmnet_rx_q_size\000"
	.space	3
	.type	__param_str_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_tx_q_size, 37
__param_str_ghsuart_data_rmnet_tx_q_size:
	.ascii	"android.ghsuart_data_rmnet_tx_q_size\000"
	.space	3
	.type	__param_str_record_timestamp, %object
	.size	__param_str_record_timestamp, 25
__param_str_record_timestamp:
	.ascii	"android.record_timestamp\000"
	.space	3
	.type	__param_str_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_str_ghsic_data_pend_limit_with_bridge, 42
__param_str_ghsic_data_pend_limit_with_bridge:
	.ascii	"android.ghsic_data_pend_limit_with_bridge\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_dis_thld, %object
	.size	__param_str_ghsic_data_fctrl_dis_thld, 34
__param_str_ghsic_data_fctrl_dis_thld:
	.ascii	"android.ghsic_data_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_en_thld, %object
	.size	__param_str_ghsic_data_fctrl_en_thld, 33
__param_str_ghsic_data_fctrl_en_thld:
	.ascii	"android.ghsic_data_fctrl_en_thld\000"
	.space	3
	.type	__param_str_ghsic_data_fctrl_support, %object
	.size	__param_str_ghsic_data_fctrl_support, 33
__param_str_ghsic_data_fctrl_support:
	.ascii	"android.ghsic_data_fctrl_support\000"
	.space	3
	.type	__param_str_ghsic_data_tx_intr_thld, %object
	.size	__param_str_ghsic_data_tx_intr_thld, 32
__param_str_ghsic_data_tx_intr_thld:
	.ascii	"android.ghsic_data_tx_intr_thld\000"
	.type	__param_str_ghsic_data_rx_req_size, %object
	.size	__param_str_ghsic_data_rx_req_size, 31
__param_str_ghsic_data_rx_req_size:
	.ascii	"android.ghsic_data_rx_req_size\000"
	.space	1
	.type	__param_str_ghsic_data_serial_rx_q_size, %object
	.size	__param_str_ghsic_data_serial_rx_q_size, 36
__param_str_ghsic_data_serial_rx_q_size:
	.ascii	"android.ghsic_data_serial_rx_q_size\000"
	.type	__param_str_ghsic_data_serial_tx_q_size, %object
	.size	__param_str_ghsic_data_serial_tx_q_size, 36
__param_str_ghsic_data_serial_tx_q_size:
	.ascii	"android.ghsic_data_serial_tx_q_size\000"
	.type	__param_str_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_rx_q_size, 35
__param_str_ghsic_data_rmnet_rx_q_size:
	.ascii	"android.ghsic_data_rmnet_rx_q_size\000"
	.space	1
	.type	__param_str_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_tx_q_size, 35
__param_str_ghsic_data_rmnet_tx_q_size:
	.ascii	"android.ghsic_data_rmnet_tx_q_size\000"
	.space	1
	.type	rmnet_ctrl_fops, %object
	.size	rmnet_ctrl_fops, 104
rmnet_ctrl_fops:
	.word	0
	.space	4
	.word	rmnet_ctrl_read
	.word	rmnet_ctrl_write
	.space	12
	.word	rmnet_ctrl_poll
	.word	rmnet_ctrl_ioctl
	.space	8
	.word	rmnet_ctrl_open
	.space	4
	.word	rmnet_ctrl_release
	.space	48
	.type	__param_str_dl_intr_threshold, %object
	.size	__param_str_dl_intr_threshold, 26
__param_str_dl_intr_threshold:
	.ascii	"android.dl_intr_threshold\000"
	.space	2
	.type	__param_str_bam_mux_rx_req_size, %object
	.size	__param_str_bam_mux_rx_req_size, 28
__param_str_bam_mux_rx_req_size:
	.ascii	"android.bam_mux_rx_req_size\000"
	.type	__param_str_bam_mux_rx_q_size, %object
	.size	__param_str_bam_mux_rx_q_size, 26
__param_str_bam_mux_rx_q_size:
	.ascii	"android.bam_mux_rx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_tx_q_size, %object
	.size	__param_str_bam_mux_tx_q_size, 26
__param_str_bam_mux_tx_q_size:
	.ascii	"android.bam_mux_tx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_dis_thld, 34
__param_str_bam_mux_rx_fctrl_dis_thld:
	.ascii	"android.bam_mux_rx_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_support, %object
	.size	__param_str_bam_mux_rx_fctrl_support, 33
__param_str_bam_mux_rx_fctrl_support:
	.ascii	"android.bam_mux_rx_fctrl_support\000"
	.space	3
	.type	__param_str_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_en_thld, 33
__param_str_bam_mux_rx_fctrl_en_thld:
	.ascii	"android.bam_mux_rx_fctrl_en_thld\000"
	.space	3
	.type	__param_str_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_str_bam_mux_tx_pkt_drop_thld, 33
__param_str_bam_mux_tx_pkt_drop_thld:
	.ascii	"android.bam_mux_tx_pkt_drop_thld\000"
	.space	3
	.type	__param_str_bam_pending_limit, %object
	.size	__param_str_bam_pending_limit, 26
__param_str_bam_pending_limit:
	.ascii	"android.bam_pending_limit\000"
	.space	2
	.type	fsg_string_interface, %object
	.size	fsg_string_interface, 13
fsg_string_interface:
	.ascii	"Mass Storage\000"
	.space	3
	.type	rmnet_mux_ctrl_fops, %object
	.size	rmnet_mux_ctrl_fops, 104
rmnet_mux_ctrl_fops:
	.word	0
	.space	4
	.word	usb_rmnet_mux_ctrl_read
	.word	usb_rmnet_mux_ctrl_write
	.space	16
	.word	usb_rmnet_mux_ctrl_ioctl
	.space	8
	.word	usb_rmnet_mux_ctrl_open
	.space	4
	.word	usb_rmnet_mux_ctrl_release
	.space	48
	.type	__param_str_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_dis_thld, 35
__param_str_mux_sdio_rx_fctrl_dis_thld:
	.ascii	"android.mux_sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_en_thld, 34
__param_str_mux_sdio_rx_fctrl_en_thld:
	.ascii	"android.mux_sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_mux_sdio_tx_pkt_drop_thld, 34
__param_str_mux_sdio_tx_pkt_drop_thld:
	.ascii	"android.mux_sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_mux_smd_data_ch, %object
	.size	__param_str_rmnet_mux_smd_data_ch, 30
__param_str_rmnet_mux_smd_data_ch:
	.ascii	"android.rmnet_mux_smd_data_ch\000"
	.space	2
	.type	__param_str_rmnet_mux_sdio_data_ch, %object
	.size	__param_str_rmnet_mux_sdio_data_ch, 31
__param_str_rmnet_mux_sdio_data_ch:
	.ascii	"android.rmnet_mux_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_str_rmnet_mux_sdio_ctl_ch, 30
__param_str_rmnet_mux_sdio_ctl_ch:
	.ascii	"android.rmnet_mux_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_sdio_rx_fctrl_dis_thld, 31
__param_str_sdio_rx_fctrl_dis_thld:
	.ascii	"android.sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_sdio_rx_fctrl_en_thld, 30
__param_str_sdio_rx_fctrl_en_thld:
	.ascii	"android.sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_sdio_tx_pkt_drop_thld, 30
__param_str_sdio_tx_pkt_drop_thld:
	.ascii	"android.sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_sdio_data_ch, %object
	.size	__param_str_rmnet_sdio_data_ch, 27
__param_str_rmnet_sdio_data_ch:
	.ascii	"android.rmnet_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_sdio_ctl_ch, %object
	.size	__param_str_rmnet_sdio_ctl_ch, 26
__param_str_rmnet_sdio_ctl_ch:
	.ascii	"android.rmnet_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_rmnet_data_ch, %object
	.size	__param_str_rmnet_data_ch, 22
__param_str_rmnet_data_ch:
	.ascii	"android.rmnet_data_ch\000"
	.space	2
	.type	__param_str_rmnet_ctl_ch, %object
	.size	__param_str_rmnet_ctl_ch, 21
__param_str_rmnet_ctl_ch:
	.ascii	"android.rmnet_ctl_ch\000"
	.space	3
	.type	__param_str_iSerialNumber, %object
	.size	__param_str_iSerialNumber, 22
__param_str_iSerialNumber:
	.ascii	"android.iSerialNumber\000"
	.space	2
	.type	__param_str_iProduct, %object
	.size	__param_str_iProduct, 17
__param_str_iProduct:
	.ascii	"android.iProduct\000"
	.space	3
	.type	__param_str_iManufacturer, %object
	.size	__param_str_iManufacturer, 22
__param_str_iManufacturer:
	.ascii	"android.iManufacturer\000"
	.space	2
	.type	__param_str_bcdDevice, %object
	.size	__param_str_bcdDevice, 18
__param_str_bcdDevice:
	.ascii	"android.bcdDevice\000"
	.space	2
	.type	__param_str_idProduct, %object
	.size	__param_str_idProduct, 18
__param_str_idProduct:
	.ascii	"android.idProduct\000"
	.space	2
	.type	__param_str_idVendor, %object
	.size	__param_str_idVendor, 17
__param_str_idVendor:
	.ascii	"android.idVendor\000"
	.data
	.align	3
	.set	.LANCHOR0,. + 0
	.set	.LANCHOR5,. + 8184
	.type	usb_diag_ch_list, %object
	.size	usb_diag_ch_list, 8
usb_diag_ch_list:
	.word	usb_diag_ch_list
	.word	usb_diag_ch_list
	.type	uac1_ac_header_desc, %object
	.size	uac1_ac_header_desc, 10
uac1_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	52
	.byte	2
	.space	2
	.space	2
	.type	ntb_parameters, %object
	.size	ntb_parameters, 28
ntb_parameters:
	.short	28
	.short	3
	.word	2048
	.short	4
	.short	0
	.short	4
	.space	2
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.type	ndp16_opts, %object
	.size	ndp16_opts, 44
ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	ndp32_opts, %object
	.size	ndp32_opts, 44
ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mbim_ntb_parameters, %object
	.size	mbim_ntb_parameters, 28
mbim_ntb_parameters:
	.short	28
	.short	1
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	4096
	.short	4
	.short	0
	.short	4
	.short	0
	.type	mbim_ext_config_desc, %object
	.size	mbim_ext_config_desc, 40
mbim_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	65
	.byte	76
	.byte	84
	.byte	82
	.byte	67
	.byte	70
	.byte	71
	.space	1
	.space	14
	.type	mbim_os_string, %object
	.size	mbim_os_string, 18
mbim_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	-91
	.byte	0
	.space	2
	.type	device_desc, %object
	.size	device_desc, 18
device_desc:
	.byte	18
	.byte	1
	.short	512
	.byte	0
	.space	3
	.short	6353
	.short	1
	.short	-1
	.space	3
	.byte	1
	.space	2
	.type	ops.26118, %object
	.size	ops.26118, 12
ops.26118:
	.word	f_midi_snd_free
	.space	8
	.type	gmidi_in_ops, %object
	.size	gmidi_in_ops, 16
gmidi_in_ops:
	.word	f_midi_in_open
	.word	f_midi_in_close
	.word	f_midi_in_trigger
	.space	4
	.type	gmidi_out_ops, %object
	.size	gmidi_out_ops, 16
gmidi_out_ops:
	.word	f_midi_out_open
	.word	f_midi_out_close
	.word	f_midi_out_trigger
	.space	4
	.type	_rs.51875, %object
	.size	_rs.51875, 24
_rs.51875:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	usb_qdss_ch_list, %object
	.size	usb_qdss_ch_list, 8
usb_qdss_ch_list:
	.word	usb_qdss_ch_list
	.word	usb_qdss_ch_list
	.type	android_platform_driver, %object
	.size	android_platform_driver, 80
android_platform_driver:
	.word	android_probe
	.word	android_remove
	.space	12
	.word	.LC675
	.space	16
	.word	usb_android_dt_match
	.space	32
	.word	android_id_table
	.type	rmnet_ctl_ch, %object
	.size	rmnet_ctl_ch, 4
rmnet_ctl_ch:
	.word	.LC502
	.type	rmnet_data_ch, %object
	.size	rmnet_data_ch, 4
rmnet_data_ch:
	.word	.LC502
	.type	mtp_os_string, %object
	.size	mtp_os_string, 18
mtp_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	1
	.byte	0
	.space	2
	.type	mtp_ext_config_desc, %object
	.size	mtp_ext_config_desc, 40
mtp_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	77
	.byte	84
	.byte	80
	.space	5
	.space	14
	.type	ccid_class_desc, %object
	.size	ccid_class_desc, 54
ccid_class_desc:
	.byte	54
	.byte	33
	.short	272
	.byte	0
	.byte	2
	.4byte	1
	.4byte	3580
	.4byte	3580
	.byte	0
	.4byte	9600
	.4byte	9600
	.byte	0
	.word	0
	.word	0
	.word	0
	.word	131198
	.word	512
	.byte	0
	.byte	0
	.short	0
	.byte	0
	.byte	1
	.space	2
	.type	_rs.39021, %object
	.size	_rs.39021, 24
_rs.39021:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	dl_intr_threshold, %object
	.size	dl_intr_threshold, 4
dl_intr_threshold:
	.word	20
	.type	ghsic_data_fctrl_support, %object
	.size	ghsic_data_fctrl_support, 4
ghsic_data_fctrl_support:
	.word	1
	.type	ghsic_data_fctrl_en_thld, %object
	.size	ghsic_data_fctrl_en_thld, 4
ghsic_data_fctrl_en_thld:
	.word	500
	.type	qmult, %object
	.size	qmult, 4
qmult:
	.word	10
	.type	mux_sdio_rx_fctrl_en_thld, %object
	.size	mux_sdio_rx_fctrl_en_thld, 4
mux_sdio_rx_fctrl_en_thld:
	.word	1000
	.type	bam_mux_rx_fctrl_support, %object
	.size	bam_mux_rx_fctrl_support, 4
bam_mux_rx_fctrl_support:
	.word	1
	.type	bam_mux_rx_fctrl_en_thld, %object
	.size	bam_mux_rx_fctrl_en_thld, 4
bam_mux_rx_fctrl_en_thld:
	.word	500
	.type	bam_mux_rx_req_size, %object
	.size	bam_mux_rx_req_size, 4
bam_mux_rx_req_size:
	.word	2048
	.type	mtp_rx_req_len, %object
	.size	mtp_rx_req_len, 4
mtp_rx_req_len:
	.word	16384
	.type	bam_pending_limit, %object
	.size	bam_pending_limit, 4
bam_pending_limit:
	.word	220
	.type	bam_mux_rx_fctrl_dis_thld, %object
	.size	bam_mux_rx_fctrl_dis_thld, 4
bam_mux_rx_fctrl_dis_thld:
	.word	300
	.type	bam_mux_rx_q_size, %object
	.size	bam_mux_rx_q_size, 4
bam_mux_rx_q_size:
	.word	16
	.type	bam_mux_tx_q_size, %object
	.size	bam_mux_tx_q_size, 4
bam_mux_tx_q_size:
	.word	200
	.type	rmnet_device, %object
	.size	rmnet_device, 36
rmnet_device:
	.word	255
	.word	.LC929
	.word	rmnet_ctrl_fops
	.space	24
	.type	acc_device, %object
	.size	acc_device, 36
acc_device:
	.word	255
	.word	.LC918
	.word	acc_fops
	.space	24
	.type	rndis_qc_device, %object
	.size	rndis_qc_device, 36
rndis_qc_device:
	.word	255
	.word	.LC907
	.word	rndis_qc_fops
	.space	24
	.type	mtp_device, %object
	.size	mtp_device, 36
mtp_device:
	.word	255
	.word	mtp_shortname
	.word	mtp_fops
	.space	24
	.type	adb_device, %object
	.size	adb_device, 36
adb_device:
	.word	255
	.word	adb_shortname
	.word	adb_fops
	.space	24
	.type	rmnet_mux_ctrl_dev, %object
	.size	rmnet_mux_ctrl_dev, 36
rmnet_mux_ctrl_dev:
	.word	255
	.word	.LC943
	.word	rmnet_mux_ctrl_fops
	.space	24
	.type	ccid_bulk_device, %object
	.size	ccid_bulk_device, 36
ccid_bulk_device:
	.word	255
	.word	.LC922
	.word	ccid_bulk_fops
	.space	24
	.type	ccid_ctrl_device, %object
	.size	ccid_ctrl_device, 36
ccid_ctrl_device:
	.word	255
	.word	.LC921
	.word	ccid_ctrl_fops
	.space	24
	.type	mbim_device, %object
	.size	mbim_device, 36
mbim_device:
	.word	255
	.word	.LC914
	.word	mbim_fops
	.space	24
	.type	strings_dev, %object
	.size	strings_dev, 32
strings_dev:
	.space	4
	.word	manufacturer_string
	.space	4
	.word	product_string
	.space	4
	.word	serial_string
	.space	8
	.type	last_vote.62221, %object
	.size	last_vote.62221, 4
last_vote.62221:
	.word	-1
	.type	acc_hid_ll_driver, %object
	.size	acc_hid_ll_driver, 28
acc_hid_ll_driver:
	.word	acc_hid_start
	.word	acc_hid_stop
	.word	acc_hid_open
	.word	acc_hid_close
	.space	8
	.word	acc_hid_parse
	.type	ffs_fs_type, %object
	.size	ffs_fs_type, 36
ffs_fs_type:
	.word	.LC940
	.space	4
	.word	ffs_fs_mount
	.space	8
	.word	ffs_fs_kill_sb
	.word	0
	.space	8
	.type	req_capture_buf_size, %object
	.size	req_capture_buf_size, 4
req_capture_buf_size:
	.word	32
	.type	audio_playback_buf_size, %object
	.size	audio_playback_buf_size, 4
audio_playback_buf_size:
	.word	8192
	.type	req_playback_count, %object
	.size	req_playback_count, 4
req_playback_count:
	.word	48
	.type	req_playback_buf_size, %object
	.size	req_playback_buf_size, 4
req_playback_buf_size:
	.word	32
	.type	composite_driver, %object
	.size	composite_driver, 88
composite_driver:
	.space	8
	.word	composite_unbind
	.word	composite_setup
	.word	composite_disconnect
	.word	composite_suspend
	.word	composite_resume
	.space	8
	.word	0
	.space	44
	.space	4
	.type	_rs.52213, %object
	.size	_rs.52213, 24
_rs.52213:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ghsuart_data_rx_req_size, %object
	.size	ghsuart_data_rx_req_size, 4
ghsuart_data_rx_req_size:
	.word	2048
	.type	_rs.52264, %object
	.size	_rs.52264, 24
_rs.52264:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ghsuart_data_tx_intr_thld, %object
	.size	ghsuart_data_tx_intr_thld, 4
ghsuart_data_tx_intr_thld:
	.word	1
	.type	ghid_device_android_keyboard, %object
	.size	ghid_device_android_keyboard, 69
ghid_device_android_keyboard:
	.byte	1
	.byte	1
	.short	8
	.short	63
	.byte	5
	.byte	1
	.byte	9
	.byte	6
	.byte	-95
	.byte	1
	.byte	5
	.byte	7
	.byte	25
	.byte	-32
	.byte	41
	.byte	-25
	.byte	21
	.byte	0
	.byte	37
	.byte	1
	.byte	117
	.byte	1
	.byte	-107
	.byte	8
	.byte	-127
	.byte	2
	.byte	-107
	.byte	1
	.byte	117
	.byte	8
	.byte	-127
	.byte	3
	.byte	-107
	.byte	5
	.byte	117
	.byte	1
	.byte	5
	.byte	8
	.byte	25
	.byte	1
	.byte	41
	.byte	5
	.byte	-111
	.byte	2
	.byte	-107
	.byte	1
	.byte	117
	.byte	3
	.byte	-111
	.byte	3
	.byte	-107
	.byte	6
	.byte	117
	.byte	8
	.byte	21
	.byte	0
	.byte	37
	.byte	101
	.byte	5
	.byte	7
	.byte	25
	.byte	0
	.byte	41
	.byte	101
	.byte	-127
	.byte	0
	.byte	-64
	.space	3
	.type	ghid_device_android_mouse, %object
	.size	ghid_device_android_mouse, 58
ghid_device_android_mouse:
	.byte	1
	.byte	2
	.short	4
	.short	52
	.byte	5
	.byte	1
	.byte	9
	.byte	2
	.byte	-95
	.byte	1
	.byte	9
	.byte	1
	.byte	-95
	.byte	0
	.byte	5
	.byte	9
	.byte	25
	.byte	1
	.byte	41
	.byte	5
	.byte	21
	.byte	0
	.byte	37
	.byte	1
	.byte	-107
	.byte	5
	.byte	117
	.byte	1
	.byte	-127
	.byte	2
	.byte	-107
	.byte	1
	.byte	117
	.byte	3
	.byte	-127
	.byte	1
	.byte	5
	.byte	1
	.byte	9
	.byte	48
	.byte	9
	.byte	49
	.byte	9
	.byte	56
	.byte	21
	.byte	-127
	.byte	37
	.byte	127
	.byte	117
	.byte	8
	.byte	-107
	.byte	3
	.byte	-127
	.byte	6
	.byte	-64
	.byte	-64
	.space	2
	.type	bam_mux_tx_pkt_drop_thld, %object
	.size	bam_mux_tx_pkt_drop_thld, 4
bam_mux_tx_pkt_drop_thld:
	.word	1000
	.type	audio_capture_buf_size, %object
	.size	audio_capture_buf_size, 4
audio_capture_buf_size:
	.word	8192
	.type	sdio_rx_fctrl_en_thld, %object
	.size	sdio_rx_fctrl_en_thld, 4
sdio_rx_fctrl_en_thld:
	.word	1000
	.type	rl.53169, %object
	.size	rl.53169, 24
rl.53169:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	adb_function, %object
	.size	adb_function, 52
adb_function:
	.word	.LC521
	.space	20
	.word	adb_function_init
	.word	adb_function_cleanup
	.word	adb_android_function_enable
	.word	adb_android_function_disable
	.word	adb_function_bind_config
	.space	8
	.type	ecm_qc_string_defs, %object
	.size	ecm_qc_string_defs, 32
ecm_qc_string_defs:
	.space	4
	.word	.LC911
	.space	4
	.word	0
	.space	4
	.word	.LC912
	.space	8
	.type	ghsic_data_tx_intr_thld, %object
	.size	ghsic_data_tx_intr_thld, 4
ghsic_data_tx_intr_thld:
	.word	20
	.type	ghsic_data_fctrl_dis_thld, %object
	.size	ghsic_data_fctrl_dis_thld, 4
ghsic_data_fctrl_dis_thld:
	.word	300
	.type	android_usb_attributes, %object
	.size	android_usb_attributes, 60
android_usb_attributes:
	.word	dev_attr_idVendor
	.word	dev_attr_idProduct
	.word	dev_attr_bcdDevice
	.word	dev_attr_bDeviceClass
	.word	dev_attr_bDeviceSubClass
	.word	dev_attr_bDeviceProtocol
	.word	dev_attr_iManufacturer
	.word	dev_attr_iProduct
	.word	dev_attr_iSerial
	.word	dev_attr_functions
	.word	dev_attr_enable
	.word	dev_attr_pm_qos
	.word	dev_attr_state
	.word	dev_attr_remote_wakeup
	.word	0
	.type	android_usb_driver, %object
	.size	android_usb_driver, 44
android_usb_driver:
	.word	.LC675
	.space	8
	.word	device_desc
	.word	dev_strings
	.word	5
	.space	4
	.word	android_usb_unbind
	.space	12
	.type	dev_attr_suspended, %object
	.size	dev_attr_suspended, 16
dev_attr_suspended:
	.word	.LC949
	.short	292
	.space	2
	.word	composite_show_suspended
	.word	0
	.type	_rs.51347, %object
	.size	_rs.51347, 24
_rs.51347:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ghsic_data_pend_limit_with_bridge, %object
	.size	ghsic_data_pend_limit_with_bridge, 4
ghsic_data_pend_limit_with_bridge:
	.word	500
	.type	ghsic_data_rx_req_size, %object
	.size	ghsic_data_rx_req_size, 4
ghsic_data_rx_req_size:
	.word	2048
	.type	_rs.51404, %object
	.size	_rs.51404, 24
_rs.51404:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ncm_string_defs, %object
	.size	ncm_string_defs, 40
ncm_string_defs:
	.space	4
	.word	.LC890
	.space	4
	.word	0
	.space	4
	.word	.LC891
	.space	4
	.word	.LC892
	.space	8
	.type	ecm_string_defs, %object
	.size	ecm_string_defs, 40
ecm_string_defs:
	.space	4
	.word	.LC911
	.space	4
	.word	0
	.space	4
	.word	.LC912
	.space	4
	.word	.LC913
	.space	8
	.type	mbim_ndp16_opts, %object
	.size	mbim_ndp16_opts, 44
mbim_ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	mbim_ndp32_opts, %object
	.size	mbim_ndp32_opts, 44
mbim_ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	acc_hid_driver, %object
	.size	acc_hid_driver, 132
acc_hid_driver:
	.word	.LC917
	.word	acc_hid_table
	.space	12
	.word	acc_hid_probe
	.space	108
	.type	mtp_tx_req_len, %object
	.size	mtp_tx_req_len, 4
mtp_tx_req_len:
	.word	16384
	.type	dev_attr_cdrom, %object
	.size	dev_attr_cdrom, 16
dev_attr_cdrom:
	.word	.LC936
	.short	420
	.space	2
	.word	fsg_show_cdrom
	.word	fsg_store_cdrom
	.type	dev_attr_nofua, %object
	.size	dev_attr_nofua, 16
dev_attr_nofua:
	.word	.LC938
	.short	420
	.space	2
	.word	fsg_show_nofua
	.word	fsg_store_nofua
	.type	dev_attr_ro, %object
	.size	dev_attr_ro, 16
dev_attr_ro:
	.word	.LC939
	.short	420
	.space	2
	.word	fsg_show_ro
	.word	fsg_store_ro
	.type	dev_attr_file, %object
	.size	dev_attr_file, 16
dev_attr_file:
	.word	.LC937
	.short	420
	.space	2
	.word	fsg_show_file
	.word	fsg_store_file
	.type	ccid_fs_descs, %object
	.size	ccid_fs_descs, 24
ccid_fs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_fs_notify_desc
	.word	ccid_fs_in_desc
	.word	ccid_fs_out_desc
	.word	0
	.type	ccid_hs_descs, %object
	.size	ccid_hs_descs, 24
ccid_hs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_hs_notify_desc
	.word	ccid_hs_in_desc
	.word	ccid_hs_out_desc
	.word	0
	.type	fs_adb_descs, %object
	.size	fs_adb_descs, 16
fs_adb_descs:
	.word	adb_interface_desc
	.word	adb_fullspeed_in_desc
	.word	adb_fullspeed_out_desc
	.word	0
	.type	hs_adb_descs, %object
	.size	hs_adb_descs, 16
hs_adb_descs:
	.word	adb_interface_desc
	.word	adb_highspeed_in_desc
	.word	adb_highspeed_out_desc
	.word	0
	.type	ss_adb_descs, %object
	.size	ss_adb_descs, 24
ss_adb_descs:
	.word	adb_interface_desc
	.word	adb_superspeed_in_desc
	.word	adb_superspeed_in_comp_desc
	.word	adb_superspeed_out_desc
	.word	adb_superspeed_out_comp_desc
	.word	0
	.type	acc_string_defs, %object
	.size	acc_string_defs, 16
acc_string_defs:
	.space	4
	.word	.LC919
	.space	8
	.type	acc_interface_desc, %object
	.size	acc_interface_desc, 9
acc_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	acc_strings, %object
	.size	acc_strings, 8
acc_strings:
	.word	acc_string_table
	.word	0
	.type	fs_acc_descs, %object
	.size	fs_acc_descs, 16
fs_acc_descs:
	.word	acc_interface_desc
	.word	acc_fullspeed_in_desc
	.word	acc_fullspeed_out_desc
	.word	0
	.type	hs_acc_descs, %object
	.size	hs_acc_descs, 16
hs_acc_descs:
	.word	acc_interface_desc
	.word	acc_highspeed_in_desc
	.word	acc_highspeed_out_desc
	.word	0
	.type	ss_acc_descs, %object
	.size	ss_acc_descs, 24
ss_acc_descs:
	.word	acc_interface_desc
	.word	acc_superspeed_in_desc
	.word	acc_superspeed_in_comp_desc
	.word	acc_superspeed_out_desc
	.word	acc_superspeed_out_comp_desc
	.word	0
	.type	rmnet_mux_strings, %object
	.size	rmnet_mux_strings, 8
rmnet_mux_strings:
	.word	rmnet_mux_string_table
	.word	0
	.type	rmnet_mux_fs_function, %object
	.size	rmnet_mux_fs_function, 20
rmnet_mux_fs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_fs_notify_desc
	.word	rmnet_mux_fs_in_desc
	.word	rmnet_mux_fs_out_desc
	.word	0
	.type	rmnet_mux_hs_function, %object
	.size	rmnet_mux_hs_function, 20
rmnet_mux_hs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_hs_notify_desc
	.word	rmnet_mux_hs_in_desc
	.word	rmnet_mux_hs_out_desc
	.word	0
	.type	mtp_string_defs, %object
	.size	mtp_string_defs, 16
mtp_string_defs:
	.space	4
	.word	.LC920
	.space	8
	.type	mtp_interface_desc, %object
	.size	mtp_interface_desc, 9
mtp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	mtp_strings, %object
	.size	mtp_strings, 8
mtp_strings:
	.word	mtp_string_table
	.word	0
	.type	fs_mtp_descs, %object
	.size	fs_mtp_descs, 20
fs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_mtp_descs, %object
	.size	hs_mtp_descs, 20
hs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_mtp_descs, %object
	.size	ss_mtp_descs, 32
ss_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	fs_ptp_descs, %object
	.size	fs_ptp_descs, 20
fs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_ptp_descs, %object
	.size	hs_ptp_descs, 20
hs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_ptp_descs, %object
	.size	ss_ptp_descs, 32
ss_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	qdss_string_defs, %object
	.size	qdss_string_defs, 24
qdss_string_defs:
	.space	4
	.word	.LC946
	.space	4
	.word	.LC947
	.space	8
	.type	qdss_data_intf_desc, %object
	.size	qdss_data_intf_desc, 9
qdss_data_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ctrl_intf_desc, %object
	.size	qdss_ctrl_intf_desc, 9
qdss_ctrl_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_hs_desc, %object
	.size	qdss_hs_desc, 24
qdss_hs_desc:
	.word	qdss_data_intf_desc
	.word	qdss_hs_data_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_hs_ctrl_in_desc
	.word	qdss_hs_ctrl_out_desc
	.word	0
	.type	qdss_strings, %object
	.size	qdss_strings, 8
qdss_strings:
	.word	qdss_string_table
	.word	0
	.type	mbim_string_defs, %object
	.size	mbim_string_defs, 24
mbim_string_defs:
	.space	4
	.word	.LC915
	.space	4
	.word	.LC916
	.space	8
	.type	mbim_control_intf, %object
	.size	mbim_control_intf, 9
mbim_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.space	3
	.type	mbim_data_nop_intf, %object
	.size	mbim_data_nop_intf, 9
mbim_data_nop_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_data_intf, %object
	.size	mbim_data_intf, 9
mbim_data_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_strings, %object
	.size	mbim_strings, 8
mbim_strings:
	.word	mbim_string_table
	.word	0
	.type	fsg_strings, %object
	.size	fsg_strings, 16
fsg_strings:
	.byte	0
	.space	3
	.word	fsg_string_interface
	.space	8
	.type	fsg_intf_desc, %object
	.size	fsg_intf_desc, 9
fsg_intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	8
	.byte	6
	.byte	80
	.byte	0
	.space	3
	.type	fsg_strings_array, %object
	.size	fsg_strings_array, 8
fsg_strings_array:
	.word	fsg_stringtab
	.word	0
	.type	rmnet_sdio_strings, %object
	.size	rmnet_sdio_strings, 8
rmnet_sdio_strings:
	.word	rmnet_sdio_string_table
	.word	0
	.type	rmnet_sdio_fs_function, %object
	.size	rmnet_sdio_fs_function, 20
rmnet_sdio_fs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_fs_notify_desc
	.word	rmnet_sdio_fs_in_desc
	.word	rmnet_sdio_fs_out_desc
	.word	0
	.type	rmnet_sdio_hs_function, %object
	.size	rmnet_sdio_hs_function, 20
rmnet_sdio_hs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_hs_notify_desc
	.word	rmnet_sdio_hs_in_desc
	.word	rmnet_sdio_hs_out_desc
	.word	0
	.type	gps_string_defs, %object
	.size	gps_string_defs, 16
gps_string_defs:
	.space	4
	.word	.LC941
	.space	8
	.type	gps_strings, %object
	.size	gps_strings, 8
gps_strings:
	.word	gps_string_table
	.word	0
	.type	rmnet_smd_strings, %object
	.size	rmnet_smd_strings, 8
rmnet_smd_strings:
	.word	rmnet_smd_string_table
	.word	0
	.type	rmnet_smd_fs_function, %object
	.size	rmnet_smd_fs_function, 20
rmnet_smd_fs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_fs_notify_desc
	.word	rmnet_smd_fs_in_desc
	.word	rmnet_smd_fs_out_desc
	.word	0
	.type	rmnet_smd_hs_function, %object
	.size	rmnet_smd_hs_function, 20
rmnet_smd_hs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_hs_notify_desc
	.word	rmnet_smd_hs_in_desc
	.word	rmnet_smd_hs_out_desc
	.word	0
	.type	ffs_function, %object
	.size	ffs_function, 52
ffs_function:
	.word	.LC271
	.space	12
	.word	ffs_function_attributes
	.space	4
	.word	ffs_function_init
	.word	ffs_function_cleanup
	.word	ffs_function_enable
	.word	ffs_function_disable
	.word	ffs_function_bind_config
	.space	8
	.type	midi_strings, %object
	.size	midi_strings, 8
midi_strings:
	.word	midi_stringtab
	.word	0
	.type	_audio_dev, %object
	.size	_audio_dev, 152
_audio_dev:
	.word	.LC582
	.space	4
	.word	fs_audio_desc
	.word	hs_audio_desc
	.space	8
	.word	audio_bind
	.word	audio_unbind
	.word	audio_set_alt
	.space	4
	.word	audio_disable
	.word	audio_setup
	.space	28
	.space	12
	.word	_audio_dev+88
	.word	_audio_dev+88
	.space	4
	.word	0
	.space	48
	.type	audio_playback_ops, %object
	.size	audio_playback_ops, 64
audio_playback_ops:
	.word	audio_pcm_open
	.word	audio_pcm_close
	.word	snd_pcm_lib_ioctl
	.space	4
	.word	audio_pcm_hw_params
	.word	audio_pcm_hw_free
	.word	audio_pcm_prepare
	.word	audio_pcm_playback_trigger
	.word	audio_pcm_pointer
	.space	16
	.word	audio_pcm_mmap
	.space	8
	.type	intf_desc, %object
	.size	intf_desc, 9
intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	fs_bulk_in_desc, %object
	.size	fs_bulk_in_desc, 9
fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_bulk_out_desc, %object
	.size	fs_bulk_out_desc, 9
fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_diag_desc, %object
	.size	fs_diag_desc, 16
fs_diag_desc:
	.word	intf_desc
	.word	fs_bulk_in_desc
	.word	fs_bulk_out_desc
	.word	0
	.type	hs_bulk_in_desc, %object
	.size	hs_bulk_in_desc, 9
hs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_out_desc, %object
	.size	hs_bulk_out_desc, 9
hs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_diag_desc, %object
	.size	hs_diag_desc, 16
hs_diag_desc:
	.word	intf_desc
	.word	hs_bulk_in_desc
	.word	hs_bulk_out_desc
	.word	0
	.type	ss_bulk_in_desc, %object
	.size	ss_bulk_in_desc, 9
ss_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_bulk_out_desc, %object
	.size	ss_bulk_out_desc, 9
ss_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_diag_desc, %object
	.size	ss_diag_desc, 24
ss_diag_desc:
	.word	intf_desc
	.word	ss_bulk_in_desc
	.word	ss_bulk_in_comp_desc
	.word	ss_bulk_out_desc
	.word	ss_bulk_out_comp_desc
	.word	0
	.type	rmnet_smd_interface_desc, %object
	.size	rmnet_smd_interface_desc, 9
rmnet_smd_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_smd_fs_in_desc, %object
	.size	rmnet_smd_fs_in_desc, 9
rmnet_smd_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_out_desc, %object
	.size	rmnet_smd_fs_out_desc, 9
rmnet_smd_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_notify_desc, %object
	.size	rmnet_smd_fs_notify_desc, 9
rmnet_smd_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_smd_hs_in_desc, %object
	.size	rmnet_smd_hs_in_desc, 9
rmnet_smd_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_out_desc, %object
	.size	rmnet_smd_hs_out_desc, 9
rmnet_smd_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_notify_desc, %object
	.size	rmnet_smd_hs_notify_desc, 9
rmnet_smd_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_sdio_interface_desc, %object
	.size	rmnet_sdio_interface_desc, 9
rmnet_sdio_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_sdio_fs_in_desc, %object
	.size	rmnet_sdio_fs_in_desc, 9
rmnet_sdio_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_out_desc, %object
	.size	rmnet_sdio_fs_out_desc, 9
rmnet_sdio_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_notify_desc, %object
	.size	rmnet_sdio_fs_notify_desc, 9
rmnet_sdio_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_sdio_hs_in_desc, %object
	.size	rmnet_sdio_hs_in_desc, 9
rmnet_sdio_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_out_desc, %object
	.size	rmnet_sdio_hs_out_desc, 9
rmnet_sdio_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_notify_desc, %object
	.size	rmnet_sdio_hs_notify_desc, 9
rmnet_sdio_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	input_terminal_desc, %object
	.size	input_terminal_desc, 12
input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	0
	.space	1
	.short	3
	.space	2
	.type	as_type_i_desc, %object
	.size	as_type_i_desc, 11
as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	audio_source_ac_interface_desc, %object
	.size	audio_source_ac_interface_desc, 9
audio_source_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	as_interface_alt_0_desc, %object
	.size	as_interface_alt_0_desc, 9
as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	as_interface_alt_1_desc, %object
	.size	as_interface_alt_1_desc, 9
as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	fs_as_in_ep_desc, %object
	.size	fs_as_in_ep_desc, 9
fs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	1
	.space	2
	.space	3
	.type	hs_as_in_ep_desc, %object
	.size	hs_as_in_ep_desc, 9
hs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	4
	.space	2
	.space	3
	.type	ecm_qc_control_intf, %object
	.size	ecm_qc_control_intf, 9
ecm_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_union_desc, %object
	.size	ecm_qc_union_desc, 5
ecm_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_qc_data_nop_intf, %object
	.size	ecm_qc_data_nop_intf, 9
ecm_qc_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_data_intf, %object
	.size	ecm_qc_data_intf, 9
ecm_qc_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_fs_in_desc, %object
	.size	ecm_qc_fs_in_desc, 9
ecm_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_out_desc, %object
	.size	ecm_qc_fs_out_desc, 9
ecm_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_notify_desc, %object
	.size	ecm_qc_fs_notify_desc, 9
ecm_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	ecm_qc_fs_function, %object
	.size	ecm_qc_fs_function, 40
ecm_qc_fs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_fs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_fs_in_desc
	.word	ecm_qc_fs_out_desc
	.word	0
	.type	ecm_qc_hs_in_desc, %object
	.size	ecm_qc_hs_in_desc, 9
ecm_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_out_desc, %object
	.size	ecm_qc_hs_out_desc, 9
ecm_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_notify_desc, %object
	.size	ecm_qc_hs_notify_desc, 9
ecm_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_hs_function, %object
	.size	ecm_qc_hs_function, 40
ecm_qc_hs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_hs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_hs_in_desc
	.word	ecm_qc_hs_out_desc
	.word	0
	.type	ecm_qc_ss_in_desc, %object
	.size	ecm_qc_ss_in_desc, 9
ecm_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_out_desc, %object
	.size	ecm_qc_ss_out_desc, 9
ecm_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_notify_desc, %object
	.size	ecm_qc_ss_notify_desc, 9
ecm_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_ss_function, %object
	.size	ecm_qc_ss_function, 52
ecm_qc_ss_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_ss_notify_desc
	.word	ecm_qc_ss_notify_comp_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_ss_in_desc
	.word	ecm_qc_ss_in_comp_desc
	.word	ecm_qc_ss_out_desc
	.word	ecm_qc_ss_out_comp_desc
	.word	0
	.type	mbim_iad_desc, %object
	.size	mbim_iad_desc, 8
mbim_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.type	mbim_union_desc, %object
	.size	mbim_union_desc, 5
mbim_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	fs_mbim_in_desc, %object
	.size	fs_mbim_in_desc, 9
fs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_out_desc, %object
	.size	fs_mbim_out_desc, 9
fs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_notify_desc, %object
	.size	fs_mbim_notify_desc, 9
fs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	mbb_desc, %object
	.size	mbb_desc, 12
mbb_desc:
	.byte	12
	.byte	36
	.byte	27
	.2byte	256
	.2byte	4096
	.byte	32
	.byte	-128
	.2byte	4064
	.byte	32
	.type	mbim_fs_function, %object
	.size	mbim_fs_function, 48
mbim_fs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	fs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	fs_mbim_in_desc
	.word	fs_mbim_out_desc
	.word	0
	.type	hs_mbim_in_desc, %object
	.size	hs_mbim_in_desc, 9
hs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_out_desc, %object
	.size	hs_mbim_out_desc, 9
hs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_notify_desc, %object
	.size	hs_mbim_notify_desc, 9
hs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_hs_function, %object
	.size	mbim_hs_function, 48
mbim_hs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	hs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	hs_mbim_in_desc
	.word	hs_mbim_out_desc
	.word	0
	.type	ss_mbim_in_desc, %object
	.size	ss_mbim_in_desc, 9
ss_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_out_desc, %object
	.size	ss_mbim_out_desc, 9
ss_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_notify_desc, %object
	.size	ss_mbim_notify_desc, 9
ss_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_ss_function, %object
	.size	mbim_ss_function, 60
mbim_ss_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	ss_mbim_notify_desc
	.word	ss_mbim_notify_comp_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	ss_mbim_in_desc
	.word	ss_mbim_in_comp_desc
	.word	ss_mbim_out_desc
	.word	ss_mbim_out_comp_desc
	.word	0
	.type	ecm_iad_descriptor, %object
	.size	ecm_iad_descriptor, 8
ecm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	ecm_control_intf, %object
	.size	ecm_control_intf, 9
ecm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_union_desc, %object
	.size	ecm_union_desc, 5
ecm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_data_nop_intf, %object
	.size	ecm_data_nop_intf, 9
ecm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_data_intf, %object
	.size	ecm_data_intf, 9
ecm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_ecm_in_desc, %object
	.size	fs_ecm_in_desc, 9
fs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_out_desc, %object
	.size	fs_ecm_out_desc, 9
fs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_notify_desc, %object
	.size	fs_ecm_notify_desc, 9
fs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ecm_in_desc, %object
	.size	hs_ecm_in_desc, 9
hs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_out_desc, %object
	.size	hs_ecm_out_desc, 9
hs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_notify_desc, %object
	.size	hs_ecm_notify_desc, 9
hs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ss_ecm_in_desc, %object
	.size	ss_ecm_in_desc, 9
ss_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_out_desc, %object
	.size	ss_ecm_out_desc, 9
ss_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_notify_desc, %object
	.size	ss_ecm_notify_desc, 9
ss_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_fs_function, %object
	.size	ecm_fs_function, 44
ecm_fs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	fs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	fs_ecm_in_desc
	.word	fs_ecm_out_desc
	.word	0
	.type	ecm_hs_function, %object
	.size	ecm_hs_function, 44
ecm_hs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	hs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	hs_ecm_in_desc
	.word	hs_ecm_out_desc
	.word	0
	.type	ecm_ss_function, %object
	.size	ecm_ss_function, 52
ecm_ss_function:
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	ss_ecm_notify_desc
	.word	ss_ecm_intr_comp_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	ss_ecm_in_desc
	.word	ss_ecm_bulk_comp_desc
	.word	ss_ecm_out_desc
	.word	ss_ecm_bulk_comp_desc
	.word	0
	.type	speaker_input_terminal_desc, %object
	.size	speaker_input_terminal_desc, 12
speaker_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	3
	.short	257
	.byte	4
	.space	1
	.short	3
	.space	2
	.type	speaker_as_type_i_desc, %object
	.size	speaker_as_type_i_desc, 11
speaker_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_input_terminal_desc, %object
	.size	microphone_input_terminal_desc, 12
microphone_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	2
	.byte	1
	.short	3
	.space	2
	.type	microphone_as_type_i_desc, %object
	.size	microphone_as_type_i_desc, 11
microphone_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.byte	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	uac1_ac_interface_desc, %object
	.size	uac1_ac_interface_desc, 9
uac1_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	microphone_as_interface_alt_0_desc, %object
	.size	microphone_as_interface_alt_0_desc, 9
microphone_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_interface_alt_1_desc, %object
	.size	microphone_as_interface_alt_1_desc, 9
microphone_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_0_desc, %object
	.size	speaker_as_interface_alt_0_desc, 9
speaker_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_1_desc, %object
	.size	speaker_as_interface_alt_1_desc, 9
speaker_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_ep_in_desc, %object
	.size	microphone_as_ep_in_desc, 9
microphone_as_ep_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	5
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	speaker_as_ep_out_desc, %object
	.size	speaker_as_ep_out_desc, 9
speaker_as_ep_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	9
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	microphone_as_iso_in, %object
	.size	microphone_as_iso_in, 32
microphone_as_iso_in:
	.word	microphone_as_iso_in
	.word	microphone_as_iso_in
	.space	12
	.word	.LC893
	.byte	1
	.space	3
	.word	microphone_as_iso_in_desc
	.type	speaker_as_iso_out, %object
	.size	speaker_as_iso_out, 32
speaker_as_iso_out:
	.word	speaker_as_iso_out
	.word	speaker_as_iso_out
	.space	12
	.word	.LC895
	.byte	1
	.space	3
	.word	speaker_as_iso_out_desc
	.type	f_audio_desc, %object
	.size	f_audio_desc, 76
f_audio_desc:
	.word	uac1_ac_interface_desc
	.word	uac1_ac_header_desc
	.word	microphone_input_terminal_desc
	.word	microphone_output_terminal_desc
	.word	speaker_input_terminal_desc
	.word	speaker_output_terminal_desc
	.word	microphone_as_interface_alt_0_desc
	.word	microphone_as_interface_alt_1_desc
	.word	microphone_as_header_desc
	.word	microphone_as_type_i_desc
	.word	microphone_as_ep_in_desc
	.word	microphone_as_iso_in_desc
	.word	speaker_as_interface_alt_0_desc
	.word	speaker_as_interface_alt_1_desc
	.word	speaker_as_header_desc
	.word	speaker_as_type_i_desc
	.word	speaker_as_ep_out_desc
	.word	speaker_as_iso_out_desc
	.word	0
	.type	ncm_iad_desc, %object
	.size	ncm_iad_desc, 8
ncm_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.type	ncm_control_intf, %object
	.size	ncm_control_intf, 9
ncm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.space	3
	.type	ncm_union_desc, %object
	.size	ncm_union_desc, 5
ncm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ncm_data_nop_intf, %object
	.size	ncm_data_nop_intf, 9
ncm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	ncm_data_intf, %object
	.size	ncm_data_intf, 9
ncm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	fs_ncm_in_desc, %object
	.size	fs_ncm_in_desc, 9
fs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_out_desc, %object
	.size	fs_ncm_out_desc, 9
fs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_notify_desc, %object
	.size	fs_ncm_notify_desc, 9
fs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ncm_in_desc, %object
	.size	hs_ncm_in_desc, 9
hs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_out_desc, %object
	.size	hs_ncm_out_desc, 9
hs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_notify_desc, %object
	.size	hs_ncm_notify_desc, 9
hs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ncm_fs_function, %object
	.size	ncm_fs_function, 48
ncm_fs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	fs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	fs_ncm_in_desc
	.word	fs_ncm_out_desc
	.word	0
	.type	ncm_hs_function, %object
	.size	ncm_hs_function, 48
ncm_hs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	hs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	hs_ncm_in_desc
	.word	hs_ncm_out_desc
	.word	0
	.type	fsg_fs_bulk_in_desc, %object
	.size	fsg_fs_bulk_in_desc, 9
fsg_fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fsg_fs_bulk_out_desc, %object
	.size	fsg_fs_bulk_out_desc, 9
fsg_fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fsg_hs_bulk_in_desc, %object
	.size	fsg_hs_bulk_in_desc, 9
fsg_hs_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	fsg_hs_bulk_out_desc, %object
	.size	fsg_hs_bulk_out_desc, 9
fsg_hs_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.byte	1
	.space	2
	.space	3
	.type	fsg_ss_bulk_in_desc, %object
	.size	fsg_ss_bulk_in_desc, 9
fsg_ss_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_in_comp_desc, %object
	.size	fsg_ss_bulk_in_comp_desc, 6
fsg_ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_bulk_out_desc, %object
	.size	fsg_ss_bulk_out_desc, 9
fsg_ss_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_out_comp_desc, %object
	.size	fsg_ss_bulk_out_comp_desc, 6
fsg_ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_fs_function, %object
	.size	fsg_fs_function, 16
fsg_fs_function:
	.word	fsg_intf_desc
	.word	fsg_fs_bulk_in_desc
	.word	fsg_fs_bulk_out_desc
	.word	0
	.type	fsg_hs_function, %object
	.size	fsg_hs_function, 16
fsg_hs_function:
	.word	fsg_intf_desc
	.word	fsg_hs_bulk_in_desc
	.word	fsg_hs_bulk_out_desc
	.word	0
	.type	fsg_ss_function, %object
	.size	fsg_ss_function, 24
fsg_ss_function:
	.word	fsg_intf_desc
	.word	fsg_ss_bulk_in_desc
	.word	fsg_ss_bulk_in_comp_desc
	.word	fsg_ss_bulk_out_desc
	.word	fsg_ss_bulk_out_comp_desc
	.word	0
	.type	ccid_interface_desc, %object
	.size	ccid_interface_desc, 9
ccid_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	11
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ccid_fs_notify_desc, %object
	.size	ccid_fs_notify_desc, 9
ccid_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	32
	.space	2
	.space	3
	.type	ccid_fs_in_desc, %object
	.size	ccid_fs_in_desc, 9
ccid_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_out_desc, %object
	.size	ccid_fs_out_desc, 9
ccid_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_hs_in_desc, %object
	.size	ccid_hs_in_desc, 9
ccid_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_out_desc, %object
	.size	ccid_hs_out_desc, 9
ccid_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_notify_desc, %object
	.size	ccid_hs_notify_desc, 9
ccid_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	9
	.space	2
	.space	3
	.type	qdss_data_ep_comp_desc, %object
	.size	qdss_data_ep_comp_desc, 6
qdss_data_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	1
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_data_desc, %object
	.size	qdss_ss_data_desc, 9
qdss_ss_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_in_ep_comp_desc, %object
	.size	qdss_ctrl_in_ep_comp_desc, 6
qdss_ctrl_in_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_in_desc, %object
	.size	qdss_ss_ctrl_in_desc, 9
qdss_ss_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_out_ep_comp_desc, %object
	.size	qdss_ctrl_out_ep_comp_desc, 6
qdss_ctrl_out_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_out_desc, %object
	.size	qdss_ss_ctrl_out_desc, 9
qdss_ss_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_hs_data_desc, %object
	.size	qdss_hs_data_desc, 9
qdss_hs_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_in_desc, %object
	.size	qdss_hs_ctrl_in_desc, 9
qdss_hs_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_out_desc, %object
	.size	qdss_hs_ctrl_out_desc, 9
qdss_hs_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_ss_desc, %object
	.size	qdss_ss_desc, 36
qdss_ss_desc:
	.word	qdss_data_intf_desc
	.word	qdss_ss_data_desc
	.word	qdss_data_ep_comp_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_ss_ctrl_in_desc
	.word	qdss_ctrl_in_ep_comp_desc
	.word	qdss_ss_ctrl_out_desc
	.word	qdss_ctrl_out_ep_comp_desc
	.word	0
	.type	rmnet_mux_interface_desc, %object
	.size	rmnet_mux_interface_desc, 9
rmnet_mux_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_mux_fs_in_desc, %object
	.size	rmnet_mux_fs_in_desc, 9
rmnet_mux_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_out_desc, %object
	.size	rmnet_mux_fs_out_desc, 9
rmnet_mux_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_notify_desc, %object
	.size	rmnet_mux_fs_notify_desc, 9
rmnet_mux_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_mux_hs_in_desc, %object
	.size	rmnet_mux_hs_in_desc, 9
rmnet_mux_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_out_desc, %object
	.size	rmnet_mux_hs_out_desc, 9
rmnet_mux_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_notify_desc, %object
	.size	rmnet_mux_hs_notify_desc, 9
rmnet_mux_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	midi_string_defs, %object
	.size	midi_string_defs, 16
midi_string_defs:
	.space	4
	.word	.LC948
	.space	8
	.type	ac_interface_desc, %object
	.size	ac_interface_desc, 9
ac_interface_desc:
	.byte	9
	.byte	4
	.space	3
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	ms_interface_desc, %object
	.size	ms_interface_desc, 9
ms_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	1
	.byte	3
	.space	2
	.space	3
	.type	ac_header_desc, %object
	.size	ac_header_desc, 9
ac_header_desc:
	.byte	9
	.byte	36
	.byte	1
	.2byte	256
	.2byte	9
	.byte	1
	.space	1
	.space	3
	.type	bulk_in_desc, %object
	.size	bulk_in_desc, 9
bulk_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	bulk_out_desc, %object
	.size	bulk_out_desc, 9
bulk_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ms_header_desc, %object
	.size	ms_header_desc, 7
ms_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.2byte	256
	.space	2
	.space	1
	.type	ms_in_desc, %object
	.size	ms_in_desc, 20
ms_in_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	ms_out_desc, %object
	.size	ms_out_desc, 20
ms_out_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	rmnet_interface_desc, %object
	.size	rmnet_interface_desc, 9
rmnet_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_fs_in_desc, %object
	.size	rmnet_fs_in_desc, 9
rmnet_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_out_desc, %object
	.size	rmnet_fs_out_desc, 9
rmnet_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_notify_desc, %object
	.size	rmnet_fs_notify_desc, 9
rmnet_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_fs_function, %object
	.size	rmnet_fs_function, 20
rmnet_fs_function:
	.word	rmnet_interface_desc
	.word	rmnet_fs_notify_desc
	.word	rmnet_fs_in_desc
	.word	rmnet_fs_out_desc
	.word	0
	.type	rmnet_hs_in_desc, %object
	.size	rmnet_hs_in_desc, 9
rmnet_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_out_desc, %object
	.size	rmnet_hs_out_desc, 9
rmnet_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_notify_desc, %object
	.size	rmnet_hs_notify_desc, 9
rmnet_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_hs_function, %object
	.size	rmnet_hs_function, 20
rmnet_hs_function:
	.word	rmnet_interface_desc
	.word	rmnet_hs_notify_desc
	.word	rmnet_hs_in_desc
	.word	rmnet_hs_out_desc
	.word	0
	.type	rmnet_ss_in_desc, %object
	.size	rmnet_ss_in_desc, 9
rmnet_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_out_desc, %object
	.size	rmnet_ss_out_desc, 9
rmnet_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_notify_desc, %object
	.size	rmnet_ss_notify_desc, 9
rmnet_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_ss_function, %object
	.size	rmnet_ss_function, 32
rmnet_ss_function:
	.word	rmnet_interface_desc
	.word	rmnet_ss_notify_desc
	.word	rmnet_ss_notify_comp_desc
	.word	rmnet_ss_in_desc
	.word	rmnet_ss_in_comp_desc
	.word	rmnet_ss_out_desc
	.word	rmnet_ss_out_comp_desc
	.word	0
	.type	gps_interface_desc, %object
	.size	gps_interface_desc, 9
gps_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	gps_fs_notify_desc, %object
	.size	gps_fs_notify_desc, 9
gps_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	gps_fs_function, %object
	.size	gps_fs_function, 12
gps_fs_function:
	.word	gps_interface_desc
	.word	gps_fs_notify_desc
	.word	0
	.type	gps_hs_notify_desc, %object
	.size	gps_hs_notify_desc, 9
gps_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	gps_hs_function, %object
	.size	gps_hs_function, 12
gps_hs_function:
	.word	gps_interface_desc
	.word	gps_hs_notify_desc
	.word	0
	.type	gps_ss_notify_desc, %object
	.size	gps_ss_notify_desc, 9
gps_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	gps_ss_function, %object
	.size	gps_ss_function, 16
gps_ss_function:
	.word	gps_interface_desc
	.word	gps_ss_notify_desc
	.word	gps_ss_notify_comp_desc
	.word	0
	.type	gser_interface_desc, %object
	.size	gser_interface_desc, 9
gser_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	gser_fs_in_desc, %object
	.size	gser_fs_in_desc, 9
gser_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	gser_fs_out_desc, %object
	.size	gser_fs_out_desc, 9
gser_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	gser_fs_notify_desc, %object
	.size	gser_fs_notify_desc, 9
gser_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	gser_hs_notify_desc, %object
	.size	gser_hs_notify_desc, 9
gser_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	gser_ss_notify_desc, %object
	.size	gser_ss_notify_desc, 9
gser_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	gser_fs_function, %object
	.size	gser_fs_function, 36
gser_fs_function:
	.word	gser_interface_desc
	.word	gser_header_desc
	.word	gser_call_mgmt_descriptor
	.word	gser_descriptor
	.word	gser_union_desc
	.word	gser_fs_notify_desc
	.word	gser_fs_in_desc
	.word	gser_fs_out_desc
	.word	0
	.type	gser_hs_function, %object
	.size	gser_hs_function, 36
gser_hs_function:
	.word	gser_interface_desc
	.word	gser_header_desc
	.word	gser_call_mgmt_descriptor
	.word	gser_descriptor
	.word	gser_union_desc
	.word	gser_hs_notify_desc
	.word	gser_hs_in_desc
	.word	gser_hs_out_desc
	.word	0
	.type	gser_ss_function, %object
	.size	gser_ss_function, 48
gser_ss_function:
	.word	gser_interface_desc
	.word	gser_header_desc
	.word	gser_call_mgmt_descriptor
	.word	gser_descriptor
	.word	gser_union_desc
	.word	gser_ss_notify_desc
	.word	gser_ss_notify_comp_desc
	.word	gser_ss_in_desc
	.word	gser_ss_bulk_comp_desc
	.word	gser_ss_out_desc
	.word	gser_ss_bulk_comp_desc
	.word	0
	.type	gser_hs_in_desc, %object
	.size	gser_hs_in_desc, 9
gser_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	gser_hs_out_desc, %object
	.size	gser_hs_out_desc, 9
gser_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	gser_ss_in_desc, %object
	.size	gser_ss_in_desc, 9
gser_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	gser_ss_out_desc, %object
	.size	gser_ss_out_desc, 9
gser_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_iad_descriptor, %object
	.size	acm_iad_descriptor, 8
acm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.type	acm_control_interface_desc, %object
	.size	acm_control_interface_desc, 9
acm_control_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.space	3
	.type	acm_union_desc, %object
	.size	acm_union_desc, 5
acm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	acm_data_interface_desc, %object
	.size	acm_data_interface_desc, 9
acm_data_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	acm_call_mgmt_descriptor, %object
	.size	acm_call_mgmt_descriptor, 5
acm_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	acm_fs_in_desc, %object
	.size	acm_fs_in_desc, 9
acm_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_out_desc, %object
	.size	acm_fs_out_desc, 9
acm_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_notify_desc, %object
	.size	acm_fs_notify_desc, 9
acm_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	acm_hs_in_desc, %object
	.size	acm_hs_in_desc, 9
acm_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_out_desc, %object
	.size	acm_hs_out_desc, 9
acm_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_notify_desc, %object
	.size	acm_hs_notify_desc, 9
acm_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_ss_in_desc, %object
	.size	acm_ss_in_desc, 9
acm_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_out_desc, %object
	.size	acm_ss_out_desc, 9
acm_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_function, %object
	.size	acm_ss_function, 56
acm_ss_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_data_interface_desc
	.word	acm_ss_in_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_ss_out_desc
	.word	acm_ss_bulk_comp_desc
	.word	0
	.type	acm_hs_function, %object
	.size	acm_hs_function, 44
acm_hs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_hs_in_desc
	.word	acm_hs_out_desc
	.word	0
	.type	acm_fs_function, %object
	.size	acm_fs_function, 44
acm_fs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_fs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_fs_in_desc
	.word	acm_fs_out_desc
	.word	0
	.type	rndis_iad_descriptor, %object
	.size	rndis_iad_descriptor, 8
rndis_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_control_intf, %object
	.size	rndis_control_intf, 9
rndis_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_union_desc, %object
	.size	rndis_union_desc, 5
rndis_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_data_intf, %object
	.size	rndis_data_intf, 9
rndis_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_in_desc, %object
	.size	fs_in_desc, 9
fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_out_desc, %object
	.size	fs_out_desc, 9
fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_notify_desc, %object
	.size	fs_notify_desc, 9
fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	hs_in_desc, %object
	.size	hs_in_desc, 9
hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_out_desc, %object
	.size	hs_out_desc, 9
hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_notify_desc, %object
	.size	hs_notify_desc, 9
hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	ss_in_desc, %object
	.size	ss_in_desc, 9
ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_out_desc, %object
	.size	ss_out_desc, 9
ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_notify_desc, %object
	.size	ss_notify_desc, 9
ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_fs_function, %object
	.size	eth_fs_function, 44
eth_fs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	fs_notify_desc
	.word	rndis_data_intf
	.word	fs_in_desc
	.word	fs_out_desc
	.word	0
	.type	eth_hs_function, %object
	.size	eth_hs_function, 44
eth_hs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	hs_notify_desc
	.word	rndis_data_intf
	.word	hs_in_desc
	.word	hs_out_desc
	.word	0
	.type	eth_ss_function, %object
	.size	eth_ss_function, 56
eth_ss_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	ss_notify_desc
	.word	ss_intr_comp_desc
	.word	rndis_data_intf
	.word	ss_in_desc
	.word	ss_bulk_comp_desc
	.word	ss_out_desc
	.word	ss_bulk_comp_desc
	.word	0
	.type	rndis_ul_max_pkt_per_xfer, %object
	.size	rndis_ul_max_pkt_per_xfer, 4
rndis_ul_max_pkt_per_xfer:
	.word	3
	.type	rndis_qc_iad_descriptor, %object
	.size	rndis_qc_iad_descriptor, 8
rndis_qc_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_qc_control_intf, %object
	.size	rndis_qc_control_intf, 9
rndis_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_qc_union_desc, %object
	.size	rndis_qc_union_desc, 5
rndis_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_qc_data_intf, %object
	.size	rndis_qc_data_intf, 9
rndis_qc_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_qc_fs_in_desc, %object
	.size	rndis_qc_fs_in_desc, 9
rndis_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_out_desc, %object
	.size	rndis_qc_fs_out_desc, 9
rndis_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_notify_desc, %object
	.size	rndis_qc_fs_notify_desc, 9
rndis_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	eth_qc_fs_function, %object
	.size	eth_qc_fs_function, 44
eth_qc_fs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_fs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_fs_in_desc
	.word	rndis_qc_fs_out_desc
	.word	0
	.type	rndis_qc_hs_in_desc, %object
	.size	rndis_qc_hs_in_desc, 9
rndis_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_out_desc, %object
	.size	rndis_qc_hs_out_desc, 9
rndis_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_notify_desc, %object
	.size	rndis_qc_hs_notify_desc, 9
rndis_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_hs_function, %object
	.size	eth_qc_hs_function, 44
eth_qc_hs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_hs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_hs_in_desc
	.word	rndis_qc_hs_out_desc
	.word	0
	.type	rndis_qc_ss_in_desc, %object
	.size	rndis_qc_ss_in_desc, 9
rndis_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_out_desc, %object
	.size	rndis_qc_ss_out_desc, 9
rndis_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_notify_desc, %object
	.size	rndis_qc_ss_notify_desc, 9
rndis_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_ss_function, %object
	.size	eth_qc_ss_function, 56
eth_qc_ss_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_ss_notify_desc
	.word	rndis_qc_ss_intr_comp_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_ss_in_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	rndis_qc_ss_out_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	0
	.type	acc_fullspeed_in_desc, %object
	.size	acc_fullspeed_in_desc, 9
acc_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acc_fullspeed_out_desc, %object
	.size	acc_fullspeed_out_desc, 9
acc_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acc_highspeed_in_desc, %object
	.size	acc_highspeed_in_desc, 9
acc_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_highspeed_out_desc, %object
	.size	acc_highspeed_out_desc, 9
acc_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_superspeed_in_desc, %object
	.size	acc_superspeed_in_desc, 9
acc_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_superspeed_out_desc, %object
	.size	acc_superspeed_out_desc, 9
acc_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_fullspeed_in_desc, %object
	.size	mtp_fullspeed_in_desc, 9
mtp_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	mtp_fullspeed_out_desc, %object
	.size	mtp_fullspeed_out_desc, 9
mtp_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	mtp_intr_desc, %object
	.size	mtp_intr_desc, 9
mtp_intr_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	28
	.byte	6
	.space	2
	.space	3
	.type	mtp_tx_reqs, %object
	.size	mtp_tx_reqs, 4
mtp_tx_reqs:
	.word	8
	.type	mtp_highspeed_in_desc, %object
	.size	mtp_highspeed_in_desc, 9
mtp_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_highspeed_out_desc, %object
	.size	mtp_highspeed_out_desc, 9
mtp_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_superspeed_in_desc, %object
	.size	mtp_superspeed_in_desc, 9
mtp_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_superspeed_out_desc, %object
	.size	mtp_superspeed_out_desc, 9
mtp_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_interface_desc, %object
	.size	adb_interface_desc, 9
adb_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	66
	.byte	1
	.space	1
	.space	3
	.type	adb_fullspeed_in_desc, %object
	.size	adb_fullspeed_in_desc, 9
adb_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	adb_fullspeed_out_desc, %object
	.size	adb_fullspeed_out_desc, 9
adb_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	adb_highspeed_in_desc, %object
	.size	adb_highspeed_in_desc, 9
adb_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_highspeed_out_desc, %object
	.size	adb_highspeed_out_desc, 9
adb_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_superspeed_in_desc, %object
	.size	adb_superspeed_in_desc, 9
adb_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_superspeed_out_desc, %object
	.size	adb_superspeed_out_desc, 9
adb_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rl.63266, %object
	.size	rl.63266, 24
rl.63266:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	rl.53176, %object
	.size	rl.53176, 24
rl.53176:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	supported_functions, %object
	.size	supported_functions, 112
supported_functions:
	.word	ffs_function
	.word	mbim_function
	.word	ecm_qc_function
	.word	audio_function
	.word	rmnet_smd_function
	.word	rmnet_sdio_function
	.word	rmnet_smd_sdio_function
	.word	rmnet_function
	.word	gps_function
	.word	diag_function
	.word	qdss_function
	.word	serial_function
	.word	adb_function
	.word	ccid_function
	.word	acm_function
	.word	mtp_function
	.word	ptp_function
	.word	rndis_function
	.word	rndis_qc_function
	.word	ecm_function
	.word	ncm_function
	.word	mass_storage_function
	.word	accessory_function
	.word	audio_source_function
	.word	uasp_function
	.word	midi_function
	.word	hid_function
	.word	0
	.type	rl.26655, %object
	.size	rl.26655, 24
rl.26655:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	rl.26673, %object
	.size	rl.26673, 24
rl.26673:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	sport_info, %object
	.size	sport_info, 24
sport_info:
	.word	.LC934
	.space	4
	.word	9
	.word	.LC935
	.space	4
	.word	10
	.type	smd_pi, %object
	.size	smd_pi, 24
smd_pi:
	.space	4
	.word	.LC932
	.space	4
	.space	4
	.word	.LC933
	.space	4
	.type	acm_string_defs, %object
	.size	acm_string_defs, 32
acm_string_defs:
	.space	4
	.word	.LC923
	.space	4
	.word	.LC924
	.space	4
	.word	.LC925
	.space	8
	.type	acm_strings, %object
	.size	acm_strings, 8
acm_strings:
	.word	acm_string_table
	.word	0
	.type	ghsic_data_serial_tx_q_size, %object
	.size	ghsic_data_serial_tx_q_size, 4
ghsic_data_serial_tx_q_size:
	.word	20
	.type	ghsic_data_serial_rx_q_size, %object
	.size	ghsic_data_serial_rx_q_size, 4
ghsic_data_serial_rx_q_size:
	.word	10
	.type	ghsic_data_rmnet_tx_q_size, %object
	.size	ghsic_data_rmnet_tx_q_size, 4
ghsic_data_rmnet_tx_q_size:
	.word	300
	.type	ghsic_data_rmnet_rx_q_size, %object
	.size	ghsic_data_rmnet_rx_q_size, 4
ghsic_data_rmnet_rx_q_size:
	.word	50
	.type	ghsuart_data_serial_tx_q_size, %object
	.size	ghsuart_data_serial_tx_q_size, 4
ghsuart_data_serial_tx_q_size:
	.word	5
	.type	ghsuart_data_serial_rx_q_size, %object
	.size	ghsuart_data_serial_rx_q_size, 4
ghsuart_data_serial_rx_q_size:
	.word	5
	.type	ghsuart_data_rmnet_tx_q_size, %object
	.size	ghsuart_data_rmnet_tx_q_size, 4
ghsuart_data_rmnet_tx_q_size:
	.word	20
	.type	ghsuart_data_rmnet_rx_q_size, %object
	.size	ghsuart_data_rmnet_rx_q_size, 4
ghsuart_data_rmnet_rx_q_size:
	.word	10
	.type	gser_string_defs, %object
	.size	gser_string_defs, 16
gser_string_defs:
	.space	4
	.word	.LC926
	.space	8
	.type	gser_strings, %object
	.size	gser_strings, 8
gser_strings:
	.word	gser_string_table
	.word	0
	.type	rmnet_string_defs, %object
	.size	rmnet_string_defs, 16
rmnet_string_defs:
	.space	4
	.word	.LC942
	.space	8
	.type	rmnet_strings, %object
	.size	rmnet_strings, 8
rmnet_strings:
	.word	rmnet_string_table
	.word	0
	.type	rndis_string_defs, %object
	.size	rndis_string_defs, 32
rndis_string_defs:
	.space	4
	.word	.LC908
	.space	4
	.word	.LC909
	.space	4
	.word	.LC910
	.space	8
	.type	rndis_dl_max_pkt_per_xfer, %object
	.size	rndis_dl_max_pkt_per_xfer, 4
rndis_dl_max_pkt_per_xfer:
	.word	3
	.type	rndis_strings, %object
	.size	rndis_strings, 8
rndis_strings:
	.word	rndis_string_table
	.word	0
	.type	ecm_qc_desc, %object
	.size	ecm_qc_desc, 13
ecm_qc_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_qc_strings, %object
	.size	ecm_qc_strings, 8
ecm_qc_strings:
	.word	ecm_qc_string_table
	.word	0
	.type	ecm_desc, %object
	.size	ecm_desc, 13
ecm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_strings, %object
	.size	ecm_strings, 8
ecm_strings:
	.word	ecm_string_table
	.word	0
	.type	rndis_qc_string_defs, %object
	.size	rndis_qc_string_defs, 32
rndis_qc_string_defs:
	.space	4
	.word	.LC908
	.space	4
	.word	.LC909
	.space	4
	.word	.LC910
	.space	8
	.type	rndis_qc_strings, %object
	.size	rndis_qc_strings, 8
rndis_qc_strings:
	.word	rndis_qc_string_table
	.word	0
	.type	gadget_type, %object
	.size	gadget_type, 24
gadget_type:
	.word	.LC906
	.space	20
	.type	necm_desc, %object
	.size	necm_desc, 13
necm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ncm_strings, %object
	.size	ncm_strings, 8
ncm_strings:
	.word	ncm_string_table
	.word	0
	.type	qc_gadget_type, %object
	.size	qc_gadget_type, 24
qc_gadget_type:
	.word	.LC906
	.space	20
	.type	fn_cntl, %object
	.size	fn_cntl, 4
fn_cntl:
	.word	.LC903
	.type	fn_play, %object
	.size	fn_play, 4
fn_play:
	.word	.LC905
	.type	fn_cap, %object
	.size	fn_cap, 4
fn_cap:
	.word	.LC904
	.type	audio_strings, %object
	.size	audio_strings, 8
audio_strings:
	.word	audio_stringtab_dev
	.word	0
	.type	microphone_fu_controls, %object
	.size	microphone_fu_controls, 32
microphone_fu_controls:
	.word	microphone_fu_controls
	.word	microphone_fu_controls
	.space	12
	.word	.LC897
	.space	8
	.type	speaker_fu_controls, %object
	.size	speaker_fu_controls, 32
speaker_fu_controls:
	.word	speaker_fu_controls
	.word	speaker_fu_controls
	.space	12
	.word	.LC900
	.space	8
	.type	microphone_mute_control, %object
	.size	microphone_mute_control, 44
microphone_mute_control:
	.word	microphone_mute_control
	.word	microphone_mute_control
	.word	.LC899
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_volume_control, %object
	.size	microphone_volume_control, 44
microphone_volume_control:
	.word	microphone_volume_control
	.word	microphone_volume_control
	.word	.LC898
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_mute_control, %object
	.size	speaker_mute_control, 44
speaker_mute_control:
	.word	speaker_mute_control
	.word	speaker_mute_control
	.word	.LC902
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_volume_control, %object
	.size	speaker_volume_control, 44
speaker_volume_control:
	.word	speaker_volume_control
	.word	speaker_volume_control
	.word	.LC901
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_sample_freq_control, %object
	.size	microphone_sample_freq_control, 44
microphone_sample_freq_control:
	.word	microphone_sample_freq_control
	.word	microphone_sample_freq_control
	.word	.LC894
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_sample_freq_control, %object
	.size	speaker_sample_freq_control, 44
speaker_sample_freq_control:
	.word	speaker_sample_freq_control
	.word	speaker_sample_freq_control
	.word	.LC896
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	usb_android_dt_match, %object
	.size	usb_android_dt_match, 392
usb_android_dt_match:
	.space	64
	.ascii	"qcom,android-usb\000"
	.space	111
	.space	4
	.space	196
	.type	dev_attr_remote_wakeup, %object
	.size	dev_attr_remote_wakeup, 16
dev_attr_remote_wakeup:
	.word	.LC847
	.short	420
	.space	2
	.word	remote_wakeup_show
	.word	remote_wakeup_store
	.type	dev_attr_state, %object
	.size	dev_attr_state, 16
dev_attr_state:
	.word	.LC848
	.short	292
	.space	2
	.word	state_show
	.word	0
	.type	dev_attr_pm_qos, %object
	.size	dev_attr_pm_qos, 16
dev_attr_pm_qos:
	.word	.LC849
	.short	420
	.space	2
	.word	pm_qos_show
	.word	pm_qos_store
	.type	dev_attr_enable, %object
	.size	dev_attr_enable, 16
dev_attr_enable:
	.word	.LC850
	.short	420
	.space	2
	.word	enable_show
	.word	enable_store
	.type	dev_attr_functions, %object
	.size	dev_attr_functions, 16
dev_attr_functions:
	.word	.LC851
	.short	420
	.space	2
	.word	functions_show
	.word	functions_store
	.type	dev_attr_iSerial, %object
	.size	dev_attr_iSerial, 16
dev_attr_iSerial:
	.word	.LC852
	.short	420
	.space	2
	.word	iSerial_show
	.word	iSerial_store
	.type	dev_attr_iProduct, %object
	.size	dev_attr_iProduct, 16
dev_attr_iProduct:
	.word	.LC853
	.short	420
	.space	2
	.word	iProduct_show
	.word	iProduct_store
	.type	dev_attr_iManufacturer, %object
	.size	dev_attr_iManufacturer, 16
dev_attr_iManufacturer:
	.word	.LC854
	.short	420
	.space	2
	.word	iManufacturer_show
	.word	iManufacturer_store
	.type	dev_attr_bDeviceProtocol, %object
	.size	dev_attr_bDeviceProtocol, 16
dev_attr_bDeviceProtocol:
	.word	.LC855
	.short	420
	.space	2
	.word	bDeviceProtocol_show
	.word	bDeviceProtocol_store
	.type	dev_attr_bDeviceSubClass, %object
	.size	dev_attr_bDeviceSubClass, 16
dev_attr_bDeviceSubClass:
	.word	.LC856
	.short	420
	.space	2
	.word	bDeviceSubClass_show
	.word	bDeviceSubClass_store
	.type	dev_attr_bDeviceClass, %object
	.size	dev_attr_bDeviceClass, 16
dev_attr_bDeviceClass:
	.word	.LC857
	.short	420
	.space	2
	.word	bDeviceClass_show
	.word	bDeviceClass_store
	.type	dev_attr_bcdDevice, %object
	.size	dev_attr_bcdDevice, 16
dev_attr_bcdDevice:
	.word	.LC858
	.short	420
	.space	2
	.word	bcdDevice_show
	.word	bcdDevice_store
	.type	dev_attr_idProduct, %object
	.size	dev_attr_idProduct, 16
dev_attr_idProduct:
	.word	.LC859
	.short	420
	.space	2
	.word	idProduct_show
	.word	idProduct_store
	.type	dev_attr_idVendor, %object
	.size	dev_attr_idVendor, 16
dev_attr_idVendor:
	.word	.LC860
	.short	420
	.space	2
	.word	idVendor_show
	.word	idVendor_store
	.type	midi_function, %object
	.size	midi_function, 52
midi_function:
	.word	.LC861
	.space	12
	.word	midi_function_attributes
	.space	4
	.word	midi_function_init
	.word	midi_function_cleanup
	.space	8
	.word	midi_function_bind_config
	.space	8
	.type	midi_function_attributes, %object
	.size	midi_function_attributes, 8
midi_function_attributes:
	.word	dev_attr_alsa
	.word	0
	.type	dev_attr_alsa, %object
	.size	dev_attr_alsa, 16
dev_attr_alsa:
	.word	.LC862
	.short	292
	.space	2
	.word	midi_alsa_show
	.word	0
	.type	hid_function, %object
	.size	hid_function, 52
hid_function:
	.word	.LC274
	.space	20
	.word	hid_function_init
	.word	hid_function_cleanup
	.space	8
	.word	hid_function_bind_config
	.space	8
	.type	uasp_function, %object
	.size	uasp_function, 52
uasp_function:
	.word	.LC863
	.space	20
	.word	uasp_function_init
	.word	uasp_function_cleanup
	.space	8
	.word	uasp_function_bind_config
	.space	8
	.type	audio_source_function, %object
	.size	audio_source_function, 52
audio_source_function:
	.word	.LC582
	.space	12
	.word	audio_source_function_attributes
	.space	4
	.word	audio_source_function_init
	.word	audio_source_function_cleanup
	.space	8
	.word	audio_source_function_bind_config
	.word	audio_source_function_unbind_config
	.space	4
	.type	audio_source_function_attributes, %object
	.size	audio_source_function_attributes, 8
audio_source_function_attributes:
	.word	dev_attr_pcm
	.word	0
	.type	dev_attr_pcm, %object
	.size	dev_attr_pcm, 16
dev_attr_pcm:
	.word	.LC864
	.short	420
	.space	2
	.word	audio_source_pcm_show
	.word	0
	.type	accessory_function, %object
	.size	accessory_function, 52
accessory_function:
	.word	.LC523
	.space	20
	.word	accessory_function_init
	.word	accessory_function_cleanup
	.space	8
	.word	accessory_function_bind_config
	.space	4
	.word	accessory_function_ctrlrequest
	.type	mass_storage_function, %object
	.size	mass_storage_function, 52
mass_storage_function:
	.word	.LC865
	.space	12
	.word	mass_storage_function_attributes
	.space	4
	.word	mass_storage_function_init
	.word	mass_storage_function_cleanup
	.space	8
	.word	mass_storage_function_bind_config
	.space	8
	.type	mass_storage_function_attributes, %object
	.size	mass_storage_function_attributes, 8
mass_storage_function_attributes:
	.word	dev_attr_inquiry_string
	.word	0
	.type	dev_attr_inquiry_string, %object
	.size	dev_attr_inquiry_string, 16
dev_attr_inquiry_string:
	.word	.LC866
	.short	420
	.space	2
	.word	mass_storage_inquiry_show
	.word	mass_storage_inquiry_store
	.type	ecm_function, %object
	.size	ecm_function, 52
ecm_function:
	.word	.LC815
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_function_bind_config
	.word	ecm_function_unbind_config
	.space	4
	.type	rndis_qc_function, %object
	.size	rndis_qc_function, 52
rndis_qc_function:
	.word	.LC867
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_qc_function_init
	.word	rndis_qc_function_cleanup
	.space	8
	.word	rndis_qc_function_bind_config
	.word	rndis_qc_function_unbind_config
	.space	4
	.type	rndis_function, %object
	.size	rndis_function, 52
rndis_function:
	.word	.LC778
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_function_init
	.word	rndis_function_cleanup
	.space	8
	.word	rndis_function_bind_config
	.word	rndis_function_unbind_config
	.space	4
	.type	rndis_function_attributes, %object
	.size	rndis_function_attributes, 24
rndis_function_attributes:
	.word	dev_attr_manufacturer
	.word	dev_attr_wceis
	.word	dev_attr_ethaddr
	.word	dev_attr_vendorID
	.word	dev_attr_max_pkt_per_xfer
	.word	0
	.type	dev_attr_max_pkt_per_xfer, %object
	.size	dev_attr_max_pkt_per_xfer, 16
dev_attr_max_pkt_per_xfer:
	.word	.LC868
	.short	420
	.space	2
	.word	rndis_max_pkt_per_xfer_show
	.word	rndis_max_pkt_per_xfer_store
	.type	dev_attr_vendorID, %object
	.size	dev_attr_vendorID, 16
dev_attr_vendorID:
	.word	.LC869
	.short	420
	.space	2
	.word	rndis_vendorID_show
	.word	rndis_vendorID_store
	.type	dev_attr_ethaddr, %object
	.size	dev_attr_ethaddr, 16
dev_attr_ethaddr:
	.word	.LC870
	.short	420
	.space	2
	.word	rndis_ethaddr_show
	.word	rndis_ethaddr_store
	.type	dev_attr_wceis, %object
	.size	dev_attr_wceis, 16
dev_attr_wceis:
	.word	.LC871
	.short	420
	.space	2
	.word	rndis_wceis_show
	.word	rndis_wceis_store
	.type	dev_attr_manufacturer, %object
	.size	dev_attr_manufacturer, 16
dev_attr_manufacturer:
	.word	.LC872
	.short	420
	.space	2
	.word	rndis_manufacturer_show
	.word	rndis_manufacturer_store
	.type	ptp_function, %object
	.size	ptp_function, 52
ptp_function:
	.word	.LC873
	.space	20
	.word	ptp_function_init
	.word	ptp_function_cleanup
	.space	8
	.word	ptp_function_bind_config
	.space	8
	.type	mtp_function, %object
	.size	mtp_function, 52
mtp_function:
	.word	.LC526
	.space	20
	.word	mtp_function_init
	.word	mtp_function_cleanup
	.space	8
	.word	mtp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	ccid_function, %object
	.size	ccid_function, 52
ccid_function:
	.word	.LC520
	.space	20
	.word	ccid_function_init
	.word	ccid_function_cleanup
	.space	8
	.word	ccid_function_bind_config
	.space	8
	.type	serial_function, %object
	.size	serial_function, 52
serial_function:
	.word	.LC874
	.space	12
	.word	serial_function_attributes
	.space	8
	.word	serial_function_cleanup
	.space	8
	.word	serial_function_bind_config
	.space	8
	.type	serial_function_attributes, %object
	.size	serial_function_attributes, 12
serial_function_attributes:
	.word	dev_attr_transports
	.word	dev_attr_serial_xport_names
	.word	0
	.type	dev_attr_serial_xport_names, %object
	.size	dev_attr_serial_xport_names, 16
dev_attr_serial_xport_names:
	.word	.LC875
	.short	420
	.space	2
	.word	serial_xport_names_show
	.word	serial_xport_names_store
	.type	dev_attr_transports, %object
	.size	dev_attr_transports, 16
dev_attr_transports:
	.word	.LC876
	.short	128
	.space	2
	.word	0
	.word	serial_transports_store
	.type	qdss_function, %object
	.size	qdss_function, 52
qdss_function:
	.word	.LC527
	.space	20
	.word	qdss_function_init
	.word	qdss_function_cleanup
	.space	8
	.word	qdss_function_bind_config
	.space	8
	.type	diag_function, %object
	.size	diag_function, 52
diag_function:
	.word	.LC877
	.space	12
	.word	diag_function_attributes
	.space	4
	.word	diag_function_init
	.word	diag_function_cleanup
	.space	8
	.word	diag_function_bind_config
	.space	8
	.type	diag_function_attributes, %object
	.size	diag_function_attributes, 8
diag_function_attributes:
	.word	dev_attr_clients
	.word	0
	.type	dev_attr_clients, %object
	.size	dev_attr_clients, 16
dev_attr_clients:
	.word	.LC878
	.short	128
	.space	2
	.word	0
	.word	clients_store
	.type	audio_function, %object
	.size	audio_function, 52
audio_function:
	.word	.LC832
	.space	36
	.word	audio_function_bind_config
	.space	8
	.type	mbim_function, %object
	.size	mbim_function, 52
mbim_function:
	.word	.LC540
	.space	12
	.word	mbim_function_attributes
	.space	4
	.word	mbim_function_init
	.word	mbim_function_cleanup
	.space	8
	.word	mbim_function_bind_config
	.space	4
	.word	mbim_function_ctrlrequest
	.type	mbim_function_attributes, %object
	.size	mbim_function_attributes, 8
mbim_function_attributes:
	.word	dev_attr_mbim_transports
	.word	0
	.type	dev_attr_mbim_transports, %object
	.size	dev_attr_mbim_transports, 16
dev_attr_mbim_transports:
	.word	.LC879
	.short	420
	.space	2
	.word	mbim_transports_show
	.word	mbim_transports_store
	.type	ecm_qc_function, %object
	.size	ecm_qc_function, 52
ecm_qc_function:
	.word	.LC880
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_qc_function_bind_config
	.word	ecm_qc_function_unbind_config
	.space	4
	.type	ecm_function_attributes, %object
	.size	ecm_function_attributes, 12
ecm_function_attributes:
	.word	dev_attr_ecm_transports
	.word	dev_attr_ecm_ethaddr
	.word	0
	.type	dev_attr_ecm_transports, %object
	.size	dev_attr_ecm_transports, 16
dev_attr_ecm_transports:
	.word	.LC881
	.short	420
	.space	2
	.word	ecm_transports_show
	.word	ecm_transports_store
	.type	dev_attr_ecm_ethaddr, %object
	.size	dev_attr_ecm_ethaddr, 16
dev_attr_ecm_ethaddr:
	.word	.LC882
	.short	420
	.space	2
	.word	ecm_ethaddr_show
	.word	ecm_ethaddr_store
	.type	ncm_function, %object
	.size	ncm_function, 52
ncm_function:
	.word	.LC818
	.space	12
	.word	ncm_function_attributes
	.space	4
	.word	ncm_function_init
	.word	ncm_function_cleanup
	.space	8
	.word	ncm_function_bind_config
	.word	ncm_function_unbind_config
	.space	4
	.type	ncm_function_attributes, %object
	.size	ncm_function_attributes, 8
ncm_function_attributes:
	.word	dev_attr_ncm_ethaddr
	.word	0
	.type	dev_attr_ncm_ethaddr, %object
	.size	dev_attr_ncm_ethaddr, 16
dev_attr_ncm_ethaddr:
	.word	.LC883
	.short	420
	.space	2
	.word	ncm_ethaddr_show
	.word	ncm_ethaddr_store
	.type	gps_function, %object
	.size	gps_function, 52
gps_function:
	.word	.LC557
	.space	24
	.word	gps_function_cleanup
	.space	8
	.word	gps_function_bind_config
	.space	8
	.type	rmnet_function, %object
	.size	rmnet_function, 52
rmnet_function:
	.word	.LC563
	.space	12
	.word	rmnet_function_attributes
	.space	8
	.word	rmnet_function_cleanup
	.space	8
	.word	rmnet_function_bind_config
	.space	8
	.type	rmnet_function_attributes, %object
	.size	rmnet_function_attributes, 12
rmnet_function_attributes:
	.word	dev_attr_rmnet_transports
	.word	dev_attr_rmnet_xport_names
	.word	0
	.type	dev_attr_rmnet_xport_names, %object
	.size	dev_attr_rmnet_xport_names, 16
dev_attr_rmnet_xport_names:
	.word	.LC875
	.short	420
	.space	2
	.word	rmnet_xport_names_show
	.word	rmnet_xport_names_store
	.type	dev_attr_rmnet_transports, %object
	.size	dev_attr_rmnet_transports, 16
dev_attr_rmnet_transports:
	.word	.LC876
	.short	420
	.space	2
	.word	rmnet_transports_show
	.word	rmnet_transports_store
	.type	rmnet_smd_sdio_function, %object
	.size	rmnet_smd_sdio_function, 52
rmnet_smd_sdio_function:
	.word	.LC524
	.space	12
	.word	rmnet_smd_sdio_attributes
	.space	4
	.word	rmnet_smd_sdio_function_init
	.word	rmnet_smd_sdio_function_cleanup
	.space	8
	.word	rmnet_smd_sdio_bind_config
	.space	8
	.type	rmnet_smd_sdio_attributes, %object
	.size	rmnet_smd_sdio_attributes, 8
rmnet_smd_sdio_attributes:
	.word	dev_attr_transport
	.word	0
	.type	rmnet_sdio_function, %object
	.size	rmnet_sdio_function, 52
rmnet_sdio_function:
	.word	.LC545
	.space	36
	.word	rmnet_sdio_function_bind_config
	.space	8
	.type	rmnet_smd_function, %object
	.size	rmnet_smd_function, 52
rmnet_smd_function:
	.word	.LC884
	.space	36
	.word	rmnet_smd_function_bind_config
	.space	8
	.type	acm_function, %object
	.size	acm_function, 52
acm_function:
	.word	.LC885
	.space	12
	.word	acm_function_attributes
	.space	8
	.word	acm_function_cleanup
	.space	8
	.word	acm_function_bind_config
	.space	8
	.type	acm_function_attributes, %object
	.size	acm_function_attributes, 8
acm_function_attributes:
	.word	dev_attr_acm_transports
	.word	0
	.type	dev_attr_acm_transports, %object
	.size	dev_attr_acm_transports, 16
dev_attr_acm_transports:
	.word	.LC886
	.short	128
	.space	2
	.word	0
	.word	acm_transports_store
	.type	ffs_function_attributes, %object
	.size	ffs_function_attributes, 8
ffs_function_attributes:
	.word	dev_attr_aliases
	.word	0
	.type	dev_attr_aliases, %object
	.size	dev_attr_aliases, 16
dev_attr_aliases:
	.word	.LC887
	.short	420
	.space	2
	.word	ffs_aliases_show
	.word	ffs_aliases_store
	.type	dev_strings, %object
	.size	dev_strings, 8
dev_strings:
	.word	stringtab_dev
	.word	0
	.type	stringtab_dev, %object
	.size	stringtab_dev, 8
stringtab_dev:
	.short	1033
	.space	2
	.word	strings_dev
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC888
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC634
	.word	.LC889
	.type	ncm_string_table, %object
	.size	ncm_string_table, 8
ncm_string_table:
	.short	1033
	.space	2
	.word	ncm_string_defs
	.type	ncm_desc, %object
	.size	ncm_desc, 6
ncm_desc:
	.byte	6
	.byte	36
	.byte	26
	.2byte	256
	.byte	17
	.space	2
	.type	ncm_header_desc, %object
	.size	ncm_header_desc, 5
ncm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	audio_stringtab_dev, %object
	.size	audio_stringtab_dev, 8
audio_stringtab_dev:
	.short	1033
	.space	2
	.word	audio_string_defs
	.type	microphone_as_iso_in_desc, %object
	.size	microphone_as_iso_in_desc, 7
microphone_as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_as_header_desc, %object
	.size	microphone_as_header_desc, 7
microphone_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	2
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_iso_out_desc, %object
	.size	speaker_as_iso_out_desc, 7
speaker_as_iso_out_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_header_desc, %object
	.size	speaker_as_header_desc, 7
speaker_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	3
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_output_terminal_desc, %object
	.size	microphone_output_terminal_desc, 9
microphone_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	2
	.short	257
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	speaker_output_terminal_desc, %object
	.size	speaker_output_terminal_desc, 9
speaker_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	4
	.short	769
	.byte	3
	.byte	3
	.space	1
	.space	3
	.type	req_capture_count, %object
	.size	req_capture_count, 4
req_capture_count:
	.word	48
	.type	rndis_qc_string_table, %object
	.size	rndis_qc_string_table, 8
rndis_qc_string_table:
	.short	1033
	.space	2
	.word	rndis_qc_string_defs
	.type	rndis_qc_ss_bulk_comp_desc, %object
	.size	rndis_qc_ss_bulk_comp_desc, 6
rndis_qc_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rndis_qc_ss_intr_comp_desc, %object
	.size	rndis_qc_ss_intr_comp_desc, 6
rndis_qc_ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_qc_acm_descriptor, %object
	.size	rndis_qc_acm_descriptor, 4
rndis_qc_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	rndis_qc_call_mgmt_descriptor, %object
	.size	rndis_qc_call_mgmt_descriptor, 5
rndis_qc_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	rndis_qc_header_desc, %object
	.size	rndis_qc_header_desc, 5
rndis_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_string_table, %object
	.size	ecm_string_table, 8
ecm_string_table:
	.short	1033
	.space	2
	.word	ecm_string_defs
	.type	ss_ecm_bulk_comp_desc, %object
	.size	ss_ecm_bulk_comp_desc, 6
ss_ecm_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_ecm_intr_comp_desc, %object
	.size	ss_ecm_intr_comp_desc, 6
ss_ecm_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_header_desc, %object
	.size	ecm_header_desc, 5
ecm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	mbim_string_table, %object
	.size	mbim_string_table, 8
mbim_string_table:
	.short	1033
	.space	2
	.word	mbim_string_defs
	.type	ss_mbim_out_comp_desc, %object
	.size	ss_mbim_out_comp_desc, 6
ss_mbim_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_in_comp_desc, %object
	.size	ss_mbim_in_comp_desc, 6
ss_mbim_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_notify_comp_desc, %object
	.size	ss_mbim_notify_comp_desc, 6
ss_mbim_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	ext_mbb_desc, %object
	.size	ext_mbb_desc, 8
ext_mbb_desc:
	.byte	8
	.byte	36
	.byte	28
	.2byte	256
	.byte	64
	.short	1500
	.type	mbim_header_desc, %object
	.size	mbim_header_desc, 5
mbim_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_qc_string_table, %object
	.size	ecm_qc_string_table, 8
ecm_qc_string_table:
	.short	1033
	.space	2
	.word	ecm_qc_string_defs
	.type	ecm_qc_ss_out_comp_desc, %object
	.size	ecm_qc_ss_out_comp_desc, 6
ecm_qc_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_in_comp_desc, %object
	.size	ecm_qc_ss_in_comp_desc, 6
ecm_qc_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_notify_comp_desc, %object
	.size	ecm_qc_ss_notify_comp_desc, 6
ecm_qc_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_qc_header_desc, %object
	.size	ecm_qc_header_desc, 5
ecm_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	rndis_string_table, %object
	.size	rndis_string_table, 8
rndis_string_table:
	.short	1033
	.space	2
	.word	rndis_string_defs
	.type	ss_bulk_comp_desc, %object
	.size	ss_bulk_comp_desc, 6
ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_intr_comp_desc, %object
	.size	ss_intr_comp_desc, 6
ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_acm_descriptor, %object
	.size	rndis_acm_descriptor, 4
rndis_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	call_mgmt_descriptor, %object
	.size	call_mgmt_descriptor, 5
call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	header_desc, %object
	.size	header_desc, 5
header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	acc_string_table, %object
	.size	acc_string_table, 8
acc_string_table:
	.short	1033
	.space	2
	.word	acc_string_defs
	.type	acc_superspeed_out_comp_desc, %object
	.size	acc_superspeed_out_comp_desc, 6
acc_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acc_superspeed_in_comp_desc, %object
	.size	acc_superspeed_in_comp_desc, 6
acc_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_string_table, %object
	.size	mtp_string_table, 8
mtp_string_table:
	.short	1033
	.space	2
	.word	mtp_string_defs
	.type	mtp_superspeed_intr_comp_desc, %object
	.size	mtp_superspeed_intr_comp_desc, 6
mtp_superspeed_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	28
	.space	2
	.type	mtp_superspeed_out_comp_desc, %object
	.size	mtp_superspeed_out_comp_desc, 6
mtp_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	mtp_superspeed_in_comp_desc, %object
	.size	mtp_superspeed_in_comp_desc, 6
mtp_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	ptp_interface_desc, %object
	.size	ptp_interface_desc, 9
ptp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	6
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	adb_superspeed_out_comp_desc, %object
	.size	adb_superspeed_out_comp_desc, 6
adb_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	adb_superspeed_in_comp_desc, %object
	.size	adb_superspeed_in_comp_desc, 6
adb_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_string_table, %object
	.size	acm_string_table, 8
acm_string_table:
	.short	1033
	.space	2
	.word	acm_string_defs
	.type	acm_ss_bulk_comp_desc, %object
	.size	acm_ss_bulk_comp_desc, 6
acm_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_descriptor, %object
	.size	acm_descriptor, 4
acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	acm_header_desc, %object
	.size	acm_header_desc, 5
acm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	gser_string_table, %object
	.size	gser_string_table, 8
gser_string_table:
	.short	1033
	.space	2
	.word	gser_string_defs
	.type	gser_ss_notify_comp_desc, %object
	.size	gser_ss_notify_comp_desc, 6
gser_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	10
	.space	2
	.type	gser_ss_bulk_comp_desc, %object
	.size	gser_ss_bulk_comp_desc, 6
gser_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	gser_union_desc, %object
	.size	gser_union_desc, 5
gser_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	gser_descriptor, %object
	.size	gser_descriptor, 4
gser_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	gser_call_mgmt_descriptor, %object
	.size	gser_call_mgmt_descriptor, 5
gser_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	gser_header_desc, %object
	.size	gser_header_desc, 5
gser_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	fsg_stringtab, %object
	.size	fsg_stringtab, 8
fsg_stringtab:
	.short	1033
	.space	2
	.word	fsg_strings
	.type	fs_audio_desc, %object
	.size	fs_audio_desc, 48
fs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	fs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	hs_audio_desc, %object
	.size	hs_audio_desc, 48
hs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	hs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	as_iso_in_desc, %object
	.size	as_iso_in_desc, 7
as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	as_header_desc, %object
	.size	as_header_desc, 7
as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	output_terminal_desc, %object
	.size	output_terminal_desc, 9
output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	3
	.short	257
	.byte	2
	.byte	2
	.space	1
	.space	3
	.type	feature_unit_desc, %object
	.size	feature_unit_desc, 9
feature_unit_desc:
	.byte	9
	.byte	36
	.byte	6
	.byte	2
	.byte	1
	.byte	2
	.space	3
	.space	3
	.type	audio_source_ac_header_desc, %object
	.size	audio_source_ac_header_desc, 10
audio_source_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	40
	.byte	2
	.byte	0
	.byte	1
	.space	2
	.type	gps_string_table, %object
	.size	gps_string_table, 8
gps_string_table:
	.short	1033
	.space	2
	.word	gps_string_defs
	.type	gps_ss_notify_comp_desc, %object
	.size	gps_ss_notify_comp_desc, 6
gps_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	rmnet_string_table, %object
	.size	rmnet_string_table, 8
rmnet_string_table:
	.short	1033
	.space	2
	.word	rmnet_string_defs
	.type	rmnet_ss_out_comp_desc, %object
	.size	rmnet_ss_out_comp_desc, 6
rmnet_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_in_comp_desc, %object
	.size	rmnet_ss_in_comp_desc, 6
rmnet_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_notify_comp_desc, %object
	.size	rmnet_ss_notify_comp_desc, 6
rmnet_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	dev_attr_transport, %object
	.size	dev_attr_transport, 16
dev_attr_transport:
	.word	.LC944
	.short	420
	.space	2
	.word	0
	.word	transport_store
	.type	rmnet_mux_string_table, %object
	.size	rmnet_mux_string_table, 8
rmnet_mux_string_table:
	.short	1033
	.space	2
	.word	rmnet_mux_string_defs
	.type	rmnet_mux_string_defs, %object
	.size	rmnet_mux_string_defs, 16
rmnet_mux_string_defs:
	.space	4
	.word	.LC942
	.space	8
	.type	mux_sdio_rx_fctrl_dis_thld, %object
	.size	mux_sdio_rx_fctrl_dis_thld, 4
mux_sdio_rx_fctrl_dis_thld:
	.word	500
	.type	mux_sdio_tx_pkt_drop_thld, %object
	.size	mux_sdio_tx_pkt_drop_thld, 4
mux_sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_sdio_string_table, %object
	.size	rmnet_sdio_string_table, 8
rmnet_sdio_string_table:
	.short	1033
	.space	2
	.word	rmnet_sdio_string_defs
	.type	rmnet_sdio_string_defs, %object
	.size	rmnet_sdio_string_defs, 16
rmnet_sdio_string_defs:
	.space	4
	.word	.LC945
	.space	8
	.type	sdio_rx_fctrl_dis_thld, %object
	.size	sdio_rx_fctrl_dis_thld, 4
sdio_rx_fctrl_dis_thld:
	.word	500
	.type	sdio_tx_pkt_drop_thld, %object
	.size	sdio_tx_pkt_drop_thld, 4
sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_smd_string_table, %object
	.size	rmnet_smd_string_table, 8
rmnet_smd_string_table:
	.short	1033
	.space	2
	.word	rmnet_smd_string_defs
	.type	rmnet_smd_string_defs, %object
	.size	rmnet_smd_string_defs, 16
rmnet_smd_string_defs:
	.space	4
	.word	.LC945
	.space	8
	.type	qdss_string_table, %object
	.size	qdss_string_table, 8
qdss_string_table:
	.short	1033
	.space	2
	.word	qdss_string_defs
	.type	ss_bulk_out_comp_desc, %object
	.size	ss_bulk_out_comp_desc, 6
ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_bulk_in_comp_desc, %object
	.size	ss_bulk_in_comp_desc, 6
ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	midi_stringtab, %object
	.size	midi_stringtab, 8
midi_stringtab:
	.short	1033
	.space	2
	.word	midi_string_defs
	.bss
	.align	2
	.set	.LANCHOR1,. + 0
	.set	.LANCHOR4,. + 8184
	.type	n_sdio_ports, %object
	.size	n_sdio_ports, 4
n_sdio_ports:
	.space	4
	.type	sdio_ports, %object
	.size	sdio_ports, 216
sdio_ports:
	.space	216
	.type	n_smd_ports, %object
	.size	n_smd_ports, 4
n_smd_ports:
	.space	4
	.type	smd_ports, %object
	.size	smd_ports, 216
smd_ports:
	.space	216
	.type	n_bam_ports, %object
	.size	n_bam_ports, 4
n_bam_ports:
	.space	4
	.type	bam_ports, %object
	.size	bam_ports, 84
bam_ports:
	.space	84
	.type	ctrl_smd_ports, %object
	.size	ctrl_smd_ports, 504
ctrl_smd_ports:
	.space	504
	.type	ctrl_port, %object
	.size	ctrl_port, 4
ctrl_port:
	.space	4
	.type	no_ctrl_ports, %object
	.size	no_ctrl_ports, 4
no_ctrl_ports:
	.space	4
	.type	gctrl_ports, %object
	.size	gctrl_ports, 416
gctrl_ports:
	.space	416
	.type	no_data_ports, %object
	.size	no_data_ports, 4
no_data_ports:
	.space	4
	.type	gdata_ports, %object
	.size	gdata_ports, 416
gdata_ports:
	.space	416
	.type	num_ctrl_ports, %object
	.size	num_ctrl_ports, 4
num_ctrl_ports:
	.space	4
	.type	ghsuart_ctrl_ports, %object
	.size	ghsuart_ctrl_ports, 168
ghsuart_ctrl_ports:
	.space	168
	.type	num_data_ports, %object
	.size	num_data_ports, 4
num_data_ports:
	.space	4
	.type	ghsuart_data_ports, %object
	.size	ghsuart_data_ports, 168
ghsuart_data_ports:
	.space	168
	.type	_ccid_dev, %object
	.size	_ccid_dev, 4
_ccid_dev:
	.space	4
	.type	audio_reinit, %object
	.size	audio_reinit, 1
audio_reinit:
	.space	1
	.space	3
	.type	android_dev_list, %object
	.size	android_dev_list, 8
android_dev_list:
	.space	8
	.type	gps_port, %object
	.size	gps_port, 8
gps_port:
	.space	8
	.type	gserial_ports, %object
	.size	gserial_ports, 36
gserial_ports:
	.space	36
	.type	gacm_ports, %object
	.size	gacm_ports, 36
gacm_ports:
	.space	36
	.type	composite, %object
	.size	composite, 4
composite:
	.space	4
	.type	rmux_dev, %object
	.size	rmux_dev, 4
rmux_dev:
	.space	4
	.type	_acc_dev, %object
	.size	_acc_dev, 4
_acc_dev:
	.space	4
	.type	rndis_lock, %object
	.size	rndis_lock, 4
rndis_lock:
	.space	4
	.type	_rndis_qc, %object
	.size	_rndis_qc, 4
_rndis_qc:
	.space	4
	.type	_mtp_dev, %object
	.size	_mtp_dev, 4
_mtp_dev:
	.space	4
	.type	rmnet_ports, %object
	.size	rmnet_ports, 72
rmnet_ports:
	.space	72
	.type	_mbim_dev, %object
	.size	_mbim_dev, 4
_mbim_dev:
	.space	4
	.type	serial_string, %object
	.size	serial_string, 256
serial_string:
	.space	256
	.type	product_string, %object
	.size	product_string, 256
product_string:
	.space	256
	.type	manufacturer_string, %object
	.size	manufacturer_string, 256
manufacturer_string:
	.space	256
	.type	ecm_transports, %object
	.size	ecm_transports, 50
ecm_transports:
	.space	50
	.space	2
	.type	serial_xport_names, %object
	.size	serial_xport_names, 32
serial_xport_names:
	.space	32
	.type	rmnet_xport_names, %object
	.size	rmnet_xport_names, 50
rmnet_xport_names:
	.space	50
	.space	2
	.type	rmnet_transports, %object
	.size	rmnet_transports, 50
rmnet_transports:
	.space	50
	.space	2
	.type	mbim_transports, %object
	.size	mbim_transports, 50
mbim_transports:
	.space	50
	.space	2
	.type	rmnet_smd, %object
	.size	rmnet_smd, 4
rmnet_smd:
	.space	4
	.type	gserial_wq, %object
	.size	gserial_wq, 4
gserial_wq:
	.space	4
	.type	gsdio_wq, %object
	.size	gsdio_wq, 4
gsdio_wq:
	.space	4
	.type	gsmd_wq, %object
	.size	gsmd_wq, 4
gsmd_wq:
	.space	4
	.type	bam2bam_data_ports, %object
	.size	bam2bam_data_ports, 4
bam2bam_data_ports:
	.space	4
	.type	bam_data_wq, %object
	.size	bam_data_wq, 4
bam_data_wq:
	.space	4
	.type	uether_wq, %object
	.size	uether_wq, 4
uether_wq:
	.space	4
	.type	d_lock, %object
	.size	d_lock, 4
d_lock:
	.space	4
	.type	dent_smd, %object
	.size	dent_smd, 4
dent_smd:
	.space	4
	.type	ghsuart_ctrl_dent, %object
	.size	ghsuart_ctrl_dent, 4
ghsuart_ctrl_dent:
	.space	4
	.type	ghsuart_data_dent, %object
	.size	ghsuart_data_dent, 4
ghsuart_data_dent:
	.space	4
	.type	dent_diag, %object
	.size	dent_diag, 4
dent_diag:
	.space	4
	.type	ch_lock, %object
	.size	ch_lock, 4
ch_lock:
	.space	4
	.type	nr_rmnet_ports, %object
	.size	nr_rmnet_ports, 4
nr_rmnet_ports:
	.space	4
	.type	gbam_dent, %object
	.size	gbam_dent, 4
gbam_dent:
	.space	4
	.type	no_ctrl_smd_ports, %object
	.size	no_ctrl_smd_ports, 4
no_ctrl_smd_ports:
	.space	4
	.type	no_ctrl_qti_ports, %object
	.size	no_ctrl_qti_ports, 4
no_ctrl_qti_ports:
	.space	4
	.type	no_data_bam_ports, %object
	.size	no_data_bam_ports, 4
no_data_bam_ports:
	.space	4
	.type	no_data_bam2bam_ports, %object
	.size	no_data_bam2bam_ports, 4
no_data_bam2bam_ports:
	.space	4
	.type	no_ctrl_hsic_ports, %object
	.size	no_ctrl_hsic_ports, 4
no_ctrl_hsic_ports:
	.space	4
	.type	no_data_hsic_ports, %object
	.size	no_data_hsic_ports, 4
no_data_hsic_ports:
	.space	4
	.type	no_ctrl_hsuart_ports, %object
	.size	no_ctrl_hsuart_ports, 4
no_ctrl_hsuart_ports:
	.space	4
	.type	no_data_hsuart_ports, %object
	.size	no_data_hsuart_ports, 4
no_data_hsuart_ports:
	.space	4
	.type	grmnet_ctrl_wq, %object
	.size	grmnet_ctrl_wq, 4
grmnet_ctrl_wq:
	.space	4
	.type	_adb_dev, %object
	.size	_adb_dev, 4
_adb_dev:
	.space	4
	.type	smd_ctrl_dent, %object
	.size	smd_ctrl_dent, 4
smd_ctrl_dent:
	.space	4
	.type	smd_ctrl_dfile, %object
	.size	smd_ctrl_dfile, 4
smd_ctrl_dfile:
	.space	4
	.type	online_clients, %object
	.size	online_clients, 1
online_clients:
	.space	1
	.space	3
	.type	gctrl_dent, %object
	.size	gctrl_dent, 4
gctrl_dent:
	.space	4
	.type	gctrl_dfile, %object
	.size	gctrl_dfile, 4
gctrl_dfile:
	.space	4
	.type	gdata_dent, %object
	.size	gdata_dent, 4
gdata_dent:
	.space	4
	.type	gdata_dfile_stats, %object
	.size	gdata_dfile_stats, 4
gdata_dfile_stats:
	.space	4
	.type	gdata_dfile_tstamp, %object
	.size	gdata_dfile_tstamp, 4
gdata_dfile_tstamp:
	.space	4
	.type	diag_dev_list, %object
	.size	diag_dev_list, 8
diag_dev_list:
	.space	8
	.type	n_tx_req_queued, %object
	.size	n_tx_req_queued, 4
n_tx_req_queued:
	.space	4
	.type	gbam_wq, %object
	.size	gbam_wq, 4
gbam_wq:
	.space	4
	.type	retry_cnt.39140, %object
	.size	retry_cnt.39140, 4
retry_cnt.39140:
	.space	4
	.type	acm_transports, %object
	.size	acm_transports, 32
acm_transports:
	.space	32
	.type	serial_transports, %object
	.size	serial_transports, 32
serial_transports:
	.space	32
	.type	diag_dload, %object
	.size	diag_dload, 4
diag_dload:
	.space	4
	.type	diag_clients, %object
	.size	diag_clients, 32
diag_clients:
	.space	32
	.type	ipa_params, %object
	.size	ipa_params, 28
ipa_params:
	.space	28
	.type	__key.50060, %object
	.size	__key.50060, 0
__key.50060:
	.type	__key.55409, %object
	.size	__key.55409, 0
__key.55409:
	.type	__key.55410, %object
	.size	__key.55410, 0
__key.55410:
	.type	__key.54084, %object
	.size	__key.54084, 0
__key.54084:
	.type	__key.54085, %object
	.size	__key.54085, 0
__key.54085:
	.type	__key.54086, %object
	.size	__key.54086, 0
__key.54086:
	.type	__key.53226, %object
	.size	__key.53226, 0
__key.53226:
	.type	__key.53227, %object
	.size	__key.53227, 0
__key.53227:
	.type	__key.39235, %object
	.size	__key.39235, 0
__key.39235:
	.type	__key.39361, %object
	.size	__key.39361, 0
__key.39361:
	.type	dent_rmnet_mux, %object
	.size	dent_rmnet_mux, 4
dent_rmnet_mux:
	.space	4
	.type	nr_mbim_ports, %object
	.size	nr_mbim_ports, 4
nr_mbim_ports:
	.space	4
	.type	mbim_ports, %object
	.size	mbim_ports, 8
mbim_ports:
	.space	8
	.type	rndis_ul_max_xfer_size_rcvd, %object
	.size	rndis_ul_max_xfer_size_rcvd, 4
rndis_ul_max_xfer_size_rcvd:
	.space	4
	.type	rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	rndis_ul_max_pkt_per_xfer_rcvd, 4
rndis_ul_max_pkt_per_xfer_rcvd:
	.space	4
	.type	android_dev_count, %object
	.size	android_dev_count, 4
android_dev_count:
	.space	4
	.type	android_class, %object
	.size	android_class, 4
android_class:
	.space	4
	.type	next_state.62236, %object
	.size	next_state.62236, 4
next_state.62236:
	.space	4
	.type	last_uevent.62235, %object
	.size	last_uevent.62235, 4
last_uevent.62235:
	.space	4
	.type	epnum, %object
	.size	epnum, 4
epnum:
	.space	4
	.type	record_timestamp, %object
	.size	record_timestamp, 4
record_timestamp:
	.space	4
	.type	bam2bam_ports, %object
	.size	bam2bam_ports, 12
bam2bam_ports:
	.space	12
	.type	n_bam2bam_data_ports, %object
	.size	n_bam2bam_data_ports, 4
n_bam2bam_data_ports:
	.space	4
	.type	the_card, %object
	.size	the_card, 4
the_card:
	.space	4
	.type	__key.57109, %object
	.size	__key.57109, 0
__key.57109:
	.type	__key.57110, %object
	.size	__key.57110, 0
__key.57110:
	.type	rndis_per_dev_params, %object
	.size	rndis_per_dev_params, 60
rndis_per_dev_params:
	.space	60
	.type	__key.53585, %object
	.size	__key.53585, 0
__key.53585:
	.type	__key.53528, %object
	.size	__key.53528, 0
__key.53528:
	.type	__key.53529, %object
	.size	__key.53529, 0
__key.53529:
	.type	prev_len.47339, %object
	.size	prev_len.47339, 4
prev_len.47339:
	.space	4
	.type	n_ports, %object
	.size	n_ports, 4
n_ports:
	.space	4
	.type	gs_tty_driver, %object
	.size	gs_tty_driver, 4
gs_tty_driver:
	.space	4
	.type	ports, %object
	.size	ports, 224
ports:
	.space	224
	.type	gs_dent, %object
	.size	gs_dent, 4
gs_dent:
	.space	4
	.type	write_error_after_csw_sent, %object
	.size	write_error_after_csw_sent, 4
write_error_after_csw_sent:
	.space	4
	.type	csw_hack_sent, %object
	.size	csw_hack_sent, 4
csw_hack_sent:
	.space	4
	.type	__key.44900, %object
	.size	__key.44900, 0
__key.44900:
	.type	__key.44902, %object
	.size	__key.44902, 0
__key.44902:
	.type	__key.8383, %object
	.size	__key.8383, 0
__key.8383:
	.type	bam_info, %object
	.size	bam_info, 16
bam_info:
	.space	16
	.type	composite_gadget_bind, %object
	.size	composite_gadget_bind, 4
composite_gadget_bind:
	.space	4
	.type	idVendor, %object
	.size	idVendor, 2
idVendor:
	.space	2
	.type	idProduct, %object
	.size	idProduct, 2
idProduct:
	.space	2
	.type	bcdDevice, %object
	.size	bcdDevice, 2
bcdDevice:
	.space	2
	.space	2
	.type	iManufacturer, %object
	.size	iManufacturer, 4
iManufacturer:
	.space	4
	.type	composite_manufacturer, %object
	.size	composite_manufacturer, 50
composite_manufacturer:
	.space	50
	.space	2
	.type	iProduct, %object
	.size	iProduct, 4
iProduct:
	.space	4
	.type	iSerialNumber, %object
	.size	iSerialNumber, 4
iSerialNumber:
	.space	4
	.type	the_dev, %object
	.size	the_dev, 4
the_dev:
	.space	4
	.type	rndis_initialized, %object
	.size	rndis_initialized, 1
rndis_initialized:
	.space	1
	.space	3
	.type	rmnet_mux_smd_data_ch, %object
	.size	rmnet_mux_smd_data_ch, 4
rmnet_mux_smd_data_ch:
	.space	4
	.type	retry_cnt.38384, %object
	.size	retry_cnt.38384, 4
retry_cnt.38384:
	.space	4
	.type	__key.46336, %object
	.size	__key.46336, 0
__key.46336:
	.type	__key.46345, %object
	.size	__key.46345, 0
__key.46345:
	.type	gps_initialized.62491, %object
	.size	gps_initialized.62491, 4
gps_initialized.62491:
	.space	4
	.type	__key.49826, %object
	.size	__key.49826, 0
__key.49826:
	.type	__key.49827, %object
	.size	__key.49827, 0
__key.49827:
	.type	__key.33060, %object
	.size	__key.33060, 0
__key.33060:
	.type	__key.33061, %object
	.size	__key.33061, 0
__key.33061:
	.type	__key.44937, %object
	.size	__key.44937, 0
__key.44937:
	.type	__key.44938, %object
	.size	__key.44938, 0
__key.44938:
	.type	unknown.46156, %object
	.size	unknown.46156, 16
unknown.46156:
	.space	16
	.type	__key.63606, %object
	.size	__key.63606, 0
__key.63606:
	.type	__key.63610, %object
	.size	__key.63610, 0
__key.63610:
	.type	__key.47620, %object
	.size	__key.47620, 0
__key.47620:
	.type	__key.47566, %object
	.size	__key.47566, 0
__key.47566:
	.type	__key.47567, %object
	.size	__key.47567, 0
__key.47567:
	.type	__key.48518, %object
	.size	__key.48518, 0
__key.48518:
	.type	__key.48854, %object
	.size	__key.48854, 0
__key.48854:
	.type	acm_initialized.62394, %object
	.size	acm_initialized.62394, 4
acm_initialized.62394:
	.space	4
	.type	ports.62395, %object
	.size	ports.62395, 4
ports.62395:
	.space	4
	.type	no_acm_tty_ports, %object
	.size	no_acm_tty_ports, 4
no_acm_tty_ports:
	.space	4
	.type	no_acm_sdio_ports, %object
	.size	no_acm_sdio_ports, 4
no_acm_sdio_ports:
	.space	4
	.type	no_acm_smd_ports, %object
	.size	no_acm_smd_ports, 4
no_acm_smd_ports:
	.space	4
	.type	nr_acm_ports, %object
	.size	nr_acm_ports, 4
nr_acm_ports:
	.space	4
	.type	n_bam2bam_ports, %object
	.size	n_bam2bam_ports, 4
n_bam2bam_ports:
	.space	4
	.type	port_num.50998, %object
	.size	port_num.50998, 4
port_num.50998:
	.space	4
	.type	port_num.51656, %object
	.size	port_num.51656, 4
port_num.51656:
	.space	4
	.type	serial_initialized.62708, %object
	.size	serial_initialized.62708, 4
serial_initialized.62708:
	.space	4
	.type	ports.62709, %object
	.size	ports.62709, 4
ports.62709:
	.space	4
	.type	no_tty_ports, %object
	.size	no_tty_ports, 4
no_tty_ports:
	.space	4
	.type	no_sdio_ports, %object
	.size	no_sdio_ports, 4
no_sdio_ports:
	.space	4
	.type	no_smd_ports, %object
	.size	no_smd_ports, 4
no_smd_ports:
	.space	4
	.type	no_hsic_sports, %object
	.size	no_hsic_sports, 4
no_hsic_sports:
	.space	4
	.type	no_hsuart_sports, %object
	.size	no_hsuart_sports, 4
no_hsuart_sports:
	.space	4
	.type	nr_ports, %object
	.size	nr_ports, 4
nr_ports:
	.space	4
	.type	rmnet_initialized.62447, %object
	.size	rmnet_initialized.62447, 4
rmnet_initialized.62447:
	.space	4
	.type	ports.62448, %object
	.size	ports.62448, 4
ports.62448:
	.space	4
	.type	qc_dev_addr, %object
	.size	qc_dev_addr, 4
qc_dev_addr:
	.space	4
	.type	qc_host_addr, %object
	.size	qc_host_addr, 4
qc_host_addr:
	.space	4
	.type	dev_addr, %object
	.size	dev_addr, 4
dev_addr:
	.space	4
	.type	host_addr, %object
	.size	host_addr, 4
host_addr:
	.space	4
	.type	audio_string_defs, %object
	.size	audio_string_defs, 8
audio_string_defs:
	.space	8
	.type	dbg_data, %object
	.size	dbg_data, 4104
dbg_data:
	.space	4104
	.type	rmnet_mux_sdio_data_ch, %object
	.size	rmnet_mux_sdio_data_ch, 4
rmnet_mux_sdio_data_ch:
	.space	4
	.type	rmnet_mux_sdio_ctl_ch, %object
	.size	rmnet_mux_sdio_ctl_ch, 4
rmnet_mux_sdio_ctl_ch:
	.space	4
	.type	rmnet_sdio_data_ch, %object
	.size	rmnet_sdio_data_ch, 4
rmnet_sdio_data_ch:
	.space	4
	.type	rmnet_sdio_ctl_ch, %object
	.size	rmnet_sdio_ctl_ch, 4
rmnet_sdio_ctl_ch:
	.space	4
	.type	debug_buffer, %object
	.size	debug_buffer, 4096
debug_buffer:
	.space	4096
	.section	.devinit.rodata,"a",%progbits
	.align	2
	.type	android_id_table, %object
	.size	android_id_table, 48
android_id_table:
	.ascii	"android_usb\000"
	.space	8
	.space	4
	.ascii	"android_usb_hsic\000"
	.space	3
	.space	4
	.section	.exitcall.exit,"aw",%progbits
	.align	2
	.type	__exitcall_cleanup, %object
	.size	__exitcall_cleanup, 4
__exitcall_cleanup:
	.word	cleanup
	.type	__exitcall_gether_exit, %object
	.size	__exitcall_gether_exit, 4
__exitcall_gether_exit:
	.word	gether_exit
	.type	__exitcall_ghsuart_data_exit, %object
	.size	__exitcall_ghsuart_data_exit, 4
__exitcall_ghsuart_data_exit:
	.word	ghsuart_data_exit
	.type	__exitcall_ghsuart_ctrl_exit, %object
	.size	__exitcall_ghsuart_ctrl_exit, 4
__exitcall_ghsuart_ctrl_exit:
	.word	ghsuart_ctrl_exit
	.type	__exitcall_ghsic_data_exit, %object
	.size	__exitcall_ghsic_data_exit, 4
__exitcall_ghsic_data_exit:
	.word	ghsic_data_exit
	.type	__exitcall_gctrl_exit, %object
	.size	__exitcall_gctrl_exit, 4
__exitcall_gctrl_exit:
	.word	gctrl_exit
	.type	__exitcall_gqti_ctrl_cleanup, %object
	.size	__exitcall_gqti_ctrl_cleanup, 4
__exitcall_gqti_ctrl_cleanup:
	.word	gqti_ctrl_cleanup
	.type	__exitcall_gsmd_ctrl_exit, %object
	.size	__exitcall_gsmd_ctrl_exit, 4
__exitcall_gsmd_ctrl_exit:
	.word	gsmd_ctrl_exit
	.section	.initcall6.init,"aw",%progbits
	.align	2
	.type	__initcall_init6, %object
	.size	__initcall_init6, 4
__initcall_init6:
	.word	init
	.type	__initcall_gether_init6, %object
	.size	__initcall_gether_init6, 4
__initcall_gether_init6:
	.word	gether_init
	.type	__initcall_ghsuart_data_init6, %object
	.size	__initcall_ghsuart_data_init6, 4
__initcall_ghsuart_data_init6:
	.word	ghsuart_data_init
	.type	__initcall_ghsuart_ctrl_init6, %object
	.size	__initcall_ghsuart_ctrl_init6, 4
__initcall_ghsuart_ctrl_init6:
	.word	ghsuart_ctrl_init
	.type	__initcall_ghsic_data_init6, %object
	.size	__initcall_ghsic_data_init6, 4
__initcall_ghsic_data_init6:
	.word	ghsic_data_init
	.type	__initcall_gctrl_init6, %object
	.size	__initcall_gctrl_init6, 4
__initcall_gctrl_init6:
	.word	gctrl_init
	.type	__initcall_gqti_ctrl_init6, %object
	.size	__initcall_gqti_ctrl_init6, 4
__initcall_gqti_ctrl_init6:
	.word	gqti_ctrl_init
	.type	__initcall_gsmd_ctrl_init6, %object
	.size	__initcall_gsmd_ctrl_init6, 4
__initcall_gsmd_ctrl_init6:
	.word	gsmd_ctrl_init
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"rmnet data rx enqueue err %d\012\000"
	.space	2
.LC1:
	.ascii	"rmnet notify ep error %d\012\000"
	.space	2
.LC2:
	.ascii	"rmnet notify ep enqueue error %d\012\000"
	.space	2
.LC3:
	.ascii	"rmnet notifyep error %d\012\000"
	.space	3
.LC4:
	.ascii	"rmnet notify ep enq error %d\012\000"
	.space	2
.LC5:
	.ascii	"rmnet control SDIO write failed\012\000"
	.space	3
.LC6:
	.ascii	"gser response on ttyGS%d, err %d\012\000"
	.space	2
.LC7:
	.ascii	"acm response on ttyGS%d, err %d\012\000"
	.space	3
.LC8:
	.ascii	"ecm req %02x.%02x response err %d\012\000"
	.space	1
.LC9:
	.ascii	"ncm req %02x.%02x response err %d\012\000"
	.space	1
.LC10:
	.ascii	"rmnet_mux notifyep error %d\012\000"
	.space	3
.LC11:
	.ascii	"rmnet_mux ep0 enqueue err %d\012\000"
	.space	2
.LC12:
	.ascii	"/home/xawlw/kernel/arg/drivers/usb/gadget/f_fs.c\000"
	.space	3
.LC13:
	.ascii	"<3>%s: device is already opened\012\000"
	.space	3
.LC14:
	.ascii	"<3>audio response on err %d\012\000"
	.space	3
.LC15:
	.ascii	"<3>%s: port is null\012\000"
	.space	3
.LC16:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d\012"
	.ascii	"\000"
	.space	3
.LC17:
	.ascii	"<3>%s: port->port_usb is NULL\000"
	.space	2
.LC18:
	.ascii	"<3>%s: error dequeuing transfer, %d\012\000"
	.space	3
.LC19:
	.ascii	"<3>%s: Invalid portno#%d\012\000"
	.space	2
.LC20:
	.ascii	"<3>%s: ecm req %02x.%02x response err %d\012\000"
	.space	2
.LC21:
	.ascii	"<3>%s: Bad control-OUT transfer\012\000"
	.space	3
.LC22:
	.ascii	"<3>%s: Illegal INPUT SIZE (%d) from host\012\000"
	.space	2
.LC23:
	.ascii	"<3>%s: Illegal NTB length %d\012\000"
	.space	2
.LC24:
	.ascii	"<3>%s: dev:%pK Failed\012\000"
	.space	1
.LC25:
	.ascii	"<3>%s: %s: error dequeuing transfer, %d\012\000"
	.space	3
.LC26:
	.ascii	"<3>%s: %s(): cdev or config is NULL.\012\000"
	.space	2
.LC27:
	.ascii	"<6>%s: RNDIS %s response error %d, %d/%d\012\000"
	.space	2
.LC28:
	.ascii	"<6>%s: notify/0 --> %d\012\000"
.LC29:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf\000"
.LC30:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf buffer\000"
	.space	1
.LC31:
	.ascii	"<3>%s: Unknown command\000"
	.space	1
.LC32:
	.ascii	"<3>%s: Unknown control request %02x.%02x v%04x i%04"
	.ascii	"x l%d\012\000"
	.space	2
.LC33:
	.ascii	"<3>%s: audio response failed on err %d\012\000"
.LC34:
	.ascii	"<3>%s: STALL\012\000"
	.space	2
.LC35:
	.ascii	"<3>%s: %s is enabled in other device\012\000"
	.space	2
.LC36:
	.ascii	"<3>%s: Failed to alloc f_holder\012\000"
	.space	3
.LC37:
	.ascii	"<3>acc_complete_set_string, err %d\012\000"
.LC38:
	.ascii	"<3>unknown accessory string index %d\012\000"
	.space	2
.LC39:
	.ascii	"<6>acc_release\012\000"
.LC40:
	.ascii	"/home/xawlw/kernel/arg/drivers/usb/gadget/f_accesso"
	.ascii	"ry.c\000"
.LC41:
	.ascii	"<6>acc_open\012\000"
	.space	3
.LC42:
	.ascii	"<6>%s: Close rndis QC file\000"
	.space	1
.LC43:
	.ascii	"<3>%s: rndis_qc_dev not present\012\000"
	.space	3
.LC44:
	.ascii	"<6>mtp_release\012\000"
.LC45:
	.ascii	"<6>mtp_open\012\000"
	.space	3
.LC46:
	.ascii	"<3>CCID notify ep error %d\012\000"
.LC47:
	.ascii	"<3>%s: ctrl resp queue empty\000"
	.space	3
.LC48:
	.ascii	"gps ep0 enqueue err %d\012\000"
.LC49:
	.ascii	"<3>gps notify ep error %d\012\000"
	.space	1
.LC50:
	.ascii	"<3>ctrl resp queue empty  req%02x.%02x v%04x i%04x "
	.ascii	"l%d\012\000"
.LC51:
	.ascii	"rmnet ep0 enqueue err %d\012\000"
	.space	2
.LC52:
	.ascii	"<3>rmnet notify ep error %d\012\000"
	.space	3
.LC53:
	.ascii	"<3>%s: Invalid notify_count=%lu to decrement\012\000"
	.space	2
.LC54:
	.ascii	"<3>%s: response queue error: %d\000"
.LC55:
	.ascii	"<6>%s: Close mbim file\000"
	.space	1
.LC56:
	.ascii	"<6>%s: Open mbim driver\012\000"
	.space	3
.LC57:
	.ascii	"<3>%s: mbim_dev not created yet\012\000"
	.space	3
.LC58:
	.ascii	"<6>%s: Lock mbim_dev->open_excl for open\012\000"
	.space	2
.LC59:
	.ascii	"<3>%s: Already opened\012\000"
	.space	1
.LC60:
	.ascii	"<3>%s: USB cable not connected\012\000"
.LC61:
	.ascii	"<6>%s: Exit, mbim file opened\012\000"
	.space	1
.LC62:
	.ascii	"<3>%s: usb disconnected\012\000"
	.space	3
.LC63:
	.ascii	"<3>%s: port:%pK port#%d sdio read failed err:%d\000"
.LC64:
	.ascii	"<3>%s: port:%pK port#%d unable to open sdio ch:%s\012"
	.ascii	"\000"
	.space	1
.LC65:
	.ascii	"%d\012\000"
.LC66:
	.ascii	"CONFIGURED\000"
	.space	1
.LC67:
	.ascii	"DISCONNECTED\000"
	.space	3
.LC68:
	.ascii	"CONNECTED\000"
	.space	2
.LC69:
	.ascii	"%s\012\000"
.LC70:
	.ascii	"%s\000"
	.space	1
.LC71:
	.ascii	"%04x\012\000"
	.space	2
.LC72:
	.ascii	"%d %d\012\000"
	.space	1
.LC73:
	.ascii	"%02x:%02x:%02x:%02x:%02x:%02x\012\000"
	.space	1
.LC74:
	.ascii	"common->fsg is NULL in %s at %u\012\000"
	.space	3
.LC75:
	.ascii	"/home/xawlw/kernel/arg/drivers/usb/gadget/f_mass_st"
	.ascii	"orage.c\000"
	.space	1
.LC76:
	.ascii	"error in submission: %s --> %d\012\000"
.LC77:
	.ascii	"delayed status mismatch..resetting\012\000"
.LC78:
	.ascii	"rmnet %s response error %d, %d/%d\012\000"
	.space	1
.LC79:
	.ascii	"rmnet_mux %s response error %d, %d/%d\012\000"
	.space	1
.LC80:
	.ascii	"%u\012\000"
.LC81:
	.ascii	"/home/xawlw/kernel/arg/include/linux/netdevice.h\000"
	.space	3
.LC82:
	.ascii	"<6>netif_stop_queue() cannot be called before regis"
	.ascii	"ter_netdev()\012\000"
	.space	3
.LC83:
	.ascii	"gmidi_transmit: midi_alloc_ep_request failed\012\000"
	.space	2
.LC84:
	.ascii	"snd_card_create() failed\012\000"
	.space	2
.LC85:
	.ascii	"snd_device_new() failed: error %d\012\000"
	.space	1
.LC88:
	.ascii	"MIDI\000"
	.space	3
.LC89:
	.ascii	"snd_rawmidi_new() failed: error %d\012\000"
.LC90:
	.ascii	"snd_card_register() failed\012\000"
.LC86:
	.ascii	"MIDI Gadget\000"
.LC87:
	.ascii	"f_midi\000"
	.space	1
.LC91:
	.ascii	"<3>%s: write error:%d\012\000"
	.space	1
.LC92:
	.ascii	"qmi resp empty  req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC93:
	.ascii	"<4>%s: port:%pK port#%d unexpected %s status %d\012"
	.ascii	"\000"
	.space	3
.LC94:
	.ascii	"<3>%s: invalid portno#%d\012\000"
	.space	2
.LC95:
	.ascii	"<3>%s: gser is null\012\000"
	.space	3
.LC96:
	.ascii	"<3>%s: port:%pK port#%d sdio not connected\012\000"
.LC97:
	.ascii	"<3>%s: invalid port: %d\012\000"
	.space	3
.LC98:
	.ascii	"<6>%s: mbim suspended\012\000"
	.space	1
.LC99:
	.ascii	"<6>%s: mbim resumed\012\000"
	.space	3
.LC100:
	.ascii	"smd_control_ch_opened: %lu\012smd_data_ch_opened: %"
	.ascii	"lu\012usb online : %d\012dpkts_from_modem: %lu\012d"
	.ascii	"pkts_to_host: %lu\012pending_dpkts_to_host: %lu\012"
	.ascii	"dpkts_from_host: %lu\012dpkts_to_modem: %lu\012pend"
	.ascii	"ing_dpkts_to_modem: %lu\012cpkts_from_modem: %lu\012"
	.ascii	"cpkts_to_host: %lu\012pending_cpkts_to_host: %lu\012"
	.ascii	"cpkts_from_host: %lu\012cpkts_to_modem: %lu\012pend"
	.ascii	"ing_cpkts_to_modem: %lu\012smd_read_avail_ctrl: %d\012"
	.ascii	"smd_write_avail_ctrl: %d\012smd_read_avail_data: %d"
	.ascii	"\012smd_write_avail_data: %d\012\000"
.LC101:
	.ascii	"-*-DATA-*-\012dpkts_tohost:%lu epInPool:%u tx_size:"
	.ascii	"%u drp_cnt:%lu\012dpkts_tomodem:%lu epOutPool:%u rx"
	.ascii	"_size:%u pending:%u\012-*-QMI-*-\012cpkts_tomodem:%"
	.ascii	"lu  qmi_req_q:%u cbits:%d\012cpkts_tolaptop:%lu qmi"
	.ascii	"_resp_q:%u notify_cnt:%d\012-*-MISC-*-\012data_ch_s"
	.ascii	"tatus: %lu ctrl_ch_status: %lu\012\000"
	.space	2
.LC102:
	.ascii	"UNDEFINED\000"
	.space	2
.LC103:
	.ascii	"dpkts_tomsm:  %lu\012dpkts_tomdm: %lu\012cpkts_tomd"
	.ascii	"m: %lu\012dpkts_tolaptop: %lu\012cpkts_tolaptop:  %"
	.ascii	"lu\012cbits_to_modem: %lu\012tx skb size:     %u\012"
	.ascii	"rx_skb_size:     %u\012dpkts_pending_at_dmux: %u\012"
	.ascii	"tx drp cnt: %lu\012cpkts_drp_cnt: %lu\012cpkt_tx_ql"
	.ascii	"en: %lu\012cpkt_rx_qlen_to_modem: %lu\012xport: %s\012"
	.ascii	"ctr_ch_opened:\011%d\012\000"
.LC104:
	.ascii	"nbytes_from_host: %lu\012\000"
	.space	1
.LC105:
	.ascii	"nbytes_to_tty: %lu\012\000"
.LC106:
	.ascii	"nbytes_with_usb_OUT_txr: %lu\012\000"
	.space	2
.LC107:
	.ascii	"nbytes_from_tty: %lu\012\000"
	.space	2
.LC108:
	.ascii	"nbytes_to_host: %lu\012\000"
	.space	3
.LC109:
	.ascii	"nbytes_with_usb_IN_txr: %lu\012\000"
	.space	3
.LC110:
	.ascii	"tty_flags: %lu\012\000"
.LC111:
	.ascii	"DTR_status: %d\012\000"
.LC112:
	.ascii	"###PORT:%d port:%pK###\012nbytes_tolaptop: %lu\012n"
	.ascii	"bytes_tomodem:  %lu\012cbits_to_modem:  %u\012cbits"
	.ascii	"_to_laptop: %u\012read_pool_len:   %lu\012read_queu"
	.ascii	"e_len:  %lu\012write_pool_len:  %lu\012n_read:     "
	.ascii	"     %u\012sdio_open:       %d\012sdio_probe:      "
	.ascii	"%d\012\000"
	.space	3
.LC113:
	.ascii	"###PORT:%d###\012nbytes_tolaptop: %lu\012nbytes_tom"
	.ascii	"odem:  %lu\012cbits_to_modem:  %u\012cbits_to_lapto"
	.ascii	"p: %u\012n_read: %u\012smd_read_avail: %d\012smd_wr"
	.ascii	"ite_avail: %d\012CH_OPENED: %d\012CH_READY: %d\012\000"
	.space	2
.LC114:
	.ascii	"#PORT:%d port:%pK data_ch:%pK#\012dpkts_to_usbhost:"
	.ascii	" %lu\012dpkts_to_modem:  %lu\012dpkts_pwith_bam: %u"
	.ascii	"\012to_usbhost_dcnt:  %u\012tomodem__dcnt:  %u\012r"
	.ascii	"x_flow_control_disable_count: %u\012rx_flow_control"
	.ascii	"_enable_count: %u\012rx_flow_control_triggered: %u\012"
	.ascii	"max_num_pkts_pending_with_bam: %u\012tx_buf_len:\011"
	.ascii	" %u\012rx_buf_len:\011 %u\012data_ch_open:   %d\012"
	.ascii	"data_ch_ready:  %d\012\000"
.LC115:
	.ascii	"HIGH\000"
	.space	3
.LC116:
	.ascii	"LOW\000"
.LC117:
	.ascii	"#PORT:%d port:%pK ctrl_ch:%pK#\012to_usbhost: %lu\012"
	.ascii	"to_modem:   %lu\012DTR:        %s\012ch_open:    %d"
	.ascii	"\012ch_ready:   %d\012read_avail: %d\012write_avail"
	.ascii	":%d\012\000"
	.space	1
.LC118:
	.ascii	"\012Name:        %s\012#PORT:%d port: %p\012to_usbh"
	.ascii	"ost:    %lu\012to_modem:      %lu\012cpkt_drp_cnt: "
	.ascii	" %lu\012DTR:           %s\012ch_open:       %d\012c"
	.ascii	"h_ready:      %d\012\000"
	.space	1
.LC119:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %p\012d"
	.ascii	"ata_ch_open:\011   %d\012data_ch_ready:    %d\012\012"
	.ascii	"******UL INFO*****\012\012dpkts_to_modem:   %lu\012"
	.ascii	"tomodem_drp_cnt:  %u\012rx_buf_len:       %u\012tx "
	.ascii	"thld cnt       %u\012tx unthld cnt     %u\012TX_THR"
	.ascii	"OTTLED      %d\012\000"
	.space	1
.LC120:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012rx thld cnt\011   %u\012"
	.ascii	"rx unthld cnt\011   %u\012uthld pnd skbs    %u\012R"
	.ascii	"X_THROTTLED\011   %d\012\000"
	.space	3
.LC121:
	.ascii	"#PORT:%d port: %pK\012to_usbhost:    %lu\012to_mode"
	.ascii	"m:      %lu\012cpkt_drp_cnt:  %lu\012DTR:          "
	.ascii	" %s\012\000"
	.space	1
.LC122:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012d"
	.ascii	"ata_ch_connected: %d\012\012******UL INFO*****\012\012"
	.ascii	"dpkts_to_modem:   %lu\012tomodem_drp_cnt:  %u\012rx"
	.ascii	"_buf_len:       %u\012TX_THROTTLED      %d\012\000"
.LC123:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012RX_THROTTLED\011   %d\012"
	.ascii	"\000"
	.space	2
.LC124:
	.ascii	"---Name: %s---\012endpoints: %s, %s\012dpkts_tolapt"
	.ascii	"op: %lu\012dpkts_tomodem:  %lu\012pkts_tolaptop_pen"
	.ascii	"ding: %u\012\000"
.LC125:
	.ascii	"rmnet command error %d\012\000"
.LC126:
	.ascii	"rmnet control smd write failed\012\000"
.LC127:
	.ascii	"rmnet QMI pool is empty\012\000"
	.space	3
.LC128:
	.ascii	"RMNET %s response error %d, %d/%d\012\000"
	.space	1
.LC129:
	.ascii	"rmnet data smd write failed\012\000"
	.space	3
.LC130:
	.ascii	"rmnet SMD data write failed\012\000"
	.space	3
.LC131:
	.ascii	"<4>%s: port:%pK port#%d Unexpected Rx Status:%d\012"
	.ascii	"\000"
	.space	3
.LC132:
	.ascii	"<3>%s: smd write failed err:%d\012\000"
.LC133:
	.ascii	"<3>%s: smd_write failed err:%d\012\000"
.LC134:
	.ascii	"rmnet_mux SMD data write failed\012\000"
	.space	3
.LC135:
	.ascii	"RMNET_MUX %s response error %d, %d/%d\012\000"
	.space	1
.LC136:
	.ascii	"rmnet_mux data smd write failed\012\000"
	.space	3
.LC137:
	.ascii	"rmnet data tx ep error %d\012\000"
	.space	1
.LC138:
	.ascii	"rmnet_mux data tx ep error %d\012\000"
	.space	1
.LC139:
	.ascii	"rmnet tx data enqueue err %d\012\000"
	.space	2
.LC140:
	.ascii	"rmnet QMI Tx buffers full\012\000"
	.space	1
.LC141:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d err"
	.ascii	":%d\012\000"
.LC142:
	.ascii	"Unable to open control smd channel: %d\012\000"
.LC143:
	.ascii	"pdrv %s register failed %d\012\000"
.LC144:
	.ascii	"Unable to open data smd channel\012\000"
	.space	3
.LC145:
	.ascii	"<3>%s:smd read_avail failure:%d or channel closed c"
	.ascii	"h=%pK\000"
	.space	3
.LC146:
	.ascii	"<3>%s: SMD sending incorrect pkt\012\000"
	.space	2
.LC147:
	.ascii	"<3>%s: smd read failure %d\012\000"
.LC148:
	.ascii	"%s: response queue error\012\000"
	.space	2
.LC149:
	.ascii	"<3>ccid ep0 enqueue err %d\012\000"
.LC150:
	.ascii	"rmnet_mux command error %d\012\000"
.LC151:
	.ascii	"unable to allocate memory for ctrl req\012\000"
.LC152:
	.ascii	"<3>%s: ctrl pkts dropped: cpkts_drp_cnt: %lu\012\000"
	.space	2
.LC153:
	.ascii	"usb_rmnet_ctrl_smd\000"
	.space	1
.LC154:
	.ascii	"status\000"
	.space	1
.LC155:
	.ascii	"ghsic_ctrl_xport\000"
	.space	3
.LC156:
	.ascii	"ghsic_data_xport\000"
	.space	3
.LC157:
	.ascii	"timestamp\000"
	.space	2
.LC158:
	.ascii	"ghsuart_ctrl_xport\000"
	.space	1
.LC159:
	.ascii	"ghsuart_data_xport\000"
	.space	1
.LC160:
	.ascii	"usb_diag\000"
	.space	3
.LC161:
	.ascii	"<6>%s: sdio data ch not open\012\000"
	.space	2
.LC162:
	.ascii	"rmnet SDIO data write failed\012\000"
	.space	2
.LC163:
	.ascii	"<3>%s: usb epIn failed with %d\012\000"
.LC164:
	.ascii	"<3>%s: data tx ep error %d\012\000"
.LC165:
	.ascii	"rmnet_mux SDIO data write failed\012\000"
	.space	2
.LC166:
	.ascii	"rmnet_mux data rx enqueue err %d\012\000"
	.space	2
.LC167:
	.ascii	"<3>%s: unable to open smd port:%s err:%d\012\000"
	.space	2
.LC168:
	.ascii	"Unable to open SDIO DATA channel\012\000"
	.space	2
.LC169:
	.ascii	"<3>%s: rx queue failed %d\012\000"
	.space	1
.LC170:
	.ascii	"<3>%s: %s response error %d, %d/%d\012\000"
.LC171:
	.ascii	"<3>%s: data rx enqueue err %d\012\000"
	.space	1
.LC172:
	.ascii	"<3>copying to user space failed\000"
.LC173:
	.ascii	"<3>wrong parameter\000"
	.space	1
.LC174:
	.ascii	"<6>%s: Received command %d\012\000"
.LC175:
	.ascii	"<3>%s: copying to user space failed\000"
.LC176:
	.ascii	"<6>%s: Sent max packets per xfer %d\000"
.LC177:
	.ascii	"<3>%s: Unsupported IOCTL\000"
	.space	3
.LC178:
	.ascii	"<6>%s: Sent NTB size %d\000"
.LC179:
	.ascii	"<6>%s: Sent NTB datagrams count %d\000"
	.space	1
.LC180:
	.ascii	"<3>%s: wrong parameter\000"
	.space	1
.LC181:
	.ascii	"<3>%s: cpkt size:%d > buf size:%d\012\000"
	.space	1
.LC182:
	.ascii	"<3>Buffer size is too big %d, should be at most %d\012"
	.ascii	"\000"
.LC183:
	.ascii	"<3>Previous reading is not finished yet\012\000"
	.space	3
.LC184:
	.ascii	"<3>cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC185:
	.ascii	"<3>copy_to_user failed: err %d\012\000"
.LC186:
	.ascii	"<3>Previous writing not finished yet\012\000"
	.space	2
.LC187:
	.ascii	"<3>failed to allocate ctrl pkt\012\000"
.LC188:
	.ascii	"<3>copy_from_user failed err:%d\012\000"
	.space	3
.LC189:
	.ascii	"<3>failed to send ctrl packet. error=%d\012\000"
	.space	3
.LC190:
	.ascii	"<3>send_cpkt_response callback is NULL\012\000"
.LC191:
	.ascii	"<3>ccid notify ep enqueue error %d\012\000"
.LC192:
	.ascii	"g_ether\000"
.LC193:
	.ascii	"29-May-2008\000"
.LC194:
	.ascii	"g_qc_ether\000"
	.space	1
.LC195:
	.ascii	"<3>Physical address or size of buf is NULL\000"
	.space	1
.LC196:
	.ascii	"<3>usb_ep_queue failed ret: %d\012\000"
.LC197:
	.ascii	"%s,\000"
.LC198:
	.ascii	"<4>ttyGS%d: unexpected RX status %d\012\000"
	.space	3
.LC199:
	.ascii	"<4>ttyGS%d: RX not scheduled?\012\000"
	.space	1
.LC200:
	.ascii	"<6>%s: name:%s is not found\012\000"
	.space	3
.LC201:
	.ascii	"bam_dmux_ch_8\000"
	.space	2
.LC202:
	.ascii	"<3>%s: unable open bam ch:%d err:%d\012\000"
	.space	3
.LC203:
	.ascii	"<3>%s: rx req allocation failed\012\000"
	.space	3
.LC204:
	.ascii	"<3>%s: tx req allocation failed\012\000"
	.space	3
.LC205:
	.ascii	"<3>%s: usb_bam_connect (src) failed: err:%d\012\000"
	.space	3
.LC206:
	.ascii	"<3>%s: usb_bam_connect (dst) failed: err:%d\012\000"
	.space	3
.LC207:
	.ascii	"<3>%s:teth_bridge_init() failed\012\000"
	.space	3
.LC208:
	.ascii	"<3>%s: out of memory\012\000"
	.space	2
.LC209:
	.ascii	"<3>%s: error enqueuing transfer, %d\012\000"
	.space	3
.LC210:
	.ascii	"<3>%s: usb_bam_client_ready failed: err:%d\012\000"
.LC211:
	.ascii	"<3>%s: %s:teth_bridge_init() failed\012\000"
	.space	3
.LC212:
	.ascii	"<3>%s: %s: usb_bam_connect_ipa failed: err:%d\012\000"
	.space	1
.LC213:
	.ascii	"<3>%s: %s:teth_bridge_connect() failed\012\000"
.LC214:
	.ascii	"<3>%s: port_usb is NULL\000"
.LC215:
	.ascii	"<3>%s: port_usb->out (bulk out ep) is NULL\000"
	.space	1
.LC216:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed: err:%d\012\000"
.LC217:
	.ascii	"<3>%s: %s: BAM reset failed %d\012\000"
.LC218:
	.ascii	"<3>Failed to allocate rmnet control device\012\000"
.LC219:
	.ascii	"&port->read_wq\000"
	.space	1
.LC220:
	.ascii	"<3>rmnet control driver failed to register\000"
	.space	1
.LC221:
	.ascii	"&dev->read_wq\000"
	.space	2
.LC222:
	.ascii	"&dev->write_wq\000"
	.space	1
.LC223:
	.ascii	"<3>USB accessory gadget driver failed to initialize"
	.ascii	"\012\000"
	.space	3
.LC224:
	.ascii	"<6>%s: initialize rndis QC instance\012\000"
	.space	3
.LC225:
	.ascii	"<3>%s: rndis QC driver failed to register\000"
	.space	2
.LC226:
	.ascii	"&dev->intr_wq\000"
	.space	2
.LC227:
	.ascii	"f_mtp\000"
	.space	2
.LC228:
	.ascii	"<3>mtp gadget driver failed to initialize\012\000"
	.space	1
.LC229:
	.ascii	"<3>adb gadget driver failed to initialize\012\000"
	.space	1
.LC230:
	.ascii	"k_rmnet_mux_work\000"
	.space	3
.LC231:
	.ascii	"&smd_dev->smd_data.wait\000"
.LC232:
	.ascii	"&ctrl_dev->tx_wait_q\000"
	.space	3
.LC233:
	.ascii	"usb_rmnet_mux\000"
	.space	2
.LC234:
	.ascii	"<3>%s: failed to register misc device\012\000"
	.space	1
.LC235:
	.ascii	"<6>%s: rndis QC cleanup\000"
.LC236:
	.ascii	"<6>%s: Enter\000"
	.space	3
.LC237:
	.ascii	"<3>invalid rndis pkt: skblen:%u hdr_len:%u\000"
	.space	1
.LC238:
	.ascii	"<3>invalid rndis message: %d/%d/%d/%d, len:%d\012\000"
	.space	1
.LC239:
	.ascii	"<3>%s:skb clone failed\012\000"
.LC240:
	.ascii	"y\000"
	.space	2
.LC241:
	.ascii	"n\000"
	.space	2
.LC242:
	.ascii	"?\000"
	.space	2
.LC243:
	.ascii	"disconnected\000"
	.space	3
.LC244:
	.ascii	"connected\000"
	.space	2
.LC245:
	.ascii	"Config Nr. %d\012used      : %s\012state     : %s\012"
	.ascii	"medium    : 0x%08X\012speed     : %d\012cable     :"
	.ascii	" %s\012vendor ID : 0x%08X\012vendor    : %s\012ul-m"
	.ascii	"ax-xfer-size:%d max-xfer-size-rcvd: %d\012ul-max-pk"
	.ascii	"ts-per-xfer:%d max-pkts-per-xfer-rcvd:%d\012\000"
	.space	3
.LC246:
	.ascii	"<3>acc_complete_set_hid_report_desc, err %d\012\000"
	.space	3
.LC247:
	.ascii	"unable to open backing file: %s\012\000"
	.space	3
.LC248:
	.ascii	"invalid file type: %s\012\000"
	.space	1
.LC249:
	.ascii	"file not readable: %s\012\000"
	.space	1
.LC250:
	.ascii	"unable to find file size: %s\012\000"
	.space	2
.LC251:
	.ascii	"file too big: %s\012\000"
	.space	2
.LC252:
	.ascii	"using only first %d blocks\012\000"
.LC253:
	.ascii	"file too small: %s\012\000"
.LC254:
	.ascii	"Wrong NTH SIGN, skblen %d\012\000"
	.space	1
.LC255:
	.ascii	"HEAD:\000"
	.space	2
.LC256:
	.ascii	"<6>\000"
.LC257:
	.ascii	"Wrong NTB headersize\012\000"
	.space	2
.LC258:
	.ascii	"OUT size exceeded\012\000"
	.space	1
.LC259:
	.ascii	"Bad index: %x\012\000"
	.space	1
.LC260:
	.ascii	"Wrong NDP SIGN\012\000"
.LC261:
	.ascii	"Bad NDP length: %x\012\000"
.LC262:
	.ascii	"Bad dgram length: %x\012\000"
	.space	2
.LC263:
	.ascii	"Bad CRC\012\000"
	.space	3
.LC264:
	.ascii	"%d\000"
	.space	1
.LC265:
	.ascii	"%28s\000"
	.space	3
.LC266:
	.ascii	"%04x\000"
	.space	3
.LC267:
	.ascii	"%255s\000"
	.space	2
.LC268:
	.ascii	":\000"
	.space	2
.LC269:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android con"
	.ascii	"f\012\000"
	.space	2
.LC270:
	.ascii	",\000"
	.space	2
.LC271:
	.ascii	"ffs\000"
.LC272:
	.ascii	"<3>%s: android_usb: Cannot enable ffs (%d)\000"
	.space	1
.LC273:
	.ascii	"<3>%s: android_usb: Cannot enable '%s' (%d)\000"
.LC274:
	.ascii	"hid\000"
.LC275:
	.ascii	"f_%s\000"
	.space	3
.LC276:
	.ascii	"<3>%s: %s: Failed to create dev %s\000"
	.space	1
.LC277:
	.ascii	"<3>%s: %s: Failed to init %s\000"
	.space	3
.LC278:
	.ascii	"<3>%s: %s: Failed to create function %s attributes\000"
	.space	1
.LC279:
	.ascii	"Android\000"
.LC280:
	.ascii	"0123456789ABCDEF\000"
	.space	3
.LC281:
	.ascii	"net2280\000"
.LC282:
	.ascii	"dummy_udc\000"
	.space	2
.LC283:
	.ascii	"pxa25x_udc\000"
	.space	1
.LC284:
	.ascii	"goku_udc\000"
	.space	3
.LC285:
	.ascii	"omap_udc\000"
	.space	3
.LC286:
	.ascii	"pxa27x_udc\000"
	.space	1
.LC287:
	.ascii	"s3c2410_udc\000"
.LC288:
	.ascii	"at91_udc\000"
	.space	3
.LC289:
	.ascii	"imx_udc\000"
.LC290:
	.ascii	"musb-hdrc\000"
	.space	2
.LC291:
	.ascii	"atmel_usba_udc\000"
	.space	1
.LC292:
	.ascii	"fsl-usb2-udc\000"
	.space	3
.LC293:
	.ascii	"amd5536udc\000"
	.space	1
.LC294:
	.ascii	"m66592_udc\000"
	.space	1
.LC295:
	.ascii	"fsl_qe_udc\000"
	.space	1
.LC296:
	.ascii	"ci13xxx_pci\000"
.LC297:
	.ascii	"langwell_udc\000"
	.space	3
.LC298:
	.ascii	"r8a66597_udc\000"
	.space	3
.LC299:
	.ascii	"s3c-hsotg\000"
	.space	2
.LC300:
	.ascii	"pch_udc\000"
.LC301:
	.ascii	"ci13xxx_msm\000"
.LC302:
	.ascii	"renesas_usbhs_udc\000"
	.space	2
.LC303:
	.ascii	"s3c-hsudc\000"
	.space	2
.LC304:
	.ascii	"net2272\000"
.LC305:
	.ascii	"dwc3-gadget\000"
.LC306:
	.ascii	"msm72k_udc\000"
	.space	1
.LC307:
	.ascii	"ci13xxx_msm_hsic\000"
	.space	3
.LC308:
	.ascii	"<4>%s: %s: controller '%s' not recognized\012\000"
	.space	1
.LC309:
	.ascii	"ACCESSORY=START\000"
.LC310:
	.ascii	"USB_STATE=DISCONNECTED\000"
	.space	1
.LC311:
	.ascii	"USB_STATE=CONNECTED\000"
.LC312:
	.ascii	"USB_STATE=CONFIGURED\000"
	.space	3
.LC313:
	.ascii	"USB_STATE=SUSPENDED\000"
.LC314:
	.ascii	"USB_STATE=RESUMED\000"
	.space	2
.LC315:
	.ascii	"low\000"
.LC316:
	.ascii	"<6>%s: %s: did not send uevent (%d %d %pK)\012\000"
.LC317:
	.ascii	"<6>%s: %s: sent uevent %s\012\000"
	.space	1
.LC318:
	.ascii	"<6>%s: %s: sent missed DISCONNECT event\012\000"
	.space	3
.LC319:
	.ascii	"<3>acc_complete_send_hid_event, err %d\012\000"
.LC320:
	.ascii	"<3>can't add hid device: %d\012\000"
	.space	3
.LC321:
	.ascii	"<3>can't add HID device %pK\012\000"
	.space	3
.LC322:
	.ascii	"<6>unloading\012\000"
	.space	2
.LC323:
	.ascii	"<6>file system registered\012\000"
	.space	1
.LC324:
	.ascii	"<3>failed registering file system (%d)\012\000"
.LC325:
	.ascii	"<3>%s: Failed to enable capture ep\000"
	.space	1
.LC326:
	.ascii	"<3>%s: request allocation failed\012\000"
	.space	2
.LC327:
	.ascii	"<3>%s: request buffer allocation failed\012\000"
	.space	3
.LC328:
	.ascii	"<3>%s: Failed to queue %s req: err %d\012\000"
	.space	1
.LC329:
	.ascii	"<3>%s: Failed to enable playback ep\000"
.LC330:
	.ascii	"<3>%s: Failed to queue %s queue req: err %d\012\000"
	.space	3
.LC331:
	.ascii	"<3>%s: Schedule playback_work\000"
	.space	2
.LC332:
	.ascii	"<3>%s: playback_buf is empty. Stop.\000"
.LC333:
	.ascii	"<3>%s: Interface %d. Do nothing. Return %d\012\000"
.LC334:
	.ascii	"<3>%s on a NULL device\012\000"
.LC335:
	.ascii	"<3>%s: FAILED: d_port == NULL\000"
	.space	2
.LC336:
	.ascii	"<3>%s: FAILED: d_port->cdev == NULL\000"
.LC337:
	.ascii	"<3>%s: FAILED: d_port->cdev->gadget == NULL\000"
.LC338:
	.ascii	"<6>%s: Open rndis QC driver\012\000"
	.space	3
.LC339:
	.ascii	"<3>%s: rndis_qc_dev not created yet\012\000"
	.space	3
.LC340:
	.ascii	"<6>%s: rndis QC file opened\012\000"
	.space	3
.LC341:
	.ascii	"<3>%s: Invalid grmnet:%pK\012\000"
	.space	1
.LC342:
	.ascii	"<3>%s: gps notify ep enqueue error %d\012\000"
	.space	1
.LC343:
	.ascii	"<3>%s: dev is null\012\000"
.LC344:
	.ascii	"<3>%s: rmnet notify ep enqueue error %d\012\000"
	.space	3
.LC345:
	.ascii	"<3>%s: rmnet dev is null\012\000"
	.space	2
.LC346:
	.ascii	"<3>%s: ctrl bridge open failed :%d\012\000"
.LC347:
	.ascii	"uether\000"
	.space	1
.LC348:
	.ascii	"<3>%s: %s: Unable to create workqueue: uether\012\000"
	.space	1
.LC349:
	.ascii	"<3>%s: grmnet is null\012\000"
	.space	1
.LC350:
	.ascii	"<3>%s: %s(): Failed to register androidplatform dri"
	.ascii	"ver\012\000"
.LC351:
	.ascii	"<3>%s:Unable to close smux channel: %d\012\000"
.LC352:
	.ascii	"<3>%s: rx queue failed\012\000"
.LC353:
	.ascii	"<3>%s: usb epIn failed\012\000"
.LC354:
	.ascii	"<6>%s: setting notify count to zero\012\000"
	.space	3
.LC355:
	.ascii	"<3>%s: usb_bam_disconnect_ipa failed: err:%d\012\000"
	.space	2
.LC356:
	.ascii	"<3>%s: unable open bridge ch:%d err:%d\012\000"
.LC357:
	.ascii	"<3>%s: smux close timedout\012\000"
.LC358:
	.ascii	"<3> %s smux_open failed\012\000"
	.space	3
.LC359:
	.ascii	"<3>%s: unable to open smux ch:%d err:%d\012\000"
	.space	3
.LC360:
	.ascii	"TTY\000"
.LC361:
	.ascii	"SDIO\000"
	.space	3
.LC362:
	.ascii	"SMD\000"
.LC363:
	.ascii	"QTI\000"
.LC364:
	.ascii	"BAM\000"
.LC365:
	.ascii	"BAM2BAM\000"
.LC366:
	.ascii	"BAM2BAM_IPA\000"
.LC367:
	.ascii	"HSIC\000"
	.space	3
.LC368:
	.ascii	"HSUART\000"
	.space	1
.LC369:
	.ascii	"<6>hid keyboard\012\000"
	.space	3
.LC370:
	.ascii	"<6>%s: %s: hid_function_bind_config keyboard failed"
	.ascii	": %d\012\000"
	.space	3
.LC371:
	.ascii	"<6>hid mouse\012\000"
	.space	2
.LC372:
	.ascii	"<6>%s: %s: hid_function_bind_config mouse failed: %"
	.ascii	"d\012\000"
	.space	2
.LC373:
	.ascii	"<3>%s: port#%d sdio write failed err:%d\000"
.LC374:
	.ascii	"<3>%s: tx pkt dropped: tx_drop_cnt:%u\012\000"
	.space	1
.LC375:
	.ascii	"<3>%s: Un-supported transport: %s\012\000"
	.space	1
.LC376:
	.ascii	"<3>RNDIS header is NULL.\012\000"
	.space	2
.LC377:
	.ascii	"<3>%s: Failed to alloc port:%d\012\000"
.LC378:
	.ascii	"<3>%s: %s: %s failed\012\000"
	.space	2
.LC379:
	.ascii	"<3>%s: %s: Card is NULL\000"
.LC380:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_DROP failed: %d\012\000"
.LC381:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_HW_PARAMS failed: %d\012\000"
	.space	3
.LC382:
	.ascii	"<3>%s: Preparing playback failed: %d\012\000"
	.space	2
.LC383:
	.ascii	"<3>%s: Setting playback params failed: err %d\000"
	.space	2
.LC384:
	.ascii	"<3>%s: Failed to allocate hw params\000"
.LC385:
	.ascii	"<3>%s: Preparing capture failed: %d\012\000"
	.space	3
.LC386:
	.ascii	"<3>%s: Failed to allocate sw params\000"
.LC387:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_SW_PARAMS failed: %d\012\000"
	.space	3
.LC388:
	.ascii	"<3>%s: Setting capture params failed: err %d\000"
	.space	3
.LC389:
	.ascii	"<6>%s: Initialized capture params\000"
	.space	2
.LC390:
	.ascii	"<3>%s: %s: buffer alloc failed\012\000"
.LC391:
	.ascii	"<3>%s: Failed to init audio streams: err %d\000"
.LC392:
	.ascii	"<3>%s: copying failed\000"
	.space	2
.LC393:
	.ascii	"<3>%s: Capture error: %d\012\000"
	.space	2
.LC394:
	.ascii	"<6>%s: initialize %d instances\012\000"
.LC395:
	.ascii	"<3>%s: Failed to allocate mbim dev\012\000"
.LC396:
	.ascii	"<3>%s: mbim driver failed to register\000"
	.space	2
.LC397:
	.ascii	"<6>%s: Initialized %d ports\012\000"
	.space	3
.LC398:
	.ascii	"<3>%s: Failed\000"
	.space	2
.LC399:
	.ascii	"<3>%s: invalid bam2bam portno#%d\012\000"
	.space	2
.LC400:
	.ascii	"<3>%s: data port is null\012\000"
	.space	2
.LC401:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed\012\000"
.LC402:
	.ascii	"<4>%s: query unknown OID 0x%08X\012\000"
	.space	3
.LC403:
	.ascii	"&bulk_dev->read_wq\000"
	.space	1
.LC404:
	.ascii	"&bulk_dev->write_wq\000"
.LC405:
	.ascii	"<3>%s: ccid_ctrl_device_init failed, err:%d\012\000"
	.space	3
.LC406:
	.ascii	"<3>%s: ccid_bulk_device_init failed, err:%d\012\000"
	.space	3
.LC407:
	.ascii	"<3>ccid gadget driver failed to initialize\012\000"
.LC408:
	.ascii	"acm ttyGS%d can't notify serial state, %d\012\000"
	.space	1
.LC409:
	.ascii	"gser ttyGS%d can't notify serial state, %d\012\000"
.LC410:
	.ascii	"<3>%s: kevent %d may have been dropped\012\000"
.LC411:
	.ascii	"queue\000"
	.space	2
.LC412:
	.ascii	"<3>%s: %s err %d\012\000"
	.space	2
.LC413:
	.ascii	"<4>%s: unexpected %s status %d\012\000"
.LC414:
	.ascii	", H%c=%u\000"
	.space	3
.LC415:
	.ascii	"<3>'=' missing in %s\012\000"
	.space	2
.LC416:
	.ascii	"<3>%s: invalid value: %s\012\000"
	.space	2
.LC417:
	.ascii	"rmode\000"
	.space	2
.LC418:
	.ascii	"fmode\000"
	.space	2
.LC419:
	.ascii	"mode\000"
	.space	3
.LC420:
	.ascii	"uid\000"
.LC421:
	.ascii	"gid\000"
.LC422:
	.ascii	"<3>%s: invalid option\012\000"
	.space	1
.LC423:
	.ascii	"<3>given pkt size too big:%d > max_pkt_size:%d\012\000"
.LC424:
	.ascii	"<3>%s: Unable to allocate ctrl pkt\012\000"
.LC425:
	.ascii	"<3>rmnet file handler %pK is not open\000"
	.space	2
.LC426:
	.ascii	"unable to allocate memory for QMI req\012\000"
	.space	1
.LC427:
	.ascii	"/home/xawlw/kernel/arg/drivers/usb/gadget/android.c"
	.ascii	"\000"
.LC428:
	.ascii	"<3>%s: %s: usb_add_config failed : err: %d\012\000"
.LC429:
	.ascii	"<6>adb_open\012\000"
	.space	3
.LC430:
	.ascii	"/home/xawlw/kernel/arg/drivers/usb/gadget/u_serial."
	.ascii	"c\000"
	.space	3
.LC431:
	.ascii	"<3>%s: playback_buf is empty\000"
	.space	3
.LC432:
	.ascii	"<3>%s: Buffer is empty, no data to play\000"
.LC433:
	.ascii	"<3>%s: Failed to init audio streams\000"
.LC434:
	.ascii	"<3>%s: SND failure - runtime->frame_bits == 0\000"
	.space	2
.LC435:
	.ascii	"<3>%s: snd_pcm_lib_write failed with err %d\012\000"
	.space	3
.LC436:
	.ascii	"<3>%s: Failed to queue %s req: err - %d\012\000"
	.space	3
.LC437:
	.ascii	"<3>%s: Failed completion: status %d\000"
.LC438:
	.ascii	"can't allocate request for %s\012\000"
	.space	1
.LC439:
	.ascii	"<6>%s: ESHUTDOWN/ECONNRESET, connection gone\000"
	.space	3
.LC440:
	.ascii	"<3>%s: Unknown event %02x --> %d\012\000"
	.space	2
.LC441:
	.ascii	"<3>%s: Pending notifications in MBIM_NOTIFY_NONE\012"
	.ascii	"\000"
	.space	2
.LC442:
	.ascii	"<3>%s: Queue notify request failed, err: %d\000"
.LC443:
	.ascii	"<3>%s: usb_ep_queue failed, err: %d\000"
.LC444:
	.ascii	"/home/xawlw/kernel/arg/drivers/usb/gadget/composite"
	.ascii	".c\000"
	.space	2
.LC445:
	.ascii	"write %u @ %llu beyond end %llu\012\000"
	.space	3
.LC446:
	.ascii	"&ffs->mutex\000"
.LC447:
	.ascii	"&ffs->ev.waitq\000"
	.space	1
.LC448:
	.ascii	"&x->wait\000"
	.space	3
.LC449:
	.ascii	"ep0\000"
.LC450:
	.ascii	"<3>uninit_data\012\000"
.LC451:
	.ascii	"<3>msm_ep_unconfig failed\012\000"
	.space	1
.LC452:
	.ascii	"<3>%s: uninit_data error\012\000"
	.space	2
.LC453:
	.ascii	"<3>usb_bam_disconnection error\012\000"
.LC454:
	.ascii	"<3>qdss_disconnect error\000"
	.space	3
.LC455:
	.ascii	"<3>%s: Received NULL mbim pointer\012\000"
	.space	1
.LC456:
	.ascii	"<3>%s: Buffer size is too big %d, should be at most"
	.ascii	" %d\012\000"
.LC457:
	.ascii	"<3>%s: Previous reading is not finished yet\012\000"
	.space	3
.LC458:
	.ascii	"<3>%s: USB cable not connected. Wait.\012\000"
	.space	1
.LC459:
	.ascii	"<3>%s: cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC460:
	.ascii	"<3>%s: copy_to_user failed: err %d\012\000"
.LC461:
	.ascii	"<3>%s: Waiting failed\012\000"
	.space	1
.LC462:
	.ascii	"%s %s with %s\000"
	.space	2
.LC463:
	.ascii	"failed to override string ID\012\000"
	.space	2
.LC464:
	.ascii	"userspace failed to provide iSerialNumber\012\000"
	.space	1
.LC465:
	.ascii	"%s ready\012\000"
	.space	2
.LC466:
	.ascii	"%s config #%d: %s\012\000"
	.space	1
.LC467:
	.ascii	"<3>%s(): No SS desc for function:%s\012\000"
	.space	3
.LC468:
	.ascii	"func_suspend() returned error %d\012\000"
	.space	2
.LC469:
	.ascii	"%s: Delayed status not supported for w_length != 0\000"
	.space	1
.LC470:
	.ascii	"unconfigured\000"
	.space	3
.LC471:
	.ascii	"%s setup response queue error\012\000"
	.space	1
.LC472:
	.ascii	"rndis0\000"
	.space	1
.LC473:
	.ascii	"driver/rndis-%03d\000"
	.space	2
.LC474:
	.ascii	"<6>%s: usb cable is not connected\012\000"
	.space	1
.LC475:
	.ascii	"<3>%s: w_length > 0: %d\000"
.LC476:
	.ascii	"<3>%s: ctrl resp queue empty\012\000"
	.space	2
.LC477:
	.ascii	"<3>%s: wrong NTB length %d\000"
	.space	1
.LC478:
	.ascii	"<3>%s: invalid control req: %02x.%02x v%04x i%04x l"
	.ascii	"%d\012\000"
	.space	1
.LC479:
	.ascii	"<3>%s: queueing req failed: %02x.%02x, err %d\012\000"
	.space	1
.LC480:
	.ascii	"<3>%s: ctrl req err %d: %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	1
.LC481:
	.ascii	"<3>%s: rmnet ctrl file handler %pK is not open\000"
	.space	1
.LC482:
	.ascii	"ecm0\000"
	.space	3
.LC483:
	.ascii	"kill %s:  resubmit %d bytes --> %d\012\000"
.LC484:
	.ascii	"<3>%s: usb cable is not connected\012\000"
	.space	1
.LC485:
	.ascii	"<3>%s: given_xport:%s cur_xport:%s doing nothing\012"
	.ascii	"\000"
	.space	2
.LC486:
	.ascii	"<3>%s: undefined transport\012\000"
.LC487:
	.ascii	"<3>%s: USB not connected\012\000"
	.space	2
.LC488:
	.ascii	"<6>%s: usb rmnet sdio channels are open retry_cnt:%"
	.ascii	"d\012\000"
	.space	2
.LC489:
	.ascii	"Unable to open control SDIO channel\012\000"
	.space	3
.LC490:
	.ascii	"Unable to open DATA SDIO channel\012\000"
	.space	2
.LC491:
	.ascii	"<3>%s: BAM reset failed %d\012\000"
.LC492:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%pK\000"
	.space	3
.LC493:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%pK\000"
	.space	2
.LC494:
	.ascii	"lun%d\000"
	.space	2
.LC495:
	.ascii	"Linux\000"
	.space	2
.LC496:
	.ascii	"File-Stor Gadget\000"
	.space	3
.LC497:
	.ascii	"File-CD Gadget\000"
	.space	1
.LC498:
	.ascii	"file-storage\000"
	.space	3
.LC499:
	.ascii	"(no medium)\000"
.LC500:
	.ascii	"(error)\000"
.LC501:
	.ascii	"removable \000"
	.space	1
.LC502:
	.ascii	"\000"
	.space	3
.LC503:
	.ascii	"read only \000"
	.space	1
.LC504:
	.ascii	"lun0\000"
	.space	3
.LC505:
	.ascii	"lun1\000"
	.space	3
.LC506:
	.ascii	"uicc%d\000"
	.space	1
.LC507:
	.ascii	"invalid number of LUNs: %u\012\000"
.LC508:
	.ascii	"&common->filesem\000"
	.space	3
.LC509:
	.ascii	"failed to register LUN%d: %d\012\000"
	.space	2
.LC510:
	.ascii	"no file given for LUN%d\012\000"
	.space	3
.LC511:
	.ascii	"controller '%s' not recognized\012\000"
.LC512:
	.ascii	"%-8s%-16s%04x\000"
	.space	2
.LC513:
	.ascii	"&common->fsg_wait\000"
	.space	2
.LC514:
	.ascii	"Mass Storage Function, version: 2009/09/11\012\000"
.LC515:
	.ascii	"Number of LUNs=%d\012\000"
	.space	1
.LC516:
	.ascii	"LUN: %s%s%sfile: %s\012\000"
	.space	3
.LC517:
	.ascii	"CD-ROM \000"
.LC518:
	.ascii	"<3>%s: rndis response on err %d\012\000"
	.space	3
.LC519:
	.ascii	"rndis response on err %d\012\000"
	.space	2
.LC520:
	.ascii	"ccid\000"
	.space	3
.LC521:
	.ascii	"adb\000"
.LC522:
	.ascii	"<6>acc_bind_config\012\000"
.LC523:
	.ascii	"accessory\000"
	.space	2
.LC524:
	.ascii	"rmnet_smd_sdio\000"
	.space	1
.LC525:
	.ascii	"<6>mtp_bind_config\012\000"
.LC526:
	.ascii	"mtp\000"
.LC527:
	.ascii	"qdss\000"
	.space	3
.LC528:
	.ascii	"<3>qdss_bind_config: allocating channel failed\012\000"
.LC529:
	.ascii	"<3>qdss usb_add_function failed\012\000"
	.space	3
.LC530:
	.ascii	"<3>%s: qdss: Cannot open channel qdss\000"
	.space	2
.LC531:
	.ascii	"<6>%s: port number %u\000"
	.space	2
.LC532:
	.ascii	"<3>%s: Can not add port %u. Max ports = %d\000"
	.space	1
.LC533:
	.ascii	"<6>%s: no_ports:%d\012\000"
.LC534:
	.ascii	"<3>%s: Invalid num of ports count:%d\012\000"
	.space	2
.LC535:
	.ascii	"k_bam_data\000"
	.space	1
.LC536:
	.ascii	"<3>%s: Failed to create workqueue\012\000"
	.space	1
.LC537:
	.ascii	"<3>%s: bam_data_setup failed err: %d\012\000"
	.space	2
.LC538:
	.ascii	"<3>%s: bam setup failed\000"
.LC539:
	.ascii	"<6>%s: mbim struct not allocated\000"
	.space	3
.LC540:
	.ascii	"usb_mbim\000"
	.space	3
.LC541:
	.ascii	"<6>%s: Exit status %d\000"
	.space	2
.LC542:
	.ascii	"Mass Storage Function\000"
	.space	2
.LC543:
	.ascii	"/home/xawlw/kernel/arg/include/linux/kref.h\000"
.LC544:
	.ascii	"k_rmnet_work\000"
	.space	3
.LC545:
	.ascii	"rmnet_sdio\000"
	.space	1
.LC546:
	.ascii	"usb_rmnet_sdio\000"
	.space	1
.LC547:
	.ascii	"<3>%s: Unable to allocate gps device\012\000"
	.space	2
.LC548:
	.ascii	"<3>%s: gps: Cannot init gps port\000"
	.space	3
.LC549:
	.ascii	"gsmd_ctrl\000"
	.space	2
.LC550:
	.ascii	"<3>%s: Unable to create workqueue grmnet_ctrl\012\000"
	.space	1
.LC551:
	.ascii	"DATA39_CNTL\000"
.LC552:
	.ascii	"&c->wait\000"
	.space	3
.LC553:
	.ascii	"&c->smd_wait_q\000"
	.space	1
.LC554:
	.ascii	"<3>%s: Unable to alloc port:%d\012\000"
.LC555:
	.ascii	"<3>%s: gps: Cannot setup transports\000"
.LC556:
	.ascii	"<3>%s: failed to get string id, err:%d\012\000"
.LC557:
	.ascii	"gps\000"
.LC558:
	.ascii	"<3>%s: cannot allocate memory for name\012\000"
.LC559:
	.ascii	"<3>%s: usb add function failed: %d\012\000"
.LC560:
	.ascii	"<3>%s: Could not bind gps config\012\000"
	.space	2
.LC561:
	.ascii	"&dev->smd_ctl.wait\000"
	.space	1
.LC562:
	.ascii	"&dev->smd_data.wait\000"
.LC563:
	.ascii	"rmnet\000"
	.space	2
.LC564:
	.ascii	"usb_rmnet_smd\000"
	.space	2
.LC565:
	.ascii	"<3>%s: zero length ctrl pkt\012\000"
	.space	3
.LC566:
	.ascii	"<3>%s: max_buffer_size:%d given_pkt_size:%d\012\000"
	.space	3
.LC567:
	.ascii	"<3> %s dev->error\012\000"
	.space	1
.LC568:
	.ascii	"<6>read descriptors\012\000"
	.space	3
.LC569:
	.ascii	"<6>read strings\012\000"
	.space	3
.LC570:
	.ascii	"&epfile->mutex\000"
	.space	1
.LC571:
	.ascii	"&epfile->wait\000"
	.space	2
.LC572:
	.ascii	"ep%u\000"
	.space	3
.LC573:
	.ascii	"gmidi function\000"
	.space	1
.LC574:
	.ascii	"<3>%s: mbim dev is null\012\000"
	.space	3
.LC575:
	.ascii	"<3>%s: mbim command error %d\012\000"
	.space	2
.LC576:
	.ascii	"<3>%s: max_pkt_size:%d given_pkt_size:%d\012\000"
	.space	2
.LC577:
	.ascii	"<3>%s: cannot allocate rmnet_mux ctrl pkt\012\000"
	.space	1
.LC578:
	.ascii	"<3>%s: copy_from_user failed err:%d\012\000"
	.space	3
.LC579:
	.ascii	"rmnet_mux notify ep enqueue error %d\012\000"
	.space	2
.LC580:
	.ascii	"USB audio source\000"
	.space	3
.LC581:
	.ascii	"USB gadget audio\000"
	.space	3
.LC582:
	.ascii	"audio_source\000"
	.space	3
.LC583:
	.ascii	"USB accessory audio source\000"
	.space	1
.LC584:
	.ascii	"<3>%s: given pkt size too big:%d > max_pkt_size:%d\012"
	.ascii	"\000"
.LC585:
	.ascii	"<3>%s: Previous writing not finished yet\012\000"
	.space	2
.LC586:
	.ascii	"<3>%s: dev:%pK is not connected\012\000"
	.space	3
.LC587:
	.ascii	"<3>%s: dev:%pK state=%d, recover!!\012\000"
.LC588:
	.ascii	"<3>%s: dev:%pK is not online\012\000"
	.space	2
.LC589:
	.ascii	"<3>%s: dev:%pK req is NULL\012\000"
.LC590:
	.ascii	"<3>%s: dev:%pK req->buf is NULL\012\000"
	.space	3
.LC591:
	.ascii	"<3>%s: ep enqueue error %d\012\000"
.LC592:
	.ascii	"%s: Unexpected call\012\000"
	.space	3
.LC593:
	.ascii	"usb_ep_set_wedge -> %d\012\000"
.LC594:
	.ascii	"usb_ep_set_halt -> %d\012\000"
	.space	1
.LC595:
	.ascii	"Unknown x%02x\000"
	.space	2
.LC596:
	.ascii	"<3>%s bulk_dev_error\012\000"
	.space	2
.LC597:
	.ascii	"<3>%s usb ep queue failed\012\000"
	.space	1
.LC598:
	.ascii	"<4>%s: set unknown OID 0x%08X, size %d\012\000"
.LC599:
	.ascii	"<4>%s: unknown RNDIS message 0x%08X len %d\012\000"
.LC600:
	.ascii	"<3>%s: RNDIS command error %d, %d/%d\012\000"
	.space	2
.LC601:
	.ascii	"<3>%s: Invalid grmnet/buf, grmnet:%pK buf:%pK\012\000"
	.space	1
.LC602:
	.ascii	"ep-e\000"
	.space	3
.LC603:
	.ascii	"ep-f\000"
	.space	3
.LC604:
	.ascii	"ep3-bulk\000"
	.space	3
.LC605:
	.ascii	"ep2-bulk\000"
	.space	3
.LC606:
	.ascii	"<3>%s: %s: can't bind, err %d\012\000"
	.space	1
.LC607:
	.ascii	"dual\000"
	.space	3
.LC608:
	.ascii	"full\000"
	.space	3
.LC609:
	.ascii	"<3>%s: usb epin autoconfig failed\012\000"
	.space	1
.LC610:
	.ascii	"<6>%s: usb epin autoconfig succeeded\012\000"
	.space	2
.LC611:
	.ascii	"<3>%s: usb epout autoconfig failed\012\000"
.LC612:
	.ascii	"<6>%s: usb epout autoconfig succeeded\012\000"
	.space	1
.LC613:
	.ascii	"<3>%s: usb notify ep autoconfig failed\012\000"
.LC614:
	.ascii	"<6>%s: usb notify ep autoconfig succeeded\012\000"
	.space	1
.LC615:
	.ascii	"<6>%s: allocated notify ep request & request buffer"
	.ascii	"\012\000"
	.space	3
.LC616:
	.ascii	"<6>%s: failed to allocate notify request\012\000"
	.space	2
.LC617:
	.ascii	"<6>%s: mbim(%d): %s speed IN/%s OUT/%s NOTIFY/%s\012"
	.ascii	"\000"
	.space	2
.LC618:
	.ascii	"<3>%s: %s failed to bind, err %d\012\000"
	.space	2
.LC619:
	.ascii	"%s: can't bind, err %d\012\000"
.LC620:
	.ascii	"<3>%s: %s: failed to allocate desc interface\000"
	.space	3
.LC621:
	.ascii	"<3>%s: %s: failed to allocate alt interface\000"
.LC622:
	.ascii	"<3>%s: %s: failed to autoconfig in endpoint\000"
.LC623:
	.ascii	"<3>%s: %s: failed to autoconfig out endpoint\000"
	.space	3
.LC624:
	.ascii	"unable to autoconfigure all endpoints\012\000"
	.space	1
.LC625:
	.ascii	"<3>%s: unable to allocate ifc id, err:%d\000"
	.space	3
.LC626:
	.ascii	"<3>%s: usb epnotify autoconfig failed\012\000"
	.space	1
.LC627:
	.ascii	"<3>qdss_bind: full-speed is not supported\012\000"
	.space	1
.LC628:
	.ascii	"<3>interface allocation error\012\000"
	.space	1
.LC629:
	.ascii	"<3>ep_autoconfig error\012\000"
.LC630:
	.ascii	"<3>usb_copy_descriptors error\012\000"
	.space	1
.LC631:
	.ascii	"<3>%s: unable to allocate memory for notify req\012"
	.ascii	"\000"
	.space	3
.LC632:
	.ascii	"<6>%s: GPS(%d) %s Speed\012\000"
	.space	3
.LC633:
	.ascii	"%s/%pK: can't bind, err %d\012\000"
.LC634:
	.ascii	"android\000"
.LC635:
	.ascii	"<3>acc_bind() could not allocate requests\012\000"
	.space	1
.LC636:
	.ascii	"<3>mtp_bind() could not allocate requests\012\000"
	.space	1
.LC637:
	.ascii	"<3>adb_bind() could not allocate requests\012\000"
	.space	1
.LC638:
	.ascii	"ep0 bMaxBurst must be 0\012\000"
	.space	3
.LC639:
	.ascii	"can't enable %s, result %d\012\000"
.LC640:
	.ascii	"config_ep_by_speed failed for ep %s, result %d\012\000"
.LC641:
	.ascii	"config_ep_by_speed failes for ep %s, result %d\012\000"
.LC642:
	.ascii	"<3>%s: unable to allocate memory for notify ep\012\000"
.LC643:
	.ascii	"config_ep fail ep %s, result %d\012\000"
	.space	3
.LC644:
	.ascii	"failedto enable ep%s, result %d\012\000"
	.space	3
.LC645:
	.ascii	"failed to enable ep %s, result %d\012\000"
	.space	1
.LC646:
	.ascii	"<3>%s: unable to allocate memory for out req\012\000"
	.space	2
.LC647:
	.ascii	"<3>%s: unable to allocate memory for in req\012\000"
	.space	3
.LC648:
	.ascii	"<3>%s: config_ep_by_speed failed for ep#%s, err#%d\012"
	.ascii	"\000"
.LC649:
	.ascii	"<3>%s: usb ep#%s enable failed, err#%d\012\000"
.LC650:
	.ascii	"<3>qdss_st_alt: qdss supportes HS or SS only\012\000"
	.space	2
.LC651:
	.ascii	"<3>qdss_set_alt failed\012\000"
.LC652:
	.ascii	"<3>%s: Invalid port_num#%d\012\000"
.LC653:
	.ascii	"<3>%s: grmnet port is null\012\000"
.LC654:
	.ascii	"can't configure %s: %d\012\000"
.LC655:
	.ascii	"can't start %s: %d\012\000"
.LC656:
	.ascii	"%s queue req: %d\012\000"
	.space	2
.LC657:
	.ascii	"<7>usb: %s cdev->config=%pK, config=%pK\012\000"
	.space	3
.LC658:
	.ascii	"enabled\000"
.LC659:
	.ascii	"disabled\000"
	.space	3
.LC660:
	.ascii	"<3>%s: %s: android_enable failed\012\000"
	.space	2
.LC661:
	.ascii	"<3>%s: android_usb: already %s\012\000"
.LC662:
	.ascii	"<6>adb_release\012\000"
.LC663:
	.ascii	"<3>%s: adb_closed_callback: data->dev is NULL\000"
	.space	2
.LC664:
	.ascii	"<3>%s: adb_closed_callback: config->dev is NULL\000"
.LC665:
	.ascii	"<6>%s(): freeing\012\000"
	.space	2
.LC666:
	.ascii	"Function FS Gadget\000"
	.space	1
.LC667:
	.ascii	"composite\000"
	.space	2
.LC668:
	.ascii	"<3>%s: unable to allocate platform data\012\000"
	.space	3
.LC669:
	.ascii	"qcom,android-usb-swfi-latency\000"
	.space	2
.LC670:
	.ascii	"qcom,android-usb-cdrom\000"
	.space	1
.LC671:
	.ascii	"qcom,android-usb-internal-ums\000"
	.space	2
.LC672:
	.ascii	"qcom,streaming-func\000"
.LC673:
	.ascii	"<3>%s: Invalid number of functions used.\012\000"
	.space	2
.LC674:
	.ascii	"qcom,android-usb-uicc-nluns\000"
.LC675:
	.ascii	"android_usb\000"
.LC676:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android_dev"
	.ascii	"\012\000"
	.space	3
.LC677:
	.ascii	"&android_dev->mutex\000"
.LC678:
	.ascii	"ioremap failed\012\000"
.LC679:
	.ascii	"android%d\000"
	.space	2
.LC680:
	.ascii	"<3>%s: %s(): android_create_device failed\012\000"
	.space	1
.LC681:
	.ascii	"<3>%s: %s(): Failed to register android composite d"
	.ascii	"river\012\000"
	.space	2
.LC682:
	.ascii	"high\000"
	.space	3
.LC683:
	.ascii	"%s: no requests available\012\000"
	.space	1
.LC684:
	.ascii	"%s: cannot queue read request\012\000"
	.space	1
.LC685:
	.ascii	"usb_add_function failed\012\000"
	.space	3
.LC686:
	.ascii	"unable to get diag usb channel\012\000"
.LC687:
	.ascii	"<3>%s: diag: Cannot open channel '%s'\000"
	.space	2
.LC688:
	.ascii	"<3>usb_ep_alloc_request failed\012\000"
.LC689:
	.ascii	"<3>send_sps_req: usb_ep_queue error\012\000"
	.space	3
.LC690:
	.ascii	"<3>msm_ep_config failed\012\000"
	.space	3
.LC691:
	.ascii	"<3>init_data error\000"
	.space	1
.LC692:
	.ascii	"<3>qdss_data_connection: memory alloc failed\012\000"
	.space	2
.LC693:
	.ascii	"<3>set_qdss_data_connection error\000"
	.space	2
.LC694:
	.ascii	"<3>send_sps_req error\012\000"
	.space	1
.LC695:
	.ascii	"<3>usb_qdss_free_req: qdss ctx is NULL\012\000"
.LC696:
	.ascii	"<3>usb_qdss_alloc_req: missing params\012\000"
	.space	1
.LC697:
	.ascii	"<3>usb_qdss_alloc_req: ctrl_in allocation err\012\000"
	.space	1
.LC698:
	.ascii	"<3>usb_qdss_alloc_req:ctrl_out allocation err\012\000"
	.space	1
.LC699:
	.ascii	"<3>error: usb_qdss_ctrl_read list is empty\012\000"
.LC700:
	.ascii	"<3>qdss usb_ep_queue failed\012\000"
	.space	3
.LC701:
	.ascii	"<3>error: usb_qdss_ctrl_write list is empty\012\000"
	.space	3
.LC702:
	.ascii	"<3>usb_qdss_open: notification func is missing\012\000"
.LC703:
	.ascii	"g_serial\000"
	.space	3
.LC704:
	.ascii	"ttyGS\000"
	.space	2
.LC705:
	.ascii	"k_gserial\000"
	.space	2
.LC706:
	.ascii	"&ports[i].lock\000"
	.space	1
.LC707:
	.ascii	"&port->close_wait\000"
	.space	2
.LC708:
	.ascii	"&port->drain_wait\000"
	.space	2
.LC709:
	.ascii	"<3>%s: cannot register, err %d\012\000"
.LC710:
	.ascii	"<4>%s: no classdev for port %d, err %ld\012\000"
	.space	3
.LC711:
	.ascii	"usb_serial%d\000"
	.space	3
.LC712:
	.ascii	"readstatus\000"
	.space	1
.LC713:
	.ascii	"reset\000"
	.space	2
.LC714:
	.ascii	"<3>%s: usb alloc request failed\012\000"
	.space	3
.LC715:
	.ascii	"<3>%s: request buf allocation failed\012\000"
	.space	2
.LC716:
	.ascii	"<3>%s: unable to allocate out requests\012\000"
.LC717:
	.ascii	"<3>%s: unable to allocate IN requests\012\000"
	.space	1
.LC718:
	.ascii	"<3>%s: sio channel is not open\012\000"
.LC719:
	.ascii	"<3>%s: usb request is null port#%d\012\000"
.LC720:
	.ascii	"<3>%s: unable to allocate out reqs\012\000"
.LC721:
	.ascii	"<3>%s: unable to allocate in reqs\012\000"
	.space	1
.LC722:
	.ascii	"<3>%s: port allocation failed\012\000"
	.space	1
.LC723:
	.ascii	"<3>%s: failed to enable in ep w/ err:%d\012\000"
	.space	3
.LC724:
	.ascii	"<3>%s: invalid number of ports count:%d max_ports:%"
	.ascii	"d\012\000"
	.space	2
.LC725:
	.ascii	"<3>%s: unable to create workqueue gsdio_wq\012\000"
.LC726:
	.ascii	"&sdio_ports[i].lock\000"
.LC727:
	.ascii	"<3>%s: sdio logical port allocation failed\012\000"
.LC728:
	.ascii	"usb_gsdio\000"
	.space	2
.LC729:
	.ascii	"<3>%s: Invalid port no#%d\000"
	.space	2
.LC730:
	.ascii	"<3>%s: Un-supported transport:%s\012\000"
	.space	2
.LC731:
	.ascii	"<3>%s: Invalid num of ports count:%d gadget:%pK\012"
	.ascii	"\000"
	.space	3
.LC732:
	.ascii	"k_gsmd\000"
	.space	1
.LC733:
	.ascii	"<3>%s: Unable to create workqueue gsmd_wq\012\000"
	.space	1
.LC734:
	.ascii	"&smd_ports[i].lock\000"
	.space	1
.LC735:
	.ascii	"usb_gsmd\000"
	.space	3
.LC736:
	.ascii	"<3>%s: Un-supported transport transport: %u\012\000"
	.space	3
.LC737:
	.ascii	"<3>%s: acm: Cannot open port '%s'\000"
	.space	2
.LC738:
	.ascii	"<3>%s: acm: Cannot setup transports\000"
.LC739:
	.ascii	"acm%u\000"
	.space	2
.LC740:
	.ascii	"<3>%s: acm: bind_config failed for port %d\000"
	.space	1
.LC741:
	.ascii	"<3>%s: invalid bam portno#%d\012\000"
	.space	2
.LC742:
	.ascii	"<3>%s: usb_bam_client_ready failed\012\000"
.LC743:
	.ascii	"<3>%s: Invalid num of ports count:%d,%d\012\000"
	.space	3
.LC744:
	.ascii	"k_gbam\000"
	.space	1
.LC745:
	.ascii	"<3>%s: Unable to create workqueue gbam_wq\012\000"
	.space	1
.LC746:
	.ascii	"usb_rmnet\000"
	.space	2
.LC747:
	.ascii	"<3>%s: Invalid client:%d\012\000"
	.space	2
.LC748:
	.ascii	"<3>%s: setting xport name for invalid port num %d\012"
	.ascii	"\000"
	.space	1
.LC749:
	.ascii	"_ctrl\000"
	.space	2
.LC750:
	.ascii	"<3>%s: Unable to create workqueue:%s\012\000"
	.space	2
.LC751:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%p\000"
.LC752:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%p\000"
	.space	3
.LC753:
	.ascii	"_data\000"
	.space	2
.LC754:
	.ascii	"SMUX_RMNET_CTL_HSUART\000"
	.space	2
.LC755:
	.ascii	"<3>%s: ghsic_ctrl_connect failed: err:%d\012\000"
	.space	2
.LC756:
	.ascii	"<3>%s: ghsic_data_connect failed: err:%d\012\000"
	.space	2
.LC757:
	.ascii	"<3>%s: ghsuart_data_connect failed: err:%d\012\000"
.LC758:
	.ascii	"<3>%s: gsmd_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC759:
	.ascii	"<3>%s: gqti_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC760:
	.ascii	"<3>%s: ghsuart_ctrl_connect failed: err:%d\012\000"
.LC761:
	.ascii	"<3>%s: usb_bam_get_connection_idx failed\012\000"
	.space	2
.LC762:
	.ascii	"<3>%s: gbam_connect failed: err:%d\012\000"
.LC763:
	.ascii	"<3>%s: serial: Cannot open port '%s'\000"
	.space	3
.LC764:
	.ascii	"<3>%s: serial: Cannot setup transports\000"
	.space	1
.LC765:
	.ascii	"gser\000"
	.space	3
.LC766:
	.ascii	"modem\000"
	.space	2
.LC767:
	.ascii	"nmea\000"
	.space	3
.LC768:
	.ascii	"modem2\000"
	.space	1
.LC769:
	.ascii	"<3>%s: serial: bind_config failed for port %d\000"
	.space	2
.LC770:
	.ascii	"<3>%s: Max-%d instances supported\012\000"
	.space	1
.LC771:
	.ascii	"<3>%s: Unable to allocate rmnet device\012\000"
.LC772:
	.ascii	"<3>%s: Un-supported transport: %u\012\000"
	.space	1
.LC773:
	.ascii	"<3>%s: rmnet: Cannot open ctrl port:'%s' data port:"
	.ascii	"'%s'\012\000"
	.space	3
.LC774:
	.ascii	"<3>%s: supporting ports#%u port_id:%u\000"
	.space	2
.LC775:
	.ascii	"rmnet%d\000"
.LC776:
	.ascii	"<3>%s: Could not bind rmnet%u config\012\000"
	.space	2
.LC777:
	.ascii	"<3>%s: rmnet: Cannot setup transports\000"
	.space	2
.LC778:
	.ascii	"rndis\000"
	.space	2
.LC779:
	.ascii	"RNDIS command error %d, %d/%d\012\000"
	.space	1
.LC780:
	.ascii	"%02X%02X%02X%02X%02X%02X\000"
	.space	3
.LC781:
	.ascii	"cdc_ethernet\000"
	.space	3
.LC782:
	.ascii	"<3>%s: failed to add function\000"
	.space	2
.LC783:
	.ascii	"<3>%s: %s: teth_bridge_set_aggr_params failed\012\000"
	.space	1
.LC784:
	.ascii	"<6>%s: SET DEVICE OFFLINE\000"
	.space	2
.LC785:
	.ascii	"<6>%s: dev:%pK port:%d. Do nothing.\012\000"
	.space	3
.LC786:
	.ascii	"<6>%s: mbim deactivated\012\000"
	.space	3
.LC787:
	.ascii	"<6>%s: CONTROL_INTERFACE\000"
	.space	3
.LC788:
	.ascii	"<6>%s: reset mbim control %d\012\000"
	.space	2
.LC789:
	.ascii	"<3>%s: Failed configuring notify ep %s: err %d\012\000"
.LC790:
	.ascii	"<6>%s: DATA_INTERFACE\000"
	.space	2
.LC791:
	.ascii	"<6>%s: reset mbim\012\000"
	.space	1
.LC792:
	.ascii	"<6>%s: Alt set 1, initialize ports\000"
	.space	1
.LC793:
	.ascii	"<6>%s: Choose endpoints\000"
.LC794:
	.ascii	"<3>%s: IN ep %s failed: %d\012\000"
.LC795:
	.ascii	"<6>%s: Set mbim port in_desc = 0x%pK\000"
	.space	3
.LC796:
	.ascii	"<3>%s: OUT ep %s failed: %d\012\000"
	.space	3
.LC797:
	.ascii	"<6>%s: Set mbim port out_desc = 0x%pK\000"
	.space	2
.LC798:
	.ascii	"<6>%s: dev:%pK portno:%d\012\000"
	.space	2
.LC799:
	.ascii	"<3>%s: bam_data_setup failed: err:%d\012\000"
	.space	2
.LC800:
	.ascii	"<6>%s: mbim bam connected\012\000"
	.space	1
.LC801:
	.ascii	"<6>%s: PORTS already SET\000"
	.space	3
.LC802:
	.ascii	"<6>%s: SET DEVICE ONLINE\000"
	.space	3
.LC803:
	.ascii	"<3>%s: ERROR: Illegal Interface\000"
.LC804:
	.ascii	"%s%%d\000"
	.space	2
.LC805:
	.ascii	"self\000"
	.space	3
.LC806:
	.ascii	"using random %s ethernet address\012\000"
	.space	2
.LC807:
	.ascii	"host\000"
	.space	3
.LC808:
	.ascii	"<6>%s: MAC %pM\012\000"
.LC809:
	.ascii	"<6>%s: HOST MAC %pM\012\000"
	.space	3
.LC810:
	.ascii	"usb\000"
.LC811:
	.ascii	"<3>%s: %s: rndis_pdata\012\000"
.LC812:
	.ascii	"<6>%s: %s MAC: %02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC813:
	.ascii	"<3>%s: %s: gether_setup failed\012\000"
.LC814:
	.ascii	"<3>%s: %s: ecm_pdata\012\000"
	.space	2
.LC815:
	.ascii	"ecm\000"
.LC816:
	.ascii	"<3>%s: %s: ecm_bind_config failed\012\000"
	.space	1
.LC817:
	.ascii	"<3>%s: %s: ncm config is null\012\000"
	.space	1
.LC818:
	.ascii	"ncm\000"
.LC819:
	.ascii	"<3>%s: %s: gether setup failed err:%d\012\000"
	.space	1
.LC820:
	.ascii	"cdc_network\000"
.LC821:
	.ascii	"<3>%s: %s: ncm bind config failed err:%d\000"
	.space	3
.LC822:
	.ascii	"<3>%s: RNDIS header memory allocation failed.\012\000"
	.space	1
.LC823:
	.ascii	"<3>%s: bam_data_connect failed: err:%d\012\000"
.LC824:
	.ascii	"<6>%s: rndis deactivated\012\000"
	.space	2
.LC825:
	.ascii	"<6>%s: rndis bam connected\012\000"
.LC826:
	.ascii	"<3>%s: unable to open sound control device file: %s"
	.ascii	"\012\000"
	.space	3
.LC827:
	.ascii	"<3>%s: No such PCM playback device: %s\012\000"
.LC828:
	.ascii	"<3>%s: Setting playback HW params failed: err %d\000"
	.space	3
.LC829:
	.ascii	"<3>%s: No such PCM capture device: %s\012\000"
	.space	1
.LC830:
	.ascii	"<3>%s: Setting capture HW params failed: err %d\000"
.LC831:
	.ascii	"<3>%s: Failed to open snd devices\012\000"
	.space	1
.LC832:
	.ascii	"audio\000"
	.space	2
.LC833:
	.ascii	"<3>%s: %s: Failed to add usb audio function, err = "
	.ascii	"%d\000"
	.space	2
.LC834:
	.ascii	"SMUX_CONNECTED\000"
	.space	1
.LC835:
	.ascii	"SMUX_DISCONNECTED\000"
	.space	2
.LC836:
	.ascii	"SMUX_READ_DONE\000"
	.space	1
.LC837:
	.ascii	"SMUX_READ_FAIL\000"
	.space	1
.LC838:
	.ascii	"SMUX_WRITE_DONE\000"
.LC839:
	.ascii	"SMUX_WRITE_FAIL\000"
.LC840:
	.ascii	"SMUX_TIOCM_UPDATE\000"
	.space	2
.LC841:
	.ascii	"SMUX_LOW_WM_HIT\000"
.LC842:
	.ascii	"SMUX_HIGH_WM_HIT\000"
	.space	3
.LC843:
	.ascii	"RNDIS_UNINITIALIZED\000"
.LC844:
	.ascii	"RNDIS_INITIALIZED\000"
	.space	2
.LC845:
	.ascii	"RNDIS_DATA_INITIALIZED\000"
	.space	1
.LC846:
	.ascii	"NONE\000"
	.space	3
.LC847:
	.ascii	"remote_wakeup\000"
	.space	2
.LC848:
	.ascii	"state\000"
	.space	2
.LC849:
	.ascii	"pm_qos\000"
	.space	1
.LC850:
	.ascii	"enable\000"
	.space	1
.LC851:
	.ascii	"functions\000"
	.space	2
.LC852:
	.ascii	"iSerial\000"
.LC853:
	.ascii	"iProduct\000"
	.space	3
.LC854:
	.ascii	"iManufacturer\000"
	.space	2
.LC855:
	.ascii	"bDeviceProtocol\000"
.LC856:
	.ascii	"bDeviceSubClass\000"
.LC857:
	.ascii	"bDeviceClass\000"
	.space	3
.LC858:
	.ascii	"bcdDevice\000"
	.space	2
.LC859:
	.ascii	"idProduct\000"
	.space	2
.LC860:
	.ascii	"idVendor\000"
	.space	3
.LC861:
	.ascii	"midi\000"
	.space	3
.LC862:
	.ascii	"alsa\000"
	.space	3
.LC863:
	.ascii	"uasp\000"
	.space	3
.LC864:
	.ascii	"pcm\000"
.LC865:
	.ascii	"mass_storage\000"
	.space	3
.LC866:
	.ascii	"inquiry_string\000"
	.space	1
.LC867:
	.ascii	"rndis_qc\000"
	.space	3
.LC868:
	.ascii	"max_pkt_per_xfer\000"
	.space	3
.LC869:
	.ascii	"vendorID\000"
	.space	3
.LC870:
	.ascii	"ethaddr\000"
.LC871:
	.ascii	"wceis\000"
	.space	2
.LC872:
	.ascii	"manufacturer\000"
	.space	3
.LC873:
	.ascii	"ptp\000"
.LC874:
	.ascii	"serial\000"
	.space	1
.LC875:
	.ascii	"transport_names\000"
.LC876:
	.ascii	"transports\000"
	.space	1
.LC877:
	.ascii	"diag\000"
	.space	3
.LC878:
	.ascii	"clients\000"
.LC879:
	.ascii	"mbim_transports\000"
.LC880:
	.ascii	"ecm_qc\000"
	.space	1
.LC881:
	.ascii	"ecm_transports\000"
	.space	1
.LC882:
	.ascii	"ecm_ethaddr\000"
.LC883:
	.ascii	"ncm_ethaddr\000"
.LC884:
	.ascii	"rmnet_smd\000"
	.space	2
.LC885:
	.ascii	"acm\000"
.LC886:
	.ascii	"acm_transports\000"
	.space	1
.LC887:
	.ascii	"aliases\000"
.LC888:
	.ascii	"version\000"
.LC889:
	.ascii	"1.0\000"
.LC890:
	.ascii	"CDC Network Control Model (NCM)\000"
.LC891:
	.ascii	"CDC Network Data\000"
	.space	3
.LC892:
	.ascii	"CDC NCM\000"
.LC893:
	.ascii	"Microphone Iso-IN Endpoint Control\000"
	.space	1
.LC894:
	.ascii	"Microphone Sampling Frequency Control\000"
	.space	2
.LC895:
	.ascii	"Speaker Iso-out Endpoint Control\000"
	.space	3
.LC896:
	.ascii	"Speaker Sampling Frequency Control\000"
	.space	1
.LC897:
	.ascii	"Microphone Feature Unit Controls\000"
	.space	3
.LC898:
	.ascii	"Microphone Volume Control\000"
	.space	2
.LC899:
	.ascii	"Microphone Mute Control\000"
.LC900:
	.ascii	"Speaker Function Unit Controls\000"
	.space	1
.LC901:
	.ascii	"Speaker Volume Control\000"
	.space	1
.LC902:
	.ascii	"Speaker Mute Control\000"
	.space	3
.LC903:
	.ascii	"/dev/snd/controlC0\000"
	.space	1
.LC904:
	.ascii	"/dev/snd/pcmC0D6c\000"
	.space	2
.LC905:
	.ascii	"/dev/snd/pcmC0D5p\000"
	.space	2
.LC906:
	.ascii	"gadget\000"
	.space	1
.LC907:
	.ascii	"android_rndis_qc\000"
	.space	3
.LC908:
	.ascii	"RNDIS Communications Control\000"
	.space	3
.LC909:
	.ascii	"RNDIS Ethernet Data\000"
.LC910:
	.ascii	"RNDIS\000"
	.space	2
.LC911:
	.ascii	"CDC Ethernet Control Model (ECM)\000"
	.space	3
.LC912:
	.ascii	"CDC Ethernet Data\000"
	.space	2
.LC913:
	.ascii	"CDC ECM\000"
.LC914:
	.ascii	"android_mbim\000"
	.space	3
.LC915:
	.ascii	"MBIM Control\000"
	.space	3
.LC916:
	.ascii	"MBIM Data\000"
	.space	2
.LC917:
	.ascii	"USB accessory\000"
	.space	2
.LC918:
	.ascii	"usb_accessory\000"
	.space	2
.LC919:
	.ascii	"Android Accessory Interface\000"
.LC920:
	.ascii	"MTP\000"
.LC921:
	.ascii	"ccid_ctrl\000"
	.space	2
.LC922:
	.ascii	"ccid_bulk\000"
	.space	2
.LC923:
	.ascii	"CDC Abstract Control Model (ACM)\000"
	.space	3
.LC924:
	.ascii	"CDC ACM Data\000"
	.space	3
.LC925:
	.ascii	"CDC Serial\000"
	.space	1
.LC926:
	.ascii	"Generic Serial\000"
	.space	1
.LC927:
	.ascii	"SMUX_DUN_DATA_HSUART\000"
	.space	3
.LC928:
	.ascii	"SMUX_RMNET_DATA_HSUART\000"
	.space	1
.LC929:
	.ascii	"rmnet_ctrl\000"
	.space	1
.LC930:
	.ascii	"DATA40_CNTL\000"
.LC931:
	.ascii	"DATA38_CNTL\000"
.LC932:
	.ascii	"DS\000"
	.space	1
.LC933:
	.ascii	"UNUSED\000"
	.space	1
.LC934:
	.ascii	"SDIO_DUN\000"
	.space	3
.LC935:
	.ascii	"SDIO_NMEA\000"
	.space	2
.LC936:
	.ascii	"cdrom\000"
	.space	2
.LC937:
	.ascii	"file\000"
	.space	3
.LC938:
	.ascii	"nofua\000"
	.space	2
.LC939:
	.ascii	"ro\000"
	.space	1
.LC940:
	.ascii	"functionfs\000"
	.space	1
.LC941:
	.ascii	"GPS\000"
.LC942:
	.ascii	"RmNet\000"
	.space	2
.LC943:
	.ascii	"rmnet_mux_ctrl\000"
	.space	1
.LC944:
	.ascii	"transport\000"
	.space	2
.LC945:
	.ascii	"QMI RmNet\000"
	.space	2
.LC946:
	.ascii	"QDSS DATA\000"
	.space	2
.LC947:
	.ascii	"QDSS CTRL\000"
	.space	2
.LC948:
	.ascii	"MIDI function\000"
	.space	2
.LC949:
	.ascii	"suspended\000"
	.section	__modver,"a",%progbits
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.section	__param,"a",%progbits
	.align	2
	.type	__param_audio_capture_buf_size, %object
	.size	__param_audio_capture_buf_size, 16
__param_audio_capture_buf_size:
	.word	__param_str_audio_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_capture_buf_size
	.type	__param_req_capture_count, %object
	.size	__param_req_capture_count, 16
__param_req_capture_count:
	.word	__param_str_req_capture_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_count
	.type	__param_req_capture_buf_size, %object
	.size	__param_req_capture_buf_size, 16
__param_req_capture_buf_size:
	.word	__param_str_req_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_buf_size
	.type	__param_audio_playback_buf_size, %object
	.size	__param_audio_playback_buf_size, 16
__param_audio_playback_buf_size:
	.word	__param_str_audio_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_playback_buf_size
	.type	__param_req_playback_count, %object
	.size	__param_req_playback_count, 16
__param_req_playback_count:
	.word	__param_str_req_playback_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_count
	.type	__param_req_playback_buf_size, %object
	.size	__param_req_playback_buf_size, 16
__param_req_playback_buf_size:
	.word	__param_str_req_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_buf_size
	.type	__param_fn_cntl, %object
	.size	__param_fn_cntl, 16
__param_fn_cntl:
	.word	__param_str_fn_cntl
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cntl
	.type	__param_fn_cap, %object
	.size	__param_fn_cap, 16
__param_fn_cap:
	.word	__param_str_fn_cap
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cap
	.type	__param_fn_play, %object
	.size	__param_fn_play, 16
__param_fn_play:
	.word	__param_str_fn_play
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_play
	.type	__param_qc_host_addr, %object
	.size	__param_qc_host_addr, 16
__param_qc_host_addr:
	.word	__param_str_qc_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_host_addr
	.type	__param_qc_dev_addr, %object
	.size	__param_qc_dev_addr, 16
__param_qc_dev_addr:
	.word	__param_str_qc_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_dev_addr
	.type	__param_host_addr, %object
	.size	__param_host_addr, 16
__param_host_addr:
	.word	__param_str_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	host_addr
	.type	__param_dev_addr, %object
	.size	__param_dev_addr, 16
__param_dev_addr:
	.word	__param_str_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	dev_addr
	.type	__param_qmult, %object
	.size	__param_qmult, 16
__param_qmult:
	.word	__param_str_qmult
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	qmult
	.type	__param_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_rndis_ul_max_xfer_size_rcvd, 16
__param_rndis_ul_max_xfer_size_rcvd:
	.word	__param_str_rndis_ul_max_xfer_size_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_xfer_size_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_rndis_ul_max_pkt_per_xfer_rcvd, 16
__param_rndis_ul_max_pkt_per_xfer_rcvd:
	.word	__param_str_rndis_ul_max_pkt_per_xfer_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_rndis_ul_max_pkt_per_xfer, 16
__param_rndis_ul_max_pkt_per_xfer:
	.word	__param_str_rndis_ul_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer
	.type	__param_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_rndis_dl_max_pkt_per_xfer, 16
__param_rndis_dl_max_pkt_per_xfer:
	.word	__param_str_rndis_dl_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_dl_max_pkt_per_xfer
	.type	__param_mtp_tx_reqs, %object
	.size	__param_mtp_tx_reqs, 16
__param_mtp_tx_reqs:
	.word	__param_str_mtp_tx_reqs
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_reqs
	.type	__param_mtp_tx_req_len, %object
	.size	__param_mtp_tx_req_len, 16
__param_mtp_tx_req_len:
	.word	__param_str_mtp_tx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_req_len
	.type	__param_mtp_rx_req_len, %object
	.size	__param_mtp_rx_req_len, 16
__param_mtp_rx_req_len:
	.word	__param_str_mtp_rx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_rx_req_len
	.type	__param_ghsuart_data_tx_intr_thld, %object
	.size	__param_ghsuart_data_tx_intr_thld, 16
__param_ghsuart_data_tx_intr_thld:
	.word	__param_str_ghsuart_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_tx_intr_thld
	.type	__param_ghsuart_data_rx_req_size, %object
	.size	__param_ghsuart_data_rx_req_size, 16
__param_ghsuart_data_rx_req_size:
	.word	__param_str_ghsuart_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rx_req_size
	.type	__param_ghsuart_data_serial_rx_q_size, %object
	.size	__param_ghsuart_data_serial_rx_q_size, 16
__param_ghsuart_data_serial_rx_q_size:
	.word	__param_str_ghsuart_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_rx_q_size
	.type	__param_ghsuart_data_serial_tx_q_size, %object
	.size	__param_ghsuart_data_serial_tx_q_size, 16
__param_ghsuart_data_serial_tx_q_size:
	.word	__param_str_ghsuart_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_tx_q_size
	.type	__param_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_ghsuart_data_rmnet_rx_q_size, 16
__param_ghsuart_data_rmnet_rx_q_size:
	.word	__param_str_ghsuart_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_rx_q_size
	.type	__param_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_ghsuart_data_rmnet_tx_q_size, 16
__param_ghsuart_data_rmnet_tx_q_size:
	.word	__param_str_ghsuart_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_tx_q_size
	.type	__param_record_timestamp, %object
	.size	__param_record_timestamp, 16
__param_record_timestamp:
	.word	__param_str_record_timestamp
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	record_timestamp
	.type	__param_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_ghsic_data_pend_limit_with_bridge, 16
__param_ghsic_data_pend_limit_with_bridge:
	.word	__param_str_ghsic_data_pend_limit_with_bridge
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_pend_limit_with_bridge
	.type	__param_ghsic_data_fctrl_dis_thld, %object
	.size	__param_ghsic_data_fctrl_dis_thld, 16
__param_ghsic_data_fctrl_dis_thld:
	.word	__param_str_ghsic_data_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_dis_thld
	.type	__param_ghsic_data_fctrl_en_thld, %object
	.size	__param_ghsic_data_fctrl_en_thld, 16
__param_ghsic_data_fctrl_en_thld:
	.word	__param_str_ghsic_data_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_en_thld
	.type	__param_ghsic_data_fctrl_support, %object
	.size	__param_ghsic_data_fctrl_support, 16
__param_ghsic_data_fctrl_support:
	.word	__param_str_ghsic_data_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_support
	.type	__param_ghsic_data_tx_intr_thld, %object
	.size	__param_ghsic_data_tx_intr_thld, 16
__param_ghsic_data_tx_intr_thld:
	.word	__param_str_ghsic_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_tx_intr_thld
	.type	__param_ghsic_data_rx_req_size, %object
	.size	__param_ghsic_data_rx_req_size, 16
__param_ghsic_data_rx_req_size:
	.word	__param_str_ghsic_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rx_req_size
	.type	__param_ghsic_data_serial_rx_q_size, %object
	.size	__param_ghsic_data_serial_rx_q_size, 16
__param_ghsic_data_serial_rx_q_size:
	.word	__param_str_ghsic_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_rx_q_size
	.type	__param_ghsic_data_serial_tx_q_size, %object
	.size	__param_ghsic_data_serial_tx_q_size, 16
__param_ghsic_data_serial_tx_q_size:
	.word	__param_str_ghsic_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_tx_q_size
	.type	__param_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_ghsic_data_rmnet_rx_q_size, 16
__param_ghsic_data_rmnet_rx_q_size:
	.word	__param_str_ghsic_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_rx_q_size
	.type	__param_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_ghsic_data_rmnet_tx_q_size, 16
__param_ghsic_data_rmnet_tx_q_size:
	.word	__param_str_ghsic_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_tx_q_size
	.type	__param_dl_intr_threshold, %object
	.size	__param_dl_intr_threshold, 16
__param_dl_intr_threshold:
	.word	__param_str_dl_intr_threshold
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	dl_intr_threshold
	.type	__param_bam_mux_rx_req_size, %object
	.size	__param_bam_mux_rx_req_size, 16
__param_bam_mux_rx_req_size:
	.word	__param_str_bam_mux_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_req_size
	.type	__param_bam_mux_rx_q_size, %object
	.size	__param_bam_mux_rx_q_size, 16
__param_bam_mux_rx_q_size:
	.word	__param_str_bam_mux_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_q_size
	.type	__param_bam_mux_tx_q_size, %object
	.size	__param_bam_mux_tx_q_size, 16
__param_bam_mux_tx_q_size:
	.word	__param_str_bam_mux_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_q_size
	.type	__param_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_bam_mux_rx_fctrl_dis_thld, 16
__param_bam_mux_rx_fctrl_dis_thld:
	.word	__param_str_bam_mux_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_dis_thld
	.type	__param_bam_mux_rx_fctrl_support, %object
	.size	__param_bam_mux_rx_fctrl_support, 16
__param_bam_mux_rx_fctrl_support:
	.word	__param_str_bam_mux_rx_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_support
	.type	__param_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_bam_mux_rx_fctrl_en_thld, 16
__param_bam_mux_rx_fctrl_en_thld:
	.word	__param_str_bam_mux_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_en_thld
	.type	__param_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_bam_mux_tx_pkt_drop_thld, 16
__param_bam_mux_tx_pkt_drop_thld:
	.word	__param_str_bam_mux_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_pkt_drop_thld
	.type	__param_bam_pending_limit, %object
	.size	__param_bam_pending_limit, 16
__param_bam_pending_limit:
	.word	__param_str_bam_pending_limit
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_pending_limit
	.type	__param_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_mux_sdio_rx_fctrl_dis_thld, 16
__param_mux_sdio_rx_fctrl_dis_thld:
	.word	__param_str_mux_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_dis_thld
	.type	__param_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_mux_sdio_rx_fctrl_en_thld, 16
__param_mux_sdio_rx_fctrl_en_thld:
	.word	__param_str_mux_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_en_thld
	.type	__param_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_mux_sdio_tx_pkt_drop_thld, 16
__param_mux_sdio_tx_pkt_drop_thld:
	.word	__param_str_mux_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_tx_pkt_drop_thld
	.type	__param_rmnet_mux_smd_data_ch, %object
	.size	__param_rmnet_mux_smd_data_ch, 16
__param_rmnet_mux_smd_data_ch:
	.word	__param_str_rmnet_mux_smd_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_mux_smd_data_ch
	.type	__param_rmnet_mux_sdio_data_ch, %object
	.size	__param_rmnet_mux_sdio_data_ch, 16
__param_rmnet_mux_sdio_data_ch:
	.word	__param_str_rmnet_mux_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_data_ch
	.type	__param_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_rmnet_mux_sdio_ctl_ch, 16
__param_rmnet_mux_sdio_ctl_ch:
	.word	__param_str_rmnet_mux_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_ctl_ch
	.type	__param_sdio_rx_fctrl_dis_thld, %object
	.size	__param_sdio_rx_fctrl_dis_thld, 16
__param_sdio_rx_fctrl_dis_thld:
	.word	__param_str_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_dis_thld
	.type	__param_sdio_rx_fctrl_en_thld, %object
	.size	__param_sdio_rx_fctrl_en_thld, 16
__param_sdio_rx_fctrl_en_thld:
	.word	__param_str_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_en_thld
	.type	__param_sdio_tx_pkt_drop_thld, %object
	.size	__param_sdio_tx_pkt_drop_thld, 16
__param_sdio_tx_pkt_drop_thld:
	.word	__param_str_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_tx_pkt_drop_thld
	.type	__param_rmnet_sdio_data_ch, %object
	.size	__param_rmnet_sdio_data_ch, 16
__param_rmnet_sdio_data_ch:
	.word	__param_str_rmnet_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_data_ch
	.type	__param_rmnet_sdio_ctl_ch, %object
	.size	__param_rmnet_sdio_ctl_ch, 16
__param_rmnet_sdio_ctl_ch:
	.word	__param_str_rmnet_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_ctl_ch
	.type	__param_rmnet_data_ch, %object
	.size	__param_rmnet_data_ch, 16
__param_rmnet_data_ch:
	.word	__param_str_rmnet_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_data_ch
	.type	__param_rmnet_ctl_ch, %object
	.size	__param_rmnet_ctl_ch, 16
__param_rmnet_ctl_ch:
	.word	__param_str_rmnet_ctl_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_ctl_ch
	.type	__param_iSerialNumber, %object
	.size	__param_iSerialNumber, 16
__param_iSerialNumber:
	.word	__param_str_iSerialNumber
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iSerialNumber
	.type	__param_iProduct, %object
	.size	__param_iProduct, 16
__param_iProduct:
	.word	__param_str_iProduct
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iProduct
	.type	__param_iManufacturer, %object
	.size	__param_iManufacturer, 16
__param_iManufacturer:
	.word	__param_str_iManufacturer
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iManufacturer
	.type	__param_bcdDevice, %object
	.size	__param_bcdDevice, 16
__param_bcdDevice:
	.word	__param_str_bcdDevice
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	bcdDevice
	.type	__param_idProduct, %object
	.size	__param_idProduct, 16
__param_idProduct:
	.word	__param_str_idProduct
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idProduct
	.type	__param_idVendor, %object
	.size	__param_idVendor, 16
__param_idVendor:
	.word	__param_str_idVendor
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idVendor
	.ident	"GCC: (Linaro GCC 7.5-2019.12) 7.5.0"
	.section	.note.GNU-stack,"",%progbits
